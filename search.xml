<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Airsim（问题及可能的解决方法）</title>
    <url>/2019/09/04/Airsim/Airsim%EF%BC%88%E9%97%AE%E9%A2%98%E5%8F%8A%E5%8F%AF%E8%83%BD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>本篇博客，将对前面的Airsim仿真平台开发过程中遇到过的一系列问题进行记录，并尽可能的记录其中的解决方法。</p>
</blockquote>
<h2 id="问题一：安装过程中的问题"><a href="#问题一：安装过程中的问题" class="headerlink" title="问题一：安装过程中的问题"></a>问题一：安装过程中的问题</h2><h3 id="1-1-Windows下ROS的安装（已解决）"><a href="#1-1-Windows下ROS的安装（已解决）" class="headerlink" title="1.1 Windows下ROS的安装（已解决）"></a>1.1 Windows下ROS的安装（<font color="red">已解决</font>）</h3><blockquote>
<p>在机器人控制这一方面，不可避免的会想通过ros对机器人进行控制，而ros在ubuntu下的安装非常方便，在WIndows上安装不如Linux下方便；至少，在接触Airsim之前，我没有在Windows下安装过ros。</p>
</blockquote>
<p>第一次在Windows上装ros的时候，还真没有安装成功，在安装一些安装包时，并没有按照其默认路径进行安装，然后也由于刚开始不熟的原因，没有安装成功。因此，后来专门记录写了一篇博客，来记录ros在windows上的安装，其安装过程见<a href="https://ldgyyf.cn/2019/06/27/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BWindows%E4%B8%8BROS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/">Windows下ROS安装配置</a>。</p>
<font color="red">注：如果要使用ros控制，则还是在Ubuntu下控制比较好。我后来记录了Airsim在Ubuntu下的安装笔记。</font>

<h3 id="1-2-Ubuntu终端科学上网（已解决）"><a href="#1-2-Ubuntu终端科学上网（已解决）" class="headerlink" title="1.2 Ubuntu终端科学上网（已解决）"></a>1.2 Ubuntu终端科学上网（<font color="red">已解决</font>）</h3><blockquote>
<p>Airsim仿真平台开发，与Ubuntu科学上网有什么关系呢？</p>
<p>有关系，并且是很大的关系，因为Airsim就是微软开发的，其资源很多都是国外的，国内很难下载到。</p>
</blockquote>
<p>如果你的Airsim只是在Windows上进行开发，可能更方便，因为Windows下科学上网更简单，但是在下载资源这方面可能还是不如Ubuntu，因为Windows上更多的是网页端下载，在网页端下载一些国外的资源时，有时会很慢，很难下载~</p>
<p>因此，在Ubuntu下进行开发时，保证终端科学上网是一个很重要的前提。这个也是为了后面的Airsim在Ubuntu上的安装做准备。</p>
<p>其安装过程见<a href="https://ldgyyf.cn/2019/06/27/Linux/ubuntu%E4%B8%8B%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/">Ubuntu终端科学上网</a>。</p>
<h3 id="1-3-Ubuntu下GPU-Tensorflow安装（已解决）"><a href="#1-3-Ubuntu下GPU-Tensorflow安装（已解决）" class="headerlink" title="1.3 Ubuntu下GPU Tensorflow安装（已解决）"></a>1.3 Ubuntu下GPU Tensorflow安装（<font color="red">已解决</font>）</h3><blockquote>
<p>在用Airsim做人工智能（深度学习、强化学习）的算法验证这一方面，大部分是用Tensorflow库来验证，当然也有其他的一些，如Keras、pytorch等。但是这些方面这里不考虑，主要以Tensorflow为主。</p>
</blockquote>
<p>Ubuntu下安装GPU的Tensorflow时，很容易碰到的一个问题，就是登陆界面重复登陆，这个可能是安装了不合适的版本导致的。因此，我记录了一个稍微比较详细一些的安装文档。</p>
<p>其安装过程见<a href="https://ldgyyf.cn/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/">Ubuntu16下GPU-Tensorflow安装步骤</a></p>
<h3 id="1-4-Ubuntu下，ros相关报错（已解决）"><a href="#1-4-Ubuntu下，ros相关报错（已解决）" class="headerlink" title="1.4 Ubuntu下，ros相关报错（已解决）"></a>1.4 Ubuntu下，ros相关报错（<font color="red">已解决</font>）</h3><blockquote>
<p>不确定是卸载了一些ros的相关依赖还是什么其他的误操作，在终端执行sudo apt-get update时，提示Hash Sum Minbatch错误。</p>
</blockquote>
<p>在网上查找过其解决方法，如：换源、终端翻墙update、换网络、删除/var/list文件都未能解决，最后通过重装系统解决的。虽然重装系统能解决该问题，但并不是一个好方法~</p>
<h2 id="问题二：开发过程中的问题"><a href="#问题二：开发过程中的问题" class="headerlink" title="问题二：开发过程中的问题"></a>问题二：开发过程中的问题</h2><h3 id="2-1-自定义ros后，python线程锁的问题（已解决）"><a href="#2-1-自定义ros后，python线程锁的问题（已解决）" class="headerlink" title="2.1 自定义ros后，python线程锁的问题（已解决）"></a>2.1 自定义ros后，python线程锁的问题（<font color="red">已解决</font>）</h3><blockquote>
<p>自定义了ros，并且同时进行sub和pub时，容易出现python线程锁的问题，具体错误信息如下图：</p>
</blockquote>
<p><img src="/2019/09/04/Airsim/Airsim%EF%BC%88%E9%97%AE%E9%A2%98%E5%8F%8A%E5%8F%AF%E8%83%BD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%89/1.png" alt></p>
<p><strong>解决方法：添加python线程锁</strong>，<a href="https://morvanzhou.github.io/tutorials/python-basic/threading/6-lock/">参考</a></p>
<h3 id="2-2-Airsim中无人机的控制问题（已解决）"><a href="#2-2-Airsim中无人机的控制问题（已解决）" class="headerlink" title="2.2 Airsim中无人机的控制问题（已解决）"></a>2.2 Airsim中无人机的控制问题（<font color="red">已解决</font>）</h3><blockquote>
<p>默认的，无人机的控制坐标系是NED坐标系，即+x永远朝着正北方飞行，也就是绝对方向控制~</p>
<p>但是，我们在正常的控制无人机时，采用的坐标系是BODY坐标系，即+x永远朝着机头方向飞行，也就是相对控制~</p>
</blockquote>
<p>因此，在真正控制时，需要做一个转换，我这里暂时只考虑了东南西北四个方向。</p>
<p><strong>解决方法：每次控制时，首先获取无人机的当前角度angle，然后根据angle的角度，确定当前机头朝向~</strong></p>
<p><strong>即下图所示，这样就完成了+x永远朝着机头方向前行</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">机头朝向</th>
<th style="text-align:center">x轴</th>
<th style="text-align:center">y轴</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">North</td>
<td style="text-align:center">x = x</td>
<td style="text-align:center">y = y</td>
</tr>
<tr>
<td style="text-align:center">West</td>
<td style="text-align:center">x = y</td>
<td style="text-align:center">y = -x</td>
</tr>
<tr>
<td style="text-align:center">South</td>
<td style="text-align:center">x = -x</td>
<td style="text-align:center">y = -y</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">y = -x</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-3-Airsim中使用期望速度进行控制的问题（已解决）"><a href="#2-3-Airsim中使用期望速度进行控制的问题（已解决）" class="headerlink" title="2.3 Airsim中使用期望速度进行控制的问题（已解决）"></a>2.3 Airsim中使用期望速度进行控制的问题（<font color="red">已解决</font>）</h3><blockquote>
<p>2.2节说明了Airism中的无人机相对控制的问题（一般给定固定速度），而本节则要说明的是：初始时，设置一个期望速度值，当给定轨迹点时，根据当前距离与目标轨迹点之间的差值，进行速度求解并且归一化，在这其中就会涉及到坐标系转换的一些问题~</p>
</blockquote>
<p>举例（暂不考虑Z轴）：无人机起始点（0,0），轨迹点1（10,0），轨迹点2（10，-20），期望速度：2m/s，时间t：1s</p>
<ul>
<li>起始点-&gt;轨迹点1：dx = 10 -0 =10，vx = dx / t = 10 / 1 = 10m/s，归一化 vx‘  约等于2m/s，按照2.2的控制方式，此时 vx’ = vx’， vy’ = vy’，此时机头朝北</li>
<li>转向：到达轨迹点1后，左转，左转完成后，此时机头朝西</li>
<li>轨迹点1-&gt;轨迹点2：dy = -20 - 0 = 20，vy = dy / t = -20m/s，归一化vy’ 约等于2m/s，按照2.2的控制方式，此时 vx’ = vy’，vy’ = vx’（机头朝西）,此时，无人机会朝着South方向运动，并不是West方向。</li>
</ul>
<p>这样就会存在问题，在轨迹点1到轨迹点2的过程中，我按照了2.2的控制方式，但是无人机却并不是朝着我想要的West方向前行，因此，需要采用坐标系转换的方法来解决该问题：</p>
<p><strong>说明：</strong>在获取Airsim中无人机的坐标时，我们获取的都是NED坐标系下的xyz值，而我们所采用的这种期望速度方法，实际上是BODY坐标系下的方法，即每次根据BODY坐标系下的xyz值，来进行差值求解，并且进行归一化~</p>
<p>具体的，可以参见<a href="https://ldgyyf.cn/2019/08/19/Airsim/初始Airsim（六）之多机控制/">Airsim（六）之多机控制</a>中的代码注释部分。</p>
<h3 id="2-4-自定义ROS间的通信问题（已解决）"><a href="#2-4-自定义ROS间的通信问题（已解决）" class="headerlink" title="2.4 自定义ROS间的通信问题（已解决）"></a>2.4 自定义ROS间的通信问题（<font color="red">已解决</font>）</h3><blockquote>
<p>其主要问题是，使用ros指令发送消息的时候，需要考虑其中的通信频率问题</p>
</blockquote>
<p>ros不同于api控制的地方在于：api控制可以等到该条指令结束后，在执行下一条指令。而ros则会将指令全部寄存在缓存中，也是会执行其发布的每一条命令，但是如果通信频率不一致的话，airsim中的无人机响应其ros指令时可能会出现问题。</p>
<p>目前，测试的是在ros的驱动程序中，设置频率为250HZ，在其控制程序中，设置频率为1HZ，差不多能保证其发送接收一致。</p>
<h3 id="2-5-UDP通信间的大图像传输（未解决）"><a href="#2-5-UDP通信间的大图像传输（未解决）" class="headerlink" title="2.5 UDP通信间的大图像传输（未解决）"></a>2.5 UDP通信间的大图像传输（<font color="red">未解决</font>）</h3><blockquote>
<p>尝试了在两台电脑间使用UDP来进行控制，但是在获取Airsim的图像时，如果设置的图像分辨率较大，这时，图像大小会超出的默认最大值，会报错~</p>
</blockquote>
<p>会出现这种情况的原因是设置的图像分辨率较大，因此可以将分辨率设置为合适的值，这样是不会报错的，并且可以在接收端的一方，重新对图像的大小进行修改，这样也能达到最初想要的效果，但是如何利用UDP进行大数据传输，这个问题仍然没有解决。</p>
<p>在网上有搜过相关代码，其思想一般都是先将大文件进行打包，然后传输前加一个文件头，另一端接收时，对文件头进行解析，然后进行分段接收。但其python代码较少，并且依靠网上的代码，并没有测试成功过~</p>
<h2 id="问题三：相关配置问题"><a href="#问题三：相关配置问题" class="headerlink" title="问题三：相关配置问题"></a>问题三：相关配置问题</h2><h3 id="3-1-Pixhawk配置（HITL配置）（已解决）"><a href="#3-1-Pixhawk配置（HITL配置）（已解决）" class="headerlink" title="3.1 Pixhawk配置（HITL配置）（已解决）"></a>3.1 Pixhawk配置（HITL配置）（<font color="red">已解决</font>）</h3><blockquote>
<p>参考网上的教程，其Pixhawk大多都是在Windows下配置的，Linux的很少，但是基本也都差不多</p>
</blockquote>
<p>总之，在配置Pixhawk的过程中，很花费了一些功夫，主要就是其很容易爆No GPS相关的错误，后来，经过尝试，终于解决了该问题。</p>
<p>其配置过程见<a href="https://ldgyyf.cn/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/">Pixhawk配置（Ubuntu16下HITL配置）</a></p>
<h2 id="问题四：各种未解决的问题"><a href="#问题四：各种未解决的问题" class="headerlink" title="问题四：各种未解决的问题"></a>问题四：各种未解决的问题</h2><h3 id="4-1-Airsim图像，转化成ros的topic之后，和原图有些区别？（未解决）"><a href="#4-1-Airsim图像，转化成ros的topic之后，和原图有些区别？（未解决）" class="headerlink" title="4.1 Airsim图像，转化成ros的topic之后，和原图有些区别？（未解决）"></a>4.1 Airsim图像，转化成ros的topic之后，和原图有些区别？（<font color="red">未解决</font>）</h3><blockquote>
<p>通过API，获取Airsim中的无人机图像，并将其转化为ros后，和原图有些区别，但是不是很大</p>
</blockquote>
<p>这里暂时找不到原先的记录了，总之，这个地方是存在问题的~</p>
<h3 id="4-2-自定义ROS，强化学习训练不好？（未解决）"><a href="#4-2-自定义ROS，强化学习训练不好？（未解决）" class="headerlink" title="4.2 自定义ROS，强化学习训练不好？（未解决）"></a>4.2 自定义ROS，强化学习训练不好？（<font color="red">未解决</font>）</h3><blockquote>
<p>同样的逻辑，在用api进行强化学习训练测试时，经过30小时左右的训练，大概能训练好，但是添加了自定义的ros，却不行？</p>
</blockquote>
<p>暂时也不清楚，是为什么训练不好效果，可能与获取的深度图像不一致有关系，可能与无法用ros进行pause和unpause函数控制有关，可能通信频率设置的不太对。</p>
<p>总之，在github上面很少找到用ros来进行强化学习训练的，或者这种方法就根本不好，也是存在问题~</p>
<h3 id="4-3-SITL模式下与-sh文件不兼容（未解决）"><a href="#4-3-SITL模式下与-sh文件不兼容（未解决）" class="headerlink" title="4.3 SITL模式下与.sh文件不兼容（未解决）"></a>4.3 SITL模式下与.sh文件不兼容（<font color="red">未解决</font>）</h3><blockquote>
<p>若在Airsim中使用SITL模式，则只能用UE4提供的环境，如创建的Rolling环境，这时与封装好的sh文件时不兼容的，即启动会报错，无法打开界面~</p>
</blockquote>
<p>之所以没有解决，是因为可能是需要下载对应的sh的uproject文件，而这个文件环境是需要在UE4的商店中进行购买的，没有购买，因此这方面也存在问题，也就没有测试过~</p>
<h3 id="4-4-SITL模式与Lidar传感器不兼容（未解决）"><a href="#4-4-SITL模式与Lidar传感器不兼容（未解决）" class="headerlink" title="4.4 SITL模式与Lidar传感器不兼容（未解决）"></a>4.4 SITL模式与Lidar传感器不兼容（<font color="red">未解决</font>）</h3><blockquote>
<p>在json中，设置为了SITL模式，并添加Lidar传感器，结果界面可以出来，但是传感器出不来，不知道其原因</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>由于主要是在对Airsim仿真平台进行开发研究，更多的是环境相关的配置问题，因此，其中的问题，也算不上什么难点，主要还是对Airsim不太熟悉，后面熟悉后就好了。</p>
<p>更多的记录的是开发过程中遇到的一些主要问题等</p>
</blockquote>
<p><strong>其中，很多问题不是特别好用文字或图片的形式说明，当中，某些记录可能也不太清楚了，如果有问题，可以和我联系，我的邮箱是:  ldgcug@qq.com</strong></p>
]]></content>
      <categories>
        <category>Airsim</category>
      </categories>
      <tags>
        <tag>Airsim</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Airsim（一）之Airsim平台搭建</title>
    <url>/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>基于Airsim，搭建一个更逼真的仿真环境，比原有的Gazebo效果更好</p>
</blockquote>
<h2 id="一、相关概念介绍"><a href="#一、相关概念介绍" class="headerlink" title="一、相关概念介绍"></a>一、相关概念介绍</h2><ul>
<li><p>Airsim：AirSim 是微软开源的一个跨平台的建立在虚幻引擎（ Unreal Engine）上的无人机以及其它自主移动设备的模拟器。 它支持硬件在循环与流行的飞行控制器的物理和视觉逼真模拟。它被开发为一个虚幻的插件，可以简单地放到任何你想要的虚幻环境中。</p>
<p>该模拟器创造了一个高还原的逼真虚拟环境，模拟了阴影、反射等其它现实世界中容易干扰的环境，让无人机不用经历真实世界的风险就能进行训练。</p>
<p>AirSim 的目标是作为AI研究的平台，以测试深度学习、计算机视觉和自主车辆的增强学习算法。为此， AirSim 还公开了 API，以平台独立的方式检索数据和控制车辆。</p>
<p>Airsim官方Github：<a href="https://github.com/Microsoft/AirSim">https://github.com/Microsoft/AirSim</a> </p>
</li>
<li><p>Unreal Engine：Unreal是UNREAL ENGINE（虚幻引擎）的简写，由Epic开发，是目前世界知名授权最广的游戏引擎之一，占有全球商用游戏引擎80%的市场份额。</p>
<p>“Unreal Engine 3”3D引擎采用了目前最新的即时光迹追踪、HDR光照技术、虚拟位移…等新技术，而且能够每秒钟实时运算两亿个多边形运算，效能是目前“Unreal Engine”的100倍，而通过nVIDIA的GeForce 6800显示卡与“Unreal Engine 3”3D引擎的搭配，可以实时运算出电影CG等级的画面，效能非常非常恐怖。</p>
<p>基于它开发的大作无数，除《虚幻竞技场3》外，还包括《战争机器》、《质量效应》、《生化奇兵》等等。在美国和欧洲，虚幻引擎主要用于主机游戏的开发，在亚洲，中韩众多知名游戏开发商购买该引擎主要用于次世代网游的开发，如《剑灵》、《TERA》、《战地之王》、《一舞成名》等。 iPhone上的游戏有《无尽之剑》（1、2、3）、《蝙蝠侠》等</p>
</li>
</ul>
<h2 id="二、版本说明"><a href="#二、版本说明" class="headerlink" title="二、版本说明"></a>二、版本说明</h2><blockquote>
<p><strong>AirSim最新版本已支持Visual Studio 2017与Unreal Engine 4.18</strong></p>
</blockquote>
<ul>
<li><p>Windows10</p>
</li>
<li><p>Visual Studio 2017（需要安装VC++ 和Windows SDK8.1）</p>
</li>
<li><p>Unreal Engine 4.18（通过Epic Games Launcher安装）</p>
</li>
<li><p>Git（下载Airsim1.2源码，不要用VS2017 URL链接下载）</p>
</li>
<li><p>Airsim1.2</p>
</li>
</ul>
<h2 id="三、软件安装"><a href="#三、软件安装" class="headerlink" title="三、软件安装"></a>三、软件安装</h2><h3 id="3-1-Visual-Studio2017安装"><a href="#3-1-Visual-Studio2017安装" class="headerlink" title="3.1 Visual Studio2017安装"></a>3.1 <strong>Visual Studio2017安装</strong></h3><p>（1）点击<a href="https://my.visualstudio.com/Downloads?q=visual%20studio%202017&amp;wt.mc_id=o~msft~vscom~older-downloads">下载</a>，下载VS2017社区版</p>
<p><img src="/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/VS2017.png" alt></p>
<p>（2）安装VS2017</p>
<p>安装过程中请确保安装VC++ 和Windows SDK8.1（或Windows SDK10）的安装</p>
<p><img src="/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/VS and Windows SDK.png" alt></p>
<p>此外，我还安装了单个组件中的游戏和图形的部分组件</p>
<p><img src="/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/single_zujian.png" alt></p>
<blockquote>
<p>总安装大小6个多G，耗时有点长</p>
</blockquote>
<h3 id="3-2-虚幻引擎（Unreal-Engine）的安装"><a href="#3-2-虚幻引擎（Unreal-Engine）的安装" class="headerlink" title="3.2 虚幻引擎（Unreal Engine）的安装"></a>3.2 <strong>虚幻引擎（Unreal Engine）的安装</strong></h3><p>（1）点击<a href="https://www.unrealengine.com/zh-CN/download">下载</a>，下载<code>Epic Games Launcher</code></p>
<p>下载过程中，若没有注册过Epic账号的，需要先注册，然后在登录下载</p>
<p>（2）运行<code>Epic Games Launcher</code>，在弹出的界面中，选择<code>Library</code>，点击<code>+</code>号，选择<code>4.18</code>版本进行安装</p>
<p><img src="/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/Unreal Engine.png" alt></p>
<blockquote>
<p>注意一定要下载4.18版本，下载了多个版本也没有关系，最后需要启动4.18版本</p>
</blockquote>
<h3 id="3-3-Git安装"><a href="#3-3-Git安装" class="headerlink" title="3.3 Git安装"></a>3.3 Git安装</h3><p>（1）点击<a href="https://git-scm.com/downloads">下载</a>，下载Git</p>
<p>（2）默认安装即可</p>
<h2 id="四、搭建Airsim环境并配置"><a href="#四、搭建Airsim环境并配置" class="headerlink" title="四、搭建Airsim环境并配置"></a>四、<strong>搭建Airsim环境并配置</strong></h2><h3 id="4-1-下载Airsim源码"><a href="#4-1-下载Airsim源码" class="headerlink" title="4.1 下载Airsim源码"></a>4.1 下载Airsim源码</h3><p>（1）在git bash窗口输入如下命令，下载airsim源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/microsoft/AirSim.git</span><br></pre></td></tr></table></figure>
<p>下载完后，将Airsim文件存放到其他位置，如我的存放在D盘目录下的自定义新文件夹下</p>
<h3 id="4-2-编译"><a href="#4-2-编译" class="headerlink" title="4.2 编译"></a>4.2 编译</h3><p>（1）打开window菜单，找到Visual Studio 2017，并双击打开VS2017的x64本机命令提示</p>
<p><img src="/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/VS2017-x64png.png" alt></p>
<p>在打开的窗口中，进入到Airsim所在目录</p>
<p>（2）编译</p>
<blockquote>
<p>首先，找到<strong>\AirSim\AirLib\deps\eigen3\Eigen\src\Core\arch\CUDA\Half.h</strong>文件，修改Half.h文件的“AS ls”的引号即可。如图所示</p>
</blockquote>
<p><img src="/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/half-h.png" alt></p>
<blockquote>
<p>之所以修改该 <code>“”</code>，是因为如果不修改，会在后面的编译过程中，碰到如下错误</p>
</blockquote>
<p><img src="/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/hald-h-error.png" alt></p>
<blockquote>
<p> 然后，进入Airsim目录后，执行如下命令：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">build.cmd --no-full-poly-car</span><br></pre></td></tr></table></figure>
<p>其实也可以只执行build.cmd ，也不用添加后面的 —no-full-poly-car，之所以这样做是为了在编译过程中能节省很大的时间，在下面这一步，耗时较长，我这里大概要花20分钟</p>
<p><img src="/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/high-poly-car.png" alt></p>
<blockquote>
<p>最后，编译成功后的界面显示如下图</p>
</blockquote>
<p><img src="/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/build_success.png" alt></p>
<h2 id="五、UE4与Airsim联系起来"><a href="#五、UE4与Airsim联系起来" class="headerlink" title="五、UE4与Airsim联系起来"></a>五、<strong>UE4与Airsim联系起来</strong></h2><h3 id="5-1-启动Unreal-Enigen-4-18"><a href="#5-1-启动Unreal-Enigen-4-18" class="headerlink" title="5.1 启动Unreal Enigen 4.18"></a>5.1 启动Unreal Enigen 4.18</h3><p><img src="/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/Unreal Engine4.18.png" alt></p>
<h3 id="5-2-新建工程（c-项目），如Rolling"><a href="#5-2-新建工程（c-项目），如Rolling" class="headerlink" title="5.2 新建工程（c++项目），如Rolling"></a>5.2 新建工程（c++项目），如Rolling</h3><p><img src="/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/c++ project.png" alt></p>
<p>注意：名称一定要写成英文，不能用中文</p>
<h3 id="5-3-复制文件"><a href="#5-3-复制文件" class="headerlink" title="5.3 复制文件"></a>5.3 复制文件</h3><p>复制AirSim\Unreal\Plugins文件夹 到 Rolling目录下；</p>
<p>复制AirSim\Unreal\Environments\Blocks文件夹下的clean.bat和GenerateProjectFiles.bat 文件到 Rolling目录下；</p>
<p><img src="/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/copy_file.png" alt></p>
<blockquote>
<p>在这个过程中，可能会重新编译C++类，会在UE工程下生成Rollings.sln</p>
</blockquote>
<h3 id="5-4-运行Rolling工程"><a href="#5-4-运行Rolling工程" class="headerlink" title="5.4 运行Rolling工程"></a>5.4 运行Rolling工程</h3><p>在Rolling目录下，双击Rolling.sln在VS2017中打开该工程</p>
<p>首先修改配置：DebugGame Editor + win64</p>
<p><img src="/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/Debug.png" alt></p>
<p>然后点击【生成】-【重新生成解决方案】</p>
<p>最后，按F5键，运行工程项目</p>
<p><img src="/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/Rolling.png" alt></p>
<h3 id="5-5-添加Quadrotor"><a href="#5-5-添加Quadrotor" class="headerlink" title="5.5 添加Quadrotor"></a>5.5 添加Quadrotor</h3><p>进入  <code>【设置】</code>-<code>【世界设置】</code>，修改其中的Game mode，修改为AirSimGameMode</p>
<p><img src="/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/gamemode.png" alt></p>
<p>点击<code>【播放】</code>按钮，在弹出的框中选择<code>【不】</code>，即可</p>
<p>第一次加载界面如下图，右下角还在编译着色器，稍微等一会就好</p>
<p><img src="/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/quadrotor_show1.png" alt></p>
<p>等一会后，无人机就加载出来了</p>
<p><img src="/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/quadrotor_show2.png" alt></p>
<h2 id="六、参考链接"><a href="#六、参考链接" class="headerlink" title="六、参考链接"></a>六、参考链接</h2><h3 id="6-1-安装文档参考"><a href="#6-1-安装文档参考" class="headerlink" title="6.1 安装文档参考"></a>6.1 安装文档参考</h3><ul>
<li><p><a href="https://microsoft.github.io/AirSim/docs/build_windows/">Airsim官网</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/52665325?utm_source=qq&amp;utm_medium=social&amp;utm_oi=60530387582976">知乎文档</a></p>
</li>
</ul>
<h3 id="6-2-相关概念参考"><a href="#6-2-相关概念参考" class="headerlink" title="6.2 相关概念参考"></a>6.2 相关概念参考</h3><ul>
<li><p><a href="https://blog.csdn.net/hhlenergystory/article/details/80275617">Unreal Engine</a></p>
</li>
<li><p><a href="https://www.oschina.net/news/89300/airsim-1-1-1">Airsim</a></p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>至此，Airsim在Windows平台下的搭建已经基本成功，后面会继续添加新的场景，如城市场景；也会自己在去编写一些程序代码进行控制</p>
<p>我搭建的电脑机器配置如下：</p>
<p><strong>i7处理器，8G RAM，GT730显卡，128G SSD</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>Airsim</category>
      </categories>
      <tags>
        <tag>Airsim</tag>
        <tag>Unreal Engine</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Airsim（七）之强化学习训练测试</title>
    <url>/2019/08/20/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8B%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>Airsim的官方github上面其实提供了一些强化学习的训练demo，如drone的<a href="https://github.com/microsoft/AirSim/blob/master/PythonClient/multirotor/DQNdrone.py">DQN训练</a>、car的<a href="https://github.com/microsoft/AirSim/blob/master/PythonClient/car/DQNcar.py">DQN训练</a>，但是都是基于cntk进行实现的，而这一块我不熟悉，还是用我熟悉的Tensorflow进行训练测试，与drone的DQN训练目标不同，甚至由于是cntk相关实现，也没有去细看其官方训练demo。</p>
<p>但是其思想都差不多，因为都是基于DQN进行训练</p>
</blockquote>
<h2 id="一、问题定义"><a href="#一、问题定义" class="headerlink" title="一、问题定义"></a>一、问题定义</h2><blockquote>
<p>在AirSimNH.sh的场景下进行训练</p>
</blockquote>
<p><img src="/2019/08/20/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8B%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E6%B5%8B%E8%AF%95/1.png" alt></p>
<h3 id="1-1-目标"><a href="#1-1-目标" class="headerlink" title="1.1 目标"></a>1.1 目标</h3><blockquote>
<p> 训练一个agent，从起点出发，沿着道路中心线飞行到正前方6米处的地方</p>
</blockquote>
<h3 id="1-2-马尔科夫状态过程"><a href="#1-2-马尔科夫状态过程" class="headerlink" title="1.2 马尔科夫状态过程"></a>1.2 马尔科夫状态过程</h3><ul>
<li><strong>状态集：</strong>深度图像的灰度图集合（n种）</li>
<li><strong>行为集：</strong>前行、左行、右行（3种）</li>
<li><strong>转换函数：</strong>model free</li>
<li><strong>奖励函数：</strong><ul>
<li>正面奖励：到达目标点范围：x属于[-4.5,7.5]，y属于[-0.8,0.8]，reward = 1</li>
<li>负面奖励：超出边界：x &gt; 7.5 或者 abs(y) &gt;2，reward = -1</li>
<li>生活成本：每走一步，reward = -0.01</li>
</ul>
</li>
<li><strong>起始状态：</strong>（0，0，-3）</li>
<li><strong>结束状态：</strong><ul>
<li>到达目标点</li>
<li>超出边界</li>
<li>20步强制结束当前episode</li>
</ul>
</li>
</ul>
<h2 id="二、代码部分"><a href="#二、代码部分" class="headerlink" title="二、代码部分"></a>二、代码部分</h2><blockquote>
<p>直接查看<a href="https://github.com/ldgcug/Airsim_Controller/tree/master/DQN_Controller">所有代码</a></p>
</blockquote>
<p><strong>（1）经验缓冲池：ReplayBuffer.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReplayBuffer</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,buffer_size</span>):</span></span><br><span class="line">        self.buffer_size = buffer_size <span class="comment"># mini_batch大小</span></span><br><span class="line">        self.num_experiences = <span class="number">0</span> <span class="comment"># 当前经验池中的个数</span></span><br><span class="line">        self.buffer = deque() <span class="comment"># 创建队列，用于存储数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getBatch</span>(<span class="params">self,batch_size</span>):</span> <span class="comment">#从缓冲池中均匀随机采样</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self,state,action,reward,new_state,done</span>):</span> <span class="comment"># 存储数据</span></span><br></pre></td></tr></table></figure>
<p>（2）<strong>环境：AirsimEnv.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">goals = [<span class="number">6</span>,<span class="number">2</span>]</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Env</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.client = airsim.MultirotorClient()</span><br><span class="line">		self.client.confirmConnection()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 图片转换</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform_input</span>(<span class="params">self,responses, img_height, img_width</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 重置，并完成无人机的起飞动作，中间有对环境的暂停和取消操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span>(<span class="params">self</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 执行行为</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">step</span>(<span class="params">self,quad_offset</span>):</span></span><br><span class="line">        reward , done = self.compute_reward(quad_pos) <span class="comment"># 得到奖励</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算奖励</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compute_reward</span>(<span class="params">self,quad_pos</span>):</span></span><br></pre></td></tr></table></figure>
<p>（3）<strong>DQN训练：dqn.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> AirsimEnv <span class="keyword">import</span> Env</span><br><span class="line"><span class="keyword">from</span> ReplayBuffer <span class="keyword">import</span> ReplayBuffer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span>(<span class="params">shape</span>):</span></span><br><span class="line">	initial = tf.truncated_normal(shape,stddev = <span class="number">0.1</span>)</span><br><span class="line">	<span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_varialbe</span>(<span class="params">shape</span>):</span></span><br><span class="line">	initial = tf.constant(<span class="number">0.1</span>,shape = shape)</span><br><span class="line">	<span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span>(<span class="params">x,w</span>):</span></span><br><span class="line">	<span class="keyword">return</span> tf.nn.conv2d(x,w,strides = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],padding = <span class="string">&#x27;SAME&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv1d</span>(<span class="params">x,w</span>):</span></span><br><span class="line">	<span class="keyword">return</span> tf.nn.conv2d(x,w,strides = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],padding = <span class="string">&#x27;SAME&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DQNAgent</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,state_size,action_size,lr,gamma,batch_size,epsilon</span>):</span></span><br><span class="line">        self.createNet() <span class="comment">#创建Q网络</span></span><br><span class="line">        </span><br><span class="line">        self.createtargetNet() <span class="comment">#创建Target Q网络</span></span><br><span class="line">        </span><br><span class="line">        self.sess.run(tf.global_variables_initializer())<span class="comment"># 初始化所有参数</span></span><br><span class="line">        </span><br><span class="line">        self.saver = tf.train.Saver(max_to_keep=<span class="number">1</span>) <span class="comment">#保存模型</span></span><br><span class="line">        </span><br><span class="line">        self.load() <span class="comment">#加载模型</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createNet</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">&quot;loss&quot;</span>):</span><br><span class="line">			self.loss = tf.reduce_mean(tf.squared_difference(self.q_target,self.q_eval))</span><br><span class="line"></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&quot;train&quot;</span>):</span><br><span class="line">			self.train_op = tf.train.RMSPropOptimizer(self.lr).minimize(self.loss)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createtargetNet</span>(<span class="params">self</span>):</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load</span>(<span class="params">self</span>):</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_action</span>(<span class="params">self,state</span>):</span> <span class="comment">#e-greedy策略选择行为</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train_model</span>(<span class="params">self,batch</span>):</span> <span class="comment"># 训练网络</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train_target</span>(<span class="params">self</span>):</span> <span class="comment">#Target网络更新</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interpret_action</span>(<span class="params">action</span>):</span> <span class="comment"># 得到真正的行为</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># argparse parser</span></span><br><span class="line">	parser = argparse.ArgumentParser()</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--img_height&#x27;</span>,     <span class="built_in">type</span>=<span class="built_in">int</span>,      default=)</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--img_width&#x27;</span>, 	    <span class="built_in">type</span>=<span class="built_in">int</span>,      default=)</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--lr&#x27;</span>,		        <span class="built_in">type</span>=<span class="built_in">float</span>,    default=)</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--gamma&#x27;</span>,			<span class="built_in">type</span>=<span class="built_in">float</span>,    default=)</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--batch_size&#x27;</span>,	    <span class="built_in">type</span>=<span class="built_in">int</span>,      default=)</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--memory_size&#x27;</span>,	<span class="built_in">type</span>=<span class="built_in">float</span>,    default=)</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--epsilon&#x27;</span>,		<span class="built_in">type</span>=<span class="built_in">float</span>,    default=)</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--epsilon_end&#x27;</span>,	<span class="built_in">type</span>=<span class="built_in">float</span>,    default=)</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--update_target&#x27;</span>,	<span class="built_in">type</span>=<span class="built_in">int</span>,      default=)</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--explore&#x27;</span>,		<span class="built_in">type</span>=<span class="built_in">int</span>,      default=)</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--train_episode&#x27;</span>,	<span class="built_in">type</span>=<span class="built_in">int</span>,      default=)</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--max_steps&#x27;</span>,		<span class="built_in">type</span>=<span class="built_in">int</span>,      default=)</span><br><span class="line"></span><br><span class="line">	args = parser.parse_args()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># make RL agent</span></span><br><span class="line">	buffer = ReplayBuffer(args.memory_size)</span><br><span class="line">	env = Env()</span><br><span class="line">	state_size = args.img_width*args.img_height</span><br><span class="line">	action_size = <span class="number">3</span></span><br><span class="line">	start_time = time.asctime( time.localtime(time.time()))</span><br><span class="line">	dqn = DQNAgent(</span><br><span class="line">		state_size = state_size,</span><br><span class="line">		action_size = action_size,</span><br><span class="line">		lr = args.lr,</span><br><span class="line">		gamma = args.gamma,</span><br><span class="line">		batch_size = args.batch_size,</span><br><span class="line">		epsilon = args.epsilon</span><br><span class="line">		)</span><br><span class="line">	step = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(args.train_episode):</span><br><span class="line"></span><br><span class="line">		s_t = env.reset()</span><br><span class="line">		total_reward = <span class="number">0</span></span><br><span class="line">		episode_step = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(args.max_steps):</span><br><span class="line">			dqn.epsilon -= <span class="number">1.0</span> / args.explore <span class="comment">#epsilon衰减</span></span><br><span class="line">			dqn.epsilon = <span class="built_in">max</span>(dqn.epsilon,args.epsilon_end)</span><br><span class="line">            </span><br><span class="line">			a_t = dqn.get_action(s_t) <span class="comment"># e_greedy得到行为</span></span><br><span class="line">			real_action = interpret_action(a_t) <span class="comment">#真实行为，转换为了元祖</span></span><br><span class="line">			<span class="keyword">try</span>:</span><br><span class="line">				s_next_t,r_t,done,quad_pos = env.step(real_action)</span><br><span class="line">				<span class="comment">#s_next_t = transform_input(s_next_t,args.img_height,args.img_width)</span></span><br><span class="line">			<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&#x27;Error :&#x27;</span> ,e)</span><br><span class="line"></span><br><span class="line">			buffer.add(s_t,a_t,r_t,s_next_t,done) <span class="comment">#存储数据</span></span><br><span class="line">			total_reward += r_t</span><br><span class="line"></span><br><span class="line">			s_t = s_next_t</span><br><span class="line">			step += <span class="number">1</span></span><br><span class="line">			episode_step += <span class="number">1</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;quadrotor position&#x27;</span>,quad_pos.x_val,quad_pos.y_val,quad_pos.z_val)</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;Episode&quot;</span>,i,<span class="string">&quot;episode_step&quot;</span>,episode_step,<span class="string">&quot;Action&quot;</span>,a_t,<span class="string">&quot;Reward&quot;</span>,r_t,<span class="string">&#x27;step&#x27;</span>,step,<span class="string">&#x27;buffer&#x27;</span>,<span class="built_in">len</span>(buffer.buffer),<span class="string">&#x27;done&#x27;</span>,done)</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> step &gt; <span class="number">500</span>: <span class="comment">#大于500步，开始训练</span></span><br><span class="line">				batch = buffer.getBatch(args.batch_size)</span><br><span class="line">				dqn.train_model(batch)</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> step % args.update_target == <span class="number">0</span>: <span class="comment">#更新target网络，并保存模型</span></span><br><span class="line">				dqn.train_target()</span><br><span class="line">				dqn.save()</span><br><span class="line">			<span class="keyword">if</span> done:</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&#x27;episode %d is done&#x27;</span>%i)</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;start_time&#x27;</span>,start_time)</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;Episode&#x27;</span>,i,<span class="string">&#x27;total reward&#x27;</span>,total_reward)</span><br><span class="line">		f1 = <span class="built_in">open</span>(<span class="string">r&quot;/home/tifo/tifo/DQN/data/car_total_reward&quot;</span>+<span class="built_in">str</span>(<span class="built_in">int</span>(i/<span class="number">1000</span>))+<span class="string">&quot;.txt&quot;</span>,<span class="string">&quot;a+&quot;</span>)</span><br><span class="line">		f1.write(<span class="string">&quot;Episode:&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;    total_reward:&quot;</span>+<span class="built_in">str</span>(total_reward)+<span class="string">&quot;   episode_step:&quot;</span>+<span class="built_in">str</span>(episode_step)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;start_time&#x27;</span>,start_time)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;end_time&#x27;</span>,time.asctime( time.localtime(time.time())))</span><br></pre></td></tr></table></figure>
<p><strong>（4）random_test.py：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> AirsimEnv <span class="keyword">import</span> Env</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interpret_action</span>(<span class="params">action</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment"># argparse parser</span></span><br><span class="line">	parser = argparse.ArgumentParser()</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--test_episode&#x27;</span>,	<span class="built_in">type</span>=<span class="built_in">int</span>,      default=<span class="number">1000</span>)</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--max_steps&#x27;</span>,		<span class="built_in">type</span>=<span class="built_in">int</span>,      default=<span class="number">20</span>)</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--actions&#x27;</span>,		<span class="built_in">type</span>=<span class="built_in">int</span>,      default=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">	args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">	<span class="comment"># make RL agent</span></span><br><span class="line">	env = Env()</span><br><span class="line">	start_time = time.asctime( time.localtime(time.time()))</span><br><span class="line">	step = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(args.test_episode):</span><br><span class="line"></span><br><span class="line">		s_t = env.reset()</span><br><span class="line">		total_reward = <span class="number">0</span></span><br><span class="line">		episode_step = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(args.max_steps):</span><br><span class="line">			a_t = np.random.choice(args.actions) <span class="comment">#随机选择行为</span></span><br><span class="line">			real_action = interpret_action(a_t)</span><br><span class="line">			<span class="keyword">try</span>:</span><br><span class="line">				s_next_t,r_t,done,quad_pos = env.step(real_action)</span><br><span class="line">				<span class="comment">#s_next_t = transform_input(s_next_t,args.img_height,args.img_width)</span></span><br><span class="line">			<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&#x27;Error :&#x27;</span> ,e)</span><br><span class="line"></span><br><span class="line">			total_reward += r_t</span><br><span class="line"></span><br><span class="line">			s_t = s_next_t</span><br><span class="line">			step += <span class="number">1</span></span><br><span class="line">			episode_step += <span class="number">1</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;quadrotor position&#x27;</span>,quad_pos.x_val,quad_pos.y_val,quad_pos.z_val)</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;Episode&quot;</span>,i,<span class="string">&quot;episode_step&quot;</span>,episode_step,<span class="string">&quot;Action&quot;</span>,a_t,<span class="string">&quot;Reward&quot;</span>,r_t,<span class="string">&#x27;step&#x27;</span>,step,<span class="string">&#x27;done&#x27;</span>,done)</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> done:</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&#x27;episode %d is done&#x27;</span>%i)</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;start_time&#x27;</span>,start_time)</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;Episode&#x27;</span>,i,<span class="string">&#x27;total reward&#x27;</span>,total_reward)</span><br><span class="line">		f1 = <span class="built_in">open</span>(<span class="string">r&quot;/home/tifo/tifo/DQN/data/random_test&quot;</span>+<span class="string">&quot;.txt&quot;</span>,<span class="string">&quot;a+&quot;</span>)</span><br><span class="line">		f1.write(<span class="string">&quot;Episode:&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;    total_reward:&quot;</span>+<span class="built_in">str</span>(total_reward)+<span class="string">&quot;   episode_step:&quot;</span>+<span class="built_in">str</span>(episode_step)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;start_time&#x27;</span>,start_time)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;end_time&#x27;</span>,time.asctime( time.localtime(time.time())))</span><br></pre></td></tr></table></figure>
<p><strong>（5）dqn_test.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> AirsimEnv <span class="keyword">import</span> Env</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span>(<span class="params">shape</span>):</span></span><br><span class="line">	initial = tf.truncated_normal(shape,stddev = <span class="number">0.1</span>)</span><br><span class="line">	<span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_varialbe</span>(<span class="params">shape</span>):</span></span><br><span class="line">	initial = tf.constant(<span class="number">0.1</span>,shape = shape)</span><br><span class="line">	<span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span>(<span class="params">x,w</span>):</span></span><br><span class="line">	<span class="keyword">return</span> tf.nn.conv2d(x,w,strides = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],padding = <span class="string">&#x27;SAME&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv1d</span>(<span class="params">x,w</span>):</span></span><br><span class="line">	<span class="keyword">return</span> tf.nn.conv2d(x,w,strides = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],padding = <span class="string">&#x27;SAME&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DQNAgent</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,state_size,action_size</span>):</span></span><br><span class="line">		self.state_size = state_size</span><br><span class="line">		self.action_size = action_size</span><br><span class="line"></span><br><span class="line">		self.sess = tf.Session()</span><br><span class="line"></span><br><span class="line">		self.createNet()</span><br><span class="line">		self.sess.run(tf.global_variables_initializer())</span><br><span class="line">		self.saver = tf.train.Saver(max_to_keep = <span class="number">1</span>)</span><br><span class="line">		self.load()</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createNet</span>(<span class="params">self</span>):</span> <span class="comment">#创建网络</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load</span>(<span class="params">self</span>):</span> <span class="comment">#加载网络模型</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_action</span>(<span class="params">self,state</span>):</span> <span class="comment"># 从网络中选择最大值的行为</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interpret_action</span>(<span class="params">action</span>):</span> <span class="comment">#将行为转换为对应的元祖</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment"># argparse parser</span></span><br><span class="line">	parser = argparse.ArgumentParser()</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--img_height&#x27;</span>,     <span class="built_in">type</span>=<span class="built_in">int</span>,      default=<span class="number">84</span>)</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--img_width&#x27;</span>, 	    <span class="built_in">type</span>=<span class="built_in">int</span>,      default=<span class="number">84</span>)</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--dqn_test_episode&#x27;</span>,	<span class="built_in">type</span>=<span class="built_in">int</span>,      default=<span class="number">1000</span>)</span><br><span class="line">	parser.add_argument(<span class="string">&#x27;--max_steps&#x27;</span>,		<span class="built_in">type</span>=<span class="built_in">int</span>,      default=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">	args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">	<span class="comment"># make RL agent</span></span><br><span class="line">	env = Env()</span><br><span class="line">	state_size = args.img_width*args.img_height</span><br><span class="line">	action_size = <span class="number">3</span></span><br><span class="line">	start_time = time.asctime( time.localtime(time.time()))</span><br><span class="line">	dqn = DQNAgent(</span><br><span class="line">		state_size = state_size,</span><br><span class="line">		action_size = action_size</span><br><span class="line">		)</span><br><span class="line">	step = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(args.dqn_test_episode):</span><br><span class="line"></span><br><span class="line">		s_t = env.reset()</span><br><span class="line">		total_reward = <span class="number">0</span></span><br><span class="line">		episode_step = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(args.max_steps):</span><br><span class="line">			a_t = dqn.get_action(s_t)</span><br><span class="line">			real_action = interpret_action(a_t)</span><br><span class="line">			<span class="keyword">try</span>:</span><br><span class="line">				s_next_t,r_t,done,quad_pos = env.step(real_action)</span><br><span class="line">				<span class="comment">#s_next_t = transform_input(s_next_t,args.img_height,args.img_width)</span></span><br><span class="line">			<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&#x27;Error :&#x27;</span> ,e)</span><br><span class="line"></span><br><span class="line">			total_reward += r_t</span><br><span class="line"></span><br><span class="line">			s_t = s_next_t</span><br><span class="line">			step += <span class="number">1</span></span><br><span class="line">			episode_step += <span class="number">1</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;quadrotor position&#x27;</span>,quad_pos.x_val,quad_pos.y_val,quad_pos.z_val)</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;Episode&quot;</span>,i,<span class="string">&quot;episode_step&quot;</span>,episode_step,<span class="string">&quot;Action&quot;</span>,a_t,<span class="string">&quot;Reward&quot;</span>,r_t,<span class="string">&#x27;step&#x27;</span>,step,<span class="string">&#x27;done&#x27;</span>,done)</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> done:</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&#x27;episode %d is done&#x27;</span>%i)</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;start_time&#x27;</span>,start_time)</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;Episode&#x27;</span>,i,<span class="string">&#x27;total reward&#x27;</span>,total_reward)</span><br><span class="line">		f1 = <span class="built_in">open</span>(<span class="string">r&quot;/home/tifo/tifo/DQN/data/dqn_test&quot;</span>+<span class="string">&quot;.txt&quot;</span>,<span class="string">&quot;a+&quot;</span>)</span><br><span class="line">		f1.write(<span class="string">&quot;Episode:&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;    total_reward:&quot;</span>+<span class="built_in">str</span>(total_reward)+<span class="string">&quot;   episode_step:&quot;</span>+<span class="built_in">str</span>(episode_step)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;start_time&#x27;</span>,start_time)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;end_time&#x27;</span>,time.asctime( time.localtime(time.time())))</span><br></pre></td></tr></table></figure>
<h2 id="三、训练数据和测试数据"><a href="#三、训练数据和测试数据" class="headerlink" title="三、训练数据和测试数据"></a>三、训练数据和测试数据</h2><p><strong>（1）DQN训练数据</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>迭代范围</th>
<th>正面奖励次数</th>
<th>负面奖励次数</th>
<th>强制截止次数</th>
<th>单位：千</th>
</tr>
</thead>
<tbody>
<tr>
<td>1-1000</td>
<td>215</td>
<td>764</td>
<td>20</td>
<td>1</td>
</tr>
<tr>
<td>1000-2000</td>
<td>122</td>
<td>869</td>
<td>8</td>
<td>2</td>
</tr>
<tr>
<td>2000-3000</td>
<td>446</td>
<td>549</td>
<td>4</td>
<td>3</td>
</tr>
<tr>
<td>3000-4000</td>
<td>621</td>
<td>366</td>
<td>12</td>
<td>4</td>
</tr>
<tr>
<td>4000-5000</td>
<td>716</td>
<td>273</td>
<td>10</td>
<td>5</td>
</tr>
<tr>
<td>5000-6000</td>
<td>704</td>
<td>287</td>
<td>8</td>
<td>6</td>
</tr>
<tr>
<td>6000-7000</td>
<td>734</td>
<td>262</td>
<td>3</td>
<td>7</td>
</tr>
<tr>
<td>7000-8000</td>
<td>766</td>
<td>222</td>
<td>11</td>
<td>8</td>
</tr>
<tr>
<td>8000-9000</td>
<td>766</td>
<td>222</td>
<td>8</td>
<td>9</td>
</tr>
<tr>
<td>9000-10000</td>
<td>768</td>
<td>225</td>
<td>6</td>
<td>10</td>
</tr>
<tr>
<td>1-10000</td>
<td>5866</td>
<td>4044</td>
<td>90</td>
<td>总计</td>
</tr>
</tbody>
</table>
</div>
<p><strong>训练过程中累积奖励图（每50个episode的reward取均值）</strong></p>
<p><img src="/2019/08/20/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8B%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E6%B5%8B%E8%AF%95/2.png" alt></p>
<p><strong>（2）随机飞行测试数据</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>迭代范围</th>
<th>正面奖励次数</th>
<th>负面奖励次数</th>
<th>强制截止次数</th>
<th>单位：千</th>
</tr>
</thead>
<tbody>
<tr>
<td>1-1000</td>
<td>235</td>
<td>734</td>
<td>31</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<p><strong>（3）DQN网络测试数据</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>迭代范围</th>
<th>正面奖励次数</th>
<th>负面奖励次数</th>
<th>强制截止次数</th>
<th>单位：千</th>
</tr>
</thead>
<tbody>
<tr>
<td>1-1000</td>
<td>999</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<p>训练过程中，其值稳定在770左右，而测试的时候，其值接近1000，可能是因为训练过程中存在10%的概率随机选择行为，因此训练的准确性没有测试的准确性高。</p>
<p>测试和训练的场景都是同一个场景</p>
<p><strong>在32GB 1080TI显卡上训练接近28个小时左右</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">episode <span class="number">999</span> <span class="keyword">is</span> done</span><br><span class="line">(<span class="string">&#x27;start_time&#x27;</span>, <span class="string">&#x27;Fri Jul 19 20:01:46 2019&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;Episode&#x27;</span>, <span class="number">999</span>, <span class="string">&#x27;total reward&#x27;</span>, <span class="number">0.92</span>)</span><br><span class="line">(<span class="string">&#x27;start_time&#x27;</span>, <span class="string">&#x27;Fri Jul 19 20:01:46 2019&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;end_time&#x27;</span>, <span class="string">&#x27;Fri Jul 19 23:21:02 2019&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>通过直接调用API完成了DQN算法的一个简单验证，训练的目标很简单。但将代码封装为ros后，训练效果却很差。在ros的控制下，使用RGB图训练过，也使用过深度图训练过，训练效果都不太好。暂时还没太弄清楚其原因。不过在ros的转换下，其深度图显示的有点问题。和原图不提啊一样</p>
</blockquote>
]]></content>
      <categories>
        <category>Airsim</category>
      </categories>
      <tags>
        <tag>Airsim</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Airsim（三）之Ubuntu下Airsim平台搭建</title>
    <url>/2019/07/02/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BUbuntu%E4%B8%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>微软推出的airsim对windows的支持更好，但是也能在Ubuntu下进行安装，由于本人习惯在ubuntu下进行开发，因此，参考了airsim的官方文档和网上的一些文章，在ubuntu下搭建成功</p>
</blockquote>
<h2 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h2><ul>
<li>Ubuntu16.04</li>
<li>Unreal Engine 4.18</li>
<li>Airsim 1.2</li>
</ul>
<h2 id="一、安装Chrome浏览器"><a href="#一、安装Chrome浏览器" class="headerlink" title="一、安装Chrome浏览器"></a>一、安装Chrome浏览器</h2><blockquote>
<p>不是必须的，只是习惯用chrome浏览器而已</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo wget http://www.linuxidc.com/files/repo/google-chrome.list -P /etc/apt/sources.list.d/</span><br><span class="line">wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install google-chrome-stable</span><br></pre></td></tr></table></figure>
<h2 id="二、安装qt5-配置终端翻墙"><a href="#二、安装qt5-配置终端翻墙" class="headerlink" title="二、安装qt5 配置终端翻墙"></a>二、安装qt5 配置终端翻墙</h2><blockquote>
<p>需要有自己的vpn账号才行，配置这个，是为了终端翻墙，在下载一些文件的时候能够快速下载</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure>
<p>ubuntu下，实现终端翻墙，请参考该<a href="https://ldgyyf.cn/2019/06/27/Linux/ubuntu%E4%B8%8B%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/#more">网址</a>，进行相关配置</p>
<h2 id="三、Unreal-Engine-4-18下载配置"><a href="#三、Unreal-Engine-4-18下载配置" class="headerlink" title="三、Unreal Engine 4.18下载配置"></a>三、Unreal Engine 4.18下载配置</h2><h3 id="3-1-安装git"><a href="#3-1-安装git" class="headerlink" title="3.1 安装git"></a>3.1 安装git</h3><p>这里添加了proxychains4 是已经配置好第二步，即能实现终端翻墙后添加的翻墙操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo proxychains4 apt-get install git</span><br></pre></td></tr></table></figure>
<h3 id="3-2-下载UE4"><a href="#3-2-下载UE4" class="headerlink" title="3.2 下载UE4"></a>3.2 下载UE4</h3><p>（1）如果没有UE4的账号，先去<a href="https://www.unrealengine.com">官网</a>，注册一个账号，然后进行登录</p>
<p>（2）绑定github账号，在<code>用户</code>-&gt;<code>个人</code>-&gt;<code>链接的账户</code>中，与自己的github账号绑定，绑定之后，会发邮箱，然后确认即可</p>
<p><img src="/2019/07/02/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BUbuntu%E4%B8%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/1.png" alt></p>
<p>（3）如果是第一次下载需要先安装一些软件包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential mono-mcs mono-devel mono-xbuild mono-dmcs mono-reference-assemblies-4.0 libmono-system-data-datasetextensions4.0-cil libmono-system-web-extensions4.0-cil libmono-system-management4.0-cil libmono-system-xml-linq4.0-cil cmake dos2unix clang-5.0 libfreetype6-dev libgtk-3-dev libmono-microsoft-build-tasks-v4.0-4.0-cil xdg-user-dirs</span><br></pre></td></tr></table></figure>
<p>然后输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/bin/clang-5.0 /usr/bin/clang</span><br><span class="line">sudo ln -s /usr/bin/clang++-5.0 /usr/bin/clang++</span><br><span class="line">clang -v</span><br></pre></td></tr></table></figure>
<p>为了，防止后面编译出现下面的错误</p>
<p><img src="/2019/07/02/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BUbuntu%E4%B8%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/2.png" alt></p>
<p>（4）下载UE4.18源码</p>
<p>在git的过程中，需要输入之前绑定的github的用户名和密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b 4.18 https://github.com/EpicGames/UnrealEngine.git</span><br></pre></td></tr></table></figure>
<h3 id="3-3-编译UE4"><a href="#3-3-编译UE4" class="headerlink" title="3.3 编译UE4"></a>3.3 编译UE4</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd UnrealEngine</span><br><span class="line">./Setup.sh</span><br><span class="line">./GenerateProjectFiles.sh</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<p>编译成功后，界面如下：</p>
<p><img src="/2019/07/02/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BUbuntu%E4%B8%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/3.png" alt></p>
<h2 id="四、Airsim配置"><a href="#四、Airsim配置" class="headerlink" title="四、Airsim配置"></a>四、Airsim配置</h2><h3 id="4-1-下载Airsim"><a href="#4-1-下载Airsim" class="headerlink" title="4.1 下载Airsim"></a>4.1 下载Airsim</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Microsoft/AirSim.git</span><br></pre></td></tr></table></figure>
<h3 id="4-2-编译"><a href="#4-2-编译" class="headerlink" title="4.2 编译"></a>4.2 编译</h3><blockquote>
<p>有的命令前，加上proxychains4，可能会更快，如：proxychains4 ./setup.sh</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd AirSim</span><br><span class="line">./setup.sh</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure>
<p>./setup.sh成功后界面如下</p>
<p><img src="/2019/07/02/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BUbuntu%E4%B8%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/4.png" alt></p>
<p>./build.sh成功后界面如下</p>
<p><img src="/2019/07/02/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BUbuntu%E4%B8%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/5.png" alt></p>
<h2 id="五、Airsim-使用方法"><a href="#五、Airsim-使用方法" class="headerlink" title="五、Airsim 使用方法"></a>五、Airsim 使用方法</h2><blockquote>
<p>在Unreal Engine/Engine/Binaries/Linux/文件夹下，搜索UE4Editor，然后双击打开</p>
</blockquote>
<h3 id="5-1-创建工程"><a href="#5-1-创建工程" class="headerlink" title="5.1 创建工程"></a>5.1 创建工程</h3><p>选择<code>新建项目</code>，<code>C++</code>，名称注意写英文，不要写中文</p>
<p><img src="/2019/07/02/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BUbuntu%E4%B8%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/6.png" alt></p>
<h3 id="5-2-打开工程项目"><a href="#5-2-打开工程项目" class="headerlink" title="5.2 打开工程项目"></a>5.2 打开工程项目</h3><p>创建完成后，在刚才创建的目录下，双击打开Rolling.uproject</p>
<p><img src="/2019/07/02/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BUbuntu%E4%B8%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/7.png" alt></p>
<h3 id="5-3-界面显示"><a href="#5-3-界面显示" class="headerlink" title="5.3 界面显示"></a>5.3 界面显示</h3><p>打开后，会成功加载除UE4的场景界面，但是此时还没有无人机或车辆</p>
<p><img src="/2019/07/02/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BUbuntu%E4%B8%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/8.png" alt></p>
<h3 id="5-4-加载无人机或小车"><a href="#5-4-加载无人机或小车" class="headerlink" title="5.4 加载无人机或小车"></a>5.4 加载无人机或小车</h3><p>在5.3的窗口框中，选择 <code>文件</code> -&gt; <code>打开项目</code>，在弹出的框中选择浏览，找到 <code>AirSim/Unreal/Environments/Blocks</code> 文件下的<code>.uproject</code>文件</p>
<p><img src="/2019/07/02/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BUbuntu%E4%B8%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/9.png" alt></p>
<p>然后，点击<code>打开</code>，弹出提示需要转换副本时，选择<code>打开一个副本</code></p>
<p><img src="/2019/07/02/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BUbuntu%E4%B8%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/10.png" alt></p>
<p>稍等一会，加载出来后，就能在UE4界面看到无人机了，当然需要设置</p>
<p>选择  <code>设置</code>-&gt;<code>世界设置</code>，在右侧栏<code>GameMode</code>这里选择<code>AirsimGameMode</code></p>
<p><img src="/2019/07/02/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BUbuntu%E4%B8%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/11.png" alt></p>
<p>点击<code>播放</code>，在弹出的框中选择<code>不</code>，则能看到无人机加载出来</p>
<p><img src="/2019/07/02/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BUbuntu%E4%B8%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/12.png" alt></p>
<p>加载成功后，也能在Documents文件夹下多出一个Airsim文件夹，这个里面是settions.json文件，里面是它的配置信息</p>
<p>将其中的SimMode设为Car，则会加载出小车，设为Multirotor，则会是无人机，默认是Multirotor</p>
<p><img src="/2019/07/02/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BUbuntu%E4%B8%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/13.png" alt></p>
<h3 id="5-5-重新打开UE4，并带有无人机"><a href="#5-5-重新打开UE4，并带有无人机" class="headerlink" title="5.5 重新打开UE4，并带有无人机"></a>5.5 重新打开UE4，并带有无人机</h3><blockquote>
<p>关掉之前打开的UE4界面，重新在Unreal Engine/Engine/Binaries/Linux下双击UE4Editor</p>
</blockquote>
<p><img src="/2019/07/02/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BUbuntu%E4%B8%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/14.png" alt></p>
<p>在弹出的项目中，选择我们之前加载的插件<code>Blocks</code>，打开</p>
<p><img src="/2019/07/02/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BUbuntu%E4%B8%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/15.png" alt></p>
<p>然后点击<code>播放</code>，就能看见小车出来，并且能够手动控制，这里出现小车，是因为我在<code>settiong.json</code>中将<code>SimMode</code>设置为了<code>Car</code>，而且小车是能在界面上进行控制的，无人机不行</p>
<p><img src="/2019/07/02/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BUbuntu%E4%B8%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/16.png" alt></p>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><ul>
<li><p>csdn博客，Ubuntu下安装Airsim，<a href="https://blog.csdn.net/weixin_39059031/article/details/84028487">传送门</a></p>
</li>
<li><p>Airsim官方文档，<a href="https://microsoft.github.io/AirSim/docs/build_linux/">传送门</a></p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>ubuntu下的Airsim配置还是Windows下的配置有些不一样，如Windows下需要安装VS2017，在VS2017中打开sln文件等，以及windows下有Epic Game Launch网上商店，而ubuntu下没有，如果要在ubuntu下加载网上商店上的一些场景，需要先在windows下进行下载才行</p>
</blockquote>
]]></content>
      <categories>
        <category>Airsim</category>
      </categories>
      <tags>
        <tag>Airsim</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Airsim（九）之Pixhawk配置（Ubuntu16下HITL配置）</title>
    <url>/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在Airsim上做PX4的集成，并简单完成其算法验证</p>
<font color="red">此配置是在Ubuntu16下配置，和前一篇的系统不同，但是大部分配置细节还是相同的</font>

</blockquote>
<h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><blockquote>
<ul>
<li>Pixhawk（我这里用的pixhawk如下图）</li>
<li>一根micro usb数据线</li>
</ul>
</blockquote>
<h2 id="一、启动Airsim环境"><a href="#一、启动Airsim环境" class="headerlink" title="一、启动Airsim环境"></a>一、启动Airsim环境</h2><blockquote>
<p>关于Airsim在Ubuntu16下的环境配置，请浏览<a href="https://ldgyyf.cn/2019/07/02/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BUbuntu%E4%B8%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/">初识Airsim（三）</a></p>
</blockquote>
<h3 id="1-1-启动UE4环境"><a href="#1-1-启动UE4环境" class="headerlink" title="1.1 启动UE4环境"></a>1.1 启动UE4环境</h3><blockquote>
<p>在Unreal Engine/Engine/Binaries/Linux/文件夹下，搜索UE4Editor，然后双击打开</p>
<p>或者在该文件目录下，执行./UE4Editor命令打开</p>
<p>这两种方式一样，但我还是喜欢双击打开</p>
</blockquote>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/1.png" alt></p>
<h3 id="1-2-加载插件"><a href="#1-2-加载插件" class="headerlink" title="1.2 加载插件"></a>1.2 加载插件</h3><blockquote>
<p>在弹出的界面中，选择Blocks插件，打开。这样通过其中的设置，就能加载出无人机</p>
</blockquote>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/2.png" alt></p>
<h3 id="1-3-界面显示"><a href="#1-3-界面显示" class="headerlink" title="1.3 界面显示"></a>1.3 界面显示</h3><blockquote>
<p>加载出来后，先不要立刻点击Play，等后面的配置完成在进行点击</p>
</blockquote>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/3.png" alt></p>
<h2 id="二、配置settings-json"><a href="#二、配置settings-json" class="headerlink" title="二、配置settings.json"></a>二、配置settings.json</h2><blockquote>
<p>在Documents\Airsim文件夹下，找到settings.json文件，并修改为PX4配置</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;SeeDocsAt&quot;</span>: <span class="string">&quot;https://github.com/Microsoft/AirSim/blob/master/docs/settings.md&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;SettingsVersion&quot;</span>: <span class="number">1.2</span>,</span><br><span class="line">  <span class="attr">&quot;SimMode&quot;</span>:<span class="string">&quot;Multirotor&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;DefaultVehicleConfig&quot;</span>:<span class="string">&quot;PX4&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Vehicles&quot;</span>:&#123;</span><br><span class="line">         <span class="attr">&quot;PX4&quot;</span>:&#123;</span><br><span class="line">             	<span class="attr">&quot;VehicleType&quot;</span>:<span class="string">&quot;PX4Multirotor&quot;</span>,</span><br><span class="line">             	<span class="attr">&quot;UseSerial&quot;</span>:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、QGC下载"><a href="#三、QGC下载" class="headerlink" title="三、QGC下载"></a>三、QGC下载</h2><h3 id="3-1-QGC下载"><a href="#3-1-QGC下载" class="headerlink" title="3.1 QGC下载"></a>3.1 QGC下载</h3><blockquote>
<p>下载QGC，请点击<a href="https://s3-us-west-2.amazonaws.com/qgroundcontrol/latest/QGroundControl.AppImage">此处</a></p>
</blockquote>
<h3 id="3-2-修改权限"><a href="#3-2-修改权限" class="headerlink" title="3.2 修改权限"></a>3.2 修改权限</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ~/Downloads</span><br><span class="line">chmod +x ./QGroundControl.AppImage</span><br></pre></td></tr></table></figure>
<h2 id="四、pixhawk配置"><a href="#四、pixhawk配置" class="headerlink" title="四、pixhawk配置"></a>四、pixhawk配置</h2><h3 id="4-1-打开QGC"><a href="#4-1-打开QGC" class="headerlink" title="4.1 打开QGC"></a>4.1 打开QGC</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ~/Downloads</span><br><span class="line">./QGroundControl.AppImage</span><br></pre></td></tr></table></figure>
<h3 id="4-2-连接pixhawk"><a href="#4-2-连接pixhawk" class="headerlink" title="4.2 连接pixhawk"></a>4.2 连接pixhawk</h3><blockquote>
<p>将pixhawk通过USB线连接在测试电脑上</p>
</blockquote>
<p>通常将pixhawk连接在电脑上后，打开QGC，QGC会自动连接上飞机。如果没有自动连接上，也可以采用手动连接的方式，手动连接操作如下：</p>
<p>​    在<strong>应用设置</strong>中找到<strong>Comm Links</strong>，点击正下方的<strong>Add</strong>进行添加，然后在新弹出的添加界面中，设置合适的端口和波特率，例如我这里的端口为<strong>ttyACM1</strong>，波特率设置为<strong>115200</strong>。</p>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/4.png" alt></p>
<p>设置后，点击正下方的<strong>Connect</strong>，进行连接，连接成功后，如下图所示</p>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/5.png" alt></p>
<h3 id="4-3-刷新固件"><a href="#4-3-刷新固件" class="headerlink" title="4.3 刷新固件"></a>4.3 刷新固件</h3><h4 id="4-3-1-下载最新PX4固件"><a href="#4-3-1-下载最新PX4固件" class="headerlink" title="4.3.1 下载最新PX4固件"></a>4.3.1 下载最新PX4固件</h4><blockquote>
<p>点击<a href="https://github.com/PX4/Firmware/releases">PX4</a>下载Stable Release v1.9.2版本的px4_fmu-v2_default.px4</p>
</blockquote>
<h4 id="4-3-2-刷新px4-fmu-v2-default-px4固件"><a href="#4-3-2-刷新px4-fmu-v2-default-px4固件" class="headerlink" title="4.3.2 刷新px4_fmu-v2_default.px4固件"></a>4.3.2 刷新px4_fmu-v2_default.px4固件</h4><blockquote>
<p>这下面的步骤，是完全和Windows下一样，该小节下面的图片全部都来自于上一篇windows下的图片，Ubuntu中是一模一样的，只是Ubuntu中QGC是英文显示，Windows下是中文显示，其他没有区别。</p>
</blockquote>
<p>（1）找到设置，选择固件板块</p>
<p>（2）然后将pixhawk先拔掉，然后重新插上</p>
<p>（3）最后将会发现固件模块变成如下界面</p>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/6.png" alt></p>
<p>（4）点击高级设置，选择自定义固件文件，然后点击确定</p>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/7.png" alt></p>
<p>（5）在弹出来的框中，找到刚才下载的px4_fmu-v2_default.px4固件，进行升级更新</p>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/8.png" alt></p>
<h4 id="4-4-设置机身"><a href="#4-4-设置机身" class="headerlink" title="4.4 设置机身"></a>4.4 设置机身</h4><blockquote>
<p>在设置中，找到机架板块，设置其机架为<strong>HIL Quadcopter X</strong>，并应用重启</p>
<p>我没有遥控器，因此在刚开始设置时，下面的遥控器、飞行模式和电源其实都是红色有问题的，我这里是设置过后的，所以看着没问题</p>
</blockquote>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/9.png" alt></p>
<h4 id="4-5-修改参数值"><a href="#4-5-修改参数值" class="headerlink" title="4.5 修改参数值"></a>4.5 修改参数值</h4><blockquote>
<p>在设置中，找到参数模块，搜索COM_RC，则会看到如下信息显示</p>
</blockquote>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/10.png" alt></p>
<p>（1）将其中的<strong>COM_RC_IN_MODE</strong>修改为 <strong>Joystick/No RC Check</strong>，因为我没有使用遥控器，因此修改的该值</p>
<p>（2）将其中的<strong>NAV_RCL_ACT</strong>修改为<strong>Hold mode</strong>或者<strong>Disabled</strong></p>
<p>（3）将其中的<strong>COM_RC_LOSS_T</strong>修改为5s（非必须）</p>
<font color="red">其实，这这里可以看出，我修改过的值是标红了的</font>

<blockquote>
<p>在设置中，找到安全模块，将HITL Enabled设置为Enabled，即启用HITL模式</p>
</blockquote>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/11.png" alt></p>
<blockquote>
<p>在应用程序设置中，找到常规部分，取消选中除UDP外的所有框</p>
<p>并且开启虚拟摇杆</p>
</blockquote>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/12.png" alt></p>
<h2 id="五、测试pixhawk（HITL模式）"><a href="#五、测试pixhawk（HITL模式）" class="headerlink" title="五、测试pixhawk（HITL模式）"></a>五、测试pixhawk（HITL模式）</h2><h3 id="5-1-QGC连接Pixhawk"><a href="#5-1-QGC连接Pixhawk" class="headerlink" title="5.1 QGC连接Pixhawk"></a>5.1 QGC连接Pixhawk</h3><blockquote>
<p>首先要确保QGC和Pixhawk是连接状态，如4.2节中连接成功后的图片</p>
</blockquote>
<h3 id="5-2-UE4中加载Airsim"><a href="#5-2-UE4中加载Airsim" class="headerlink" title="5.2 UE4中加载Airsim"></a>5.2 UE4中加载Airsim</h3><blockquote>
<p>此时会发现，UE4中的Airsim无人机没有初始化，图片中的红色提示部分</p>
</blockquote>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/13.png" alt></p>
<h3 id="5-3-断开QGC连接"><a href="#5-3-断开QGC连接" class="headerlink" title="5.3 断开QGC连接"></a>5.3 断开QGC连接</h3><blockquote>
<p>将QGC中的pixhawk连接，手动断开</p>
</blockquote>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/14.png" alt></p>
<h3 id="5-4-重启UE4的Airsim环境"><a href="#5-4-重启UE4的Airsim环境" class="headerlink" title="5.4 重启UE4的Airsim环境"></a>5.4 重启UE4的Airsim环境</h3><blockquote>
<p>并不是要关掉UE4，重新打开，而是在当前UE4中按ESC键</p>
</blockquote>
<p>（1）在UE4环境中，按<strong>Esc键</strong>，退出</p>
<p>可以看到UE4中，重新回到Play状态，并且QGC也没有连接上</p>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/15.png" alt></p>
<p>（2）点击Play，重新加载Airsim环境</p>
<p>此时，将会看到UE4环境中，参数已经初始化，并且也会发现QGC中的Pixhawk也已经自动连接上</p>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/16.png" alt></p>
<h3 id="5-5-QGC起飞降落测试"><a href="#5-5-QGC起飞降落测试" class="headerlink" title="5.5 QGC起飞降落测试"></a>5.5 QGC起飞降落测试</h3><blockquote>
<font color="red">在控制的模式中，发现起飞降落并没有效果（暂时还不太明白），但是也会发现终于没有那令人苦闷的 NO GPS的相关提示错误了</font>

</blockquote>
<p>点击起飞后，发现并没有无人机没有成功起飞（下面肿的红色路径是我之前飞行过的，还没有消除，并且也会发现，QGC上面显示的是Takeoff Armed）</p>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/17.png" alt></p>
<p>将Takeoff修改为Manual模式，会发现无人机已经成功起飞，而且一直都没有停下来（下图中QGC的模式已经变换为Manual，不清楚为什么切换一下，才能成功飞起，并且还是乱飞的情况，UE4中显示的是无人机的第一视角，而且和上图相比，多了一条红色路线，该路线则是切换Manual模式后的起飞路线）</p>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/18.png" alt></p>
<p>在Manual模式下，也能通过虚拟摇杆进行控制</p>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/19.png" alt></p>
<p><strong>有时候切换模式能正常takeoff降落，有时候又不行，这就是控制方面的问题了</strong></p>
<h3 id="5-6-说明"><a href="#5-6-说明" class="headerlink" title="5.6 说明"></a>5.6 <font color="red">说明</font></h3><p>​    为什么前面需要先将QGC连接上Pixhawk后，UE4加载Airsim会报错？然后又重新断开QGC的连接，又重启UE4的AIrsim环境就好了？为什么要这样？我也不清楚，也有点迷糊。</p>
<p>​    不过这样设置了之后，在第二次的时候，就不需要这样操作了，可以直接</p>
<p>​    （1）打开QGC，确保QGC不是连接状态（如果自动连接上，请手动断开）</p>
<p>​    （2）打开UE4环境，直接点击Play</p>
<p>但是这时的QGC，好像保留了上次的效果</p>
<p><img src="/2019/08/22/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88Ubuntu16%E4%B8%8BHITL%E9%85%8D%E7%BD%AE%EF%BC%89/20.png" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>总之，困扰了许久的Pixhawk在Linux下的HITL配置，终于解决了。虽然目前对其控制方式还不太了解，至少是能通信成功。（步骤说的有点啰嗦了~）</p>
<p>下一步，尝试一下用mavros控制是否可行</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/microsoft/AirSim/issues/1988">参数没有初始化</a></li>
</ul>
]]></content>
      <categories>
        <category>Airsim</category>
      </categories>
      <tags>
        <tag>Airsim</tag>
        <tag>PX4</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Airsim（二）之Windows下ROS安装配置</title>
    <url>/2019/06/27/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BWindows%E4%B8%8BROS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在刚开始接触Airsim的过程中，其环境是在Windows下搭建的，而平常用的ros做机器人的开发已经习惯了，因此就尝试了在Windows下配置ROS环境</p>
</blockquote>
<h2 id="一、前提"><a href="#一、前提" class="headerlink" title="一、前提"></a>一、前提</h2><ul>
<li>已经装好Visual Studio 2017 社区版，并且安装路径是默认安装位置路径</li>
</ul>
<blockquote>
<p>因为最开始修改了默认安装位置路径，在安装过程中出现了一些小问题，后来按照默认安装路径安装测试的</p>
</blockquote>
<h2 id="二、ROS安装"><a href="#二、ROS安装" class="headerlink" title="二、ROS安装"></a>二、ROS安装</h2><h3 id="2-1-创建快捷方式并配置"><a href="#2-1-创建快捷方式并配置" class="headerlink" title="2.1 创建快捷方式并配置"></a>2.1 创建快捷方式并配置</h3><ul>
<li><p>桌面空白处，右键，新建快捷方式</p>
<p><img src="/2019/06/27/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BWindows%E4%B8%8BROS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/1.png" alt></p>
</li>
</ul>
<p>在输入框中，复制粘贴如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\cmd.exe /k &quot;C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Tools\VsDevCmd.bat&quot; -arch=amd64 -host_arch=amd64</span><br></pre></td></tr></table></figure>
<ul>
<li><p>命名快捷方式为ROS</p>
<p><img src="/2019/06/27/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BWindows%E4%B8%8BROS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/2.png" alt></p>
</li>
<li><p>将该快捷方式设置为Administrator</p>
<ul>
<li><ul>
<li><p>右键单击快捷方式，然后选择“属性”</p>
</li>
<li><p>选择<code>快捷方式</code>选项卡</p>
<p><img src="/2019/06/27/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BWindows%E4%B8%8BROS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/3.png" alt></p>
</li>
<li><p>点击<code>高级</code>按钮，在高级属性中选中<code>用管理员身份运行</code></p>
<p><img src="/2019/06/27/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BWindows%E4%B8%8BROS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/4.png" alt></p>
</li>
<li><p>在所有需要点击<code>确定</code>的地方点击<code>确定</code>，以进行保存</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-2-安装Chocolatey-和Git"><a href="#2-2-安装Chocolatey-和Git" class="headerlink" title="2.2 安装Chocolatey 和Git"></a>2.2 安装Chocolatey 和Git</h3><p>（1）安装Chocolatey</p>
<blockquote>
<p>在windows下，找到命令提示符，以管理员身份运行，然后输入如下代码，安装Chocolatey</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@&quot;%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe&quot; -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command &quot;iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))&quot; &amp;&amp; SET &quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&quot;</span><br></pre></td></tr></table></figure>
<p>最终，窗口出现Chocolatey is  now ready，则安装成功</p>
<p><img src="/2019/06/27/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BWindows%E4%B8%8BROS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/5.png" alt></p>
<p>（2）安装git</p>
<blockquote>
<p>打开之前创建的ROS命令提示符</p>
</blockquote>
<p><img src="/2019/06/27/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BWindows%E4%B8%8BROS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/2.png" alt></p>
<p>输入如下命令，安装git：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">choco install git -y</span><br></pre></td></tr></table></figure>
<p>安装完成后，关掉ros窗口，重新打开，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
<p>检查，git是否安装成功</p>
<h3 id="2-3-ROS安装"><a href="#2-3-ROS安装" class="headerlink" title="2.3 ROS安装"></a>2.3 ROS安装</h3><blockquote>
<p>输入如下命令，进行ros的安装，安装过程有点久</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">choco source add -n=ros-win -s=&quot;https://roswin.azurewebsites.net/api/v2&quot; --priority=1</span><br><span class="line">choco upgrade ros-melodic-desktop -y</span><br></pre></td></tr></table></figure>
<p>在安装的过程中，可能会报错，然后多次输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">choco upgrade ros-melodic-desktop -y</span><br></pre></td></tr></table></figure>
<p>进行重装，或者输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">choco upgrade ros-melodic-desktop --force</span><br></pre></td></tr></table></figure>
<p>或者，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">choco upgrade ros-melodic-desktop_full -y --execution-timeout = 0</span><br></pre></td></tr></table></figure>
<p>最后，有点懵的就装好了，安装成功后，会在C盘根目录下有opt\ros的文件夹</p>
<h2 id="三、ROS测试"><a href="#三、ROS测试" class="headerlink" title="三、ROS测试"></a>三、ROS测试</h2><p>（1）打开一个ROS窗口</p>
<blockquote>
<p>首先要进入到x64的目录下，运行setup.bat，这个就有点类似于linux的source devel/setup.bash一样</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd C:\opt\ros\melodic\x64 </span><br><span class="line">setup.bat</span><br><span class="line">roscore</span><br></pre></td></tr></table></figure>
<p>最终出现如下界面则安装成功</p>
<p><img src="/2019/06/27/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BWindows%E4%B8%8BROS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/6.png" alt></p>
<p>（2）查看rostopic</p>
<blockquote>
<p>打开另一个ros窗口</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd C:\opt\ros\melodic\x64 </span><br><span class="line">setup.bat</span><br><span class="line">rostopic list</span><br></pre></td></tr></table></figure>
<p><img src="/2019/06/27/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BWindows%E4%B8%8BROS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/7.png" alt></p>
<h2 id="四、ROS命令简化配置"><a href="#四、ROS命令简化配置" class="headerlink" title="四、ROS命令简化配置"></a>四、ROS命令简化配置</h2><blockquote>
<p>在第三步的测试过程中，每次输入ros相关的命令，都要先进入到x64目录下，然后运行setup.bat，甚是麻烦，因此才有了下面的简化配置，配置好后，直接在ros窗口输入命令即可</p>
</blockquote>
<ul>
<li><p>选中<code>ROS快捷方式</code>，右键，打开<code>属性</code></p>
</li>
<li><p>选择<code>快捷方式</code>选项卡，找到<code>目标</code></p>
<p><img src="/2019/06/27/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BWindows%E4%B8%8BROS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/8.png" alt></p>
</li>
<li><p>然后复制粘贴如下内容，进行替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\cmd.exe /k &quot;C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Tools\VsDevCmd.bat&quot; -arch=amd64 -host_arch=amd64 &amp;&amp; C:\opt\ros\melodic\x64\setup.bat</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新打开ros窗口，即可直接输入roscore，启动ros管理器</p>
</li>
</ul>
<p><img src="/2019/06/27/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BWindows%E4%B8%8BROS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/9.png" alt></p>
<h2 id="参考网址："><a href="#参考网址：" class="headerlink" title="参考网址："></a>参考网址：</h2><ul>
<li><p>ros wiki：<a href="http://wiki.ros.org/Installation/Windows">ros will 官网</a></p>
</li>
<li><p>博客：<a href="http://www.guyuehome.com/2192">古月居</a></p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>至此，windows下的ros环境就已经配好了，后续可以做其他的操作，但是需要安装一些软件包</p>
<p>如: msgpack-rpc-python 、airsim</p>
</blockquote>
]]></content>
      <categories>
        <category>Airsim</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Airsim（八）之Pixhawk配置（HIL）</title>
    <url>/2019/08/21/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88HIL%EF%BC%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在Airsim上做PX4的集成，并简单完成其算法验证</p>
<font color="red">此配置是在Windows下配置，不是Ubuntu16</font>

</blockquote>
<h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><blockquote>
<ul>
<li>Pixhawk（我这里用的pixhawk如下图）</li>
<li>一根micro usb数据线</li>
</ul>
</blockquote>
<p><img src="/2019/08/21/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88HIL%EF%BC%89/14.jpg" alt></p>
<h2 id="一、启动Airsim环境"><a href="#一、启动Airsim环境" class="headerlink" title="一、启动Airsim环境"></a>一、启动Airsim环境</h2><blockquote>
<p>关于Airsim在windows下的环境配置，请浏览<a href="https://ldgyyf.cn/2019/06/16/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BAirsim%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/">初识Airsim（一）</a></p>
</blockquote>
<h3 id="1-1-打开Rolling-sln文件"><a href="#1-1-打开Rolling-sln文件" class="headerlink" title="1.1 打开Rolling.sln文件"></a>1.1 打开Rolling.sln文件</h3><blockquote>
<p>双击运行Rolling.sln文件，则会默认打开VS</p>
</blockquote>
<h3 id="1-2-检查相关配置"><a href="#1-2-检查相关配置" class="headerlink" title="1.2 检查相关配置"></a>1.2 检查相关配置</h3><blockquote>
<p>确保配置为：DebugGame Editor + win64</p>
</blockquote>
<h3 id="1-3-运行工程项目"><a href="#1-3-运行工程项目" class="headerlink" title="1.3 运行工程项目"></a>1.3 运行工程项目</h3><blockquote>
<p>（1）可以先  点击 【生成】——&gt;【重新生成解决方案】</p>
<p>（2）按F5，运行工程项目</p>
</blockquote>
<h3 id="1-4-界面显示"><a href="#1-4-界面显示" class="headerlink" title="1.4 界面显示"></a>1.4 界面显示</h3><blockquote>
<p>做完前三步后，最终界面如下</p>
</blockquote>
<p><img src="/2019/08/21/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88HIL%EF%BC%89/1.png" alt></p>
<h2 id="二、配置settings-json"><a href="#二、配置settings-json" class="headerlink" title="二、配置settings.json"></a>二、配置settings.json</h2><blockquote>
<p>在Documents\Airsim文件夹下，找到settings.json文件，并修改为PX4配置</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;SeeDocsAt&quot;</span>: <span class="string">&quot;https://github.com/Microsoft/AirSim/blob/master/docs/settings.md&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;SettingsVersion&quot;</span>: <span class="number">1.2</span>,</span><br><span class="line">  <span class="attr">&quot;SimMode&quot;</span>:<span class="string">&quot;Multirotor&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Vehicles&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;PX4&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;VehicleType&quot;</span>: <span class="string">&quot;PX4Multirotor&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;UseSerial&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，UseSerial为true表示HIL模式，若为false，则为SITL模式</p>
<h2 id="三、下载QGC"><a href="#三、下载QGC" class="headerlink" title="三、下载QGC"></a>三、下载QGC</h2><h3 id="3-1-QGC下载"><a href="#3-1-QGC下载" class="headerlink" title="3.1 QGC下载"></a>3.1 QGC下载</h3><blockquote>
<p>下载<a href="http://qgroundcontrol.com/">QGroundControl</a></p>
</blockquote>
<h3 id="3-2-QGC安装"><a href="#3-2-QGC安装" class="headerlink" title="3.2 QGC安装"></a>3.2 QGC安装</h3><blockquote>
<p>双击下载好的exe文件，完成QGC的安装</p>
</blockquote>
<h2 id="四、pixhawk配置"><a href="#四、pixhawk配置" class="headerlink" title="四、pixhawk配置"></a>四、pixhawk配置</h2><h3 id="4-1-打开QGC"><a href="#4-1-打开QGC" class="headerlink" title="4.1 打开QGC"></a>4.1 打开QGC</h3><blockquote>
<p>菜单栏搜索QGC，打开即可</p>
</blockquote>
<h3 id="4-2-连接pixhawk"><a href="#4-2-连接pixhawk" class="headerlink" title="4.2 连接pixhawk"></a>4.2 连接pixhawk</h3><blockquote>
<p>将pixhawk通过USB线连接在测试电脑上</p>
</blockquote>
<p>连接成功后会看到QGC上面已经连接上，而不是等待连接</p>
<p><img src="/2019/08/21/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88HIL%EF%BC%89/2.png" alt></p>
<h3 id="4-3-刷新固件"><a href="#4-3-刷新固件" class="headerlink" title="4.3 刷新固件"></a>4.3 刷新固件</h3><h4 id="4-3-1-下载最新固件"><a href="#4-3-1-下载最新固件" class="headerlink" title="4.3.1 下载最新固件"></a>4.3.1 下载最新固件</h4><blockquote>
<p>点击<a href="https://github.com/PX4/Firmware/releases">PX4</a>下载Stable Release v1.9.2版本的px4_fmu-v2_default.px4</p>
</blockquote>
<h4 id="4-3-2-刷新px4-fmu-v2-default-px4固件"><a href="#4-3-2-刷新px4-fmu-v2-default-px4固件" class="headerlink" title="4.3.2 刷新px4_fmu-v2_default.px4固件"></a>4.3.2 刷新px4_fmu-v2_default.px4固件</h4><p>（1）找到设置，选择固件板块</p>
<p>（2）然后将pixhawk先拔掉，然后重新插上</p>
<p>（3）最后将会发现固件模块变成如下界面</p>
<p><img src="/2019/08/21/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88HIL%EF%BC%89/3.png" alt></p>
<p>（4）点击高级设置，选择自定义固件文件，然后点击确定</p>
<p><img src="/2019/08/21/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88HIL%EF%BC%89/4.png" alt></p>
<p>（5）在弹出来的框中，找到刚才下载的px4_fmu-v2_default.px4固件，进行升级更新</p>
<p><img src="/2019/08/21/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88HIL%EF%BC%89/5.png" alt></p>
<p>我这里没有检测出自动连接，因此重新手动连接一下即可</p>
<h3 id="4-4-设置机身"><a href="#4-4-设置机身" class="headerlink" title="4.4 设置机身"></a>4.4 设置机身</h3><blockquote>
<p>在设置中，找到机架板块，设置其机架为<strong>HIL Quadcopter X</strong>，并应用重启</p>
<p>我没有遥控器，因此在刚开始设置时，下面的遥控器、飞行模式和电源其实都是红色有问题的，我这里是设置过后的，所以看着没问题</p>
</blockquote>
<p><img src="/2019/08/21/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88HIL%EF%BC%89/6.png" alt></p>
<h3 id="4-5-修改参数值"><a href="#4-5-修改参数值" class="headerlink" title="4.5 修改参数值"></a>4.5 修改参数值</h3><blockquote>
<p>在设置中，找到参数模块，搜索COM_RC，则会看到如下信息显示</p>
</blockquote>
<p><img src="/2019/08/21/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88HIL%EF%BC%89/7.png" alt></p>
<p>（1）将其中的<strong>COM_RC_IN_MODE</strong>修改为 <strong>Joystick/No RC Check</strong>，因为我没有使用遥控器，因此修改的该值</p>
<p>（2）将其中的<strong>NAV_RCL_ACT</strong>修改为<strong>Hold mode</strong>或者<strong>Disabled</strong></p>
<blockquote>
<p>在设置中，找到安全模块，将HITL Enabled设置为Enabled，即启用HITL模式</p>
</blockquote>
<p><img src="/2019/08/21/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88HIL%EF%BC%89/8.png" alt></p>
<blockquote>
<p>在应用程序设置中，找到常规部分，取消选中除UDP外的所有框</p>
</blockquote>
<p><img src="/2019/08/21/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88HIL%EF%BC%89/11.png" alt></p>
<h2 id="五、测试pixhawk（SITL模式）"><a href="#五、测试pixhawk（SITL模式）" class="headerlink" title="五、测试pixhawk（SITL模式）"></a>五、测试pixhawk（SITL模式）</h2><h3 id="5-1-加载Airsim"><a href="#5-1-加载Airsim" class="headerlink" title="5.1 加载Airsim"></a>5.1 加载Airsim</h3><blockquote>
<p>在UE4界面中，选择播放，加载出无人机，此时可以看到，PX4已经成功连接</p>
<p>运行后，最后按shift + f1组合键，这样可以切换到其他窗口去</p>
</blockquote>
<p><img src="/2019/08/21/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88HIL%EF%BC%89/9.png" alt></p>
<h3 id="5-2-QGC起飞降落测试"><a href="#5-2-QGC起飞降落测试" class="headerlink" title="5.2 QGC起飞降落测试"></a>5.2 QGC起飞降落测试</h3><blockquote>
<p>在QGC中，选择起飞，并滑动确认，最终能看到UE4中的drone已经成功起飞</p>
</blockquote>
<p><img src="/2019/08/21/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88HIL%EF%BC%89/10.png" alt></p>
<p>这里就不演示降落过程</p>
<h3 id="5-3-QGC定点模式，虚拟摇杆测试"><a href="#5-3-QGC定点模式，虚拟摇杆测试" class="headerlink" title="5.3 QGC定点模式，虚拟摇杆测试"></a>5.3 QGC定点模式，虚拟摇杆测试</h3><h4 id="5-3-1-设置虚拟摇杆"><a href="#5-3-1-设置虚拟摇杆" class="headerlink" title="5.3.1 设置虚拟摇杆"></a>5.3.1 设置虚拟摇杆</h4><blockquote>
<p>在应用设置部分，找到常规模块，在其中的FlyView部分，在虚拟游戏手柄前的框勾选上</p>
</blockquote>
<p><img src="/2019/08/21/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88HIL%EF%BC%89/12.png" alt></p>
<h4 id="5-3-2-虚拟摇杆控制"><a href="#5-3-2-虚拟摇杆控制" class="headerlink" title="5.3.2 虚拟摇杆控制"></a>5.3.2 虚拟摇杆控制</h4><blockquote>
<p>首先将模式切换为定点Position，并且手动滑动却解锁。</p>
<p>然后使用左边的虚拟摇杆，完成上升、下降、转角等动作</p>
<p>右边的虚拟摇杆，完成前后左右控制等动作</p>
<p>最终将杆保持在中间，使其悬停</p>
</blockquote>
<p>下图中drone的位置，则是我使用虚拟摇杆控制飞行到当前位置的。</p>
<p><img src="/2019/08/21/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BPixhawk%E9%85%8D%E7%BD%AE%EF%BC%88HIL%EF%BC%89/13.png" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>关于在Windows下配置pixhawk，还相对来说比较好配置，但是在Linux下，还没有配置成功，明天再去配置最后一次。</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p><a href="https://dev.px4.io/v1.9.0/en/simulation/hitl.html">设置HITL</a></p>
</li>
<li><p><a href="https://docs.qgroundcontrol.com/en/PlanView/PlanView.html">QGC用户指南</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Airsim</category>
      </categories>
      <tags>
        <tag>Airsim</tag>
        <tag>PX4</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Airsim（四）之QGC、SITL、户外UE4场景配置</title>
    <url>/2019/07/10/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BQGC%E3%80%81SITL%E3%80%81%E6%88%B7%E5%A4%96UE4%E5%9C%BA%E6%99%AF%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>这篇博客，更多的是记录一下ubuntu下QGC的安装及使用，Airsim的SITL配置以及如何添加UE4的定制场景等。但是在Airsim的HITL配置方面还没有成功过</p>
</blockquote>
<h2 id="相关关键词"><a href="#相关关键词" class="headerlink" title="相关关键词"></a>相关关键词</h2><ul>
<li>QGC</li>
<li>SITL</li>
<li>PX4</li>
</ul>
<h2 id="一、PX4-SITL配置"><a href="#一、PX4-SITL配置" class="headerlink" title="一、PX4 SITL配置"></a>一、PX4 SITL配置</h2><h3 id="1-1-设置dialout用户"><a href="#1-1-设置dialout用户" class="headerlink" title="1.1 设置dialout用户"></a>1.1 设置dialout用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo usermod -a -G dialout $USER</span><br></pre></td></tr></table></figure>
<p>执行完后，注销，重新登录，重启更好</p>
<h3 id="1-2-安装Pixhawk-Nuttx（and-JMAVSim）"><a href="#1-2-安装Pixhawk-Nuttx（and-JMAVSim）" class="headerlink" title="1.2 安装Pixhawk/Nuttx（and JMAVSim）"></a>1.2 安装Pixhawk/Nuttx（and JMAVSim）</h3><blockquote>
<p>在桌面新建sh文件，并命名为：<code>ubuntu_sim_nuttx.sh</code></p>
</blockquote>
<p>点击<a href="https://raw.githubusercontent.com/PX4/Devguide/v1.9.0/build_scripts/ubuntu_sim_nuttx.sh">此处</a>，拷贝<code>ubuntu_sim_nuttx.sh</code>源代码，粘贴到刚才新建的<code>ubuntu_sim_nuttx.sh</code>文件中</p>
<p>修改权限，并执行sh文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chmod u+x ubuntu_sim_nuttx.sh</span><br><span class="line">./ubuntu_sim_nuttx.sh</span><br></pre></td></tr></table></figure>
<p>下载过程中，有些需要提示的地方进行确认，下载完成后，重启计算机</p>
<p><img src="/2019/07/10/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BQGC%E3%80%81SITL%E3%80%81%E6%88%B7%E5%A4%96UE4%E5%9C%BA%E6%99%AF%E9%85%8D%E7%BD%AE/1.png" alt></p>
<h3 id="1-3-获取PX4源码"><a href="#1-3-获取PX4源码" class="headerlink" title="1.3 获取PX4源码"></a>1.3 获取PX4源码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mkdir -p PX4</span><br><span class="line">cd PX4</span><br><span class="line">git clone https://github.com/PX4/Firmware.git</span><br><span class="line">cd Firmware</span><br><span class="line">git checkout v1<span class="number">.8</span><span class="number">.2</span>  </span><br></pre></td></tr></table></figure>
<h3 id="1-4-编译"><a href="#1-4-编译" class="headerlink" title="1.4 编译"></a>1.4 编译</h3><blockquote>
<p>要确保到 PX4/Fireware 目录下，然后执行如下命令进行编译</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make posix_sitl_ekf2  none_iris</span><br></pre></td></tr></table></figure>
<p>编译完成后，窗口会出现等待UDP连接的提示</p>
<p><img src="/2019/07/10/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BQGC%E3%80%81SITL%E3%80%81%E6%88%B7%E5%A4%96UE4%E5%9C%BA%E6%99%AF%E9%85%8D%E7%BD%AE/2.png" alt></p>
<h2 id="二、QGC和Mavros的安装"><a href="#二、QGC和Mavros的安装" class="headerlink" title="二、QGC和Mavros的安装"></a>二、QGC和Mavros的安装</h2><h3 id="2-1-QGC安装"><a href="#2-1-QGC安装" class="headerlink" title="2.1 QGC安装"></a>2.1 QGC安装</h3><p>（1）下载QGC</p>
<blockquote>
<p>下载QGC，请点击<a href="https://s3-us-west-2.amazonaws.com/qgroundcontrol/latest/QGroundControl.AppImage">此处</a></p>
</blockquote>
<p>（2）修改权限</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ~/Downloads</span><br><span class="line">chmod +x ./QGroundControl.AppImage</span><br></pre></td></tr></table></figure>
<p>（3）运行QGC</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">./QGroundControl.AppImage </span><br></pre></td></tr></table></figure>
<p>最终，会弹出QGC窗口</p>
<p><img src="/2019/07/10/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BQGC%E3%80%81SITL%E3%80%81%E6%88%B7%E5%A4%96UE4%E5%9C%BA%E6%99%AF%E9%85%8D%E7%BD%AE/3.png" alt></p>
<h3 id="2-2-mavros和mavlink的源码安装"><a href="#2-2-mavros和mavlink的源码安装" class="headerlink" title="2.2 mavros和mavlink的源码安装"></a>2.2 mavros和mavlink的源码安装</h3><h4 id="2-2-1-二进制安装方式"><a href="#2-2-1-二进制安装方式" class="headerlink" title="2.2.1 二进制安装方式"></a>2.2.1 二进制安装方式</h4><p>（1）安装mavros</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-mavros ros-kinetic-mavros-extras</span><br></pre></td></tr></table></figure>
<p>（2）安装GeographicLib</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/mavlink/mavros/master/mavros/scripts/install_geographiclib_datasets.sh</span><br><span class="line">chmod u+x ./install_geographiclib_datasets.sh</span><br><span class="line">sudo su</span><br><span class="line">proxychains4 ./install_geographiclib_datasets.sh</span><br></pre></td></tr></table></figure>
<h4 id="2-2-2-源码安装"><a href="#2-2-2-源码安装" class="headerlink" title="2.2.2 源码安装"></a>2.2.2 源码安装</h4><p>（1）创建工作空间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/catkin_ws/src</span><br><span class="line">cd ~/catkin_ws</span><br><span class="line">catkin build</span><br><span class="line">wstool init src</span><br></pre></td></tr></table></figure>
<p>（2）安装mavlink</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rosinstall_generator --rosdistro kinetic mavlink | tee /tmp/mavros.rosinstall</span><br></pre></td></tr></table></figure>
<p>（3）安装mavros</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rosinstall_generator --upstream mavros | tee -a /tmp/mavros.rosinstall</span><br></pre></td></tr></table></figure>
<p>（3）更新</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wstool merge -t src /tmp/mavros.rosinstall</span><br><span class="line">wstool update -t src -j4</span><br><span class="line">rosdep install --<span class="keyword">from</span>-paths src --ignore-src -y</span><br></pre></td></tr></table></figure>
<p>（4）安装GeograohicLib</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">proxychains4 ./src/mavros/mavros/scripts/install_geographiclib_datasets.sh</span><br></pre></td></tr></table></figure>
<p>（5）编译</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">catkin build</span><br></pre></td></tr></table></figure>
<p>（6）source</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">source devel/setup.bash</span><br></pre></td></tr></table></figure>
<h3 id="2-3-安装相关依赖包"><a href="#2-3-安装相关依赖包" class="headerlink" title="2.3 安装相关依赖包"></a>2.3 安装相关依赖包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-catkin-tools</span><br></pre></td></tr></table></figure>
<h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><blockquote>
<font color="red">首先，将前面所打开的所有UE4界面和终端窗口全部关掉</font>

</blockquote>
<h3 id="3-1-settions-json配置"><a href="#3-1-settions-json配置" class="headerlink" title="3.1 settions.json配置"></a>3.1 settions.json配置</h3><blockquote>
<p>需要将settion.json里面的配置修改为PX4配置</p>
<p>settions.json文件在~/Documents/Airsim目录下</p>
</blockquote>
<p>配置信息修改如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;SeeDocsAt&quot;</span>: <span class="string">&quot;https://github.com/Microsoft/AirSim/blob/master/docs/settings.md&quot;</span>,</span><br><span class="line">  <span class="string">&quot;SettingsVersion&quot;</span>: <span class="number">1.2</span>,</span><br><span class="line">  <span class="string">&quot;SimMode&quot;</span>:<span class="string">&quot;Multirotor&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Vehicles&quot;</span>:&#123;</span><br><span class="line">         <span class="string">&quot;PX4&quot;</span>:&#123;</span><br><span class="line">             	<span class="string">&quot;VehicleType&quot;</span>:<span class="string">&quot;PX4Multirotor&quot;</span>,</span><br><span class="line">             	<span class="string">&quot;UseSerial&quot;</span>:false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-SITL连接和QGC连接"><a href="#3-2-SITL连接和QGC连接" class="headerlink" title="3.2 SITL连接和QGC连接"></a>3.2 SITL连接和QGC连接</h3><p>（1）编译posix_sitl</p>
<blockquote>
<p>进入到PX4/Fireware目录下，编译</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">make posix_sitl_ekf2  none_iris</span><br></pre></td></tr></table></figure>
<p>编译完成后，等待UDP的链接</p>
<p>（2）打开QGC</p>
<blockquote>
<p>进入到  QGroundControl.AppImage 所在目录，打开QGC</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">./QGroundControl.AppImage</span><br></pre></td></tr></table></figure>
<p>打开后，也会等待无人机的连接</p>
<p>（3）打开UE4Editor</p>
<blockquote>
<p>双击运行  UnrealEngine/Engine/Binaries/Linux/UE4Editor 文件，选择之前添加的插件Blocks，原来的Rolling没有AirsimGameMode</p>
</blockquote>
<p><img src="/2019/07/10/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BQGC%E3%80%81SITL%E3%80%81%E6%88%B7%E5%A4%96UE4%E5%9C%BA%E6%99%AF%E9%85%8D%E7%BD%AE/4.png" alt></p>
<p>点击打开后，点击播放，加载出来后，会发现PX4 的UDP已经连接上，QGC也已经连接上</p>
<p><img src="/2019/07/10/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BQGC%E3%80%81SITL%E3%80%81%E6%88%B7%E5%A4%96UE4%E5%9C%BA%E6%99%AF%E9%85%8D%E7%BD%AE/5.png" alt></p>
<h3 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3 测试"></a>3.3 测试</h3><h4 id="3-3-1-QGC起飞测试"><a href="#3-3-1-QGC起飞测试" class="headerlink" title="3.3.1 QGC起飞测试"></a>3.3.1 QGC起飞测试</h4><blockquote>
<p>点击QGC的起飞按钮，并滑动确定，最终Multirotor会起飞</p>
</blockquote>
<p><img src="/2019/07/10/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BQGC%E3%80%81SITL%E3%80%81%E6%88%B7%E5%A4%96UE4%E5%9C%BA%E6%99%AF%E9%85%8D%E7%BD%AE/6.png" alt></p>
<h4 id="3-3-2-Firmware窗口命令起飞降落测试"><a href="#3-3-2-Firmware窗口命令起飞降落测试" class="headerlink" title="3.3.2 Firmware窗口命令起飞降落测试"></a>3.3.2 Firmware窗口命令起飞降落测试</h4><blockquote>
<p>在之前的等待UDP连接的窗口上输入命令测试</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">commander takeoff</span><br><span class="line">commander land</span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/10/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BQGC%E3%80%81SITL%E3%80%81%E6%88%B7%E5%A4%96UE4%E5%9C%BA%E6%99%AF%E9%85%8D%E7%BD%AE/7.png" alt></p>
<h4 id="3-3-3-ros命令测试"><a href="#3-3-3-ros命令测试" class="headerlink" title="3.3.3 ros命令测试"></a>3.3.3 ros命令测试</h4><blockquote>
<p>打开一个新终端，执行如下命令</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">roslaunch mavros px4.launch fcu_url:=<span class="string">&quot;udp://:14540@127.0.0.1:14557&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/10/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BQGC%E3%80%81SITL%E3%80%81%E6%88%B7%E5%A4%96UE4%E5%9C%BA%E6%99%AF%E9%85%8D%E7%BD%AE/8.png" alt></p>
<p>此时，可以通过调用service服务，来实现起飞</p>
<blockquote>
<p>打开新终端，执行下面命令，能执行起飞降落</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rosservice call /mavros/cmd/arming true</span><br><span class="line">rosservice call /mavros/cmd/takeoff -- <span class="number">0</span> <span class="number">0</span> <span class="number">47.6420</span> -<span class="number">122.1404</span> <span class="number">126.1</span></span><br><span class="line">rosservice call /mavros/cmd/land -- <span class="number">0</span> <span class="number">0</span> <span class="number">47.6420</span> -<span class="number">122.1404</span> <span class="number">123</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>rostopic list信息查看</p>
</blockquote>
<p><img src="/2019/07/10/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BQGC%E3%80%81SITL%E3%80%81%E6%88%B7%E5%A4%96UE4%E5%9C%BA%E6%99%AF%E9%85%8D%E7%BD%AE/9.png" alt></p>
<blockquote>
<p>rosservice 命令结果输出</p>
<p>输出要为true才有效</p>
</blockquote>
<p><img src="/2019/07/10/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BQGC%E3%80%81SITL%E3%80%81%E6%88%B7%E5%A4%96UE4%E5%9C%BA%E6%99%AF%E9%85%8D%E7%BD%AE/10.png" alt></p>
<h2 id="四、添加城市道路场景"><a href="#四、添加城市道路场景" class="headerlink" title="四、添加城市道路场景"></a>四、添加城市道路场景</h2><blockquote>
<p>Airsim有一些关于UE4的城市道路场景，但是在linux下我成功加载的目前只有两个，总共没测试过几个，能成功加载的是Africa、和Neighborhood，其中有加载过关于City的，但是这是两个zip.001这样的文件组成的，目前还没有解压成功（Linux下），在windows下应该能成功解压</p>
<font color="red">在打开下载的这些场景时，setting.json的配置信息不能修改为SITL的配置，为最初始的默认配置即可</font>

</blockquote>
<p>（1）下载场景</p>
<blockquote>
<p>下载场景，请点击<a href="https://github.com/Microsoft/AirSim/releases">此处</a></p>
</blockquote>
<p><img src="/2019/07/10/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BQGC%E3%80%81SITL%E3%80%81%E6%88%B7%E5%A4%96UE4%E5%9C%BA%E6%99%AF%E9%85%8D%E7%BD%AE/11.png" alt></p>
<p>（2）加载场景</p>
<blockquote>
<p>首先下载的场景，要为如下的文件结构才行</p>
<p>windows的场景为exe文件，linux下的为sh文件，如果没有sh文件这样，则不能加载</p>
</blockquote>
<p><img src="/2019/07/10/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BQGC%E3%80%81SITL%E3%80%81%E6%88%B7%E5%A4%96UE4%E5%9C%BA%E6%99%AF%E9%85%8D%E7%BD%AE/12.png" alt></p>
<p>在新终端执行如下命令加载（进入到AirSimNH.sh文件所在目录）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">./AirSimNH.sh</span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/10/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BQGC%E3%80%81SITL%E3%80%81%E6%88%B7%E5%A4%96UE4%E5%9C%BA%E6%99%AF%E9%85%8D%E7%BD%AE/13.png" alt></p>
<blockquote>
<p>同理，Africa的场景也是同样的方式</p>
</blockquote>
<h2 id="五、SITL与-sh文件不兼容"><a href="#五、SITL与-sh文件不兼容" class="headerlink" title="五、SITL与.sh文件不兼容"></a>五、SITL与.sh文件不兼容</h2><blockquote>
<p>如果下载了github上提供的AirSimNH.sh环境，并运行sh文件时，将会出现<strong>第四部分</strong>的图片，但是却不能设置SITL，这样就很难受</p>
</blockquote>
<p>通过浏览多方资料，发现了其可能的解决办法（未尝试，但是应该是没问题的），<a href="https://github.com/microsoft/AirSim/issues/1359">这个解释挺好的</a>。通过浏览Airsim上的<a href="https://github.com/microsoft/AirSim/blob/master/docs/unreal_custenv.md">doc</a>文档，看到了其他的相关的UE4场景，并且有免费的可以下载，具体步骤参照<a href="https://www.youtube.com/watch?v=y09VbdQWvQY&amp;feature=">教学视频</a>。本来准备下载的，结果在windows没有下载下来，也就没有测试。其中的两个UE4场景下载网址分别为：</p>
<ul>
<li><p><a href="https://www.cgtrader.com/items/50844/download-page#">cgtrader</a></p>
</li>
<li><p><a href="https://www.turbosquid.com/3d-model/city?min_price=0&amp;max_price=0">TURBOSQUID</a></p>
</li>
</ul>
<p>因此，只要在UE4的商城上，去下载<a href="https://www.unrealengine.com/marketplace/zh-CN/slug/modular-neighborhood-pack">AirSimNH</a>的环境，这样就下载了AirSimNH.uproject插件，就可以在UE4Editor中添加uproject插件，并且配置SITL控制了。但是其环境，是需要购买的。消费就是另一个问题了。</p>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><ul>
<li>PX4 SITL配置：<a href="https://github.com/microsoft/AirSim/blob/master/docs/px4_sitl.md">Airsim Github官网</a></li>
<li>QGC安装：<a href="https://docs.qgroundcontrol.com/en/getting_started/download_and_install.html">QGC官网</a></li>
<li>Mavros安装：<a href="http://dev.px4.io/en/ros/mavros_installation.html">mavos官网</a></li>
<li>settings配置：<a href="https://github.com/microsoft/AirSim/blob/master/docs/settings.md">github文档</a></li>
<li>roslaunch测试：<a href="http://dev.px4.io/en/simulation/ros_interface.html">PX4官网</a></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>总的来说，Airsim的SITL配置没有问题，但是要使用SITL时，必须打开UE4Editor，然后自己定义场景，而不能使用已经下载好的.sh场景，这个已经测试过。如果要是用城市道路场景，则在setting.json里面一定不能配置PX4的信息。</p>
<p>目前Airsim的HITL配置没有成功，主要是用的Pixhawk进行的测试，并且没有使用遥控器，在linux下不能利用QGC完成起飞，但是在Windows下可以</p>
<p>SITL或HITL都是利用mavros来完成通信的，这个可能会暂时告一段落，后面会自己利用Airsim提供的API，自己去写ROS节点，利用ROS来实现控制，并且可以利用ROS的通信机制，来完成另种方式的HITL控制</p>
</blockquote>
]]></content>
      <categories>
        <category>Airsim</category>
      </categories>
      <tags>
        <tag>Airsim</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>初始Carla（一）之Carla预编译版安装使用</title>
    <url>/2019/07/25/Carla/%E5%88%9D%E5%A7%8BCarla%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BCarla%E9%A2%84%E7%BC%96%E8%AF%91%E7%89%88%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>Carla和Airsim都是基于UE4引擎的仿真模拟器，但是经过安装笔记，Carla的源码安装是真的比Airsim复杂很多，因为之前源码安装的失败了，因此这里先记录如何使用预编译版的Carla</p>
</blockquote>
<h2 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h2><ul>
<li><strong>Ubuntu16.04</strong></li>
<li><strong>CARLA_0.9.6</strong></li>
</ul>
<blockquote>
<p>后面的安装步骤都是在刚装完ubuntu系统基础之上安装的，因此有一些基础的python包也会进行安装，并且<strong>这里是已经配置了Ubuntu下终端翻墙的，所以在安装时最好也是已经配置好，这样在下载一个软件包什么的都比较快，能节省不少时间</strong></p>
</blockquote>
<h2 id="一、安装GPU显卡驱动"><a href="#一、安装GPU显卡驱动" class="headerlink" title="一、安装GPU显卡驱动"></a>一、安装GPU显卡驱动</h2><blockquote>
<p>因为我这里用的是比较差的显卡，GT730，因此安装的是384驱动</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:graphics-drivers/ppa</span><br><span class="line">sudo proxychains4 apt-get install nvidia-384 nvidia-settings nvidia-prime</span><br><span class="line">sudo proxychains4 apt-get install mesa-common-dev</span><br><span class="line">sudo proxychains4 apt-get install freeglut3-dev</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
<p>安装完并重启后，输入nvidia-smi则会有信息输出</p>
<p><img src="/2019/07/25/Carla/%E5%88%9D%E5%A7%8BCarla%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BCarla%E9%A2%84%E7%BC%96%E8%AF%91%E7%89%88%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/4.png" alt></p>
<h2 id="二、下载Carla压缩文件"><a href="#二、下载Carla压缩文件" class="headerlink" title="二、下载Carla压缩文件"></a>二、下载Carla压缩文件</h2><blockquote>
<p><a href="https://github.com/carla-simulator/carla">carla</a>官方github</p>
</blockquote>
<p>点击<a href="https://github.com/carla-simulator/carla/releases">此处</a>，进入到Carla的下载界面，此时有两种方式进行下载，下载Carla0.9.6，大概有3个G左右</p>
<ul>
<li><p><strong>网页下载：</strong>直接点击CARLA_0.9.6.ta.gz，但是这种下载网络较慢</p>
<p><img src="/2019/07/25/Carla/%E5%88%9D%E5%A7%8BCarla%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BCarla%E9%A2%84%E7%BC%96%E8%AF%91%E7%89%88%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/1.png" alt></p>
</li>
<li><p><strong>终端下载：</strong>利用翻墙下载，速度快很多，能达到3M/s左右</p>
<p>首先，右键CARLA_0.9.6.tar.gz，复制LinkLocation</p>
<p><img src="/2019/07/25/Carla/%E5%88%9D%E5%A7%8BCarla%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BCarla%E9%A2%84%E7%BC%96%E8%AF%91%E7%89%88%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/2.png" alt></p>
<p>然后，打开终端，执行如下命令下载</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains4 wget http://carla-assets-internal.s3.amazonaws.com/Releases/Linux/CARLA_0.9.6.tar.gz</span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/25/Carla/%E5%88%9D%E5%A7%8BCarla%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BCarla%E9%A2%84%E7%BC%96%E8%AF%91%E7%89%88%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/3.png" alt></p>
<h2 id="三、解压文件"><a href="#三、解压文件" class="headerlink" title="三、解压文件"></a>三、解压文件</h2><blockquote>
<p>用右键解压下载的CARLA_0.9.6.tar.gz文件，并解压到home目录</p>
</blockquote>
<h2 id="四、Carla使用"><a href="#四、Carla使用" class="headerlink" title="四、Carla使用"></a>四、Carla使用</h2><h3 id="4-1-Python包的安装"><a href="#4-1-Python包的安装" class="headerlink" title="4.1 Python包的安装"></a>4.1 Python包的安装</h3><h4 id="4-1-1-setuptools安装"><a href="#4-1-1-setuptools安装" class="headerlink" title="4.1.1 setuptools安装"></a>4.1.1 setuptools安装</h4><blockquote>
<p>采用源码安装方式，<a href="https://pypi.org/project/setuptools/#files">下载地址</a>，下载zip文件，下载完后解压并进去到该解压目录</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure>
<h4 id="4-1-2-pip安装"><a href="#4-1-2-pip安装" class="headerlink" title="4.1.2 pip安装"></a>4.1.2 pip安装</h4><blockquote>
<p> 源码安装pip，<a href="https://pypi.org/project/pip/#files">下载地址</a>，下载.tar.gz文件，下载完后解压，并进入到该解压目录</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo python setup.py build</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure>
<p>​    <img src="/2019/07/25/Carla/%E5%88%9D%E5%A7%8BCarla%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BCarla%E9%A2%84%E7%BC%96%E8%AF%91%E7%89%88%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/5.png" alt>    </p>
<h4 id="4-1-3-pip安装其他包"><a href="#4-1-3-pip安装其他包" class="headerlink" title="4.1.3 pip安装其他包"></a>4.1.3 pip安装其他包</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo proxychains4 pip install pygame</span><br><span class="line">sudo proxychains4 pip install numpy</span><br></pre></td></tr></table></figure>
<h4 id="4-1-4-安装libpng"><a href="#4-1-4-安装libpng" class="headerlink" title="4.1.4 安装libpng"></a>4.1.4 安装libpng</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libpng16-16</span><br></pre></td></tr></table></figure>
<h4 id="4-1-5-安装PythonAPI依赖（Carla相关）"><a href="#4-1-5-安装PythonAPI依赖（Carla相关）" class="headerlink" title="4.1.5 安装PythonAPI依赖（Carla相关）"></a>4.1.5 安装PythonAPI依赖（Carla相关）</h4><blockquote>
<p>找到到之前解压的Carla文件夹，并进入到<code>~/CARLA_0.9.6/PythonAPI/carla/dist</code>目录下</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo easy_install carla-0.9.6-py2.7-linux-x86_64.egg </span><br></pre></td></tr></table></figure>
<h3 id="4-2-Carla验证使用"><a href="#4-2-Carla验证使用" class="headerlink" title="4.2 Carla验证使用"></a>4.2 Carla验证使用</h3><ul>
<li><p>在Carla0.9.6文件夹下运行./CarlaUE4.sh</p>
<p>全局视角</p>
<p><img src="/2019/07/25/Carla/%E5%88%9D%E5%A7%8BCarla%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BCarla%E9%A2%84%E7%BC%96%E8%AF%91%E7%89%88%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/6.png" alt></p>
</li>
<li><p>在PythonAPI/examples下运行 matual_control.py</p>
<p>汽车的第三视角</p>
</li>
</ul>
<p><img src="/2019/07/25/Carla/%E5%88%9D%E5%A7%8BCarla%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BCarla%E9%A2%84%E7%BC%96%E8%AF%91%E7%89%88%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/7.png" alt></p>
<p>在pygame windows上就能用键盘去控制了</p>
<h2 id="五、Carla的五种城市地图切换"><a href="#五、Carla的五种城市地图切换" class="headerlink" title="五、Carla的五种城市地图切换"></a>五、Carla的五种城市地图切换</h2><blockquote>
<p>使用的是0.9.5版本，0.9.6版本的好像有点问题，只需要下载0.9.5，并且easy_install 0.9.5版本的PythonPAI依赖包就可以了</p>
</blockquote>
<ul>
<li><p><strong>Town01</strong> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./CarlaUE4.sh  /Game/Carla/Maps/Town01</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="/2019/07/25/Carla/%E5%88%9D%E5%A7%8BCarla%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BCarla%E9%A2%84%E7%BC%96%E8%AF%91%E7%89%88%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/8.png" alt></p>
<ul>
<li><p><strong>Town02</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./CarlaUE4.sh  /Game/Carla/Maps/Town02</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="/2019/07/25/Carla/%E5%88%9D%E5%A7%8BCarla%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BCarla%E9%A2%84%E7%BC%96%E8%AF%91%E7%89%88%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/9.png" alt></p>
<ul>
<li><p><strong>Town03</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./CarlaUE4.sh  /Game/Carla/Maps/Town03</span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/25/Carla/%E5%88%9D%E5%A7%8BCarla%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BCarla%E9%A2%84%E7%BC%96%E8%AF%91%E7%89%88%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/10.png" alt></p>
</li>
<li><p><strong>Town04</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./CarlaUE4.sh  /Game/Carla/Maps/Town04</span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/25/Carla/%E5%88%9D%E5%A7%8BCarla%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BCarla%E9%A2%84%E7%BC%96%E8%AF%91%E7%89%88%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/11.png" alt></p>
</li>
<li><p><strong>Town05</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./CarlaUE4.sh  /Game/Carla/Maps/Town05</span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/25/Carla/%E5%88%9D%E5%A7%8BCarla%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BCarla%E9%A2%84%E7%BC%96%E8%AF%91%E7%89%88%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/12.png" alt></p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>Carla的预编译版安装就比较简单，也不需要下载UE4，并进行编译等等。初步将Carla加载出来了，后面就可以写代码进行测试，并进行源码的安装测试</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.jianshu.com/p/a255bd23beb5">Carla0.9.5简单高效安装方法</a></li>
</ul>
]]></content>
      <categories>
        <category>Carla</category>
      </categories>
      <tags>
        <tag>Unreal Engine</tag>
        <tag>Carla</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + Github创建博客过程中踩过的坑</title>
    <url>/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h1 id="一、系统环境配置"><a href="#一、系统环境配置" class="headerlink" title="一、系统环境配置"></a>一、系统环境配置</h1><h2 id="要使用Hexo，需要在系统中支持Nodejs以及Git"><a href="#要使用Hexo，需要在系统中支持Nodejs以及Git" class="headerlink" title="要使用Hexo，需要在系统中支持Nodejs以及Git"></a>要使用Hexo，需要在系统中支持Nodejs以及Git</h2><h3 id="1、安装Node-js"><a href="#1、安装Node-js" class="headerlink" title="1、安装Node.js"></a>1、安装Node.js</h3><p><a href="https://nodejs.org/zh-cn/download/">Node.js官网</a></p>
<p>​        打开cmd命令行，输入node -v和npm -v，成功界面如下</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/Nodejs.png" alt="logo"></p>
<h3 id="2、安装Git"><a href="#2、安装Git" class="headerlink" title="2、安装Git"></a>2、安装Git</h3><p><a href="https://git-scm.com/download/">Git官网</a></p>
<p>​        安装成功后，在电脑桌面任意空白位置，右键，出现以下界面（自行配置环境）</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/Git.png" alt="logo"></p>
<h1 id><a href="#" class="headerlink" title=" "></a> </h1><h1 id="二、Github配置"><a href="#二、Github配置" class="headerlink" title="二、Github配置"></a>二、Github配置</h1><h2 id="前提条件：已经拥有一个github账号，并已成功登陆"><a href="#前提条件：已经拥有一个github账号，并已成功登陆" class="headerlink" title="前提条件：已经拥有一个github账号，并已成功登陆"></a>前提条件：已经拥有一个github账号，并已成功登陆</h2><h3 id="1、点击【New-repository】，创建一个版本仓库"><a href="#1、点击【New-repository】，创建一个版本仓库" class="headerlink" title="1、点击【New repository】，创建一个版本仓库"></a>1、点击【New repository】，创建一个版本仓库</h3><p>​        注：仓库名称必须为username.github.io，我这里的username为ldgcug</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/new_repository.png" alt="logo"></p>
<h3 id="2、创建完成后，在项目右侧，有个【Settings按钮】，点击【Settings按钮】，向下滑到【GitHub-Pages】位置，能在这里发现一个网址，并且可以通过外网访问"><a href="#2、创建完成后，在项目右侧，有个【Settings按钮】，点击【Settings按钮】，向下滑到【GitHub-Pages】位置，能在这里发现一个网址，并且可以通过外网访问" class="headerlink" title="2、创建完成后，在项目右侧，有个【Settings按钮】，点击【Settings按钮】，向下滑到【GitHub Pages】位置，能在这里发现一个网址，并且可以通过外网访问"></a>2、创建完成后，在项目右侧，有个【Settings按钮】，点击【Settings按钮】，向下滑到【GitHub Pages】位置，能在这里发现一个网址，并且可以通过外网访问</h3><p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/Github_Pages.png" alt="logo"></p>
<h1 id="三、安装Hexo并配置"><a href="#三、安装Hexo并配置" class="headerlink" title="三、安装Hexo并配置"></a>三、安装Hexo并配置</h1><h3 id="安装Hexo，在自己认为合适的地方创建文件夹，如：我是在D盘创建了一个blog文件夹，然后通过cmd命令行进入到该文件夹里面"><a href="#安装Hexo，在自己认为合适的地方创建文件夹，如：我是在D盘创建了一个blog文件夹，然后通过cmd命令行进入到该文件夹里面" class="headerlink" title="安装Hexo，在自己认为合适的地方创建文件夹，如：我是在D盘创建了一个blog文件夹，然后通过cmd命令行进入到该文件夹里面"></a>安装Hexo，在自己认为合适的地方创建文件夹，如：我是在D盘创建了一个blog文件夹，然后通过cmd命令行进入到该文件夹里面</h3><p>​        输入  npm install hexo -g ，开始安装Hexo</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/blog.png" alt="logo"></p>
<p>​        安装成功后，输入   hexo -v，能看到版本号</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/hexo_version.png" alt="logo"></p>
<p>​        输入 hexo init，初始化该文件夹（此处不显示图片过程）</p>
<p>​        输入  npm install ，安装所需要的组件</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/npm_install.png" alt="logo"></p>
<p>​        输入  hexo g，体验Hexo</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/hexo_g.png" alt="logo"></p>
<p>​        输入 hexo s，开启服务器，访问<a href="http://localhost:4000，正式体验Hexo">http://localhost:4000，正式体验Hexo</a></p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/hexo_s.png" alt="logo"></p>
<p>​        出现下图，则安装成功</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/hexo_interface.png" alt="logo"></p>
<h1 id="四、Hexo与Github-Pages联系起来"><a href="#四、Hexo与Github-Pages联系起来" class="headerlink" title="四、Hexo与Github Pages联系起来"></a>四、Hexo与Github Pages联系起来</h1><blockquote>
<p>说明：下面的所有操作都在博客根目录下执行，使用git bash窗口</p>
</blockquote>
<h3 id="1、设置Git的user-name-和email（如果第一次配置）"><a href="#1、设置Git的user-name-和email（如果第一次配置）" class="headerlink" title="1、设置Git的user name 和email（如果第一次配置）"></a>1、设置Git的user name 和email（如果第一次配置）</h3><p>​        注：将用户名和邮箱换成自己的用户名和邮箱</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/git_set.png" alt="logo"></p>
<h3 id="2、输入-ssh-keygen-t-rsa-C-“569167692-qq-com”，连续三个回车，生成密钥，查看自己的文件存储路径（默认路径为：C-Users-Administrator-ssh）"><a href="#2、输入-ssh-keygen-t-rsa-C-“569167692-qq-com”，连续三个回车，生成密钥，查看自己的文件存储路径（默认路径为：C-Users-Administrator-ssh）" class="headerlink" title="2、输入  ssh-keygen -t rsa -C “569167692@qq.com”，连续三个回车，生成密钥，查看自己的文件存储路径（默认路径为：C:\Users\Administrator\.ssh）"></a>2、输入  ssh-keygen -t rsa -C “569167692@qq.com”，连续三个回车，生成密钥，查看自己的文件存储路径（默认路径为：C:\Users\Administrator\.ssh）</h3><p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/ssh_keygen.png" alt="logo"></p>
<p>​        输入   eval “$(ssh-agent -s)”  ，添加密钥到 ssh-agent</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/ssh_key.png" alt="logo"></p>
<p>​        输入  ssh-add ~/.ssh/id_rsa  ，添加生成的SSH key 到 ssh-agent</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/ssh_sshkey.png" alt="logo"></p>
<p>​        输入 cd ~/.ssh，检查是否有.ssh文件夹，若没有，则进入C:\Users\Administrator\.ssh</p>
<p>​        输入 ls，查看.ssh文件夹下文件（第一次没有known_hosts文件）</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/ssh_file.png" alt="logo"></p>
<p>​        进入./ssh文件夹下，打开   id_rsa.pub文件，将其中的内容复制到缓存中</p>
<p>​        登陆Github，点击【头像】下的【setting】，点击左侧的【SSH  and GPG keys】，点击【New SSH key】，将刚才复制的 id_rsa.pub 文件复制到Key中，添加ssh</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/github_ssh.png" alt="logo"></p>
<p>​        输入  ssh -T git@github.com  ，测试添加ssh是否成功，如果看到Hi 后面是你的用户名，则添加成功</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/ssh_t.png" alt="logo"></p>
<h3 id="3、配置Deployment，在blog文件夹中，找到-config-yml文件，修改repo值（在文件末尾）"><a href="#3、配置Deployment，在blog文件夹中，找到-config-yml文件，修改repo值（在文件末尾）" class="headerlink" title="3、配置Deployment，在blog文件夹中，找到_config.yml文件，修改repo值（在文件末尾）"></a>3、配置Deployment，在blog文件夹中，找到_config.yml文件，修改repo值（在文件末尾）</h3><blockquote>
<p>下图中，需要将repository更改为你自己的github.io</p>
</blockquote>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/config_yaml.png" alt="logo"></p>
<p>​        其中，repo的值在github项目里的ssh中（注意使用SSH，而不是HTTPS）</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/github_repo.png" alt="logo"></p>
<p>​        注：在_config_yaml文件中，type、repo、branch文件后面有一个空格，即上图中添加的代码会变成绿色，最开始没有空格时，遇到了很多的坑</p>
<h1 id="五、新建博客"><a href="#五、新建博客" class="headerlink" title="五、新建博客"></a>五、新建博客</h1><blockquote>
<p>所有的命令操作都在博客根目录下执行</p>
</blockquote>
<h3 id="1、在cmd-命令种安装扩展"><a href="#1、在cmd-命令种安装扩展" class="headerlink" title="1、在cmd 命令种安装扩展"></a>1、在cmd 命令种安装扩展</h3><p>​        输入 ：  npm install hexo-deployer-git —save</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/hexo_chajian.png" alt="logo"></p>
<h3 id="2、新建博客"><a href="#2、新建博客" class="headerlink" title="2、新建博客"></a>2、新建博客</h3><p>​        在git bash窗口中，执行命令：  hexo new post “博客名”</p>
<p>​        会发现在soucrce\_posts 文件下，多出刚创建的博客.md</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/new_blog.png" alt="logo"></p>
<h3 id="3、md编辑器（Typora编辑器）"><a href="#3、md编辑器（Typora编辑器）" class="headerlink" title="3、md编辑器（Typora编辑器）"></a>3、md编辑器（Typora编辑器）</h3><p>&gt;<br>&gt;</p>
<blockquote>
<p>在<a href="https://typora.io/">Typora官网</a>上下载Typora编辑器，使用Typora编辑器对md文件进行编辑  </p>
</blockquote>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/Typora.png" alt></p>
<h3 id="4、部署发布"><a href="#4、部署发布" class="headerlink" title="4、部署发布"></a>4、部署发布</h3><p>​        使用编辑器编辑好文章后，使用命令： hexo d -g ，就可以生成和部署了</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/deploy_bloh.png" alt="logo"></p>
<p>​        部署成功后，访问你的地址：http//用户名.github.io 。就能看到刚生成的文章。</p>
<p><img src="/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/blog_contents.png" alt="logo"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之theme主题配置</title>
    <url>/2019/05/14/Hexo/Hexo%E4%B9%8Btheme%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="说明：每一个大标题结尾都有一个参考链接，出现问题时，请参考其参考链接"><a href="#说明：每一个大标题结尾都有一个参考链接，出现问题时，请参考其参考链接" class="headerlink" title="说明：每一个大标题结尾都有一个参考链接，出现问题时，请参考其参考链接"></a>说明：每一个大标题结尾都有一个参考链接，出现问题时，请参考其参考链接</h1><h1 id="一、下载-Hexo主题"><a href="#一、下载-Hexo主题" class="headerlink" title="一、下载 Hexo主题"></a>一、下载 Hexo主题</h1><h2 id="1、到官网选择自己喜欢的Hexo主题"><a href="#1、到官网选择自己喜欢的Hexo主题" class="headerlink" title="1、到官网选择自己喜欢的Hexo主题"></a>1、到官网选择<a href="https://hexo.io/themes/">自己喜欢的Hexo主题</a></h2><p><img src="/2019/05/14/Hexo/Hexo%E4%B9%8Btheme%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/hexo_theme.png" alt="logo"></p>
<h2 id="2、下载-NextT主题"><a href="#2、下载-NextT主题" class="headerlink" title="2、下载 NextT主题"></a>2、下载 NextT主题</h2><blockquote>
<p>在git bash窗口上，输入如下命令：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd &lt;博客存放的目录&gt;</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将主题克隆到theme目录下后，会在其目录下发现多出一个next文件夹</p>
<p>注：若需要下载其他主题，只需要在上面的代码中，将next更改为其他主题名称即可</p>
</blockquote>
<p><img src="/2019/05/14/Hexo/Hexo%E4%B9%8Btheme%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/theme.png" alt></p>
<h2 id="参考网址：https-www-jianshu-com-p-33bc0a0a6e90-tdsourcetag-s-pctim-aiomsg"><a href="#参考网址：https-www-jianshu-com-p-33bc0a0a6e90-tdsourcetag-s-pctim-aiomsg" class="headerlink" title="参考网址：https://www.jianshu.com/p/33bc0a0a6e90?tdsourcetag=s_pctim_aiomsg"></a>参考网址：<a href="https://www.jianshu.com/p/33bc0a0a6e90?tdsourcetag=s_pctim_aiomsg">https://www.jianshu.com/p/33bc0a0a6e90?tdsourcetag=s_pctim_aiomsg</a></h2><h1 id="二、NexT主题配置"><a href="#二、NexT主题配置" class="headerlink" title="二、NexT主题配置"></a>二、NexT主题配置</h1><blockquote>
<ul>
<li>在 Hexo中有两份主要的配置文件，其名称都是 _config.yml。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</li>
<li>为了描述方便，在以下说明中，将前者称为<strong>站点配置文件</strong>， 后者称为<strong>主题配置文件</strong>。</li>
<li>以下所有终端执行的命令都在你的 Hexo 根目录下</li>
</ul>
</blockquote>
<h2 id="1、基本信息配置"><a href="#1、基本信息配置" class="headerlink" title="1、基本信息配置"></a>1、基本信息配置</h2><blockquote>
<p>基本信息包括：博客标题、作者、描述、语言等等。</p>
</blockquote>
<p>打开 <strong>站点配置文件</strong> ，找到Site模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: 标题</span><br><span class="line">subtitle: 副标题</span><br><span class="line">description: 描述</span><br><span class="line">author: 作者</span><br><span class="line">language: 语言（简体中文是zh-Hans）</span><br><span class="line">timezone: 网站时区（Hexo 默认使用您电脑的时区，不用写）</span><br></pre></td></tr></table></figure>
<p>我的配置如下：</p>
<p><img src="/2019/05/14/Hexo/Hexo%E4%B9%8Btheme%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/site.png" alt></p>
<h2 id="2、菜单设置"><a href="#2、菜单设置" class="headerlink" title="2、菜单设置"></a>2、菜单设置</h2><blockquote>
<p>菜单包括：首页、归档、分类、标签、关于等等</p>
</blockquote>
<p>我们刚开始默认的菜单只有首页和归档两个，不能够满足我们的要求，所以需要添加菜单，打开 <strong>主题配置文件</strong> 找到<code>Menu Settings</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home                          //首页</span><br><span class="line">  archives: /archives/ || archive          //归档</span><br><span class="line">  categories: /categories/ || th           //分类</span><br><span class="line">  tags: /tags/ || tags                     //标签</span><br><span class="line">  about: /about/ || user                   //关于</span><br><span class="line">  #schedule: /schedule/ || calendar        //日程表</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap        //站点地图</span><br><span class="line">  #commonweal: /404/ || heartbeat          //公益404</span><br></pre></td></tr></table></figure>
<p>我的配置如下：</p>
<p><img src="/2019/05/14/Hexo/Hexo%E4%B9%8Btheme%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/menu.png" alt></p>
<h2 id="3、Next主题样式设置"><a href="#3、Next主题样式设置" class="headerlink" title="3、Next主题样式设置"></a>3、Next主题样式设置</h2><p>打开 <strong>主题配置文件</strong> 找到<code>Scheme Settings</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line"># scheme: Muse</span><br><span class="line"># scheme: Mist</span><br><span class="line"># scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>
<p>我选择的是Gemini风格</p>
<h2 id="4、侧栏设置"><a href="#4、侧栏设置" class="headerlink" title="4、侧栏设置"></a>4、侧栏设置</h2><blockquote>
<p>侧栏设置包括：侧栏位置、侧栏显示与否、文章间距、返回顶部按钮等等</p>
</blockquote>
<p>打开 <strong>主题配置文件</strong> 找到<code>sidebar</code>字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line"># Sidebar Position - 侧栏位置（只对Pisces | Gemini两种风格有效）</span><br><span class="line">  position: left        //靠左放置</span><br><span class="line">  #position: right      //靠右放置</span><br><span class="line"></span><br><span class="line"># Sidebar Display - 侧栏显示时机（只对Muse | Mist两种风格有效）</span><br><span class="line">  #display: post        //默认行为，在文章页面（拥有目录列表）时显示</span><br><span class="line">  display: always       //在所有页面中都显示</span><br><span class="line">  #display: hide        //在所有页面中都隐藏（可以手动展开）</span><br><span class="line">  #display: remove      //完全移除</span><br><span class="line"></span><br><span class="line">  offset: 12            //文章间距（只对Pisces | Gemini两种风格有效）</span><br><span class="line"></span><br><span class="line">  b2t: false            //返回顶部按钮（只对Pisces | Gemini两种风格有效）</span><br><span class="line"></span><br><span class="line">  scrollpercent: true   //返回顶部按钮的百分比</span><br></pre></td></tr></table></figure>
<h2 id="5、头像设置"><a href="#5、头像设置" class="headerlink" title="5、头像设置"></a>5、头像设置</h2><p>打开 <strong>主题配置文件</strong> 找到<code>Sidebar Avatar</code>字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar: /images/header.jpg</span><br></pre></td></tr></table></figure>
<p>这是头像的路径，只需把你的头像命名为<code>header.jpg</code>（随便命名）放入<code>themes/next/source/images</code>中，将<code>avatar</code>的路径名改成你的头像名就OK啦！</p>
<p><img src="/2019/05/14/Hexo/Hexo%E4%B9%8Btheme%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/header.png" alt></p>
<h2 id="6、设置RSS（后面可以在继续操作，目前还存在问题，这里不显示操作步骤，详细看后面的参考链接）"><a href="#6、设置RSS（后面可以在继续操作，目前还存在问题，这里不显示操作步骤，详细看后面的参考链接）" class="headerlink" title="6、设置RSS（后面可以在继续操作，目前还存在问题，这里不显示操作步骤，详细看后面的参考链接）"></a>6、设置RSS（后面可以在继续操作，目前还存在问题，这里不显示操作步骤，详细看后面的参考链接）</h2><h2 id="7、添加分类模块"><a href="#7、添加分类模块" class="headerlink" title="7、添加分类模块"></a>7、添加分类模块</h2><p>1、新建一个分类页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure>
<p>2、你会发现你的<code>source</code>文件夹下有了<code>categorcies/index.md</code>，打开<code>index.md</code>文件将title设置为<code>title: 分类</code></p>
<p>目录结构如下：</p>
<p><img src="/2019/05/14/Hexo/Hexo%E4%B9%8Btheme%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/categories.png" alt></p>
<p>3、把文章归入分类只需在文章的顶部标题下方添加<code>categories</code>字段，即可自动创建分类名并加入对应的分类中</p>
<p>举个栗子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: 分类测试文章标题</span><br><span class="line">categories: 分类名</span><br></pre></td></tr></table></figure>
<h2 id="8、添加标签模块"><a href="#8、添加标签模块" class="headerlink" title="8、添加标签模块"></a>8、添加标签模块</h2><p>1、新建一个标签页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>
<p>2、你会发现你的<code>source</code>文件夹下有了<code>tags/index.md</code>，打开<code>index.md</code>文件将title设置为<code>title: 标签</code></p>
<p>3、把文章添加标签只需在文章的顶部标题下方添加<code>tags</code>字段，即可自动创建标签名并归入对应的标签中</p>
<p>举个栗子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: 标签测试文章标题</span><br><span class="line">tags: </span><br><span class="line">  - 标签1</span><br><span class="line">  - 标签2</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<h2 id="9、添加关于模块"><a href="#9、添加关于模块" class="headerlink" title="9、添加关于模块"></a>9、添加关于模块</h2><p>1、新建一个关于页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new page about</span><br></pre></td></tr></table></figure>
<p>2、你会发现你的<code>source</code>文件夹下有了<code>about/index.md</code>，打开<code>index.md</code>文件即可编辑关于你的信息，可以随便编辑。</p>
<h2 id="10、添加搜索功能"><a href="#10、添加搜索功能" class="headerlink" title="10、添加搜索功能"></a>10、添加搜索功能</h2><p>1、安装 <a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fflashlab%2Fhexo-generator-search">hexo-generator-searchdb</a> 插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>2、打开 <strong>站点配置文件</strong> 找到<code>Extensions</code>在下面添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 搜索</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
<p>我的配置如下：</p>
<p><img src="/2019/05/14/Hexo/Hexo%E4%B9%8Btheme%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/search.png" alt></p>
<p>3、打开 <strong>主题配置文件</strong> 找到<code>Local search</code>，将<code>enable</code>设置为<code>true</code></p>
<h2 id="11、设置后博客界面"><a href="#11、设置后博客界面" class="headerlink" title="11、设置后博客界面"></a>11、设置后博客界面</h2><p><img src="/2019/05/14/Hexo/Hexo%E4%B9%8Btheme%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/blog.png" alt></p>
<h2 id="参考链接：https-www-jianshu-com-p-3a05351a37dc-tdsourcetag-s-pctim-aiomsg"><a href="#参考链接：https-www-jianshu-com-p-3a05351a37dc-tdsourcetag-s-pctim-aiomsg" class="headerlink" title="参考链接：https://www.jianshu.com/p/3a05351a37dc?tdsourcetag=s_pctim_aiomsg"></a>参考链接：<a href="https://www.jianshu.com/p/3a05351a37dc?tdsourcetag=s_pctim_aiomsg">https://www.jianshu.com/p/3a05351a37dc?tdsourcetag=s_pctim_aiomsg</a></h2><h1 id="三、访问统计及数字统计"><a href="#三、访问统计及数字统计" class="headerlink" title="三、访问统计及数字统计"></a>三、访问统计及数字统计</h1><h2 id="1、数字统计"><a href="#1、数字统计" class="headerlink" title="1、数字统计"></a>1、数字统计</h2><blockquote>
<p>显示文章字数统计、阅读时长、总字数</p>
</blockquote>
<ul>
<li>安装插件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在 <strong>主题配置文件</strong> 中，搜索关键字 <code>post_wordcount</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  #字数统计</span><br><span class="line">  wordcount: true</span><br><span class="line">  #预览时间</span><br><span class="line">  min2read: true</span><br><span class="line">  #总字数,显示在页面底部</span><br><span class="line">  totalcount: false</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure>
<h2 id="2、访问统计"><a href="#2、访问统计" class="headerlink" title="2、访问统计"></a>2、访问统计</h2><blockquote>
<h3 id="LeabCloud-文章阅读量"><a href="#LeabCloud-文章阅读量" class="headerlink" title="LeabCloud - 文章阅读量"></a>LeabCloud - 文章阅读量</h3></blockquote>
<ul>
<li>注册 <a href="https://leancloud.cn/">LeabCloud</a>，<code>访问控制台</code> ，<code>创建应用</code> ，新应用名称可任意填写，选择“开发板”创建应用。创建完成之后点击新创建的应用的名字来打开应用参数配置界面，并点击点击左侧右上角的齿轮图标，新建Class，如下图所示：</li>
</ul>
<p><img src="/2019/05/14/Hexo/Hexo%E4%B9%8Btheme%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/leabclound.png" alt></p>
<ul>
<li>创建完成之后，左侧数据栏应该会多出一栏名为 <code>Counter</code> 的栏目，这个时候我们点击设置，切换到test应用的操作界面。在弹出的界面中，选择左侧的 <code>应用Key</code> 选项，即可发现我们创建应用的 <code>AppID</code> 以及 <code>AppKey</code> ，有了它，我们就有权限能够通过主题中配置好的Javascript代码与这个应用的Counter表进行数据存取操作了。</li>
</ul>
<p><img src="/2019/05/14/Hexo/Hexo%E4%B9%8Btheme%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/count.png" alt></p>
<ul>
<li>在 <strong>主题配置文件</strong> 中，搜索关键字 <code>leancloud_visitors</code> ，将 <code>false</code> 改为 <code>true</code> ，并复制粘贴上述的 <code>AppID</code>以及 <code>AppKey</code></li>
</ul>
<p><img src="/2019/05/14/Hexo/Hexo%E4%B9%8Btheme%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/theme_visitiors.png" alt></p>
<p>需要特别说明的是：记录文章访问量的唯一标识符是文章的发布日期以及文章的标题，因此请确保这两个数值组合的唯一性，如果你更改了这两个数值，会造成文章阅读数值的清零重计。</p>
<ul>
<li>Web 安全。因为 AppID 以及 AppKey 是暴露在外的，因此如果一些别有用心之人知道了之后用于其它目的是得不偿失的，为了确保只用于我们自己的博客，建议开启 Web 安全选项，这样就只能通过我们自己的域名才有权访问后台的数据了，可以进一步提升安全性。</li>
</ul>
<p>选择应用的设置的 <code>安全中心</code> 选项卡:</p>
<p>在 <code>Web 安全域名</code> 中填入我们自己的博客域名，来确保数据调用的安全。</p>
<h2 id="3、图形显示"><a href="#3、图形显示" class="headerlink" title="3、图形显示"></a>3、图形显示</h2><p><img src="/2019/05/14/Hexo/Hexo%E4%B9%8Btheme%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/count_show.png" alt></p>
<h2 id="参考链接：http-dinghongkai-com-2017-12-19-Blog-development-5-NexT-Theme-Advanced-Customization"><a href="#参考链接：http-dinghongkai-com-2017-12-19-Blog-development-5-NexT-Theme-Advanced-Customization" class="headerlink" title="参考链接：http://dinghongkai.com/2017/12/19/Blog-development-5-NexT-Theme-Advanced-Customization/"></a>参考链接：<a href="http://dinghongkai.com/2017/12/19/Blog-development-5-NexT-Theme-Advanced-Customization/">http://dinghongkai.com/2017/12/19/Blog-development-5-NexT-Theme-Advanced-Customization/</a></h2>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo图片显示和Github上图片显示的解决办法</title>
    <url>/2019/05/14/Hexo/Hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E5%92%8CGithub%E4%B8%8A%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h1 id="1、配置-config-yml文件"><a href="#1、配置-config-yml文件" class="headerlink" title="1、配置_config.yml文件"></a>1、配置_config.yml文件</h1><h3 id="找到博客根目录下的-config-yml，如我的文件路径为-D-blog-config-yml"><a href="#找到博客根目录下的-config-yml，如我的文件路径为-D-blog-config-yml" class="headerlink" title="找到博客根目录下的 _config.yml，如我的文件路径为 D:\blog\_config.yml"></a>找到博客根目录下的 _config.yml，如我的文件路径为 D:\blog\_config.yml</h3><h3 id="打开-config-yml，查找-post-asset-folder字段，将post-asset-floder设置为true。如下图"><a href="#打开-config-yml，查找-post-asset-folder字段，将post-asset-floder设置为true。如下图" class="headerlink" title="打开_config.yml，查找 post_asset_folder字段，将post_asset_floder设置为true。如下图"></a>打开_config.yml，查找 post_asset_folder字段，将post_asset_floder设置为true。如下图</h3><p><img src="/2019/05/14/Hexo/Hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E5%92%8CGithub%E4%B8%8A%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/config.png" alt="logo"></p>
<h1 id="2、post-asset-folder-设置为true和false的区别"><a href="#2、post-asset-folder-设置为true和false的区别" class="headerlink" title="2、post_asset_folder 设置为true和false的区别"></a>2、post_asset_folder 设置为true和false的区别</h1><h3 id="当post-asset-folder设置为true后，使用命令：hexo-new-post-“新博客名称”-，创建新博客时，Hexo会自动建立一个与文章同名的文件夹，如下图"><a href="#当post-asset-folder设置为true后，使用命令：hexo-new-post-“新博客名称”-，创建新博客时，Hexo会自动建立一个与文章同名的文件夹，如下图" class="headerlink" title="当post_asset_folder设置为true后，使用命令：hexo new post “新博客名称” ，创建新博客时，Hexo会自动建立一个与文章同名的文件夹，如下图"></a>当post_asset_folder设置为true后，使用命令：hexo new post “新博客名称” ，创建新博客时，Hexo会自动建立一个与文章同名的文件夹，如下图</h3><p><img src="/2019/05/14/Hexo/Hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E5%92%8CGithub%E4%B8%8A%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/same_name_file.png" alt="logo"></p>
<h1 id="3、安装插件"><a href="#3、安装插件" class="headerlink" title="3、安装插件"></a>3、安装插件</h1><h3 id="打开git-bash，进入到博客的根目录下（如：cd-d-blog-），执行命令：npm-install-https-github-com-CodeFalling-hexo-asset-image—save-，完成插件的安装"><a href="#打开git-bash，进入到博客的根目录下（如：cd-d-blog-），执行命令：npm-install-https-github-com-CodeFalling-hexo-asset-image—save-，完成插件的安装" class="headerlink" title="打开git bash，进入到博客的根目录下（如：cd d/blog/），执行命令：npm install https://github.com/CodeFalling/hexo-asset-image—save  ，完成插件的安装"></a>打开git bash，进入到博客的根目录下（如：cd d/blog/），执行命令：npm install <a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2FCodeFalling%2Fhexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a>—save  ，完成插件的安装</h3><h1 id="4、图片存放"><a href="#4、图片存放" class="headerlink" title="4、图片存放"></a>4、图片存放</h1><h3 id="将所有图片资源都放到对应的文件夹下（如：Hexo图片显示和Github上图片显示的解决办法）"><a href="#将所有图片资源都放到对应的文件夹下（如：Hexo图片显示和Github上图片显示的解决办法）" class="headerlink" title="将所有图片资源都放到对应的文件夹下（如：Hexo图片显示和Github上图片显示的解决办法）"></a>将所有图片资源都放到对应的文件夹下（如：Hexo图片显示和Github上图片显示的解决办法）</h3><h3 id><a href="#" class="headerlink" title></a><img src="/2019/05/14/Hexo/Hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E5%92%8CGithub%E4%B8%8A%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/sub_same_name.png" alt="logo"></h3><h1 id="5、本地查看显示效果"><a href="#5、本地查看显示效果" class="headerlink" title="5、本地查看显示效果"></a>5、本地查看显示效果</h1><h3 id="使用-hexo-s-命令，运行本地博客，成功显示图片如下图"><a href="#使用-hexo-s-命令，运行本地博客，成功显示图片如下图" class="headerlink" title="使用 hexo s 命令，运行本地博客，成功显示图片如下图"></a>使用 hexo s 命令，运行本地博客，成功显示图片如下图</h3><p><img src="/2019/05/14/Hexo/Hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E5%92%8CGithub%E4%B8%8A%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/local_blog.png" alt="logo"></p>
<h1 id="6、上传github并显示"><a href="#6、上传github并显示" class="headerlink" title="6、上传github并显示"></a>6、上传github并显示</h1><h3 id="使用-hexo-g-d-，重新生成并上传，浏览器输入https-ldgcug-github-io-即可查看效果"><a href="#使用-hexo-g-d-，重新生成并上传，浏览器输入https-ldgcug-github-io-即可查看效果" class="headerlink" title="使用 hexo g -d ，重新生成并上传，浏览器输入https://ldgcug.github.io 即可查看效果"></a>使用 hexo g -d ，重新生成并上传，浏览器输入<a href="https://ldgcug.github.io">https://ldgcug.github.io</a> 即可查看效果</h3><p><img src="/2019/05/14/Hexo/Hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E5%92%8CGithub%E4%B8%8A%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/github_blog.png" alt="logo"></p>
<h1 id="遇到过的坑："><a href="#遇到过的坑：" class="headerlink" title="遇到过的坑："></a>遇到过的坑：</h1><h2 id="（1）图片的路径问题"><a href="#（1）图片的路径问题" class="headerlink" title="（1）图片的路径问题"></a>（1）图片的路径问题</h2><blockquote>
<p>图片加载格式：由两部分组成（![图片描述]  + (图片路径)）</p>
</blockquote>
<h2 id="输入-logo-图片路径-，（由于正确加载，前面的输入会变成一个图片，因此在-logo-（图片路径）中间加了一个空格，正确输入时，应去掉空格）会出现一个输入图片路径的提示，从文件中选择路径后如下图"><a href="#输入-logo-图片路径-，（由于正确加载，前面的输入会变成一个图片，因此在-logo-（图片路径）中间加了一个空格，正确输入时，应去掉空格）会出现一个输入图片路径的提示，从文件中选择路径后如下图" class="headerlink" title="输入![logo] (图片路径)，（由于正确加载，前面的输入会变成一个图片，因此在[logo] （图片路径）中间加了一个空格，正确输入时，应去掉空格）会出现一个输入图片路径的提示，从文件中选择路径后如下图"></a>输入![logo] (图片路径)，（由于正确加载，前面的输入会变成一个图片，因此在[logo] （图片路径）中间加了一个空格，正确输入时，应去掉空格）会出现一个输入图片路径的提示，从文件中选择路径后如下图</h2><p><img src="/2019/05/14/Hexo/Hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E5%92%8CGithub%E4%B8%8A%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image_path.png" alt="logo"></p>
<h2 id="此时，用该绝对路径上传到github后，输入https-ldgcug-github-io-，会发现，图片无法加载"><a href="#此时，用该绝对路径上传到github后，输入https-ldgcug-github-io-，会发现，图片无法加载" class="headerlink" title="此时，用该绝对路径上传到github后，输入https://ldgcug.github.io/，会发现，图片无法加载"></a>此时，用该绝对路径上传到github后，输入<a href="https://ldgcug.github.io/">https://ldgcug.github.io/</a>，会发现，图片无法加载</h2><h2 id="解决方法：将绝对路径改为相对路径"><a href="#解决方法：将绝对路径改为相对路径" class="headerlink" title="解决方法：将绝对路径改为相对路径"></a>解决方法：将绝对路径改为相对路径</h2><p><img src="/2019/05/14/Hexo/Hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E5%92%8CGithub%E4%B8%8A%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image_real_path.png" alt="logo"></p>
<h2 id="（2）图片的命名问题"><a href="#（2）图片的命名问题" class="headerlink" title="（2）图片的命名问题"></a>（2）图片的命名问题</h2><blockquote>
<p>不能使用”_”作为开头</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>不蒜子访客人数统计和博客运行时间显示</title>
    <url>/2019/05/15/Hexo/%E4%B8%8D%E8%92%9C%E5%AD%90%E8%AE%BF%E5%AE%A2%E4%BA%BA%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%92%8C%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<h1 id="一、Hexo页脚增加网站运行时间统计"><a href="#一、Hexo页脚增加网站运行时间统计" class="headerlink" title="一、Hexo页脚增加网站运行时间统计"></a>一、Hexo页脚增加网站运行时间统计</h1><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote>
<p>1、找到  <font color="red">\themes\next\layout\_partials\ </font>下的  <font color="red">footer.swig</font>文件</p>
<p>2、在以下位置插入所示代码  </p>
</blockquote>
<p><img src="/2019/05/15/Hexo/%E4%B8%8D%E8%92%9C%E5%AD%90%E8%AE%BF%E5%AE%A2%E4%BA%BA%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%92%8C%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA/time.png" alt></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;span id=<span class="string">&quot;sitetime&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">javascript</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="keyword">function</span> <span class="title">siteTime</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">window</span>.setTimeout(<span class="string">&quot;siteTime()&quot;</span>, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> seconds = <span class="number">1000</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> minutes = seconds * <span class="number">60</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> hours = minutes * <span class="number">60</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> days = hours * <span class="number">24</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> years = days * <span class="number">365</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> todayYear = today.getFullYear();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> todayMonth = today.getMonth()+<span class="number">1</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> todayDate = today.getDate();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> todayHour = today.getHours();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> todayMinute = today.getMinutes();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> todaySecond = today.getSeconds();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">/* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">    year - 作为date对象的年份，为4位年份值</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">    month - 0-11之间的整数，做为date对象的月份</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">    day - 1-31之间的整数，做为date对象的天数</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">    hours - 0(午夜24点)-23之间的整数，做为date对象的小时数</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">    minutes - 0-59之间的整数，做为date对象的分钟数</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">    seconds - 0-59之间的整数，做为date对象的秒数</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">    microseconds - 0-999之间的整数，做为date对象的毫秒数 */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> t1 = <span class="built_in">Date</span>.UTC(<span class="number">2019</span>,<span class="number">05</span>,<span class="number">14</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>); <span class="comment">//这里调整博客建站时间，时间：2019-05-14 00:00:00</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> t2 = <span class="built_in">Date</span>.UTC(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> diff = t2-t1;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> diffYears = <span class="built_in">Math</span>.floor(diff/years);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> diffDays = <span class="built_in">Math</span>.floor((diff/days)-diffYears*<span class="number">365</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> diffHours = <span class="built_in">Math</span>.floor((diff-(diffYears*<span class="number">365</span>+diffDays)*days)/hours);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> diffMinutes = <span class="built_in">Math</span>.floor((diff-(diffYears*<span class="number">365</span>+diffDays)*days-diffHours*hours)/minutes);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> diffSeconds = <span class="built_in">Math</span>.floor((diff-(diffYears*<span class="number">365</span>+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;sitetime&quot;</span>).innerHTML=<span class="string">&quot; 已运行&quot;</span>+<span class="comment">/*diffYears+&quot; 年 &quot;+*/</span>diffDays+<span class="string">&quot; 天 &quot;</span>+diffHours+<span class="string">&quot; 小时 &quot;</span>+diffMinutes+<span class="string">&quot; 分钟 &quot;</span>+diffSeconds+<span class="string">&quot; 秒&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;<span class="comment">/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  siteTime();</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>3、结果显示</p>
</blockquote>
<p><img src="/2019/05/15/Hexo/%E4%B8%8D%E8%92%9C%E5%AD%90%E8%AE%BF%E5%AE%A2%E4%BA%BA%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%92%8C%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA/time_show.png" alt></p>
<h2 id="转载：https-xian6ge-cn-posts-82ce1911"><a href="#转载：https-xian6ge-cn-posts-82ce1911" class="headerlink" title="转载：https://xian6ge.cn/posts/82ce1911/"></a>转载：<a href="https://xian6ge.cn/posts/82ce1911/">https://xian6ge.cn/posts/82ce1911/</a></h2><h1 id="二、Hexo-页脚-不蒜子访客统计"><a href="#二、Hexo-页脚-不蒜子访客统计" class="headerlink" title="二、Hexo 页脚  不蒜子访客统计"></a>二、Hexo 页脚  不蒜子访客统计</h1><blockquote>
<p>在百度和谷歌上搜索过太多的Hexo 访问统计，但很多博客都不能显示人数，终于不负有心人，找到了一个可以实现 Hexo 页脚访问统计的网址，<a href="https://hexo-guide.readthedocs.io/zh_CN/latest/index.html">Hexo指南</a>网址提供的文档能访问</p>
</blockquote>
<h3 id="1、添加代码"><a href="#1、添加代码" class="headerlink" title="1、添加代码"></a>1、添加代码</h3><p>找到  <font color="red">\themes\next\layout\_partials\ </font>下的  <font color="red">footer.swig</font>文件，在如下位置插入代码</p>
<p><img src="/2019/05/15/Hexo/%E4%B8%8D%E8%92%9C%E5%AD%90%E8%AE%BF%E5%AE%A2%E4%BA%BA%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%92%8C%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA/count_visitor.png" alt></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span></span><br><span class="line">      本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span></span><br><span class="line">      本站访客数<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>人次</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2、说明"><a href="#2、说明" class="headerlink" title="2、说明"></a>2、说明</h3><blockquote>
<p>安装脚本</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>显示站点总访问量</p>
</blockquote>
<p>（1）<code>pv</code>：单个用户连续点击<code>n</code>篇文章，记录<code>n</code>次访问量</p>
<p>（2）<code>uv</code>：单个用户连续点击<code>n</code>篇文章，只记录<code>1</code>次访客数</p>
<p><code>pv</code>方式加入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span></span><br><span class="line">    本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>nv</code>方式加入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span></span><br><span class="line">    本站访客数<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>人次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="转载：https-hexo-guide-readthedocs-io-zh-CN-latest-third-service-E4-B8-8D-E8-92-9C-E5-AD-90-E8-AE-BF-E5-AE-A2-E4-BA-BA-E6-95-B0-html"><a href="#转载：https-hexo-guide-readthedocs-io-zh-CN-latest-third-service-E4-B8-8D-E8-92-9C-E5-AD-90-E8-AE-BF-E5-AE-A2-E4-BA-BA-E6-95-B0-html" class="headerlink" title="转载：https://hexo-guide.readthedocs.io/zh_CN/latest/third-service/[%E4%B8%8D%E8%92%9C%E5%AD%90]%E8%AE%BF%E5%AE%A2%E4%BA%BA%E6%95%B0.html"></a>转载：<a href="https://hexo-guide.readthedocs.io/zh_CN/latest/third-service/[不蒜子]访客人数.html">https://hexo-guide.readthedocs.io/zh_CN/latest/third-service/[%E4%B8%8D%E8%92%9C%E5%AD%90]%E8%AE%BF%E5%AE%A2%E4%BA%BA%E6%95%B0.html</a></h2>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>新电脑上移植旧电脑上博客笔记</title>
    <url>/2019/06/09/Hexo/%E6%96%B0%E7%94%B5%E8%84%91%E4%B8%8A%E7%A7%BB%E6%A4%8D%E6%97%A7%E7%94%B5%E8%84%91%E4%B8%8A%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="在新的电脑上移植旧电脑博客"><a href="#在新的电脑上移植旧电脑博客" class="headerlink" title="在新的电脑上移植旧电脑博客"></a>在新的电脑上移植旧电脑博客</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote>
<p>由于一些需要，有时可能需要在新的电脑上继续原来的工作，如博客整理、github本地文件等等，但这篇笔记只用来记录博客整理部分~</p>
</blockquote>
<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1、拷贝博客项目"><a href="#1、拷贝博客项目" class="headerlink" title="1、拷贝博客项目"></a>1、拷贝博客项目</h3><blockquote>
<p>将整个博客项目文件拷贝到新的电脑上，如旧电脑存放在D盘根目录，这里新电脑也同样的存放在D盘根目录</p>
</blockquote>
<h3 id="2、相关软件安装"><a href="#2、相关软件安装" class="headerlink" title="2、相关软件安装"></a>2、相关软件安装</h3><h4 id="2-1、安装Node-js"><a href="#2-1、安装Node-js" class="headerlink" title="2.1、安装Node.js"></a>2.1、安装Node.js</h4><blockquote>
<p><a href="https://nodejs.org/zh-cn/download/">Node.js官网</a></p>
</blockquote>
<p>安装完后，在cmd命令行窗口中输入 <code>node -v</code> 和 <code>npm -v</code>，即可查看是否安装成功</p>
<h4 id="2-2、安装Git"><a href="#2-2、安装Git" class="headerlink" title="2.2、安装Git"></a>2.2、安装Git</h4><blockquote>
<p><a href="https://git-scm.com/download/">Git官网</a></p>
</blockquote>
<p>说明：下载的时候，不确定是否要翻墙，我在下载的过程中，打开了vpn，没打开的时候，下载的网页打不开。</p>
<h4 id="2-3、安装hexo并配置"><a href="#2-3、安装hexo并配置" class="headerlink" title="2.3、安装hexo并配置"></a>2.3、安装hexo并配置</h4><blockquote>
<p>以下所有命令安装都在cmd命令窗口执行</p>
</blockquote>
<p>（1）在cmd窗口中，进入到博客根目录下，如：cd d:blog</p>
<p>（2）输入<code>npm install hexo -g</code>，安装hexo</p>
<p>（3）输入<code>npm install</code>，安装所需组件</p>
<h2 id="二、Hexo与Github配置"><a href="#二、Hexo与Github配置" class="headerlink" title="二、Hexo与Github配置"></a>二、Hexo与Github配置</h2><blockquote>
<p>说明：下面的所有操作都在博客根目录下执行，使用git bash窗口</p>
</blockquote>
<h3 id="1、设置Git的user-name-和email"><a href="#1、设置Git的user-name-和email" class="headerlink" title="1、设置Git的user name 和email"></a>1、设置Git的user name 和email</h3><p>在窗口中分别输入如下两行代码（注意将username和email改为自己的）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;ldgcug&quot;</span><br><span class="line">git config --global user.email &quot;569167692@qq.com&quot;</span><br></pre></td></tr></table></figure>
<h3 id="2、生成秘钥"><a href="#2、生成秘钥" class="headerlink" title="2、生成秘钥"></a>2、生成秘钥</h3><p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C “569167692@qq.com”</span><br></pre></td></tr></table></figure>
<p>在输出的提示符中，连续输入三个回车即可</p>
<h3 id="3、添加秘钥"><a href="#3、添加秘钥" class="headerlink" title="3、添加秘钥"></a>3、添加秘钥</h3><p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval “$(ssh-agent -s)”</span><br></pre></td></tr></table></figure>
<p>将秘钥添加到ssh-agent</p>
<h3 id="4、添加github的ssh秘钥"><a href="#4、添加github的ssh秘钥" class="headerlink" title="4、添加github的ssh秘钥"></a>4、添加github的ssh秘钥</h3><p>（1）在 <code>C:\Users\Administrator\.ssh</code>文件夹下，找到<code>id_rsa.pub</code>并打开，复制其中的内容</p>
<p>（2）登陆Github，点击【头像】下的【setting】，点击左侧的【SSH and GPG keys】，点击【New SSH key】，将刚才复制的 id_rsa.pub 文件内容复制到Key中，添加ssh</p>
<h3 id="5、测试github的ssh秘钥"><a href="#5、测试github的ssh秘钥" class="headerlink" title="5、测试github的ssh秘钥"></a>5、测试github的ssh秘钥</h3><p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com </span><br></pre></td></tr></table></figure>
<p>如果看到Hi 后面是你的用户名，则添加成功</p>
<h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><p>在git bash窗口中，进入到博客根目录</p>
<p>先随便新建一篇笔记，随便写点内容</p>
<p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>待窗口中有内容输入后，然后在浏览器上输入<a href="http://localhost:4000/">http://localhost:4000</a></p>
<p>若要上传到github更新的话，则输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>GPU Tensorflow 安装</title>
    <url>/2019/05/21/Linux/GPU-Tensorflow-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<blockquote>
<p>此安装过程仅在Ubuntu16下安装测试</p>
</blockquote>
<h2 id="1、安装nvidia显卡驱动"><a href="#1、安装nvidia显卡驱动" class="headerlink" title="1、安装nvidia显卡驱动"></a>1、安装nvidia显卡驱动</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:graphics-drivers/ppa</span><br></pre></td></tr></table></figure>
<h2 id="2、查看可安装的驱动版本"><a href="#2、查看可安装的驱动版本" class="headerlink" title="2、查看可安装的驱动版本"></a>2、查看可安装的驱动版本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ ubuntu-drivers devices</span><br></pre></td></tr></table></figure>
<p><img src="/2019/05/21/Linux/GPU-Tensorflow-%E5%AE%89%E8%A3%85/drivers.png" alt></p>
<h2 id="3、选择推荐版本号进行安装"><a href="#3、选择推荐版本号进行安装" class="headerlink" title="3、选择推荐版本号进行安装"></a>3、选择推荐版本号进行安装</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install nvidia-<span class="number">390</span> nvidia-settings nvidia-prime</span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：我在安装的电脑上推荐的版本是390，因此使用的是390安装</p>
<p>但上图推荐的是430，在安装过程中需要更改为430，如：nvidia-430</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install mesa-common-dev</span><br><span class="line">$ sudo apt-get install freeglut3-dev</span><br><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure>
<h2 id="4、安装cuda"><a href="#4、安装cuda" class="headerlink" title="4、安装cuda"></a>4、安装cuda</h2><blockquote>
<p>从<a href="https://developer.nvidia.com/cuda-90-download-archive?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1604&amp;target_type=runfilelocal">cuda官网</a>下载run文件，下载完后，执行下面代码命令</p>
</blockquote>
<p><img src="/2019/05/21/Linux/GPU-Tensorflow-%E5%AE%89%E8%A3%85/cuda.png" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ cd Downloads</span><br><span class="line">$ sudo sh cuda_9<span class="number">.0</span><span class="number">.176_384</span><span class="number">.81</span>_linux.run </span><br></pre></td></tr></table></figure>
<h2 id="5、下载cudnn及安装cudnn"><a href="#5、下载cudnn及安装cudnn" class="headerlink" title="5、下载cudnn及安装cudnn"></a>5、下载cudnn及安装cudnn</h2><blockquote>
<p><a href="https://developer.nvidia.com/cudnn">cudnn官网</a>下载，下载7.5版本，对应CUDA9.0</p>
<p>百度云盘下载：</p>
<p>链接: <a href="https://pan.baidu.com/s/1cFoaZj_FRmQGXFneg9NL2A">https://pan.baidu.com/s/1cFoaZj_FRmQGXFneg9NL2A</a> 提取码: 2a1v </p>
</blockquote>
<p>我这里是从云盘上下载，官网下载也差不多执行下面步骤</p>
<blockquote>
<p>下载完后解压，并进到该解压文件所在目录</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo cp cuda/include/cudnn.h /usr/local/cuda/include</span><br><span class="line">$ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64</span><br><span class="line">$ sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure>
<h2 id="6、配置cuda环境"><a href="#6、配置cuda环境" class="headerlink" title="6、配置cuda环境"></a>6、配置cuda环境</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo gedit ~/.bashrc</span><br><span class="line">在最后添加如下两行代码</span><br><span class="line">$ export PATH=/usr/local/cuda-<span class="number">9.0</span>/<span class="built_in">bin</span>:$PATH</span><br><span class="line">$ export LD_LIBRARY_PATH=/usr/local/cuda-<span class="number">9.0</span>/lib64:$LD_LIBRARY_PATH</span><br><span class="line">$ source ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>~/.bashrc相关的配置如下图</p>
<p><img src="/2019/05/21/Linux/GPU-Tensorflow-%E5%AE%89%E8%A3%85/source.png" alt></p>
<h2 id="7、安装gpu-tensorflow"><a href="#7、安装gpu-tensorflow" class="headerlink" title="7、安装gpu-tensorflow"></a>7、安装gpu-tensorflow</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ pip install tensorflow-gpu==<span class="number">1.6</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：当安装1.6版本的tensorflow时，如果报错，可以尝试将版本降低，如改为 tensorflow-gpu==1.5 或 tensorflow-gpu==1.3</p>
</blockquote>
<h2 id="8、测试tensorflow安装成功与否"><a href="#8、测试tensorflow安装成功与否" class="headerlink" title="8、测试tensorflow安装成功与否"></a>8、测试tensorflow安装成功与否</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在python环境下输入import tensorflow，不报错，即安装成功</span><br></pre></td></tr></table></figure>
<h2 id="其他可能帮助信息"><a href="#其他可能帮助信息" class="headerlink" title="其他可能帮助信息"></a>其他可能帮助信息</h2><h3 id="cuda、cudnn版本对应关系"><a href="#cuda、cudnn版本对应关系" class="headerlink" title="cuda、cudnn版本对应关系"></a>cuda、cudnn版本对应关系</h3><p><a href="https://www.tensorflow.org/install/source#tested_source_configurations">https://www.tensorflow.org/install/source#tested_source_configurations</a></p>
<p><img src="/2019/05/21/Linux/GPU-Tensorflow-%E5%AE%89%E8%A3%85/cuda_cudnn.png" alt></p>
<h3 id="查看GPU显卡型号和驱动版本"><a href="#查看GPU显卡型号和驱动版本" class="headerlink" title="查看GPU显卡型号和驱动版本"></a>查看GPU显卡型号和驱动版本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ lspci | grep -i nvidia</span><br><span class="line">$ sudo dpkg --<span class="built_in">list</span> | grep nvidia-*</span><br><span class="line">网址：https://www.nvidia.cn/Download/driverResults.aspx/<span class="number">137427</span>/cn</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在服务器上安装时需要注意的事项</p>
<p>参考网址：<a href="https://blog.csdn.net/QLULIBIN/article/details/78714596">https://blog.csdn.net/QLULIBIN/article/details/78714596</a></p>
<p>（1）在安装cuda时，需要关闭图形化界面（ctrl+alt+F2键）</p>
<p>（2）在出现的选项里，关于opengl的选择选择no，其他的选accept或yes。</p>
<p>（3）如果在重启之后，可能在登陆界面一直循环往复，可能也需要到命令界面，切换为intel显卡</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下 Python2 与 Python3 版本切换</title>
    <url>/2019/05/17/Linux/Linux%E4%B8%8B-Python2-%E4%B8%8E-Python3-%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<blockquote>
<p>说明：在Linux系统下，Python默认版本为2.7，但在使用过程中，可能经常需要使用Python3，因此，通过在网上的一系列搜索，找出了Python2与Python3的切换方法</p>
</blockquote>
<h1 id="一、添加软连接"><a href="#一、添加软连接" class="headerlink" title="一、添加软连接"></a>一、添加软连接</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo update-alternatives --install /usr/<span class="built_in">bin</span>/python python /usr/<span class="built_in">bin</span>/python2 <span class="number">100</span></span><br><span class="line">$ sudo update-alternatives --install /usr/<span class="built_in">bin</span>/python python /usr/<span class="built_in">bin</span>/python3 <span class="number">150</span></span><br></pre></td></tr></table></figure>
<h1 id="二、版本切换"><a href="#二、版本切换" class="headerlink" title="二、版本切换"></a>二、版本切换</h1><blockquote>
<p>输入如下命令后，在提示信息里面输入对应数字即可实现切换</p>
<p>添加过软连接后，以后需要切换python版本只用输入如下命令</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo update-alternatives --config python</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow相关问题和配置集锦</title>
    <url>/2019/05/30/Linux/Tensorflow%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E5%92%8C%E9%85%8D%E7%BD%AE%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在做人工智能相关的训练方面，离不开Tensorflow，但是在安装或配置过程中都会遇到过一些问题，并且在做某一些特定的事也会有些小问题</p>
</blockquote>
<h2 id="一、配置方面"><a href="#一、配置方面" class="headerlink" title="一、配置方面"></a>一、配置方面</h2><h3 id="1、Tensorflow指定CPU训练"><a href="#1、Tensorflow指定CPU训练" class="headerlink" title="1、Tensorflow指定CPU训练"></a>1、Tensorflow指定CPU训练</h3><blockquote>
<p>在机器上进行训练时，有时候可能出现多个python程序在训练的情况，并且其他人使用的是GPU训练，而这时我在使用GPU训练会报错误，此时，可以在程序中添加代码以指定CPU进行训练，添加代码如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">os.environ[&quot;CUDA_DEVICE_ORDER&quot;] = &quot;PCI_BUS_ID&quot;  </span><br><span class="line">os.environ[&quot;CUDA_VISIBLE_DEVICES&quot;] = &quot;-1&quot;</span><br></pre></td></tr></table></figure>
<p>参考网址：<a href="https://blog.csdn.net/qq_35559420/article/details/81460912">网址1</a></p>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16下GPU Tensorflow安装详细步骤</title>
    <url>/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>以往的GPU Tensorflow安装都是在服务器上安装，并且步骤不太详细，这一次，是认为比较详细的一步步的安装方法，有了这个笔记，以后参照这个应该就能很快的安装好Tensorflow了</p>
</blockquote>
<h2 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h2><ul>
<li>系统：Ubuntu16.04</li>
<li>CUDA版本：cuda10.0</li>
<li>cuDNN版本：cudnn7.4.2</li>
<li>Tensorflow版本：tensorflow1.13.1</li>
</ul>
<h2 id="Linux下-CUDA-cuDNN-Tensorflow-对应关系"><a href="#Linux下-CUDA-cuDNN-Tensorflow-对应关系" class="headerlink" title="Linux下 CUDA cuDNN Tensorflow 对应关系"></a>Linux下 CUDA cuDNN Tensorflow 对应关系</h2><p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/19.png" alt></p>
<h2 id="一、安装nvidia显卡驱动"><a href="#一、安装nvidia显卡驱动" class="headerlink" title="一、安装nvidia显卡驱动"></a>一、安装nvidia显卡驱动</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:graphics-drivers/ppa</span><br></pre></td></tr></table></figure>
<h2 id="二、查看可安装的驱动版本"><a href="#二、查看可安装的驱动版本" class="headerlink" title="二、查看可安装的驱动版本"></a>二、查看可安装的驱动版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ubuntu-drivers devices</span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/1.png" alt></p>
<p>安装nvidia-410，我这里安装的是410版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nvidia-410 nvidia-settings nvidia-prime</span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：我最开始安装过推荐的430版本，结果安装完成后，重启，界面进不去，会有报错，因此安装的低版本，目前测试过的410和390版本都没有问题</p>
</blockquote>
<p>安装一些必要软件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mesa-common-dev</span><br><span class="line">sudo apt-get install freeglut3-dev</span><br></pre></td></tr></table></figure>
<p>安装完成后，重启，以确认生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
<p>重启后，输入<code>nvidia-smi</code>，则能看到相关信息</p>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/2.png" alt></p>
<h2 id="三、安装cuda"><a href="#三、安装cuda" class="headerlink" title="三、安装cuda"></a>三、安装cuda</h2><h3 id="3-1-下载cuda"><a href="#3-1-下载cuda" class="headerlink" title="3.1 下载cuda"></a>3.1 下载cuda</h3><p>点击<a href="https://developer.nvidia.com/cuda-toolkit-archive">cuda官网</a>，下载CUDA10.0版本，下载runfile文件</p>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/3.png" alt></p>
<h3 id="3-2-安装cuda"><a href="#3-2-安装cuda" class="headerlink" title="3.2 安装cuda"></a>3.2 安装cuda</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/Downloads</span><br><span class="line">sudo sh cuda_10.0.130_410.48_linux.run</span><br></pre></td></tr></table></figure>
<p>运行后，稍等一会，会看见一些相关信息，此时需要按键，跳到100%浏览完成</p>
<p>按<code>空格键</code>跳到100%，直至出现如下界面</p>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/4.png" alt></p>
<p>输入<code>accept</code>，等待下一个提示</p>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/5.png" alt></p>
<p>是否安装410.48驱动，由于前面已经安装，这里选择否，输入<code>n</code>，等待下一个提示</p>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/6.png" alt></p>
<p>提示，安装CUDA10.0 Toolkit，选择<code>y</code>，等待下一个提示</p>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/7.png" alt></p>
<p>按<code>回车键</code>，选择默认路径，等待下一个提示</p>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/8.png" alt></p>
<p>输入<code>y</code>，安装symbolic link，等待下一个提示</p>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/9.png" alt></p>
<p>输入<code>y</code>，安装CUDA10.0 样例</p>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/10.png" alt></p>
<p>最后，按<code>回车键</code>，选择默认路径，至此，已经CUDA安装步骤已经全部完成</p>
<p>安装完成后，界面显示如下：</p>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/11.png" alt></p>
<h2 id="四、安装cuDNN"><a href="#四、安装cuDNN" class="headerlink" title="四、安装cuDNN"></a>四、安装cuDNN</h2><h3 id="4-1-下载cuDNN"><a href="#4-1-下载cuDNN" class="headerlink" title="4.1 下载cuDNN"></a>4.1 下载cuDNN</h3><p>点击<a href="https://developer.nvidia.com/rdp/cudnn-archive">cuDNN官网</a>，下载cuDNN7.4.2版本，选择cuDNN7.4.2 for CUDA 10.0</p>
<p>下载时，选择cuDNN Library for linx，下载.tgz文件</p>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/12.png" alt></p>
<h3 id="4-2-安装cuDNN"><a href="#4-2-安装cuDNN" class="headerlink" title="4.2 安装cuDNN"></a>4.2 安装cuDNN</h3><p>首先，解压文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/Downloads</span><br><span class="line">tar -zxvf cudnn-10.0-linux-x64-v7.4.2.24.tgz </span><br></pre></td></tr></table></figure>
<p>安装配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cp cuda/include/cudnn.h /usr/local/cuda/include</span><br><span class="line">sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64</span><br><span class="line">sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure>
<h2 id="五、配置cuda环境"><a href="#五、配置cuda环境" class="headerlink" title="五、配置cuda环境"></a>五、配置cuda环境</h2><p>首先，需要打开~/.bashrc文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>在文件末尾添加两行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=/usr/local/cuda-10.0/bin:$PATH</span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/cuda-10.0/lib64:$LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure>
<p>随后，source一下，以保存配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>
<h2 id="六、安装gpu-tensorflow"><a href="#六、安装gpu-tensorflow" class="headerlink" title="六、安装gpu-tensorflow"></a>六、安装gpu-tensorflow</h2><p>我这里添加了proxychains4，是实现在终端翻墙的效果，这样下载安装会很快</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo proxychains4 pip install tensorflow-gpu==1.13.1</span><br></pre></td></tr></table></figure>
<h2 id="七、测试"><a href="#七、测试" class="headerlink" title="七、测试"></a>七、测试</h2><p>在终端输入python，进入python环境</p>
<p>然后 输入import tensorflow，不报错，即配置成功</p>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/13.png" alt></p>
<h2 id="八、帮助信息"><a href="#八、帮助信息" class="headerlink" title="八、帮助信息"></a>八、帮助信息</h2><h3 id="8-1-查看cuda版本信息"><a href="#8-1-查看cuda版本信息" class="headerlink" title="8.1 查看cuda版本信息"></a>8.1 查看cuda版本信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /usr/local/cuda/version.txt</span><br></pre></td></tr></table></figure>
<h3 id="8-2-查看cuDNN版本信息"><a href="#8-2-查看cuDNN版本信息" class="headerlink" title="8.2 查看cuDNN版本信息"></a>8.2 查看cuDNN版本信息</h3><p>cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2</p>
<blockquote>
<p>cuda和cuDNN版本信息如下图</p>
</blockquote>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/14.png" alt></p>
<h3 id="8-3-查看GPU显卡信号和驱动版本信息"><a href="#8-3-查看GPU显卡信号和驱动版本信息" class="headerlink" title="8.3 查看GPU显卡信号和驱动版本信息"></a>8.3 查看GPU显卡信号和驱动版本信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lspci | grep -i nvidia</span><br><span class="line">sudo dpkg --list | grep nvidia-*</span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/15.png" alt></p>
<h3 id="8-4-查看可安装的gpu-tensorflow版本信息"><a href="#8-4-查看可安装的gpu-tensorflow版本信息" class="headerlink" title="8.4 查看可安装的gpu-tensorflow版本信息"></a>8.4 查看可安装的gpu-tensorflow版本信息</h3><p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo proxychains4 pip install tensorflow-gpu==</span><br></pre></td></tr></table></figure>
<p>这里是会报错，因为没有输入对应版本，但是提示的错误信息中，能查看所有的可安装的gpu版本</p>
<p>如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo proxychains4 pip install tensorflow-gpu==1.13.1</span><br><span class="line">sudo proxychains4 pip install tensorflow-gpu==1.13.0rc0</span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/17.png" alt></p>
<h2 id="九、安装过程中，遇到过的问题"><a href="#九、安装过程中，遇到过的问题" class="headerlink" title="九、安装过程中，遇到过的问题"></a>九、安装过程中，遇到过的问题</h2><h3 id="9-1-nvidia-版本覆盖安装"><a href="#9-1-nvidia-版本覆盖安装" class="headerlink" title="9.1 nvidia-*版本覆盖安装"></a>9.1 nvidia-*版本覆盖安装</h3><blockquote>
<p>最开始我安装的是nvidia-390的版本，然后输入nvidia-smi时，出现如下信息，这里没有显示CUDA的版本</p>
</blockquote>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/16.png" alt></p>
<blockquote>
<p>后来，我直接又安装了nvidia-410版本，没有删除之前的任何信息，此时输入nvidia-smi，出现如下信息</p>
</blockquote>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/2.png" alt></p>
<blockquote>
<p>这样也可能导致，我在这里输入<code>sudo dpkg --list | grep nvidia-*</code>，查看信息的时候会有两个的原因吧</p>
</blockquote>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/15.png" alt></p>
<blockquote>
<p>总的来说，最后Tensorflow导入是没有问题的</p>
</blockquote>
<h3 id="9-2-markdown3-1-1错误提示"><a href="#9-2-markdown3-1-1错误提示" class="headerlink" title="9.2  markdown3.1.1错误提示"></a>9.2  markdown3.1.1错误提示</h3><blockquote>
<p>在安装gpu-tensorflow1.13.1版本的过程中，提示markdown错误</p>
</blockquote>
<p><img src="/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/18.png" alt></p>
<blockquote>
<p>原因：pip版本过低</p>
<p>解决方法：升级pip</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p>GPU Tensorflow安装：<a href="https://ldgyyf.cn/2019/05/21/Linux/GPU-Tensorflow-%E5%AE%89%E8%A3%85/">ldg个人博客</a></p>
</li>
<li><p>cuda、cuDNN、Tensorflow对应版本关系：<a href="https://tensorflow.google.cn/install/source">Tensorflow中文社区</a></p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>又重新在真机上安装配置了一遍GPU Tensorflow，并且笔记较之前更为详细，相信后面直接参考该教程是没有任何问题的了</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
        <tag>Linux</tag>
        <tag>CUDA</tag>
        <tag>CUDNN</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu16下翻墙搭建</title>
    <url>/2019/05/18/Linux/ubuntu16%E4%B8%8B%E7%BF%BB%E5%A2%99%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<h3 id="说明：此教程为ubuntu下如何翻墙教程，相对来说步骤比较繁琐，可能有更简单的方法，以后用到会继续更新"><a href="#说明：此教程为ubuntu下如何翻墙教程，相对来说步骤比较繁琐，可能有更简单的方法，以后用到会继续更新" class="headerlink" title="说明：此教程为ubuntu下如何翻墙教程，相对来说步骤比较繁琐，可能有更简单的方法，以后用到会继续更新"></a>说明：此教程为ubuntu下如何翻墙教程，相对来说步骤比较繁琐，可能有更简单的方法，以后用到会继续更新</h3><p>需要安装软件：</p>
<ul>
<li>chrome浏览器</li>
<li>shadowsocks-qt5</li>
</ul>
</blockquote>
<h1 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h1><h2 id="1、ubuntu16安装chrome浏览器"><a href="#1、ubuntu16安装chrome浏览器" class="headerlink" title="1、ubuntu16安装chrome浏览器"></a>1、ubuntu16安装chrome浏览器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo wget http://www.linuxidc.com/files/repo/google-chrome.<span class="built_in">list</span> -P /etc/apt/sources.<span class="built_in">list</span>.d/</span><br><span class="line">$ wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install google-chrome-stable</span><br></pre></td></tr></table></figure>
<h2 id="2、安装shadowsocks-qt5"><a href="#2、安装shadowsocks-qt5" class="headerlink" title="2、安装shadowsocks-qt5"></a>2、安装shadowsocks-qt5</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure>
<h2 id="3、shadowscoks-qt5配置"><a href="#3、shadowscoks-qt5配置" class="headerlink" title="3、shadowscoks-qt5配置"></a>3、shadowscoks-qt5配置</h2><blockquote>
<p>打开<code>shadowsocks-qt5</code></p>
</blockquote>
<p><img src="/2019/05/18/Linux/ubuntu16%E4%B8%8B%E7%BF%BB%E5%A2%99%E6%90%AD%E5%BB%BA/add_manually.png" alt></p>
<blockquote>
<p>在如下界面，设置IP、端口、密码等等</p>
<p>如果没有设置服务器IP，需要先搭建一个服务器，然后设置对应的端口及密码等等……（这里不介绍如何搭建翻墙服务器）</p>
</blockquote>
<p><img src="/2019/05/18/Linux/ubuntu16%E4%B8%8B%E7%BF%BB%E5%A2%99%E6%90%AD%E5%BB%BA/ip_config.png" alt></p>
<h2 id="4、添加插件"><a href="#4、添加插件" class="headerlink" title="4、添加插件"></a>4、添加插件</h2><blockquote>
<p>添加Proxy SwitchOmega.crx插件</p>
</blockquote>
<p>插件下载地址：<a href="https://github.com/FelisCatus/SwitchyOmega/releases">https://github.com/FelisCatus/SwitchyOmega/releases</a></p>
<p>说明：该插件下载地址还没有使用过，之前下载过该插件的其他地址，若这个不能使用，还是使用存在于硬盘的插件</p>
<p><img src="/2019/05/18/Linux/ubuntu16%E4%B8%8B%E7%BF%BB%E5%A2%99%E6%90%AD%E5%BB%BA/proxy_switch_download.png" alt></p>
<blockquote>
<p>将该插件直接拖曳到chrome的扩展中，若拖曳失败，不能正常拖曳，参考该网址：<a href="https://blog.csdn.net/qq_33033367/article/details/80952291">https://blog.csdn.net/qq_33033367/article/details/80952291</a></p>
</blockquote>
<p>注意：要切换为开发模式，然后进行拖曳，注意图中红色框</p>
<p><img src="/2019/05/18/Linux/ubuntu16%E4%B8%8B%E7%BF%BB%E5%A2%99%E6%90%AD%E5%BB%BA/proxy.png" alt></p>
<h2 id="5、switchomega配置"><a href="#5、switchomega配置" class="headerlink" title="5、switchomega配置"></a>5、switchomega配置</h2><p><img src="/2019/05/18/Linux/ubuntu16%E4%B8%8B%E7%BF%BB%E5%A2%99%E6%90%AD%E5%BB%BA/proxy_server.png" alt></p>
<blockquote>
<p> 下图中的URL地址需要自己手动输入，直接复制下面代码即可</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</span><br></pre></td></tr></table></figure>
<p><img src="/2019/05/18/Linux/ubuntu16%E4%B8%8B%E7%BF%BB%E5%A2%99%E6%90%AD%E5%BB%BA/auto_switch.png" alt></p>
<blockquote>
<p>最后点击Download ProfileNow</p>
</blockquote>
<h2 id="6、chrome浏览器访问google"><a href="#6、chrome浏览器访问google" class="headerlink" title="6、chrome浏览器访问google"></a>6、chrome浏览器访问google</h2><blockquote>
<p>首先需要打开shadowsocks-qt5，然后连接服务器</p>
<p>然后通过切换规则，切换为auto switch，就可以访问google了</p>
</blockquote>
<p><img src="/2019/05/18/Linux/ubuntu16%E4%B8%8B%E7%BF%BB%E5%A2%99%E6%90%AD%E5%BB%BA/google.png" alt></p>
<blockquote>
<p>打开浏览器，输入<a href="http://www.google.com">www.google.com</a>，如果出现这种问题，修改为proxy即可</p>
</blockquote>
<p><img src="/2019/05/18/Linux/ubuntu16%E4%B8%8B%E7%BF%BB%E5%A2%99%E6%90%AD%E5%BB%BA/add_condition.png" alt></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu16软件安装</title>
    <url>/2019/05/21/Linux/ubuntu16%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>仅用来在ubuntu上安装一些平时常用软件</p>
</blockquote>
<h2 id="1、Teamviewer安装"><a href="#1、Teamviewer安装" class="headerlink" title="1、Teamviewer安装"></a>1、Teamviewer安装</h2><blockquote>
<p><a href="https://www.teamviewer.com/cn/download/linux/">Teamviewer下载</a>，Ubuntu系统下，文件默认下载到~/Downloads目录下</p>
<p>安装步骤</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ cd ~/Downloads</span><br><span class="line">$ sudo dpkg -i *.deb</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在执行上面的sudo dpkg -i步骤后，会出现一个Error报错，不用着急，执行下面命令处理依赖即可</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install –f </span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：有时候会遇到<code>Teamviewer</code>无法打开，即双击<code>Teamviewer</code>无法显示，此时只需要命令启动即可</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ teamviewer --daemon stop</span><br><span class="line"></span><br><span class="line">$ teamviewer --daemon start</span><br></pre></td></tr></table></figure>
<h2 id="2、搜狗输入法安装"><a href="#2、搜狗输入法安装" class="headerlink" title="2、搜狗输入法安装"></a>2、搜狗输入法安装</h2><blockquote>
<p><a href="https://pinyin.sogou.com/linux/">下载地址</a>，Ubuntu系统下，文件默认下载到~/Downloads目录下</p>
<p>安装步骤 </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ cd ~/Downloads</span><br><span class="line">$ sudo dpkg -i *.deb</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在执行上面的sudo dpkg -i步骤后，会出现一个Error报错，不用着急，执行下面命令处理依赖即可</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install –f </span><br></pre></td></tr></table></figure>
<blockquote>
<p>输入法配置</p>
</blockquote>
<p>（1）安装完成后，在电脑设置里面找到Language Support</p>
<p>（2）键盘输入方式选择：fctix</p>
<p><img src="/2019/05/21/Linux/ubuntu16%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/sogou.png" alt></p>
<p>（3）若没有fctix，在终端输入命令进行安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install fcitx</span><br></pre></td></tr></table></figure>
<p>（4）注销退出，重新登录进去</p>
<blockquote>
<p>如果还不能切换中文输入法，参考该<a href="http://jingyan.baidu.com/article/adc815134f4b92f722bf7350.html">网址</a></p>
<p>若出现中文输入乱码情况，解决方法如下：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ cd ~/.config</span><br><span class="line">$ rm -rf SogouPY* sogou*</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行完后，重启电脑即可</p>
</blockquote>
<h2 id="3、Vscode安装"><a href="#3、Vscode安装" class="headerlink" title="3、Vscode安装"></a>3、Vscode安装</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:ubuntu-desktop/ubuntu-make</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install ubuntu-make</span><br><span class="line">$ sudo umake ide visual-studio-code</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装完成后，log out，然后在打开，就能在应用里看到Vscode</p>
</blockquote>
<h2 id="4、sublime-text3安装"><a href="#4、sublime-text3安装" class="headerlink" title="4、sublime text3安装"></a>4、sublime text3安装</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:webupd8team/sublime-text-<span class="number">3</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install sublime-text-installer</span><br></pre></td></tr></table></figure>
<h2 id="5、pycharm命令行安装"><a href="#5、pycharm命令行安装" class="headerlink" title="5、pycharm命令行安装"></a>5、pycharm命令行安装</h2><blockquote>
<p>添加源</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:mystic-mirage/pycharm</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装免费社区版</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install pycharm-community</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以前在u14上安装pycharm的另一个方法笔记（感觉还是上面一个好一点，上面是最新的笔记）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:ubuntu-desktop/ubuntu-make</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install ubuntu-make</span><br><span class="line">$ umake ide pycharm</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu下科学上网</title>
    <url>/2019/06/27/Linux/ubuntu%E4%B8%8B%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>其实这一个笔记和前面的笔记（<a href="https://ldgyyf.cn/2019/05/18/Linux/ubuntu16%E4%B8%8B%E7%BF%BB%E5%A2%99%E6%90%AD%E5%BB%BA/">ubuntu16下翻墙搭建</a>）差不多，但是之前的笔记只记载了chrome浏览器下，网页端科学上网的方法，关于终端下如何科学上网，并没有记载，因此这篇笔记，更多的是说明如何在终端上科学上网，当然也能在firefox上，chrome浏览器上还没有测试</p>
</blockquote>
<h2 id="一、安装chrome浏览器"><a href="#一、安装chrome浏览器" class="headerlink" title="一、安装chrome浏览器"></a>一、安装chrome浏览器</h2><blockquote>
<p>安装chrome浏览器，只是习惯用chrome，还有就是chrome浏览器的默认下载是在~/Downloads下，而firefox的默认下载是在一个tmp文件夹下，也懒得去修改，所以还是先安装了chrome浏览器，为后面的文件下载做铺垫</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo wget http://www.linuxidc.com/files/repo/google-chrome.list -P /etc/apt/sources.list.d/</span><br><span class="line">$ wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install google-chrome-stable</span><br></pre></td></tr></table></figure>
<h2 id="二、安装qt5并进行配置"><a href="#二、安装qt5并进行配置" class="headerlink" title="二、安装qt5并进行配置"></a>二、安装qt5并进行配置</h2><h3 id="2-1-安装shadowsocks-qt5"><a href="#2-1-安装shadowsocks-qt5" class="headerlink" title="2.1 安装shadowsocks-qt5"></a>2.1 安装shadowsocks-qt5</h3><ul>
<li>添加源</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<ul>
<li><p>安装qt5</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装完成后，在菜单栏搜索shadows，找到shadowsocks-qt5，打开并进行配置</p>
</li>
</ul>
<h3 id="2-2-shadowsocks-qt5配置"><a href="#2-2-shadowsocks-qt5配置" class="headerlink" title="2.2 shadowsocks-qt5配置"></a>2.2 shadowsocks-qt5配置</h3><p>（1）添加连接</p>
<blockquote>
<p>点击 <code>Connection</code> -&gt; <code>Add</code> -&gt; <code>Manually</code></p>
</blockquote>
<p><img src="/2019/06/27/Linux/ubuntu%E4%B8%8B%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/1.png" alt></p>
<p>（2）设置IP、Port、加密方式</p>
<blockquote>
<p>ip 和port设置为自己的vpn账号和端口</p>
</blockquote>
<p><img src="/2019/06/27/Linux/ubuntu%E4%B8%8B%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/2.png" alt></p>
<p>（3）VPN连接</p>
<p><img src="/2019/06/27/Linux/ubuntu%E4%B8%8B%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/3.png" alt></p>
<h2 id="三、Proxychains安装并配置"><a href="#三、Proxychains安装并配置" class="headerlink" title="三、Proxychains安装并配置"></a>三、Proxychains安装并配置</h2><blockquote>
<p>下载文件时，使用chrome浏览器打开链接进行下载</p>
</blockquote>
<h3 id="3-1-下载zip文件：github网址"><a href="#3-1-下载zip文件：github网址" class="headerlink" title="3.1 下载zip文件：github网址"></a>3.1 下载zip文件：<a href="https://github.com/rofl0r/proxychains-ng.git">github网址</a></h3><p><img src="/2019/06/27/Linux/ubuntu%E4%B8%8B%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/4.png" alt></p>
<h3 id="3-2-解压"><a href="#3-2-解压" class="headerlink" title="3.2 解压"></a>3.2 解压</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/Downloads</span><br><span class="line">unzip pro*.zip</span><br></pre></td></tr></table></figure>
<h3 id="3-3-安装proxychains"><a href="#3-3-安装proxychains" class="headerlink" title="3.3 安装proxychains"></a>3.3 安装proxychains</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/Downloads</span><br><span class="line">cd proxychains-ng-master/</span><br><span class="line">./configure</span><br><span class="line">sudo make &amp;&amp; sudo make install</span><br><span class="line">sudo cp ./src/proxychains.conf /etc/proxychains.conf</span><br></pre></td></tr></table></figure>
<h3 id="3-4-编辑proxychains配置"><a href="#3-4-编辑proxychains配置" class="headerlink" title="3.4 编辑proxychains配置"></a>3.4 编辑proxychains配置</h3><blockquote>
<p>打开./conf文件进行配置</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/proxychains.conf </span><br></pre></td></tr></table></figure>
<p>将最后一行的 socks4 127.0.0.1 9050修改为socks5 127.0.0.1 1080，最终如下图</p>
<p><img src="/2019/06/27/Linux/ubuntu%E4%B8%8B%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/5.png" alt></p>
<h2 id="四、科学上网测试"><a href="#四、科学上网测试" class="headerlink" title="四、科学上网测试"></a>四、科学上网测试</h2><h3 id="4-1-测试"><a href="#4-1-测试" class="headerlink" title="4.1 测试"></a>4.1 测试</h3><blockquote>
<p>需要先安装curl</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install curl</span><br><span class="line">proxychains4 curl www.google.com</span><br></pre></td></tr></table></figure>
<p>出现下图，则配置成功</p>
<p><img src="/2019/06/27/Linux/ubuntu%E4%B8%8B%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/6.png" alt></p>
<h3 id="4-2-终端上网"><a href="#4-2-终端上网" class="headerlink" title="4.2 终端上网"></a>4.2 终端上网</h3><blockquote>
<p>输入下面命令</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains4 sudo apt-get update</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo proxychains4 apt-get update</span><br></pre></td></tr></table></figure>
<p>出现下图信息，则成功，下图对应第一条命令</p>
<p><img src="/2019/06/27/Linux/ubuntu%E4%B8%8B%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/7.png" alt></p>
<h3 id="4-3-firefox科学上网"><a href="#4-3-firefox科学上网" class="headerlink" title="4.3 firefox科学上网"></a>4.3 firefox科学上网</h3><blockquote>
<p>在终端输入如下命令</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains4 firefox</span><br></pre></td></tr></table></figure>
<p>接着会弹出一个firefox的界面，在url地址栏输入www.google.com即能google了</p>
<p><img src="/2019/06/27/Linux/ubuntu%E4%B8%8B%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/8.png" alt></p>
<h3 id="4-4-流量损耗"><a href="#4-4-流量损耗" class="headerlink" title="4.4 流量损耗"></a>4.4 流量损耗</h3><blockquote>
<p>在能够科学上网后，也能看到shadowsocks5 里面的流量损耗</p>
</blockquote>
<p><img src="/2019/06/27/Linux/ubuntu%E4%B8%8B%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/9.png" alt></p>
<h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><ul>
<li><a href="https://blog.fazero.me/2015/08/31/%E5%88%A9%E7%94%A8proxychains%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8socks5%E4%BB%A3%E7%90%86/">proxychains配置</a></li>
<li><p><a href="https://www.cnblogs.com/hcbin/p/8489041.html">proxychains使用方法</a></p>
</li>
<li><p><a href="https://blog.csdn.net/JBlock/article/details/79584073">ping 不通google说明</a></p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>暂时还没有找到如何通过proxychains4 让chrome浏览器科学上网的方法，但是目前的设置，能够在firefox进行相应的搜索，但需要执行一次proxychains4的命令，另外终端执行命令前加上proxychains也能科学上网</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>(转)双系统之Win重装后linux引导损坏</title>
    <url>/2019/07/01/Linux/%E8%BD%AC-%E5%8F%8C%E7%B3%BB%E7%BB%9F%E4%B9%8BWin%E9%87%8D%E8%A3%85%E5%90%8Elinux%E5%BC%95%E5%AF%BC%E6%8D%9F%E5%9D%8F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>由于一些需求，有时需要重装电脑，而本来是双系统的电脑，重装后，Linux的引导修复可能缺失，即在启动的过程中只有windows的界面，而没有win与linux的选择界面，因此，在网上找了几篇博客，几经对比后，还是这一片写的比较好（对我而言），并且已经测试成功</p>
</blockquote>
<h2 id="原文网址"><a href="#原文网址" class="headerlink" title="原文网址"></a>原文网址</h2><p><a href="https://blog.csdn.net/zhuoyinping7159/article/details/80546977">原文</a></p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="（1）首先，得制作一个ubuntu系统启动盘（不论14、16、18这样），制作方法这里不做说明"><a href="#（1）首先，得制作一个ubuntu系统启动盘（不论14、16、18这样），制作方法这里不做说明" class="headerlink" title="（1）首先，得制作一个ubuntu系统启动盘（不论14、16、18这样），制作方法这里不做说明"></a>（1）首先，得制作一个ubuntu系统启动盘（不论14、16、18这样），制作方法这里不做说明</h3><h3 id="（2）开机，从U盘进入（不同的电脑按键不一样，大部分是F12），选择try-install-ubuntu，不要选择安装ubuntu"><a href="#（2）开机，从U盘进入（不同的电脑按键不一样，大部分是F12），选择try-install-ubuntu，不要选择安装ubuntu" class="headerlink" title="（2）开机，从U盘进入（不同的电脑按键不一样，大部分是F12），选择try install ubuntu，不要选择安装ubuntu"></a>（2）开机，从U盘进入（不同的电脑按键不一样，大部分是F12），选择try install ubuntu，不要选择安装ubuntu</h3><h3 id="（3）进到ubuntu试用版后，连接wifi，打开终端（ctrl-alt-t）"><a href="#（3）进到ubuntu试用版后，连接wifi，打开终端（ctrl-alt-t）" class="headerlink" title="（3）进到ubuntu试用版后，连接wifi，打开终端（ctrl+alt+t）"></a>（3）进到ubuntu试用版后，连接wifi，打开终端（ctrl+alt+t）</h3><h3 id="（4）在终端输入如下命令"><a href="#（4）在终端输入如下命令" class="headerlink" title="（4）在终端输入如下命令"></a>（4）在终端输入如下命令</h3><ul>
<li><p>添加源，更新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:yannubuntu/boot-repair</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装boot-repair</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y boot-repair</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装成功后，在终端输入<code>boot-repair</code>，启动工具，在弹出的界面框中选择<code>recommended repair</code>，稍等一会，进行修复</p>
</li>
<li><p>修复完成后，重启电脑，此时重启过程中就能看到ubuntu的选项了</p>
<p>我这里的选择项有点奇怪，但是暂时也不去管它了，倒数第二个是windows的启动项</p>
<p><img src="/2019/07/01/Linux/%E8%BD%AC-%E5%8F%8C%E7%B3%BB%E7%BB%9F%E4%B9%8BWin%E9%87%8D%E8%A3%85%E5%90%8Elinux%E5%BC%95%E5%AF%BC%E6%8D%9F%E5%9D%8F/1.jpg" alt></p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>我按照上面的方法就完成了linux 的grub引导修复，在修复过程中没有出现原文中所遇到的windows引导损坏的问题，但还是在这里记录一下windows引导损坏的解决方法，如下</p>
</blockquote>
<p>在linux的终端窗口中，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure>
<p>然后重启，就会出现双系统的选择界面了，这个还没有尝试，不过应该问题不大</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS+Gazebo+Ardrone关系及基本知识学习</title>
    <url>/2019/05/25/ROS/ROS-Gazebo-Ardrone%E5%85%B3%E7%B3%BB%E5%8F%8A%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>主要记录ros的一些基本指令和gazebo及ardrone的一些名词解释和相互关系</p>
</blockquote>
<h2 id="1、名词解释"><a href="#1、名词解释" class="headerlink" title="1、名词解释"></a>1、名词解释</h2><ul>
<li><p>ROS：ROS(Robot Operating System, 机器人操作系统)是一个适用于机器人的开源的元操作系统。它提供了操作系统应有的服务：如硬件抽象、设备驱动、函数库、可视化工具、消息传递和软件包管理等诸多功能。</p>
</li>
<li><p>Gazebo：可以主要用来进行机器人动力学的仿真。</p>
</li>
<li><p>Ardrone：四轴飞行器，支持ROS系统。</p>
</li>
</ul>
<h2 id="2、相互关系"><a href="#2、相互关系" class="headerlink" title="2、相互关系"></a>2、相互关系</h2><p><img src="/2019/05/25/ROS/ROS-Gazebo-Ardrone%E5%85%B3%E7%B3%BB%E5%8F%8A%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/relation.png" alt></p>
<h2 id="3、Gazebo基本组成部分"><a href="#3、Gazebo基本组成部分" class="headerlink" title="3、Gazebo基本组成部分"></a>3、Gazebo基本组成部分</h2><p><img src="/2019/05/25/ROS/ROS-Gazebo-Ardrone%E5%85%B3%E7%B3%BB%E5%8F%8A%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/gazebo_zucheng.png" alt></p>
<p><img src="/2019/05/25/ROS/ROS-Gazebo-Ardrone%E5%85%B3%E7%B3%BB%E5%8F%8A%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/gazebo_zucheng2.png" alt></p>
<h2 id="4、ROS基本概念"><a href="#4、ROS基本概念" class="headerlink" title="4、ROS基本概念"></a>4、ROS基本概念</h2><p><img src="/2019/05/25/ROS/ROS-Gazebo-Ardrone%E5%85%B3%E7%B3%BB%E5%8F%8A%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/ros.png" alt></p>
<ul>
<li><p>节点（node）：一个节点即为一个可执行文件，它可以通过ROS与其他节点进行通信</p>
<p>例子：咱们有一个机器人，和一个遥控器，那么这个机器人和遥控器开始工作后，就是两个节点。遥控器起到了下达指 令的作用；机器人负责监听遥控器下达的指令，完成相应动作。从这里我们可以看出，<font color="red">节点是一个能执行特定工作任 务的工作单元，并且能够相互通信，从而实现一个机器人系统整体的功能。</font>在这里我们把<font color="red">遥控器和机器人简单定义为两个节点</font>，实际上在机器人中根据控制器、传感器、执行机构等不同组成模块，还可以将其进一步细分为更多的节点，这个是根据用户编写的程序来定义的。</p>
</li>
<li><p>消息（message）：消息是一种ROS数据类型，用于订阅或发布到一个话题。</p>
<p>消息是一种数据结构，支持多种数据类型（整形、浮点、布尔型、数组等），同时也支持消息的嵌套定义。ROS提供了大量的系统默认消息供用户使用，如geometry_msgs、sensor_msgs等，同时也支持用户定义专属数据结构的消息类型。</p>
</li>
<li><p>话题（Topic）：节点可以发布消息到话题，也可以订阅话题以接收消息。</p>
<p>话题是消息的载体，作用是用不同的名称区分不同消息。</p>
<p>话题与消息是紧密联系在一起的。话题就像公交车，消息是公交车里装的人。公交车里可以没有人（话题上没有有效消息），但能装什么人一定会预先指定（话题一定有类型）。整个公交网络中线路名称不能重复（话题名称不能重复），要是真有两个话题名称相同类型也相同，ROS不会对其中的数据做区分，这种冲突是没有提示的。</p>
<font color="red">订阅/发布话题是不同步的，发布的人只管说话，订阅的人只管偷听，发布的人连续说了100句话，这100句话会排成一个队列，偷听的人要一句一句听，哦，对了，偷听的人可能不止一个</font>
</li>
<li><p>服务（service）：服务是应答响应模式下的信息交互方式。这种方式是基于客户端/服务器模型的。</p>
<p>与话题不同的是，当服务端收到服务请求后，会对请求做出响应，将数据的处理结果返回给客户端。这种模式更适用于双向同步的信息传输，在同一个ROS网络中节点指定服务名称时不能重名。当节点A找节点B借钱时，整个网络里只有一个B，谁要是冒充B借了钱，那他就是2B。</p>
</li>
<li><p>master：节点管理器，ROS名称服务 (比如帮助节点找到彼此)。</p>
<p>master是整个ROS运行的核心，它主要的功能就是登记注册节点、服务和话题的名称，并维护一个参数服务器。没有它你就甭想启动任何一个节点，roscore就是用来启动master的。</p>
</li>
</ul>
<p>参考网址：<a href="http://wiki.ros.org/ROS/Tutorials">ROS官网</a>、<a href="https://blog.csdn.net/lingchen2348/article/details/86134572">转载</a></p>
<h2 id="5、ROS-Ardrone常用命令"><a href="#5、ROS-Ardrone常用命令" class="headerlink" title="5、ROS Ardrone常用命令"></a>5、ROS Ardrone常用命令</h2><ul>
<li><p>起飞：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rostopic pub -1 /ardrone/takeoff std_msgs/Empty</span><br></pre></td></tr></table></figure>
</li>
<li><p>降落</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rostopic pub -1 /ardrone/land std_msgs/Empty</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换相机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosservice call /ardrone/togglecam</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取前置相机图像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun image_view image_view image:=/ardrone/front/image_raw</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取下置相机图像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun image_view image_view image:=/ardrone/bottom/image_raw</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="6、ROS常用信息显示"><a href="#6、ROS常用信息显示" class="headerlink" title="6、ROS常用信息显示"></a>6、ROS常用信息显示</h2><p>（1）rostopic list ：显示所有的话题信息</p>
<p>（2）rostopic echo [topic] ：显示发布的话题的数据信息</p>
<p>  如：rostopic echo /ardrone/navdata</p>
<p>（3）rostopic type [topic]：返回发布的话题的消息类型</p>
<p><img src="/2019/05/25/ROS/ROS-Gazebo-Ardrone%E5%85%B3%E7%B3%BB%E5%8F%8A%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/ros_message.png" alt></p>
<p>（4）rostopic show ardrone_autonomy/Navdata：显示ardrone_autonomy/Navdata</p>
<p>参考网址：<a href="http://wiki.ros.org/ROS/Tutorials/UnderstandingTopics">ros官网</a></p>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>Gazebo</tag>
      </tags>
  </entry>
  <entry>
    <title>ardrone强化学习训练环境搭建</title>
    <url>/2019/08/11/ROS/ardrone%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>本篇主要是针对<a href="https://ldgyyf.cn/2019/07/17/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BDQN%E6%96%B9%E6%B3%95/">DRL论文阅读（一）</a>中的论文题目来实现，其主要实现了第一部分标记检测，目前是只实现了单纹理下的训练。</p>
<p>其论文题目：<strong>Autonomous Quadrotor Landing using Deep Reinforcement Learning</strong></p>
</blockquote>
<h2 id="一、基础环境搭建"><a href="#一、基础环境搭建" class="headerlink" title="一、基础环境搭建"></a>一、基础环境搭建</h2><h3 id="1-1-版本说明"><a href="#1-1-版本说明" class="headerlink" title="1.1 版本说明"></a>1.1 版本说明</h3><ul>
<li><strong>Ubuntu16.04</strong></li>
<li><strong>ROS Kinetic</strong></li>
<li><strong>Gazebo8.6</strong></li>
</ul>
<h3 id="1-2-Gazebo8-6安装"><a href="#1-2-Gazebo8-6安装" class="headerlink" title="1.2 Gazebo8.6安装"></a>1.2 Gazebo8.6安装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;echo &quot;deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/gazebo-stable.list&#x27;</span></span><br><span class="line">wget http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gazebo8</span><br><span class="line">sudo apt-get install libgazebo8-dev</span><br></pre></td></tr></table></figure>
<p>安装好后，在终端输入<strong>gazebo8</strong>，出现如下界面，则安装成功</p>
<p><img src="/2019/08/11/ROS/ardrone%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.png" alt></p>
<h3 id="1-3-ros-kinetic安装（不安装full版）"><a href="#1-3-ros-kinetic安装（不安装full版）" class="headerlink" title="1.3 ros kinetic安装（不安装full版）"></a>1.3 ros kinetic安装（不安装full版）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br><span class="line">sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:<span class="number">80</span> --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ros-kinetic-desktop</span><br><span class="line">sudo rosdep init</span><br><span class="line">rosdep update</span><br><span class="line">echo <span class="string">&quot;source /opt/ros/kinetic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line">sudo apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure>
<p>安装完后，终端输入<strong>roscore</strong>，输出的最后一行出现started core service [/roscore]，则ros安装成功</p>
<h3 id="1-4-安装必要ros包"><a href="#1-4-安装必要ros包" class="headerlink" title="1.4 安装必要ros包"></a>1.4 安装必要ros包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-gazebo8-msgs</span><br><span class="line">sudo apt-get install ros-kinetic-gazebo8-ros-control</span><br><span class="line">sudo apt-get install ros-kinetic-gazebo8-plugins</span><br><span class="line">sudo apt-get install ros-kinetic-gazebo8-ros-pkgs</span><br><span class="line">sudo apt-get install ros-kinetic-gazebo8-ros</span><br><span class="line">sudo apt-get install ros-kinetic-image-view</span><br></pre></td></tr></table></figure>
<h3 id="1-5-已经安装默认的ros-kinetic？"><a href="#1-5-已经安装默认的ros-kinetic？" class="headerlink" title="1.5 已经安装默认的ros-kinetic？"></a>1.5 已经安装默认的ros-kinetic？</h3><blockquote>
<p>如果机器已经默认安装了ros-kinetic-desktop-full，则会默认安装gazebo7版本。此时，需要先卸载gazebo7然后重新安装gazebo8</p>
</blockquote>
<p><strong>卸载ros-kinetic-desktop-full</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove ros-kinetic-desktop-full</span><br></pre></td></tr></table></figure>
<p><strong>卸载gazebo7</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove gazebo* </span><br></pre></td></tr></table></figure>
<p>然后重新按照<strong>1.2节</strong>和<strong>1.3节</strong>和<strong>1.4节</strong>在做一遍，在<strong>1.3节</strong>的步骤中，其实是可以只执行到第四步即可的。因为其他的之前已经安装过了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-desktop</span><br></pre></td></tr></table></figure>
<h2 id="二、搭建qlab实验环境"><a href="#二、搭建qlab实验环境" class="headerlink" title="二、搭建qlab实验环境"></a>二、搭建qlab实验环境</h2><p><strong>安装ros-kinetic-ardrone-autonomy</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-ardrone-autonomy</span><br></pre></td></tr></table></figure>
<h3 id="2-1-创建ros工作空间"><a href="#2-1-创建ros工作空间" class="headerlink" title="2.1 创建ros工作空间"></a>2.1 创建ros工作空间</h3><p>创建工作空间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mkdir qlab_ws</span><br><span class="line">cd qlab_ws</span><br><span class="line">mkdir src</span><br><span class="line">cd src</span><br><span class="line">catkin_init_workspace</span><br></pre></td></tr></table></figure>
<p>编译和source</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ~/qlab_ws</span><br><span class="line">catkin_make</span><br><span class="line">echo <span class="string">&quot;source ~/qlab_ws/devel/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>
<h3 id="2-2-下载qlab源码"><a href="#2-2-下载qlab源码" class="headerlink" title="2.2 下载qlab源码"></a>2.2 下载qlab源码</h3><p>下载并拷贝完后，~/qlab_ws/src文件夹下将会有deep_reinforced_landing和qlab两个文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd </span><br><span class="line">git clone https://github.com/pulver22/QLAB.git -b gazebo8</span><br><span class="line">cp -r QLAB/deep_reinforced_landing/ QLAB/qlab/ ~/qlab_ws/src</span><br></pre></td></tr></table></figure>
<p>编译和source</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd qlab_ws</span><br><span class="line">catkin_make</span><br><span class="line">source devel/setup.bash</span><br></pre></td></tr></table></figure>
<p><strong>注：每次ros工作空间下拷贝或新建了新的程序包，都需要重新编译和source</strong></p>
<h3 id="2-3-启动测试"><a href="#2-3-启动测试" class="headerlink" title="2.3 启动测试"></a>2.3 启动测试</h3><p><strong>相关配置</strong>：因为在启动launch文件的时候，它里面会加载一些model模型，这些模型全部在qlab的文件夹下，因此需要在<strong>~/.bashrc</strong>文件下添加其路径，或者将modes文件夹全部拷贝到<strong>.gazebo</strong>文件夹下也可以.</p>
<p>（1）打开~/.bashrc文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>（2）在最后一行添加如下代码</p>
<p>下面的username要修改为对应的机器的用户名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">export GAZEBO_MODEL_PATH=<span class="string">&quot;/home/username/qlab_ws/src/qlab/qlab_gazebo/models&quot;</span></span><br></pre></td></tr></table></figure>
<p>（3）关闭~/.bashrc文件并source</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>启动qlab.launch</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ~/qlab_ws</span><br><span class="line">roslaunch qlab_gazebo qlab.launch</span><br></pre></td></tr></table></figure>
<p>启动drl.launch</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/qlab_ws</span><br><span class="line">roslaunch deep_reinforced_landing drl.launch</span><br></pre></td></tr></table></figure>
<p><strong>查看rostopic</strong></p>
<p><img src="/2019/08/11/ROS/ardrone%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2.png" alt></p>
<p><strong>常用的控制命令</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rostopic pub -<span class="number">1</span> /quadrotor/ardrone/takeoff std_msgs/Empty</span><br><span class="line">rostopic pub -<span class="number">1</span> /quadrotor/ardrone/land std_msgs/Empty</span><br><span class="line">rosrun image_view image_view image:=/quadrotor/ardrone/front/ardrone/front/image_raw</span><br><span class="line">rosrun image_view image_view image:=/quadrotor/ardrone/bottom/ardrone/bottom/image_raw</span><br></pre></td></tr></table></figure>
<h2 id="三、强化学习训练"><a href="#三、强化学习训练" class="headerlink" title="三、强化学习训练"></a>三、强化学习训练</h2><h3 id="3-1-修改相关配置"><a href="#3-1-修改相关配置" class="headerlink" title="3.1 修改相关配置"></a>3.1 修改相关配置</h3><p><strong>（1）修改无人机最大高度</strong></p>
<blockquote>
<p>因为在第一阶段训练的过程中，无人机的高度是固定在20m左右的，而其默认的最大高度为3m，因此需要先修改最大高度限定，可以修改为22m</p>
</blockquote>
<p>在<strong>~/qlab_ws/src/qlab/qlab_description/urdf</strong>文件夹下找到<strong>quadrotor_sensors.urdf.xacro</strong>文件</p>
<p><img src="/2019/08/11/ROS/ardrone%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.png" alt></p>
<p>然后在其中的第20行，将max_range的值由3.0修改为22.0</p>
<p><img src="/2019/08/11/ROS/ardrone%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/4.png" alt></p>
<p>这样，无人机的最大高度就修改为了22</p>
<p><strong>（2）训练时，需要关闭clinet，即关闭gazebo图形界面，提升训练速度</strong></p>
<p>训练时，启动<strong>qlab.launch</strong>进行训练，则对<strong>qlab.launch</strong>文件进行修改</p>
<p>将其中的第七行的<strong>gui</strong>的值由<strong>true</strong>修改为<strong>false</strong>，如图所示</p>
<p><img src="/2019/08/11/ROS/ardrone%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/5.png" alt></p>
<p>在该launch文件中，还引用了<strong>ardrone_sim_world.launch</strong>，因此也去这个launch文件中进行修改</p>
<p>同样的，找到第5行，将<strong>gui</strong>的值修改为<strong>false</strong></p>
<p><img src="/2019/08/11/ROS/ardrone%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/6.png" alt></p>
<p><strong>注：如果要关闭掉client的图像界面，则最好是在启动的相关的文件中，将所有的gui的值都设为false，这样比较保险</strong></p>
<h3 id="3-2-安装相关包"><a href="#3-2-安装相关包" class="headerlink" title="3.2 安装相关包"></a>3.2 安装相关包</h3><ul>
<li><p><strong>gym</strong></p>
<p>可以采用pip安装，也可以采用源码安装方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo pip install gym</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Tensorflow</strong>：<a href="https://ldgyyf.cn/2019/07/05/Linux/Ubuntu16%E4%B8%8BGPU-Tensorflow%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/">详细安装</a></p>
</li>
</ul>
<h3 id="3-3-DQN代码编写"><a href="#3-3-DQN代码编写" class="headerlink" title="3.3 DQN代码编写"></a>3.3 DQN代码编写</h3><blockquote>
<p>现在重新整理了代码，正在训练过程中~</p>
<p>直接查看<a href="https://github.com/ldgcug/DQN_Ardrone">所有代码</a></p>
</blockquote>
<font color="red">下面的代码是在32G RAM、1080TI机器上跑的</font>

<h4 id="3-3-1-固定方向训练"><a href="#3-3-1-固定方向训练" class="headerlink" title="3.3.1 固定方向训练"></a>3.3.1 固定方向训练</h4><blockquote>
<p>在该机器上，训练了差不多24h，不知道什么原因，电脑关机了，于是就只训练了不到12w步</p>
<p>于2019-8-17 10:35:40开始训练，2019.8.18 10.20 左右结束，可能更早</p>
</blockquote>
<p><strong>训练过程中的统计</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>1</th>
<th>正面奖励次数</th>
<th>负面奖励次数</th>
<th>强制截止次数</th>
<th>正面百分比</th>
</tr>
</thead>
<tbody>
<tr>
<td>0-1(w)</td>
<td>872</td>
<td>5844</td>
<td>3284</td>
<td>8.72%</td>
</tr>
<tr>
<td>1-2</td>
<td>1183</td>
<td>5818</td>
<td>2999</td>
<td>11.83%</td>
</tr>
<tr>
<td>2-3</td>
<td>2757</td>
<td>4895</td>
<td>2348</td>
<td>27.57%</td>
</tr>
<tr>
<td>3-4</td>
<td>3952</td>
<td>3397</td>
<td>2651</td>
<td>39.52%</td>
</tr>
<tr>
<td>4-5</td>
<td>4564</td>
<td>2514</td>
<td>2922</td>
<td>45.64%</td>
</tr>
<tr>
<td>5-6</td>
<td>5724</td>
<td>2240</td>
<td>2036</td>
<td>57.24%</td>
</tr>
<tr>
<td>6-7</td>
<td>7055</td>
<td>1713</td>
<td>1232</td>
<td>70.55%</td>
</tr>
<tr>
<td>7-8</td>
<td>7597</td>
<td>1496</td>
<td>907</td>
<td>75.97%</td>
</tr>
<tr>
<td>8-9</td>
<td>7870</td>
<td>1435</td>
<td>695</td>
<td>78.70%</td>
</tr>
<tr>
<td>9-10</td>
<td>8128</td>
<td>1340</td>
<td>532</td>
<td>81.28%</td>
</tr>
<tr>
<td>10-11</td>
<td>8499</td>
<td>1166</td>
<td>335</td>
<td>84.99%</td>
</tr>
<tr>
<td>11-12(7504)</td>
<td>6524</td>
<td>782</td>
<td>198</td>
<td>86.94%</td>
</tr>
</tbody>
</table>
</div>
<p><strong>在训练场景下的dqn网络测试（后面会用其他不同场景测试，不用训练场景）</strong></p>
<blockquote>
<p>开始时间：2019.8.18 12:59:30，结束时间：2019.8-18 14:12:04</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>1</th>
<th>正面奖励次数</th>
<th>负面奖励次数</th>
<th>强制截止次数</th>
<th>正面百分比</th>
</tr>
</thead>
<tbody>
<tr>
<td>0-1(w)</td>
<td>8933</td>
<td>815</td>
<td>252</td>
<td>89.33%</td>
</tr>
</tbody>
</table>
</div>
<p><strong>在训练场景下的随机飞行测试</strong></p>
<blockquote>
<p>开始时间：2019.8.18 10:27:21，结束时间：2019.8-18 12:25:23</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>1</th>
<th>正面奖励次数</th>
<th>负面奖励次数</th>
<th>强制截止次数</th>
<th>正面百分比</th>
</tr>
</thead>
<tbody>
<tr>
<td>0-1(w)</td>
<td>735</td>
<td>5316</td>
<td>3949</td>
<td>7.35%</td>
</tr>
</tbody>
</table>
</div>
<p><strong>训练过程中的累积奖励图</strong></p>
<p><img src="/2019/08/11/ROS/ardrone%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/7.png" alt></p>
<h4 id="3-3-2-随机方向训练"><a href="#3-3-2-随机方向训练" class="headerlink" title="3.3.2 随机方向训练"></a>3.3.2 随机方向训练</h4><blockquote>
<p>在该机器上，训练了接近2天的时间，总共训练了大概287000个episode，总飞行步数：2806854</p>
<p>从2019-8-22 11:42:55开始训练，到2019-8-24 09:58:30结束</p>
</blockquote>
<p><strong>训练过程中的统计</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>1</th>
<th>正面奖励次数</th>
<th>负面奖励次数</th>
<th>强制截止次数</th>
<th>正面百分比</th>
</tr>
</thead>
<tbody>
<tr>
<td>0-1(w)</td>
<td>886</td>
<td>5925</td>
<td>3189</td>
<td>8.86%</td>
</tr>
<tr>
<td>1-2</td>
<td>1469</td>
<td>5496</td>
<td>3035</td>
<td>14.69</td>
</tr>
<tr>
<td>2-3</td>
<td>2401</td>
<td>4611</td>
<td>2988</td>
<td>24.01%</td>
</tr>
<tr>
<td>3-4</td>
<td>3377</td>
<td>3362</td>
<td>3261</td>
<td>33.77%</td>
</tr>
<tr>
<td>4-5</td>
<td>4152</td>
<td>2970</td>
<td>2878</td>
<td>41.52%</td>
</tr>
<tr>
<td>5-6</td>
<td>4689</td>
<td>2721</td>
<td>2590</td>
<td>46.89%</td>
</tr>
<tr>
<td>6-7</td>
<td>6125</td>
<td>2529</td>
<td>1346</td>
<td>61.25%</td>
</tr>
<tr>
<td>7-8</td>
<td>8043</td>
<td>1846</td>
<td>111</td>
<td>80.43%</td>
</tr>
<tr>
<td>8-9</td>
<td>8569</td>
<td>1366</td>
<td>65</td>
<td>85.69</td>
</tr>
<tr>
<td>9-10</td>
<td>8777</td>
<td>1177</td>
<td>46</td>
<td>87.77%</td>
</tr>
<tr>
<td>10-11</td>
<td>9003</td>
<td>977</td>
<td>20</td>
<td>90.03%</td>
</tr>
<tr>
<td>11-12</td>
<td>9103</td>
<td>890</td>
<td>7</td>
<td>91.03%</td>
</tr>
<tr>
<td>12-13</td>
<td>9137</td>
<td>861</td>
<td>2</td>
<td>91.37%</td>
</tr>
<tr>
<td>13-14</td>
<td>9132</td>
<td>861</td>
<td>7</td>
<td>91.32%</td>
</tr>
<tr>
<td>14-15</td>
<td>9159</td>
<td>838</td>
<td>3</td>
<td>91.59%</td>
</tr>
<tr>
<td>15-16</td>
<td>9191</td>
<td>803</td>
<td>6</td>
<td>91.91%</td>
</tr>
<tr>
<td>16-17</td>
<td>9179</td>
<td>819</td>
<td>2</td>
<td>91.79%</td>
</tr>
<tr>
<td>17-18</td>
<td>9195</td>
<td>799</td>
<td>6</td>
<td>91.95%</td>
</tr>
<tr>
<td>18-19</td>
<td>9220</td>
<td>777</td>
<td>3</td>
<td>92.2%</td>
</tr>
<tr>
<td>19-20</td>
<td>9159</td>
<td>834</td>
<td>7</td>
<td>91.59%</td>
</tr>
<tr>
<td>20-21</td>
<td>9182</td>
<td>815</td>
<td>3</td>
<td>91.82%</td>
</tr>
<tr>
<td>21-22</td>
<td>9214</td>
<td>778</td>
<td>8</td>
<td>92.14%</td>
</tr>
<tr>
<td>22-23</td>
<td>9121</td>
<td>873</td>
<td>6</td>
<td>91.21%</td>
</tr>
<tr>
<td>23-24</td>
<td>9146</td>
<td>850</td>
<td>4</td>
<td>91.46%</td>
</tr>
<tr>
<td>24-25</td>
<td>9112</td>
<td>883</td>
<td>5</td>
<td>91.12%</td>
</tr>
<tr>
<td>25-26</td>
<td>9204</td>
<td>792</td>
<td>4</td>
<td>92.04%</td>
</tr>
<tr>
<td>26-27</td>
<td>9178</td>
<td>820</td>
<td>2</td>
<td>91.78%</td>
</tr>
<tr>
<td>27-28</td>
<td>9200</td>
<td>797</td>
<td>3</td>
<td>92%</td>
</tr>
</tbody>
</table>
</div>
<p><strong>在训练场景下的dqn网络测试（后面会用其他不同场景测试，不用训练场景）</strong></p>
<blockquote>
<p>开始时间：2019.8.24 10:05:04，结束时间：2019.8-24 11:11:34 总步数：59784</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>1</th>
<th>正面奖励次数</th>
<th>负面奖励次数</th>
<th>强制截止次数</th>
<th>正面百分比</th>
</tr>
</thead>
<tbody>
<tr>
<td>0-1(w)</td>
<td>9278</td>
<td>721</td>
<td>1</td>
<td>92.78%</td>
</tr>
</tbody>
</table>
</div>
<p><strong>训练过程中的累积奖励图</strong></p>
<p><img src="/2019/08/11/ROS/ardrone%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/8.png" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><blockquote>
<p>这是做的第一个DRL的强化学习代码训练，最开始确实花了很多功夫，并且状态空间很大，需要有一个好的机器，训练速度才会快，我最开始是在服务器上8G、CPU上进行的训练，耗费了一个多月才训练完单纹理的目标检测阶段。机器尤为重要。</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p><a href="http://gazebosim.org/tutorials?cat=install&amp;tut=install_ubuntu&amp;ver=8.0">gazebo8安装</a></p>
</li>
<li><p><a href="https://github.com/pulver22/QLAB">QLAB源码</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>Gazebo</tag>
        <tag>ardrone</tag>
        <tag>DRL</tag>
      </tags>
  </entry>
  <entry>
    <title>erle_copter仿真安装笔记</title>
    <url>/2019/05/28/ROS/erle-copter%E4%BB%BF%E7%9C%9F%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>Erle_copter仿真无人机飞行器相比于ardone仿真无人机飞行器的优势在于，Erle_copter更偏底层控制一点，使用Erle_copter仿真，可以和自己组装的真机无人机相匹配，而ardrone仿真无人机飞行器更接近于真机的ardrone或bebop，如果想要对真机ardrone或真机bebop进行修改，会有一定的难度，且购买成品无人机比自己组装无人机价格更贵。</p>
</blockquote>
<h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><ul>
<li>操作系统：ubuntu16</li>
<li>ROS：kinetic</li>
<li>Gazebo：8.6</li>
</ul>
<h2 id="一、安装gazebo8"><a href="#一、安装gazebo8" class="headerlink" title="一、安装gazebo8"></a>一、安装gazebo8</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo sh -c <span class="string">&#x27;echo &quot;deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/gazebo-stable.list&#x27;</span></span><br><span class="line">$ wget http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install gazebo8</span><br><span class="line">$ sudo apt-get install libgazebo8-dev</span><br></pre></td></tr></table></figure>
<h2 id="二、安装ros-kinetci（不安装desktop-full版本）"><a href="#二、安装ros-kinetci（不安装desktop-full版本）" class="headerlink" title="二、安装ros kinetci（不安装desktop-full版本）"></a>二、安装ros kinetci（不安装desktop-full版本）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo sh -c <span class="string">&#x27;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br><span class="line">$ sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:<span class="number">80</span> --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install ros-kinetic-desktop</span><br><span class="line">$ sudo rosdep init</span><br><span class="line">$ rosdep update</span><br><span class="line">$ echo <span class="string">&quot;source /opt/ros/kinetic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line">$ source ~/.bashrc</span><br><span class="line">$ sudo apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure>
<h2 id="三、安装必要ROS程序包"><a href="#三、安装必要ROS程序包" class="headerlink" title="三、安装必要ROS程序包"></a>三、安装必要ROS程序包</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install ros-kinetic-gazebo8-msgs</span><br><span class="line">$ sudo apt-get install ros-kinetic-gazebo8-ros-control</span><br><span class="line">$ sudo apt-get install ros-kinetic-gazebo8-plugins</span><br><span class="line">$ sudo apt-get install ros-kinetic-gazebo8-ros-pkgs</span><br><span class="line">$ sudo apt-get install ros-kinetic-gazebo8-ros</span><br><span class="line">$ sudo apt-get install ros-kinetic-image-view</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install ros-kinetic-mavlink</span><br><span class="line">$ sudo apt-get install ros-kinetic-octomap-msgs</span><br><span class="line">$ sudo apt-get install libgoogle-glog-dev protobuf-compiler ros-$ROS_DISTRO-octomap-msgs ros-$ROS_DISTRO-octomap-ros ros-$ROS_DISTRO-joy</span><br><span class="line">$ sudo apt-get install libtool automake autoconf libexpat1-dev</span><br><span class="line">$ sudo apt-get install ros-kinetic-mavros-msgs</span><br><span class="line">$ sudo apt-get install ros-kinetic-gazebo-msgs</span><br></pre></td></tr></table></figure>
<h2 id="四、安装erle-copter仿真环境"><a href="#四、安装erle-copter仿真环境" class="headerlink" title="四、安装erle_copter仿真环境"></a>四、安装erle_copter仿真环境</h2><blockquote>
<p>安装基础包</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install gawk make git curl cmake -y</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装MAVProxy依赖</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install g++ python-pip python-matplotlib python-serial python-wxgtk2<span class="number">.8</span> python-scipy python-opencv python-numpy python-pyparsing ccache realpath libopencv-dev -y</span><br></pre></td></tr></table></figure>
<p>如果安装python-wxgtk2.8报该错误：<strong>E: Package ‘python-wxgtk2.8’ has no installation candidate</strong></p>
<p>则按下面方法即可解决</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:nilarimogard/webupd8</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install python-wxgtk2<span class="number">.8</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装MAVProxy</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo pip install future</span><br><span class="line">$ sudo apt-get install libxml2-dev libxslt1-dev -y</span><br><span class="line">$ sudo pip2 install pymavlink catkin_pkg --upgrade</span><br><span class="line">$ sudo pip install MAVProxy==<span class="number">1.5</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>下载相关程序包</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/ldgcug/erlecopter_gazebo8.git</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装ArUco</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ cp -r ~/erlecopter_gazebo8/aruco-<span class="number">1.3</span><span class="number">.0</span>/ ~/Downloads/</span><br><span class="line">$ cd ~/Downloads/aruco-<span class="number">1.3</span><span class="number">.0</span>/build</span><br><span class="line">$ cmake ..</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line"></span><br><span class="line">说明：如果 cmake ..  或 make 等报错，则删除build文件，重新创建build文件并编译，具体操作如下：</span><br><span class="line">$ cd ~/Downloads/aruco-<span class="number">1.3</span><span class="number">.0</span>/</span><br><span class="line">$ rm -rf build/</span><br><span class="line">$ mkdir build &amp;&amp; cd build</span><br><span class="line">$ cmake ..</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>
<blockquote>
<p>下载ardupilot到特定文件夹</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ mkdir -p ~/simulation; cd ~/simulation</span><br><span class="line">$ git clone https://github.com/erlerobot/ardupilot -b gazebo</span><br></pre></td></tr></table></figure>
<blockquote>
<p>创建ros工作空间及初始化工作空间</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ mkdir -p ~/simulation/ros_catkin_ws/src</span><br><span class="line">$ cd ~/simulation/ros_catkin_ws/src</span><br><span class="line">$ catkin_init_workspace</span><br><span class="line">$ cd ~/simulation/ros_catkin_ws</span><br><span class="line">$ catkin_make</span><br><span class="line">$ source devel/setup.bash</span><br></pre></td></tr></table></figure>
<blockquote>
<p>拷贝相关源码到工作空间内</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ cp -r ~/erlecopter_gazebo8/ardupilot_sitl_gazebo_plugin/  ~/simulation/ros_catkin_ws/src/ </span><br><span class="line">$ cp -r ~/erlecopter_gazebo8/hector_gazebo/  ~/simulation/ros_catkin_ws/src/ </span><br><span class="line">$ cp -r ~/erlecopter_gazebo8/rotors_simulator/ ~/simulation/ros_catkin_ws/src/ </span><br><span class="line">$ cp -r ~/erlecopter_gazebo8/mav_comm/ ~/simulation/ros_catkin_ws/src/ </span><br><span class="line">$ cp -r ~/erlecopter_gazebo8/glog_catkin/ ~/simulation/ros_catkin_ws/src/ </span><br><span class="line">$ cp -r ~/erlecopter_gazebo8/catkin_simple/ ~/simulation/ros_catkin_ws/src/ </span><br><span class="line">$ cp -r ~/erlecopter_gazebo8/mavros/ ~/simulation/ros_catkin_ws/src/</span><br><span class="line">$ cp -r ~/erlecopter_gazebo8/gazebo_ros_pkgs/ ~/simulation/ros_catkin_ws/src/</span><br><span class="line"></span><br><span class="line">添加Python和C++样例</span><br><span class="line">$ cp -r ~/erlecopter_gazebo8/gazebo_cpp_examples/ ~/simulation/ros_catkin_ws/src/</span><br><span class="line">$ cp -r ~/erlecopter_gazebo8/gazebo_python_examples/ ~/simulation/ros_catkin_ws/src/</span><br></pre></td></tr></table></figure>
<blockquote>
<p>拷贝fix-unused-typedef-warning.patch文件到工作空间内</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ cp -r ~/erlecopter_gazebo8/fix-unused-typedef-warning.patch ~/simulation/ros_catkin_ws/src/</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装drcsim7（ubuntu16不支持apt-get，需使用源码下载安装）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo sh -c <span class="string">&#x27;echo &quot;deb http://packages.ros.org/ros/ubuntu xenial main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br><span class="line">$ wget http://packages.ros.org/ros.key -O - | sudo apt-key add -</span><br><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install osrf-common&#x27;s dependencies</span></span><br><span class="line">$ sudo apt-get install -y cmake               \</span><br><span class="line">                        debhelper           \</span><br><span class="line">                        ros-kinetic-ros      \</span><br><span class="line">                        ros-kinetic-ros-comm</span><br><span class="line">                        </span><br><span class="line"><span class="comment"># Install sandia-hand&#x27;s dependencies</span></span><br><span class="line">$ sudo apt-get install -y ros-kinetic-xacro        \</span><br><span class="line">                        ros-kinetic-ros          \</span><br><span class="line">                        ros-kinetic-image-common \</span><br><span class="line">                        ros-kinetic-ros-comm     \</span><br><span class="line">                        ros-kinetic-common-msgs  \</span><br><span class="line">                        libboost-dev            \</span><br><span class="line">                        avr-libc                \</span><br><span class="line">                        gcc-avr                 \</span><br><span class="line">                        libqt4-dev</span><br><span class="line">                        </span><br><span class="line"> <span class="comment"># Install gazebo-ros-pkgs</span></span><br><span class="line"> $ sudo apt-get install -y libtinyxml-dev                 \</span><br><span class="line">                        ros-kinetic-opencv3             \</span><br><span class="line">                        ros-kinetic-angles              \</span><br><span class="line">                        ros-kinetic-cv-bridge           \</span><br><span class="line">                        ros-kinetic-driver-base         \</span><br><span class="line">                        ros-kinetic-dynamic-reconfigure \</span><br><span class="line">                        ros-kinetic-geometry-msgs       \</span><br><span class="line">                        ros-kinetic-image-transport     \</span><br><span class="line">                        ros-kinetic-message-generation  \</span><br><span class="line">                        ros-kinetic-nav-msgs            \</span><br><span class="line">                        ros-kinetic-nodelet             \</span><br><span class="line">                        ros-kinetic-pcl-conversions     \</span><br><span class="line">                        ros-kinetic-pcl-ros             \</span><br><span class="line">                        ros-kinetic-polled-camera       \</span><br><span class="line">                        ros-kinetic-rosconsole          \</span><br><span class="line">                        ros-kinetic-rosgraph-msgs       \</span><br><span class="line">                        ros-kinetic-sensor-msgs         \</span><br><span class="line">                        ros-kinetic-trajectory-msgs     \</span><br><span class="line">                        ros-kinetic-urdf                \</span><br><span class="line">                        ros-kinetic-dynamic-reconfigure \</span><br><span class="line">                        ros-kinetic-rosgraph-msgs       \</span><br><span class="line">                        ros-kinetic-tf                  \</span><br><span class="line">                        ros-kinetic-cmake-modules  </span><br><span class="line">                        </span><br><span class="line"><span class="comment"># Install drcsim&#x27;s dependencies   </span></span><br><span class="line">$ sudo apt-get install -y cmake debhelper                         \</span><br><span class="line">                     ros-kinetic-std-msgs ros-kinetic-common-msgs   \</span><br><span class="line">                     ros-kinetic-image-common ros-kinetic-geometry  \</span><br><span class="line">                     ros-kinetic-robot-state-publisher            \</span><br><span class="line">                     ros-kinetic-image-pipeline                   \</span><br><span class="line">                     ros-kinetic-image-transport-plugins          \</span><br><span class="line">                     ros-kinetic-compressed-depth-image-transport \</span><br><span class="line">                     ros-kinetic-compressed-image-transport       \</span><br><span class="line">                     ros-kinetic-theora-image-transport           \</span><br><span class="line">                     ros-kinetic-ros-controllers                  \</span><br><span class="line">                     ros-kinetic-moveit-msgs                      \</span><br><span class="line">                     ros-kinetic-joint-limits-interface           \</span><br><span class="line">                     ros-kinetic-transmission-interface           \</span><br><span class="line">                     ros-kinetic-laser-assembler        </span><br><span class="line">                     </span><br><span class="line">$ sudo apt-get install ros-kinetic-pr2-controllers</span><br></pre></td></tr></table></figure>
<blockquote>
<p>拷贝drcsim相关包到工作空间</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ cp -r ~/erlecopter_gazebo8/osrf-common/  ~/simulation/ros_catkin_ws/src/</span><br><span class="line">$ cp -r ~/erlecopter_gazebo8/sandia-hand/ ~/simulation/ros_catkin_ws/src/</span><br><span class="line">$ cp -r ~/erlecopter_gazebo8/drcsim/ ~/simulation/ros_catkin_ws/src/</span><br></pre></td></tr></table></figure>
<blockquote>
<p>source一下</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ source /opt/ros/kinetic/setup.bash</span><br></pre></td></tr></table></figure>
<blockquote>
<p>修改 has_binary_operator.hpp文件（为避免包BOOST_JOIN错误）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo gedit /usr/include/boost/type_traits/detail/has_binary_operator.hpp</span><br></pre></td></tr></table></figure>
<p>点击<a href="https://ldgyyf.cn/2019/05/28/ROS/erle-copter仿真安装笔记之has-binary-operator-hpp/#more">此处</a>，拷贝其中的has_binary_operator.hpp代码，并粘贴至当前的has_binary_operator.hpp 文件中</p>
<p>主要的修改是在源文件中的两处位置添加了 <code>#ifndef Q_MOC_RUN</code> 和<code>#endif</code></p>
<blockquote>
<p>下载相应包进行替换（替换掉原工作空间的drcsim、hector_gazebo、gazebo_ros_pkgs） 链接: <a href="https://pan.baidu.com/s/1TufCNJ8z5TxyC5rnZhi56A">https://pan.baidu.com/s/1TufCNJ8z5TxyC5rnZhi56A</a> 提取码: usjz 下载文件主要包含三个文件，分别是drcsim、hector_gazebo、gazebo_ros_pkgs，将它们解压，并将（drcsim、hector_gazebo、gazebo_ros_pkgs）复制到~/simulation/ros_catkin_ws/src目录下，将前面的三个文件进行替换</p>
<p>编译工作空间</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ cd ~/simulation/ros_catkin_ws</span><br><span class="line">$ catkin_make --pkg mav_msgs mavros_msgs gazebo_msgs</span><br><span class="line">$ source devel/setup.bash</span><br><span class="line">$ catkin_make -j <span class="number">4</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p> 下载gazebo模型</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ mkdir -p ~/.gazebo/models</span><br><span class="line">$ git clone https://github.com/erlerobot/erle_gazebo_models</span><br><span class="line">$ mv erle_gazebo_models/* ~/.gazebo/models</span><br></pre></td></tr></table></figure>
<h2 id="五、启动erle-copter"><a href="#五、启动erle-copter" class="headerlink" title="五、启动erle_copter"></a>五、启动erle_copter</h2><blockquote>
<p>启动ArduCopter（一个终端）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ source ~/simulation/ros_catkin_ws/devel/setup.bash</span><br><span class="line">$ cd ~/simulation/ardupilot/ArduCopter</span><br><span class="line">$ ../Tools/autotest/sim_vehicle.sh -j <span class="number">4</span> -f Gazebo</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在另一个终端启动launch</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ cd ~/simulation/ros_catkin_ws/</span><br><span class="line">$ source ~/simulation/ros_catkin_ws/devel/setup.bash</span><br><span class="line">$ roslaunch ardupilot_sitl_gazebo_plugin erlecopter_spawn.launch</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在第一个终端上输入如下命令：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ param load /[path_to_your_home_directory]/simulation/ardupilot/Tools/Frame_params/Erle-Copter.param</span><br></pre></td></tr></table></figure>
<p>用你的实际目录替换掉上面的path_to_your_home_directory，如我的是：param load /home/cug/simulation/ardupilot/Tools/Frame_params/Erle-Copter.param</p>
<blockquote>
<p>起飞测试，仍然在第一个终端执行</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ mode GUIDED</span><br><span class="line">$ arm throttle</span><br><span class="line">$ takeoff <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>说明：在执行了arm throttle后，尽快输入takeoff 2 已完成起飞</p>
<h2 id="官网安装网址："><a href="#官网安装网址：" class="headerlink" title="官网安装网址："></a>官网安装网址：</h2><blockquote>
<p><a href="http://docs.erlerobotics.com/simulation/configuring_your_environment">http://docs.erlerobotics.com/simulation/configuring_your_environment</a></p>
</blockquote>
<h2 id="Github安装网址："><a href="#Github安装网址：" class="headerlink" title="Github安装网址："></a>Github安装网址：</h2><blockquote>
<p><a href="https://github.com/ldgcug/erlecopter_gazebo8/blob/master/README.md">https://github.com/ldgcug/erlecopter_gazebo8/blob/master/README.md</a></p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>在前面的安装过程中，中间有一个步骤是从百度云盘上下载了三个文件夹，并将之前的工作空间内的相关文件夹进行替换，之所以这样做，是因为在将文件上传到github的过程中，好像有部分文件丢失，因此下载了这缺失的部分文件，在编译过程中会报错，因此将文件解压并上传到百度云盘上以解决该问题</p>
<p>第二个是还是从别人的github上git程序包，原因如上，但是也压缩上传到百度云，下载后替换掉没有换，由于这个不在工作空间内，因此不影响编译，但是在运行时，会报权限的相关错误。因此还是从别人的github上下载较好。</p>
</blockquote>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>Gazebo</tag>
      </tags>
  </entry>
  <entry>
    <title>erle_copter仿真安装笔记之has_binary_operator.hpp</title>
    <url>/2019/05/28/ROS/erle-copter%E4%BB%BF%E7%9C%9F%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0%E4%B9%8Bhas-binary-operator-hpp/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在安装erle_copter过程中，为了避免出现BOOST的相关错误，有时需要修改文件里面的少许地方，但是该少许地方也不是特别好描述，因此创建该文件，直接将整个代码copy到需要修改的地方进行覆盖粘贴即可。</p>
</blockquote>
<p><code>has_binary_operator.hpp</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//  (C) Copyright <span class="number">2009</span>-<span class="number">2011</span> Frederic Bron, Robert Stewart, Steven Watanabe &amp; Roman Perepelitsa.</span><br><span class="line">//</span><br><span class="line">//  Use, modification <span class="keyword">and</span> distribution are subject to the Boost Software License,</span><br><span class="line">//  Version <span class="number">1.0</span>. (See accompanying file LICENSE_1_0.txt <span class="keyword">or</span> copy at</span><br><span class="line">//  http://www.boost.org/LICENSE_1_0.txt).</span><br><span class="line">//</span><br><span class="line">//  See http://www.boost.org/libs/type_traits <span class="keyword">for</span> most recent version including documentation.</span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;boost/config.hpp&gt;</span></span><br><span class="line"><span class="comment">#include &lt;boost/type_traits/ice.hpp&gt;</span></span><br><span class="line"><span class="comment">#include &lt;boost/type_traits/integral_constant.hpp&gt;</span></span><br><span class="line"><span class="comment">#include &lt;boost/type_traits/is_base_of.hpp&gt;</span></span><br><span class="line"><span class="comment">#include &lt;boost/type_traits/is_const.hpp&gt;</span></span><br><span class="line"><span class="comment">#include &lt;boost/type_traits/is_convertible.hpp&gt;</span></span><br><span class="line"><span class="comment">#include &lt;boost/type_traits/is_fundamental.hpp&gt;</span></span><br><span class="line"><span class="comment">#include &lt;boost/type_traits/is_integral.hpp&gt;</span></span><br><span class="line"><span class="comment">#include &lt;boost/type_traits/is_pointer.hpp&gt;</span></span><br><span class="line"><span class="comment">#include &lt;boost/type_traits/is_same.hpp&gt;</span></span><br><span class="line"><span class="comment">#include &lt;boost/type_traits/is_void.hpp&gt;</span></span><br><span class="line"><span class="comment">#include &lt;boost/type_traits/remove_cv.hpp&gt;</span></span><br><span class="line"><span class="comment">#include &lt;boost/type_traits/remove_pointer.hpp&gt;</span></span><br><span class="line"><span class="comment">#include &lt;boost/type_traits/remove_reference.hpp&gt;</span></span><br><span class="line"></span><br><span class="line">// should be the last <span class="comment">#include</span></span><br><span class="line"><span class="comment">#include &lt;boost/type_traits/detail/bool_trait_def.hpp&gt;</span></span><br><span class="line"></span><br><span class="line">// cannot include this header without getting warnings of the kind:</span><br><span class="line">// gcc:</span><br><span class="line">//    warning: value computed <span class="keyword">is</span> <span class="keyword">not</span> used</span><br><span class="line">//    warning: comparison between signed <span class="keyword">and</span> unsigned integer expressions</span><br><span class="line">// msvc:</span><br><span class="line">//    warning C4018: <span class="string">&#x27;&lt;&#x27;</span> : signed/unsigned mismatch</span><br><span class="line">//    warning C4244: <span class="string">&#x27;+=&#x27;</span> : conversion <span class="keyword">from</span> <span class="string">&#x27;double&#x27;</span> to <span class="string">&#x27;char&#x27;</span>, possible loss of data</span><br><span class="line">//    warning C4547: <span class="string">&#x27;*&#x27;</span> : operator before comma has no effect; expected operator <span class="keyword">with</span> side-effect</span><br><span class="line">//    warning C4800: <span class="string">&#x27;int&#x27;</span> : forcing value to <span class="built_in">bool</span> <span class="string">&#x27;true&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;false&#x27;</span> (performance warning)</span><br><span class="line">//    warning C4804: <span class="string">&#x27;&lt;&#x27;</span> : unsafe use of <span class="built_in">type</span> <span class="string">&#x27;bool&#x27;</span> <span class="keyword">in</span> operation</span><br><span class="line">//    warning C4805: <span class="string">&#x27;==&#x27;</span> : unsafe mix of <span class="built_in">type</span> <span class="string">&#x27;bool&#x27;</span> <span class="keyword">and</span> <span class="built_in">type</span> <span class="string">&#x27;char&#x27;</span> <span class="keyword">in</span> operation</span><br><span class="line">// cannot find another implementation -&gt; declared <span class="keyword">as</span> system header to suppress these warnings.</span><br><span class="line"><span class="comment">#if defined(__GNUC__)</span></span><br><span class="line"><span class="comment">#   pragma GCC system_header</span></span><br><span class="line"><span class="comment">#elif defined(BOOST_MSVC)</span></span><br><span class="line"><span class="comment">#   pragma warning ( push )</span></span><br><span class="line"><span class="comment">#   pragma warning ( disable : 4018 4244 4547 4800 4804 4805 4913 )</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"></span><br><span class="line">namespace boost &#123;</span><br><span class="line">namespace detail &#123;</span><br><span class="line"></span><br><span class="line">// This namespace ensures that argument-dependent name lookup does <span class="keyword">not</span> mess things up.</span><br><span class="line"><span class="comment">#ifndef Q_MOC_RUN</span></span><br><span class="line">namespace BOOST_JOIN(BOOST_TT_TRAIT_NAME,_impl) &#123;</span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line">// <span class="number">1.</span> a function to have an instance of <span class="built_in">type</span> T without requiring T to be default</span><br><span class="line">// constructible</span><br><span class="line">template &lt;typename T&gt; T &amp;make();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// <span class="number">2.</span> we provide our operator definition <span class="keyword">for</span> types that do <span class="keyword">not</span> have one already</span><br><span class="line"></span><br><span class="line">// a <span class="built_in">type</span> returned <span class="keyword">from</span> operator BOOST_TT_TRAIT_OP when no such operator <span class="keyword">is</span></span><br><span class="line">// found <span class="keyword">in</span> the <span class="built_in">type</span><span class="string">&#x27;s own namespace (our own operator is used) so that we have</span></span><br><span class="line"><span class="string">// a means to know that our operator was used</span></span><br><span class="line"><span class="string">struct no_operator &#123; &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// this class allows implicit conversions and makes the following operator</span></span><br><span class="line"><span class="string">// definition less-preferred than any other such operators that might be found</span></span><br><span class="line"><span class="string">// via argument-dependent name lookup</span></span><br><span class="line"><span class="string">struct any &#123; template &lt;class T&gt; any(T const&amp;); &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// when operator BOOST_TT_TRAIT_OP is not available, this one is used</span></span><br><span class="line"><span class="string">no_operator operator BOOST_TT_TRAIT_OP (const any&amp;, const any&amp;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 3. checks if the operator returns void or not</span></span><br><span class="line"><span class="string">// conditions: Lhs!=void and Rhs!=void</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// we first redefine &quot;operator,&quot; so that we have no compilation error if</span></span><br><span class="line"><span class="string">// operator BOOST_TT_TRAIT_OP returns void and we can use the return type of</span></span><br><span class="line"><span class="string">// (lhs BOOST_TT_TRAIT_OP rhs, returns_void_t()) to deduce if</span></span><br><span class="line"><span class="string">// operator BOOST_TT_TRAIT_OP returns void or not:</span></span><br><span class="line"><span class="string">// - operator BOOST_TT_TRAIT_OP returns void   -&gt; (lhs BOOST_TT_TRAIT_OP rhs, returns_void_t()) returns returns_void_t</span></span><br><span class="line"><span class="string">// - operator BOOST_TT_TRAIT_OP returns !=void -&gt; (lhs BOOST_TT_TRAIT_OP rhs, returns_void_t()) returns int</span></span><br><span class="line"><span class="string">struct returns_void_t &#123; &#125;;</span></span><br><span class="line"><span class="string">template &lt;typename T&gt; int operator,(const T&amp;, returns_void_t);</span></span><br><span class="line"><span class="string">template &lt;typename T&gt; int operator,(const volatile T&amp;, returns_void_t);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// this intermediate trait has member value of type bool:</span></span><br><span class="line"><span class="string">// - value==true -&gt; operator BOOST_TT_TRAIT_OP returns void</span></span><br><span class="line"><span class="string">// - value==false -&gt; operator BOOST_TT_TRAIT_OP does not return void</span></span><br><span class="line"><span class="string">template &lt; typename Lhs, typename Rhs &gt;</span></span><br><span class="line"><span class="string">struct operator_returns_void &#123;</span></span><br><span class="line"><span class="string">   // overloads of function returns_void make the difference</span></span><br><span class="line"><span class="string">   // yes_type and no_type have different size by construction</span></span><br><span class="line"><span class="string">   static ::boost::type_traits::yes_type returns_void(returns_void_t);</span></span><br><span class="line"><span class="string">   static ::boost::type_traits::no_type returns_void(int);</span></span><br><span class="line"><span class="string">   BOOST_STATIC_CONSTANT(bool, value = (sizeof(::boost::type_traits::yes_type)==sizeof(returns_void((make&lt;Lhs&gt;() BOOST_TT_TRAIT_OP make&lt;Rhs&gt;(),returns_void_t())))));</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 4. checks if the return type is Ret or Ret==dont_care</span></span><br><span class="line"><span class="string">// conditions: Lhs!=void and Rhs!=void</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">struct dont_care &#123; &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">template &lt; typename Lhs, typename Rhs, typename Ret, bool Returns_void &gt;</span></span><br><span class="line"><span class="string">struct operator_returns_Ret;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">template &lt; typename Lhs, typename Rhs &gt;</span></span><br><span class="line"><span class="string">struct operator_returns_Ret &lt; Lhs, Rhs, dont_care, true &gt; &#123;</span></span><br><span class="line"><span class="string">   BOOST_STATIC_CONSTANT(bool, value = true);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">template &lt; typename Lhs, typename Rhs &gt;</span></span><br><span class="line"><span class="string">struct operator_returns_Ret &lt; Lhs, Rhs, dont_care, false &gt; &#123;</span></span><br><span class="line"><span class="string">   BOOST_STATIC_CONSTANT(bool, value = true);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">template &lt; typename Lhs, typename Rhs &gt;</span></span><br><span class="line"><span class="string">struct operator_returns_Ret &lt; Lhs, Rhs, void, true &gt; &#123;</span></span><br><span class="line"><span class="string">   BOOST_STATIC_CONSTANT(bool, value = true);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">template &lt; typename Lhs, typename Rhs &gt;</span></span><br><span class="line"><span class="string">struct operator_returns_Ret &lt; Lhs, Rhs, void, false &gt; &#123;</span></span><br><span class="line"><span class="string">   BOOST_STATIC_CONSTANT(bool, value = false);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">template &lt; typename Lhs, typename Rhs, typename Ret &gt;</span></span><br><span class="line"><span class="string">struct operator_returns_Ret &lt; Lhs, Rhs, Ret, true &gt; &#123;</span></span><br><span class="line"><span class="string">   BOOST_STATIC_CONSTANT(bool, value = false);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// otherwise checks if it is convertible to Ret using the sizeof trick</span></span><br><span class="line"><span class="string">// based on overload resolution</span></span><br><span class="line"><span class="string">// condition: Ret!=void and Ret!=dont_care and the operator does not return void</span></span><br><span class="line"><span class="string">template &lt; typename Lhs, typename Rhs, typename Ret &gt;</span></span><br><span class="line"><span class="string">struct operator_returns_Ret &lt; Lhs, Rhs, Ret, false &gt; &#123;</span></span><br><span class="line"><span class="string">   static ::boost::type_traits::yes_type is_convertible_to_Ret(Ret); // this version is preferred for types convertible to Ret</span></span><br><span class="line"><span class="string">   static ::boost::type_traits::no_type is_convertible_to_Ret(...); // this version is used otherwise</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   BOOST_STATIC_CONSTANT(bool, value = (sizeof(is_convertible_to_Ret(make&lt;Lhs&gt;() BOOST_TT_TRAIT_OP make&lt;Rhs&gt;()))==sizeof(::boost::type_traits::yes_type)));</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 5. checks for operator existence</span></span><br><span class="line"><span class="string">// condition: Lhs!=void and Rhs!=void</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// checks if our definition of operator BOOST_TT_TRAIT_OP is used or an other</span></span><br><span class="line"><span class="string">// existing one;</span></span><br><span class="line"><span class="string">// this is done with redefinition of &quot;operator,&quot; that returns no_operator or has_operator</span></span><br><span class="line"><span class="string">struct has_operator &#123; &#125;;</span></span><br><span class="line"><span class="string">no_operator operator,(no_operator, has_operator);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">template &lt; typename Lhs, typename Rhs &gt;</span></span><br><span class="line"><span class="string">struct operator_exists &#123;</span></span><br><span class="line"><span class="string">   static ::boost::type_traits::yes_type s_check(has_operator); // this version is preferred when operator exists</span></span><br><span class="line"><span class="string">   static ::boost::type_traits::no_type s_check(no_operator); // this version is used otherwise</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   BOOST_STATIC_CONSTANT(bool, value = (sizeof(s_check(((make&lt;Lhs&gt;() BOOST_TT_TRAIT_OP make&lt;Rhs&gt;()),make&lt;has_operator&gt;())))==sizeof(::boost::type_traits::yes_type)));</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 6. main trait: to avoid any compilation error, this class behaves</span></span><br><span class="line"><span class="string">// differently when operator BOOST_TT_TRAIT_OP(Lhs, Rhs) is forbidden by the</span></span><br><span class="line"><span class="string">// standard.</span></span><br><span class="line"><span class="string">// Forbidden_if is a bool that is:</span></span><br><span class="line"><span class="string">// - true when the operator BOOST_TT_TRAIT_OP(Lhs, Rhs) is forbidden by the standard</span></span><br><span class="line"><span class="string">//   (would yield compilation error if used)</span></span><br><span class="line"><span class="string">// - false otherwise</span></span><br><span class="line"><span class="string">template &lt; typename Lhs, typename Rhs, typename Ret, bool Forbidden_if &gt;</span></span><br><span class="line"><span class="string">struct trait_impl1;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">template &lt; typename Lhs, typename Rhs, typename Ret &gt;</span></span><br><span class="line"><span class="string">struct trait_impl1 &lt; Lhs, Rhs, Ret, true &gt; &#123;</span></span><br><span class="line"><span class="string">   BOOST_STATIC_CONSTANT(bool, value = false);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">template &lt; typename Lhs, typename Rhs, typename Ret &gt;</span></span><br><span class="line"><span class="string">struct trait_impl1 &lt; Lhs, Rhs, Ret, false &gt; &#123;</span></span><br><span class="line"><span class="string">   BOOST_STATIC_CONSTANT(bool,</span></span><br><span class="line"><span class="string">      value = (</span></span><br><span class="line"><span class="string">         ::boost::type_traits::ice_and&lt;</span></span><br><span class="line"><span class="string">            operator_exists &lt; Lhs, Rhs &gt;::value,</span></span><br><span class="line"><span class="string">            operator_returns_Ret &lt; Lhs, Rhs, Ret, operator_returns_void &lt; Lhs, Rhs &gt;::value &gt;::value</span></span><br><span class="line"><span class="string">         &gt;::value</span></span><br><span class="line"><span class="string">      )</span></span><br><span class="line"><span class="string">   );</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// some specializations needs to be declared for the special void case</span></span><br><span class="line"><span class="string">template &lt; typename Rhs, typename Ret &gt;</span></span><br><span class="line"><span class="string">struct trait_impl1 &lt; void, Rhs, Ret, false &gt; &#123;</span></span><br><span class="line"><span class="string">   BOOST_STATIC_CONSTANT(bool, value = false);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">template &lt; typename Lhs, typename Ret &gt;</span></span><br><span class="line"><span class="string">struct trait_impl1 &lt; Lhs, void, Ret, false &gt; &#123;</span></span><br><span class="line"><span class="string">   BOOST_STATIC_CONSTANT(bool, value = false);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">template &lt; typename Ret &gt;</span></span><br><span class="line"><span class="string">struct trait_impl1 &lt; void, void, Ret, false &gt; &#123;</span></span><br><span class="line"><span class="string">   BOOST_STATIC_CONSTANT(bool, value = false);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// defines some typedef for convenience</span></span><br><span class="line"><span class="string">template &lt; typename Lhs, typename Rhs, typename Ret &gt;</span></span><br><span class="line"><span class="string">struct trait_impl &#123;</span></span><br><span class="line"><span class="string">   typedef typename ::boost::remove_reference&lt;Lhs&gt;::type Lhs_noref;</span></span><br><span class="line"><span class="string">   typedef typename ::boost::remove_reference&lt;Rhs&gt;::type Rhs_noref;</span></span><br><span class="line"><span class="string">   typedef typename ::boost::remove_cv&lt;Lhs_noref&gt;::type Lhs_nocv;</span></span><br><span class="line"><span class="string">   typedef typename ::boost::remove_cv&lt;Rhs_noref&gt;::type Rhs_nocv;</span></span><br><span class="line"><span class="string">   typedef typename ::boost::remove_cv&lt; typename ::boost::remove_reference&lt; typename ::boost::remove_pointer&lt;Lhs_noref&gt;::type &gt;::type &gt;::type Lhs_noptr;</span></span><br><span class="line"><span class="string">   typedef typename ::boost::remove_cv&lt; typename ::boost::remove_reference&lt; typename ::boost::remove_pointer&lt;Rhs_noref&gt;::type &gt;::type &gt;::type Rhs_noptr;</span></span><br><span class="line"><span class="string">   BOOST_STATIC_CONSTANT(bool, value = (trait_impl1 &lt; Lhs_noref, Rhs_noref, Ret, BOOST_TT_FORBIDDEN_IF &gt;::value));</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#ifndef Q_MOC_RUN</span></span><br><span class="line"><span class="string">&#125; // namespace impl</span></span><br><span class="line"><span class="string">#endif</span></span><br><span class="line"><span class="string">&#125; // namespace detail</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// this is the accessible definition of the trait to end user</span></span><br><span class="line"><span class="string">BOOST_TT_AUX_BOOL_TRAIT_DEF3(BOOST_TT_TRAIT_NAME, Lhs, Rhs=Lhs, Ret=::boost::detail::BOOST_JOIN(BOOST_TT_TRAIT_NAME,_impl)::dont_care, (::boost::detail::BOOST_JOIN(BOOST_TT_TRAIT_NAME,_impl)::trait_impl &lt; Lhs, Rhs, Ret &gt;::value))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125; // namespace boost</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#if defined(BOOST_MSVC)</span></span><br><span class="line"><span class="string">#   pragma warning ( pop )</span></span><br><span class="line"><span class="string">#endif</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#include &lt;boost/type_traits/detail/bool_trait_undef.hpp&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>Gazebo</tag>
      </tags>
  </entry>
  <entry>
    <title>ros在多台计算机之间的通信</title>
    <url>/2019/05/26/ROS/ros%E5%9C%A8%E5%A4%9A%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>利用ROS的性能，能实现两台机器之间的网络通信，并且具有跨系统性（可以在不同的ros版本版本之间通信）</p>
</blockquote>
<ul>
<li>需要两台机器在同一个局域网内</li>
<li>这里默认已经装好ROS（可以为不同版本）</li>
</ul>
<h1 id="一、两台电脑通信前的准备工作"><a href="#一、两台电脑通信前的准备工作" class="headerlink" title="一、两台电脑通信前的准备工作"></a>一、两台电脑通信前的准备工作</h1><h2 id="1、查看两台电脑各自的用户名和IP信息"><a href="#1、查看两台电脑各自的用户名和IP信息" class="headerlink" title="1、查看两台电脑各自的用户名和IP信息"></a>1、查看两台电脑各自的用户名和IP信息</h2><blockquote>
<p>在终端输入<code>who</code>能查看用户名，输入<code>ifconfig</code>能查看IP信息</p>
</blockquote>
<p>如：我这里的两台服务器的用户名和IP分别是</p>
<ul>
<li>cug_local，192.168.1.57</li>
<li>cug_master，192.168.1.58</li>
</ul>
<p><img src="/2019/05/26/ROS/ros%E5%9C%A8%E5%A4%9A%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/user_ip.png" alt></p>
<h2 id="2、修改-etc文件夹下的hosts文件"><a href="#2、修改-etc文件夹下的hosts文件" class="headerlink" title="2、修改/etc文件夹下的hosts文件"></a>2、修改/etc文件夹下的hosts文件</h2><blockquote>
<p>修改的目的是将两台电脑的ip和用户名绑定，这样在ping对方用户名时，可以解析成功</p>
</blockquote>
<p>（1）修改权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod a+w /etc/hosts</span><br></pre></td></tr></table></figure>
<p>（2）在/etc/hosts最后两行添加代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/hosts</span><br></pre></td></tr></table></figure>
<p>添加的第一行是本机的IP和用户名</p>
<p>添加的第二行是另一台机器的IP和用户名</p>
<p><img src="/2019/05/26/ROS/ros%E5%9C%A8%E5%A4%9A%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/etc_host.png" alt></p>
<p>（3）重启网络</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure>
<p>如果无法重启网络，可以参考该<a href="http://note.youdao.com/noteshare?id=fafc2918f2d674a47aeea10a8c58af88&amp;sub=2464807983794E51824D606CCA01AEA7">网址</a></p>
<blockquote>
<font color="red">两台电脑都做上面三个步骤操作</font>

</blockquote>
<h1 id="二、两台电脑间通信测试"><a href="#二、两台电脑间通信测试" class="headerlink" title="二、两台电脑间通信测试"></a>二、两台电脑间通信测试</h1><h2 id="1、安装chrony"><a href="#1、安装chrony" class="headerlink" title="1、安装chrony"></a>1、安装chrony</h2><blockquote>
<p>两台电脑上都安装chrony包，用于实现同步</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install chrony</span><br></pre></td></tr></table></figure>
<h2 id="2、安装ssh服务端"><a href="#2、安装ssh服务端" class="headerlink" title="2、安装ssh服务端"></a>2、安装ssh服务端</h2><blockquote>
<p>两台电脑上都安装ssh服务端（默认ubuntu系统自带ssh客户端）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>
<blockquote>
<p>服务端启动测试</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -e |grep ssh</span><br></pre></td></tr></table></figure>
<p>如果看到了sshd，说明ssh-server已经启动成功</p>
<h2 id="3、ping测试"><a href="#3、ping测试" class="headerlink" title="3、ping测试"></a>3、ping测试</h2><p>（1）cug_local机器ping 机器cug_master</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh cug_local</span><br><span class="line">ping cug_master</span><br></pre></td></tr></table></figure>
<p>如果出现如下信息，则通信正常</p>
<p><img src="/2019/05/26/ROS/ros%E5%9C%A8%E5%A4%9A%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/A_ping_B.png" alt></p>
<p>（2）反向测试，cug_master机器ping机器cug_local</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh cug_master</span><br><span class="line">ping cug_local</span><br></pre></td></tr></table></figure>
<p><img src="/2019/05/26/ROS/ros%E5%9C%A8%E5%A4%9A%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/B_ping_A.png" alt></p>
<h1 id="三、-bashrc配置"><a href="#三、-bashrc配置" class="headerlink" title="三、~/.bashrc配置"></a>三、~/.bashrc配置</h1><blockquote>
<p>说明：假设将cug_master机器当做主机master</p>
<p>（1）在cug_local机器的~/.bashrc文件中添加如下两行代码</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export ROS_HOSTNAME=cug_local</span><br><span class="line">export ROS_MASTER_URI=http://cug_master:11311</span><br></pre></td></tr></table></figure>
<p>添加完后，需要source一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>
<blockquote>
<p>（2）在cug_master机器的~/.bashrc文件中添加如下两行代码</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export ROS_HOSTNAME=cug_master</span><br><span class="line">export ROS_MASTER_URI=http://cug_master:11311</span><br></pre></td></tr></table></figure>
<p>添加完后，需要source一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>
<h1 id="四、ros通信"><a href="#四、ros通信" class="headerlink" title="四、ros通信"></a>四、ros通信</h1><blockquote>
<p>说明：假设将cug_master机器当做主机master</p>
</blockquote>
<h2 id="1、在cug-master机器上执行如下命令"><a href="#1、在cug-master机器上执行如下命令" class="headerlink" title="1、在cug_master机器上执行如下命令"></a>1、在cug_master机器上执行如下命令</h2><p>（1）打开一个新终端，输入roscore</p>
<p>（2）打开另一个新终端，输入如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun rospy_tutorials listener.py</span><br></pre></td></tr></table></figure>
<h2 id="2、在cug-local机器上执行如下命令"><a href="#2、在cug-local机器上执行如下命令" class="headerlink" title="2、在cug_local机器上执行如下命令"></a>2、在cug_local机器上执行如下命令</h2><p>打开一个新终端，输入如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun rospy_tutorials talker.py</span><br></pre></td></tr></table></figure>
<h2 id="3、结果显示"><a href="#3、结果显示" class="headerlink" title="3、结果显示"></a>3、结果显示</h2><p>（1）cug_master机器上显示（rosrun的终端上）</p>
<p><img src="/2019/05/26/ROS/ros%E5%9C%A8%E5%A4%9A%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/listener.png" alt></p>
<p>（2）cug_local机器上显示（rosrun的终端上）</p>
<p><img src="/2019/05/26/ROS/ros%E5%9C%A8%E5%A4%9A%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/talker.png" alt></p>
<p>如上两图显示，则整个配置成功</p>
<h1 id="五、架构图"><a href="#五、架构图" class="headerlink" title="五、架构图"></a>五、架构图</h1><p><img src="/2019/05/26/ROS/ros%E5%9C%A8%E5%A4%9A%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/communicate.png" alt></p>
<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h1><ul>
<li><p><a href="https://blog.csdn.net/heyijia0327/article/details/42065293">网址1</a></p>
</li>
<li><p><a href="https://blog.csdn.net/heyijia0327/article/details/42080641">网址2</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>ros自定义msg消息类型及roslaunch启动多节点</title>
    <url>/2019/07/13/ROS/ros%E8%87%AA%E5%AE%9A%E4%B9%89msg%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8Aroslaunch%E5%90%AF%E5%8A%A8%E5%A4%9A%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>有时候需要自己定制一些特定的msg消息类型，而原有的就不一定能满足，这时候就需要自己进行一些相关的设置了</p>
<p>对于自定义的ros节点，也能通过roslaunch启动节点（py程序）</p>
</blockquote>
<h1 id="rosmsg相关设置"><a href="#rosmsg相关设置" class="headerlink" title="rosmsg相关设置"></a>rosmsg相关设置</h1><h2 id="默认msg消息类型"><a href="#默认msg消息类型" class="headerlink" title="默认msg消息类型"></a>默认msg消息类型</h2><blockquote>
<p><a href="http://www.ros.org/browse/search.php?distro=melodic&amp;q=msg">官网</a></p>
</blockquote>
<p>如geometry_msgs：<a href="http://docs.ros.org/diamondback/api/geometry_msgs/html/index-msg.html">msg API</a></p>
<p><img src="/2019/07/13/ROS/ros%E8%87%AA%E5%AE%9A%E4%B9%89msg%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8Aroslaunch%E5%90%AF%E5%8A%A8%E5%A4%9A%E8%8A%82%E7%82%B9/1.png" alt></p>
<h2 id="一、创建工作空间"><a href="#一、创建工作空间" class="headerlink" title="一、创建工作空间"></a>一、创建工作空间</h2><blockquote>
<p>我这里采用的编译方式是catkin build，而不是catkin_make，是因为一些需要，如mavros和mavlink的编译方式为catkin build，如果不需要下载这两个包，则采用哪一种编译方式都不影响</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mkdir -p catkin_ws/src</span><br><span class="line">cd catkin_ws</span><br><span class="line">catkin build</span><br><span class="line">source devel/setup.bash</span><br></pre></td></tr></table></figure>
<p>下图是我已经全部创建好后的所有ros包，也正是有mavlink和mavros，所有才采用catkin build编译</p>
<p><img src="/2019/07/13/ROS/ros%E8%87%AA%E5%AE%9A%E4%B9%89msg%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8Aroslaunch%E5%90%AF%E5%8A%A8%E5%A4%9A%E8%8A%82%E7%82%B9/2.png" alt></p>
<h2 id="二、在工作空间创建新的ros消息包"><a href="#二、在工作空间创建新的ros消息包" class="headerlink" title="二、在工作空间创建新的ros消息包"></a>二、在工作空间创建新的ros消息包</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ~/catkin_ws/src</span><br><span class="line">catkin_create_pkg ldg_msgs rospy std_msgs roscpp</span><br><span class="line">cd ldg_msgs</span><br><span class="line">mkdir msg</span><br><span class="line">cd msg</span><br><span class="line">touch Velocity.msg</span><br></pre></td></tr></table></figure>
<p>然后打开Velocity.msg</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gedit Velocity.msg</span><br></pre></td></tr></table></figure>
<p>将如下代码复制粘贴进去</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">float32 vx</span><br><span class="line">float32 vy</span><br><span class="line">float32 vz</span><br><span class="line">int32   t</span><br></pre></td></tr></table></figure>
<p>文件结构如下图</p>
<p><img src="/2019/07/13/ROS/ros%E8%87%AA%E5%AE%9A%E4%B9%89msg%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8Aroslaunch%E5%90%AF%E5%8A%A8%E5%A4%9A%E8%8A%82%E7%82%B9/3.png" alt></p>
<h2 id="三、修改package-xml"><a href="#三、修改package-xml" class="headerlink" title="三、修改package.xml"></a>三、修改package.xml</h2><blockquote>
<p>因为需要message_generation生成C++或Python能使用的代码，所以向package.xml文件中添加如下两行：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;build_depend&gt;message_generation&lt;/build_depend&gt;</span><br><span class="line">&lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt;</span><br></pre></td></tr></table></figure>
<p>在如下位置进行添加</p>
<p><img src="/2019/07/13/ROS/ros%E8%87%AA%E5%AE%9A%E4%B9%89msg%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8Aroslaunch%E5%90%AF%E5%8A%A8%E5%A4%9A%E8%8A%82%E7%82%B9/4.png" alt></p>
<h2 id="四、修改CMakeLists-txt"><a href="#四、修改CMakeLists-txt" class="headerlink" title="四、修改CMakeLists.txt"></a>四、修改CMakeLists.txt</h2><blockquote>
<p>CMakeLists.txt中有四个地方需要修改：</p>
</blockquote>
<h3 id="4-1-添加message-generation"><a href="#4-1-添加message-generation" class="headerlink" title="4.1 添加message_generation"></a>4.1 添加message_generation</h3><blockquote>
<p>向find_package()中添加message_generation</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find_package(catkin REQUIRED COMPONENTS</span><br><span class="line">  roscpp</span><br><span class="line">  rospy</span><br><span class="line">  std_msgs</span><br><span class="line">  message_generation</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>在如下位置进行修改为上面的代码</p>
<p><img src="/2019/07/13/ROS/ros%E8%87%AA%E5%AE%9A%E4%B9%89msg%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8Aroslaunch%E5%90%AF%E5%8A%A8%E5%A4%9A%E8%8A%82%E7%82%B9/5.png" alt></p>
<h3 id="4-2-添加Velocity-msg"><a href="#4-2-添加Velocity-msg" class="headerlink" title="4.2 添加Velocity.msg"></a>4.2 添加Velocity.msg</h3><blockquote>
<p>向add_message_files()中添加Velocity.msg</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add_message_files(</span><br><span class="line">  FILES</span><br><span class="line">  Velocity.msg</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>在如下位置进行修改为上面的代码</p>
<p><img src="/2019/07/13/ROS/ros%E8%87%AA%E5%AE%9A%E4%B9%89msg%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8Aroslaunch%E5%90%AF%E5%8A%A8%E5%A4%9A%E8%8A%82%E7%82%B9/6.png" alt></p>
<h3 id="4-3-去掉generate-message（）注释"><a href="#4-3-去掉generate-message（）注释" class="headerlink" title="4.3 去掉generate_message（）注释"></a>4.3 去掉generate_message（）注释</h3><p><img src="/2019/07/13/ROS/ros%E8%87%AA%E5%AE%9A%E4%B9%89msg%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8Aroslaunch%E5%90%AF%E5%8A%A8%E5%A4%9A%E8%8A%82%E7%82%B9/7.png" alt></p>
<h3 id="4-4-添加message-runtime"><a href="#4-4-添加message-runtime" class="headerlink" title="4.4 添加message_runtime"></a>4.4 添加message_runtime</h3><blockquote>
<p>向catkin_package()添加message_runtime</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">catkin_package(</span><br><span class="line">   CATKIN_DEPENDS roscpp rospy std_msgs message_runtime</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>在如下位置进行修改为上面的代码</p>
<p><img src="/2019/07/13/ROS/ros%E8%87%AA%E5%AE%9A%E4%B9%89msg%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8Aroslaunch%E5%90%AF%E5%8A%A8%E5%A4%9A%E8%8A%82%E7%82%B9/8.png" alt></p>
<h2 id="五、编译"><a href="#五、编译" class="headerlink" title="五、编译"></a>五、编译</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ~/catkin_ws</span><br><span class="line">catkin build</span><br><span class="line">source devel/setup.bash</span><br></pre></td></tr></table></figure>
<h2 id="六、测试"><a href="#六、测试" class="headerlink" title="六、测试"></a>六、测试</h2><ul>
<li><p>首先，要启动roscore</p>
</li>
<li><p>然后，在另一个新终端，执行如下命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ~/catkin_ws</span><br><span class="line">source devel/setup.bash</span><br><span class="line">rosmsg show ldg_msgs/Velocity</span><br></pre></td></tr></table></figure>
<p>出现如下信息，则说明配置成功</p>
<p><img src="/2019/07/13/ROS/ros%E8%87%AA%E5%AE%9A%E4%B9%89msg%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8Aroslaunch%E5%90%AF%E5%8A%A8%E5%A4%9A%E8%8A%82%E7%82%B9/9.png" alt></p>
</li>
<li><p>python代码测试</p>
<blockquote>
<p>创建test.py程序，拷贝如下代码，不报错即可</p>
</blockquote>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> ldg_msgs.msg <span class="keyword">import</span> Velocity</span><br><span class="line"></span><br><span class="line">msg = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">receiveVel</span>(<span class="params">data</span>):</span></span><br><span class="line">	<span class="comment">#vel = Velocity()</span></span><br><span class="line">	msg = data</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;data&#x27;</span>,data)</span><br><span class="line"></span><br><span class="line">test = rospy.Subscriber(<span class="string">&quot;/test&quot;</span>,Velocity,receiveVel)</span><br><span class="line"></span><br><span class="line">rospy.init_node(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;msg&#x27;</span>,msg)</span><br><span class="line">	time.sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="七、添加多个自定义msg消息类型"><a href="#七、添加多个自定义msg消息类型" class="headerlink" title="七、添加多个自定义msg消息类型"></a>七、添加多个自定义msg消息类型</h2><h3 id="7-1-创建多个msg文件"><a href="#7-1-创建多个msg文件" class="headerlink" title="7.1 创建多个msg文件"></a>7.1 创建多个msg文件</h3><blockquote>
<p><code>ldg_msgs</code>文件夹下中添加<code>VelocityZ.msg</code>、<code>Imu.msg</code>、<code>Position.msg</code>等文件</p>
</blockquote>
<p><code>ldg_msgs/msg</code>文件目录结构</p>
<p><img src="/2019/07/13/ROS/ros%E8%87%AA%E5%AE%9A%E4%B9%89msg%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8Aroslaunch%E5%90%AF%E5%8A%A8%E5%A4%9A%E8%8A%82%E7%82%B9/10.png" alt></p>
<p>msg消息类型</p>
<p><img src="/2019/07/13/ROS/ros%E8%87%AA%E5%AE%9A%E4%B9%89msg%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8Aroslaunch%E5%90%AF%E5%8A%A8%E5%A4%9A%E8%8A%82%E7%82%B9/11.png" alt></p>
<h3 id="7-2-CMakeLists-txt添加msg"><a href="#7-2-CMakeLists-txt添加msg" class="headerlink" title="7.2 CMakeLists.txt添加msg"></a>7.2 CMakeLists.txt添加msg</h3><p><img src="/2019/07/13/ROS/ros%E8%87%AA%E5%AE%9A%E4%B9%89msg%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8Aroslaunch%E5%90%AF%E5%8A%A8%E5%A4%9A%E8%8A%82%E7%82%B9/12.png" alt></p>
<h3 id="7-3-编译"><a href="#7-3-编译" class="headerlink" title="7.3 编译"></a>7.3 编译</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ~/catkin_ws</span><br><span class="line">catkin build</span><br><span class="line">source devel/setup.bash</span><br></pre></td></tr></table></figure>
<blockquote>
<p>已经定义过msg消息类型后，在此基础之上，只需要照着第七步就可以完成后面的多个msg消息类型的定制化了，同样的，也能参照第六步进行相关测试</p>
</blockquote>
<h1 id="roslaunch相关设置"><a href="#roslaunch相关设置" class="headerlink" title="roslaunch相关设置"></a>roslaunch相关设置</h1><blockquote>
<p>已经通过多个py程序定义了多个ros节点</p>
</blockquote>
<h2 id="一、文件结构"><a href="#一、文件结构" class="headerlink" title="一、文件结构"></a>一、文件结构</h2><ul>
<li>工作空间名：catkin_ws</li>
<li>编译方式：catkin build</li>
<li>自定义msg包名：ldg_msgs</li>
<li>ros控制程序包名：ros_controller</li>
<li>roslaunch启动文件：ros_airsim.launch</li>
<li>ros节点对应驱动py：*_driver.py</li>
<li>ros控制程序py：ros_controller.py</li>
</ul>
<p><img src="/2019/07/13/ROS/ros%E8%87%AA%E5%AE%9A%E4%B9%89msg%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8Aroslaunch%E5%90%AF%E5%8A%A8%E5%A4%9A%E8%8A%82%E7%82%B9/14.png" alt></p>
<p><img src="/2019/07/13/ROS/ros%E8%87%AA%E5%AE%9A%E4%B9%89msg%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8Aroslaunch%E5%90%AF%E5%8A%A8%E5%A4%9A%E8%8A%82%E7%82%B9/13.png" alt></p>
<h2 id="二、roslaunch文件编写"><a href="#二、roslaunch文件编写" class="headerlink" title="二、roslaunch文件编写"></a>二、roslaunch文件编写</h2><blockquote>
<p>在catkin_ws/src文件夹下创建一个和include、src同级的launch文件夹，并在launch文件夹下创建<code>.luanch</code>文件，<code>.launch</code>文件内容如下</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line"></span><br><span class="line">	&lt;group ns = <span class="string">&quot;Drone1&quot;</span>&gt;</span><br><span class="line">		&lt;node pkg=<span class="string">&quot;ros_controller&quot;</span> name=<span class="string">&quot;drone1_takeoff_driver&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;drone1_takeoff_driver.py&quot;</span> /&gt;</span><br><span class="line">		&lt;node pkg=<span class="string">&quot;ros_controller&quot;</span> name=<span class="string">&quot;drone1_camera_driver&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;drone1_camera_driver.py&quot;</span> /&gt;</span><br><span class="line">	&lt;/group&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&lt;group ns = <span class="string">&quot;Drone2&quot;</span>&gt;</span><br><span class="line">		&lt;node pkg=<span class="string">&quot;ros_controller&quot;</span> name=<span class="string">&quot;drone2_takeoff_driver&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;drone2_takeoff_driver.py&quot;</span> /&gt;</span><br><span class="line">		&lt;node pkg=<span class="string">&quot;ros_controller&quot;</span> name=<span class="string">&quot;drone2_camera_driver&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;drone2_camera_driver.py&quot;</span> output = <span class="string">&quot;screen&quot;</span> /&gt;</span><br><span class="line">	&lt;/group&gt;</span><br><span class="line"></span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>pkg是ros的程序包名，name是对节点重新进行命名，type是对应相应节点的py程序</p>
</blockquote>
<h2 id="三、roslaunch启动多节点"><a href="#三、roslaunch启动多节点" class="headerlink" title="三、roslaunch启动多节点"></a>三、roslaunch启动多节点</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd catkin_ws</span><br><span class="line">source devel/setup.bash</span><br><span class="line">roslaunch ros_controller ros_airsim.launch</span><br></pre></td></tr></table></figure>
<p>启动launch文件后，终端输出信息如下：</p>
<p><img src="/2019/07/13/ROS/ros%E8%87%AA%E5%AE%9A%E4%B9%89msg%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8Aroslaunch%E5%90%AF%E5%8A%A8%E5%A4%9A%E8%8A%82%E7%82%B9/15.png" alt></p>
<p>利用rostopic list查看信息，这里自定义的节点订阅和发布的topic就都显示出来了</p>
<p><img src="/2019/07/13/ROS/ros%E8%87%AA%E5%AE%9A%E4%B9%89msg%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%8F%8Aroslaunch%E5%90%AF%E5%8A%A8%E5%A4%9A%E8%8A%82%E7%82%B9/16.png" alt></p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li>rosmsg相关设置：<a href="https://blog.csdn.net/NiYintang/article/details/86043621">rosmsg</a></li>
<li>roslaunch相关设置：<a href="https://blog.csdn.net/Forrest_Z/article/details/52618833">roslaunch</a></li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>因为控制代码使用python语言写的，因此在利用roslaunch启动ros的多个节点时，并不需要在CMakeLists.list和package.xml里面进行相关的配置，但是自定义msg消息类型则是需要进行配置的，至此，就能全部通过ros来控制了，最开始我通过shell命令来启动多个python文件从而来启动多个节点，这种方式不如roslaunch好</p>
</blockquote>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu16安装ROS</title>
    <url>/2019/05/22/ROS/ubuntu16%E5%AE%89%E8%A3%85ROS/</url>
    <content><![CDATA[<blockquote>
<p>ubuntu与ros对应版本关系（我目前更多的用的是ubuntu16）</p>
</blockquote>
<p><img src="/2019/05/22/ROS/ubuntu16%E5%AE%89%E8%A3%85ROS/ubuntu_ros.png" alt></p>
<blockquote>
<p>ubuntu16下ros安装步骤</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo sh -c <span class="string">&#x27;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br><span class="line">$ sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:<span class="number">80</span> --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install ros-kinetic-desktop-full</span><br><span class="line">$ sudo rosdep init</span><br><span class="line">$ rosdep update</span><br><span class="line">$ echo <span class="string">&quot;source /opt/ros/kinetic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line">$ source ~/.bashrc</span><br><span class="line">$ sudo apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure>
<p>安装完成后，在终端输入roscore，若最后出现roscore，则说明安装成功</p>
<p>原文：ros<a href="http://wiki.ros.org/kinetic/Installation/Ubuntu">官网</a></p>
<blockquote>
<p>总结：上面安装步骤安装的是ros kinetic 桌面完全版，并且安装完后，默认安装了gazebo7。但在终端输入gazebo，并不会出现gazebo界面，原因是缺少gazebo的两个最基本模型文件（sun和ground_plane）。gazebo_models文件下载，点击<a href="https://bitbucket.org/osrf/gazebo_models/src/default/">此处</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>卸载原版gazebo并安装新版gazebo</title>
    <url>/2019/05/22/ROS/%E5%8D%B8%E8%BD%BD%E5%8E%9F%E7%89%88gazebo%E5%B9%B6%E5%AE%89%E8%A3%85%E6%96%B0%E7%89%88gazebo/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>从最初始在ubuntu14上安装ros indigo版本，到后面在ubuntu16安装ros kinetic版本，中间遇到过需要安装新版本gazebo的问题，如u14上安装ros后，默认安装gazebo2，可能需要改成gazebo7；u16上安装ros后，默认安装gazebo7，可能需要改成gazebo8</p>
<p> 卸载<code>gazebo2.2</code>安装<code>gazebo7</code>网址：点击<a href="https://blog.csdn.net/tust123qht/article/details/78796617">此处</a></p>
<p>卸载<code>gazebo7</code>安装<code>gazebo8</code>步骤如下：</p>
</blockquote>
<p>（1）卸载ros-kinetic-desktop-full</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get remove ros-kinetic-desktop-full</span><br></pre></td></tr></table></figure>
<p>（2）卸载gazebo7</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get remove gazebo-* </span><br></pre></td></tr></table></figure>
<p>（3）安装gazebo8</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo sh -c <span class="string">&#x27;echo &quot;deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/gazebo-stable.list&#x27;</span></span><br><span class="line">$ wget http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install gazebo8</span><br><span class="line">$ sudo apt-get install libgazebo8-dev</span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：第一步就卸载了ros-kinetic-desktop-full，因此需要重新安装ros-kinetic-desktop。</p>
<p>特别注意：此次安装没有full，有full的则会默认安装</p>
</blockquote>
<p>（4）安装ros-kinetic-desktop</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo sh -c <span class="string">&#x27;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br><span class="line">$ sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:<span class="number">80</span> --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install ros-kinetic-desktop</span><br><span class="line">$ sudo rosdep init</span><br><span class="line">$ rosdep update</span><br><span class="line">$ echo <span class="string">&quot;source /opt/ros/kinetic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line">$ source ~/.bashrc</span><br><span class="line">$ sudo apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure>
<p>（5）安装一些必要ros包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install ros-kinetic-gazebo8-msgs</span><br><span class="line">$ sudo apt-get install ros-kinetic-gazebo8-ros-control</span><br><span class="line">$ sudo apt-get install ros-kinetic-gazebo8-plugins</span><br><span class="line">$ sudo apt-get install ros-kinetic-gazebo8-ros-pkgs</span><br><span class="line">$ sudo apt-get install ros-kinetic-gazebo8-ros</span><br><span class="line">$ sudo apt-get install ros-kinetic-image-view</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其他可能帮助信息</p>
</blockquote>
<p>如果需要卸载ros的话，参考如下命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get purge ros-*</span><br><span class="line">$ sudo rm -rf /etc/ros</span><br><span class="line">$ gedit ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>找到：带有kinetic的那一行删除，保存，然后：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ source ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>如果不删掉这一行或者在他之前多余的命令，那么你会在打开终端后发现第一行永远是个报错信息，虽然有时候没有什么影响。 </p>
<p>参考网址：<a href="https://blog.csdn.net/qq_41058594/article/details/81079259">网址1</a></p>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>网址收藏</title>
    <url>/2019/05/15/%E6%94%B6%E8%97%8F%E7%BD%91%E5%9D%80/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/</url>
    <content><![CDATA[<h2 id="NexT"><a href="#NexT" class="headerlink" title="NexT:"></a>NexT:</h2><p>NexT官网：<a href="https://theme-next.iissnan.com/getting-started.html">https://theme-next.iissnan.com/getting-started.html</a></p>
<p>Hexo指南：<a href="https://hexo-guide.readthedocs.io/zh_CN/latest/index.html">https://hexo-guide.readthedocs.io/zh_CN/latest/index.html</a></p>
<p>好友博客：</p>
<ul>
<li>qzjiang：<a href="https://ourvibes.github.io/">https://ourvibes.github.io/</a></li>
</ul>
<p>他人博客：</p>
<ul>
<li><a href="https://xian6ge.cn/">https://xian6ge.cn/</a></li>
<li><a href="https://yangbingdong.com/">https://yangbingdong.com/</a></li>
</ul>
<p>简书：</p>
<ul>
<li><a href="https://www.jianshu.com/p/3a05351a37dc?tdsourcetag=s_pctim_aiomsg">https://www.jianshu.com/p/3a05351a37dc?tdsourcetag=s_pctim_aiomsg</a></li>
</ul>
<p>其他：</p>
<ul>
<li>搜索引擎优化：<a href="https://juejin.im/post/590b451a0ce46300588c43a0?tdsourcetag=s_pctim_aiomsg">https://juejin.im/post/590b451a0ce46300588c43a0?tdsourcetag=s_pctim_aiomsg</a></li>
</ul>
]]></content>
      <categories>
        <category>网址收藏</category>
      </categories>
      <tags>
        <tag>网址收藏</tag>
      </tags>
  </entry>
  <entry>
    <title>(转)自己手动搭建翻墙服务器</title>
    <url>/2019/05/21/%E6%94%B6%E8%97%8F%E7%BD%91%E5%9D%80/%E8%BD%AC-%E8%87%AA%E5%B7%B1%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BA%E7%BF%BB%E5%A2%99%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
<p>原文网址：<a href="https://github.com/XX-net/XX-Net/issues/6506">https://github.com/XX-net/XX-Net/issues/6506</a></p>
</blockquote>
<h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><p>（1）创建服务器是，地区选择美国</p>
<p>（2）选择每月<code>3.5$</code> 的价格</p>
<p>（3）其他的照着原网址就可以了</p>
]]></content>
      <categories>
        <category>网址收藏</category>
      </categories>
      <tags>
        <tag>网址收藏</tag>
      </tags>
  </entry>
  <entry>
    <title>VS2017配置（一）之opencv配置</title>
    <url>/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bopencv%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>帮朋友搭建配置的，因为配置过程稍微有些复杂，因此还是做个笔记记录一下，说不定以后就会涉及相关的事情</p>
</blockquote>
<h2 id="一、Opencv下载"><a href="#一、Opencv下载" class="headerlink" title="一、Opencv下载"></a>一、Opencv下载</h2><blockquote>
<p> 点击<a href="https://opencv.org/releases/">官网</a>，下载Opencv，我这里下载的是4.1.0版本</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bopencv%E9%85%8D%E7%BD%AE/opencv_download.png" alt></p>
<h2 id="二、文件解压并解压到自定义路径位置"><a href="#二、文件解压并解压到自定义路径位置" class="headerlink" title="二、文件解压并解压到自定义路径位置"></a>二、文件解压并解压到自定义路径位置</h2><blockquote>
<p>双击exe文件，进行解压，我解压放在D盘自定义的文件夹下</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bopencv%E9%85%8D%E7%BD%AE/opencv_unzip.png" alt></p>
<p>解压完成后，文件内容如下：</p>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bopencv%E9%85%8D%E7%BD%AE/opencv_path.png" alt></p>
<h2 id="三、系统变量配置"><a href="#三、系统变量配置" class="headerlink" title="三、系统变量配置"></a>三、系统变量配置</h2><blockquote>
<p>我下面的界面显示是在Win10系统下，如果是Win7，某些界面会有所区别</p>
</blockquote>
<p>右键<code>此电脑</code>，点击<code>属性</code>，在弹出的界面框中，点击<code>高级系统设置</code>，然后选择<code>环境变量</code>，最终出现如下界面</p>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bopencv%E9%85%8D%E7%BD%AE/system_setup.png" alt></p>
<p>找到系统变量中的<code>Path</code>，点击<code>编辑</code>，添加opencv相应目录路径，如下图：</p>
<blockquote>
<p>要添加的路径，就是opencv之前所解压的位置，具体到哪一级目录，看下图中的添加示例</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bopencv%E9%85%8D%E7%BD%AE/opencv_system_path.png" alt></p>
<p>最后，在所有需要点击确定的地方，点击确定以保存</p>
<h2 id="四、相关文件配置"><a href="#四、相关文件配置" class="headerlink" title="四、相关文件配置"></a>四、相关文件配置</h2><blockquote>
<p>将第三步添加的bin目录下的两个文件（<code>opencv_world410.dll、opencv_world410d.dll</code>）拷贝到<code>C:\Windows\SysWOW64</code>文件夹下</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bopencv%E9%85%8D%E7%BD%AE/SysWoW64.png" alt></p>
<blockquote>
<p>将bin目录下的<code>opencv_ffmpeg410_64.dll</code>拷贝到<code>C:\Windows\System32</code>文件夹下</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bopencv%E9%85%8D%E7%BD%AE/System32.png" alt></p>
<blockquote>
<p>如果版本不一致，则添加对应的dll文件即可</p>
</blockquote>
<h2 id="五、VS2017配置"><a href="#五、VS2017配置" class="headerlink" title="五、VS2017配置"></a>五、VS2017配置</h2><h3 id="5-1-，打开VS2017，新建一个c-空项目"><a href="#5-1-，打开VS2017，新建一个c-空项目" class="headerlink" title="5.1 ，打开VS2017，新建一个c++空项目"></a>5.1 ，打开VS2017，新建一个c++空项目</h3><p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bopencv%E9%85%8D%E7%BD%AE/new_c++_project.png" alt></p>
<h3 id="5-2-打开属性管理器"><a href="#5-2-打开属性管理器" class="headerlink" title="5.2 打开属性管理器"></a>5.2 打开属性管理器</h3><p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bopencv%E9%85%8D%E7%BD%AE/shuxing.png" alt></p>
<h3 id="5-3-配置Debug-x64"><a href="#5-3-配置Debug-x64" class="headerlink" title="5.3 配置Debug|x64"></a>5.3 配置Debug|x64</h3><p>找到<code>Debug|x64</code>，右键<code>Microsoft.CPP.x64.user</code>，点击<code>属性</code></p>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bopencv%E9%85%8D%E7%BD%AE/debug_x64.png" alt></p>
<h3 id="5-4-添加包含目录和库目录"><a href="#5-4-添加包含目录和库目录" class="headerlink" title="5.4 添加包含目录和库目录"></a>5.4 添加包含目录和库目录</h3><blockquote>
<p>添加包含目录</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bopencv%E9%85%8D%E7%BD%AE/baohanmulu.png" alt></p>
<blockquote>
<p>添加库目录</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bopencv%E9%85%8D%E7%BD%AE/kumulu.png" alt></p>
<blockquote>
<p>在所有需要点击确定的地方，点击确定以保存</p>
</blockquote>
<h3 id="5-5-添加附加依赖项"><a href="#5-5-添加附加依赖项" class="headerlink" title="5.5 添加附加依赖项"></a>5.5 添加附加依赖项</h3><p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bopencv%E9%85%8D%E7%BD%AE/fujia.png" alt></p>
<blockquote>
<p>在所有需要点击确定的地方，点击确定以保存</p>
</blockquote>
<h3 id="5-6-解决方案配置"><a href="#5-6-解决方案配置" class="headerlink" title="5.6 解决方案配置"></a>5.6 解决方案配置</h3><blockquote>
<p>在解决方案这里，选择Debug、X64配置</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bopencv%E9%85%8D%E7%BD%AE/x64.png" alt></p>
<h2 id="六、测试"><a href="#六、测试" class="headerlink" title="六、测试"></a>六、测试</h2><h3 id="6-1-打开Project1-sln"><a href="#6-1-打开Project1-sln" class="headerlink" title="6.1 打开Project1.sln"></a>6.1 打开Project1.sln</h3><blockquote>
<p>右键<code>源文件</code>，点击<code>添加</code>，选择<code>新建项</code>，创建main.cpp文件</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bopencv%E9%85%8D%E7%BD%AE/main.png" alt></p>
<h3 id="6-2-拷贝代码"><a href="#6-2-拷贝代码" class="headerlink" title="6.2 拷贝代码"></a>6.2 拷贝代码</h3><blockquote>
<p>将下面代码拷贝到main.cpp中，需要注意的是，载入图像这里要自己保存一张图片，并能够读取</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/types_c.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui_c.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">Vec3b <span class="title">RandomColor</span><span class="params">(<span class="keyword">int</span> value)</span></span>;  <span class="comment">//生成随机颜色函数  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Mat image = <span class="built_in">imread</span>(<span class="string">&quot;20.jpg&quot;</span>);    <span class="comment">//载入图像  </span></span><br><span class="line">	<span class="built_in">imshow</span>(<span class="string">&quot;Source Image&quot;</span>, image);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//灰度化，滤波，Canny边缘检测  </span></span><br><span class="line">	Mat imageGray;</span><br><span class="line">	<span class="built_in">cvtColor</span>(image, imageGray, CV_RGB2GRAY);<span class="comment">//灰度转换  </span></span><br><span class="line">	<span class="built_in">GaussianBlur</span>(imageGray, imageGray, <span class="built_in">Size</span>(<span class="number">5</span>, <span class="number">5</span>), <span class="number">2</span>);   <span class="comment">//高斯滤波  </span></span><br><span class="line">	<span class="built_in">imshow</span>(<span class="string">&quot;Gray Image&quot;</span>, imageGray);</span><br><span class="line">	<span class="built_in">Canny</span>(imageGray, imageGray, <span class="number">80</span>, <span class="number">150</span>);</span><br><span class="line">	<span class="built_in">imshow</span>(<span class="string">&quot;Canny Image&quot;</span>, imageGray);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//查找轮廓  </span></span><br><span class="line">	vector&lt;vector&lt;Point&gt;&gt; contours;</span><br><span class="line">	vector&lt;Vec4i&gt; hierarchy;</span><br><span class="line">	<span class="built_in">findContours</span>(imageGray, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, <span class="built_in">Point</span>());</span><br><span class="line">	Mat imageContours = Mat::<span class="built_in">zeros</span>(image.<span class="built_in">size</span>(), CV_8UC1);  <span class="comment">//轮廓     </span></span><br><span class="line">	<span class="function">Mat <span class="title">marks</span><span class="params">(image.size(), CV_32S)</span></span>;   <span class="comment">//Opencv分水岭第二个矩阵参数  </span></span><br><span class="line">	marks = Scalar::<span class="built_in">all</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> compCount = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (; index &gt;= <span class="number">0</span>; index = hierarchy[index][<span class="number">0</span>], compCount++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//对marks进行标记，对不同区域的轮廓进行编号，相当于设置注水点，有多少轮廓，就有多少注水点  </span></span><br><span class="line">		<span class="built_in">drawContours</span>(marks, contours, index, Scalar::<span class="built_in">all</span>(compCount + <span class="number">1</span>), <span class="number">1</span>, <span class="number">8</span>, hierarchy);</span><br><span class="line">		<span class="built_in">drawContours</span>(imageContours, contours, index, <span class="built_in">Scalar</span>(<span class="number">255</span>), <span class="number">1</span>, <span class="number">8</span>, hierarchy);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//我们来看一下传入的矩阵marks里是什么东西  </span></span><br><span class="line">	Mat marksShows;</span><br><span class="line">	<span class="built_in">convertScaleAbs</span>(marks, marksShows);</span><br><span class="line">	<span class="built_in">imshow</span>(<span class="string">&quot;marksShow&quot;</span>, marksShows);</span><br><span class="line">	<span class="built_in">imshow</span>(<span class="string">&quot;轮廓&quot;</span>, imageContours);</span><br><span class="line">	<span class="built_in">watershed</span>(image, marks);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//我们再来看一下分水岭算法之后的矩阵marks里是什么东西  </span></span><br><span class="line">	Mat afterWatershed;</span><br><span class="line">	<span class="built_in">convertScaleAbs</span>(marks, afterWatershed);</span><br><span class="line">	<span class="built_in">imshow</span>(<span class="string">&quot;After Watershed&quot;</span>, afterWatershed);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//对每一个区域进行颜色填充  </span></span><br><span class="line">	Mat PerspectiveImage = Mat::<span class="built_in">zeros</span>(image.<span class="built_in">size</span>(), CV_8UC3);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; marks.rows; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; marks.cols; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> index = marks.at&lt;<span class="keyword">int</span>&gt;(i, j);</span><br><span class="line">			<span class="keyword">if</span> (marks.at&lt;<span class="keyword">int</span>&gt;(i, j) == <span class="number">-1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				PerspectiveImage.at&lt;Vec3b&gt;(i, j) = <span class="built_in">Vec3b</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				PerspectiveImage.at&lt;Vec3b&gt;(i, j) = <span class="built_in">RandomColor</span>(index);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">imshow</span>(<span class="string">&quot;After ColorFill&quot;</span>, PerspectiveImage);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//分割并填充颜色的结果跟原始图像融合  </span></span><br><span class="line">	Mat wshed;</span><br><span class="line">	<span class="built_in">addWeighted</span>(image, <span class="number">0.4</span>, PerspectiveImage, <span class="number">0.6</span>, <span class="number">0</span>, wshed);</span><br><span class="line">	<span class="built_in">imshow</span>(<span class="string">&quot;AddWeighted Image&quot;</span>, wshed);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">waitKey</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Vec3b <span class="title">RandomColor</span><span class="params">(<span class="keyword">int</span> value)</span>   <span class="comment">//生成随机颜色函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	value = value % <span class="number">255</span>;  <span class="comment">//生成0~255的随机数  </span></span><br><span class="line">	RNG rng;</span><br><span class="line">	<span class="keyword">int</span> aa = rng.<span class="built_in">uniform</span>(<span class="number">0</span>, value);</span><br><span class="line">	<span class="keyword">int</span> bb = rng.<span class="built_in">uniform</span>(<span class="number">0</span>, value);</span><br><span class="line">	<span class="keyword">int</span> cc = rng.<span class="built_in">uniform</span>(<span class="number">0</span>, value);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Vec3b</span>(aa, bb, cc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="6-3-编译"><a href="#6-3-编译" class="headerlink" title="6.3 编译"></a>6.3 编译</h3><blockquote>
<p>确保下面编译成功才进行后续的操作，解决方案配置一定要设置为Debug x64</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bopencv%E9%85%8D%E7%BD%AE/compile.png" alt></p>
<h3 id="6-4-运行"><a href="#6-4-运行" class="headerlink" title="6.4 运行"></a>6.4 运行</h3><blockquote>
<p>按F5键运行，最终出现下图则全部配置完成</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bopencv%E9%85%8D%E7%BD%AE/result.png" alt></p>
<blockquote>
<p>为了保证代码完整性，也就是在前面的代码中没有进行删除，否则可以删除部分代码，进行简单一点的测试</p>
</blockquote>
<h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><a href="https://blog.csdn.net/qq_41175905/article/details/80560429">csdn博客</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面的参考链接，没有遇到什么错误的完成了opencv在VS2017上面的配置，感谢别人的付出</p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>VS2017</tag>
        <tag>Opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>VS2017配置（二）之GDAL配置</title>
    <url>/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BGDAL%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>暂时还不太清楚GDAL是用来干啥的，总之需要用，于是参照网上教程，在VS2017上配置了GDAL，后面再去了解这个的相关作用</p>
</blockquote>
<h2 id="一、GDAL下载"><a href="#一、GDAL下载" class="headerlink" title="一、GDAL下载"></a>一、GDAL下载</h2><blockquote>
<p>点击<a href="https://trac.osgeo.org/gdal/wiki/DownloadSource">官网</a>，下载gdal，我这里下载的是2.3.3版本</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BGDAL%E9%85%8D%E7%BD%AE/gdal_download.png" alt></p>
<h2 id="二、文件解压并解压到特定路径"><a href="#二、文件解压并解压到特定路径" class="headerlink" title="二、文件解压并解压到特定路径"></a>二、文件解压并解压到特定路径</h2><blockquote>
<p>我这里是在D盘的Program Files文件夹下，创建了GDAL文件夹，也将解压文件存放在GDAL文件夹下</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BGDAL%E9%85%8D%E7%BD%AE/gdal_location.png" alt></p>
<h2 id="三、GDAL编译安装"><a href="#三、GDAL编译安装" class="headerlink" title="三、GDAL编译安装"></a>三、GDAL编译安装</h2><h3 id="3-1-修改源代码"><a href="#3-1-修改源代码" class="headerlink" title="3.1 修改源代码"></a>3.1 修改源代码</h3><blockquote>
<p>找到解压地址 D:\Program Files\GDAL\gdal-2.3.3文件夹下的nmake.opt文件，打开，对文件进行修改，保存</p>
<p>（1）修改第41行的代码为：<code>MSVC_VER=1910</code></p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BGDAL%E9%85%8D%E7%BD%AE/nmake_41.png" alt></p>
<blockquote>
<p>（2）修改第57行的代码为：<code>GDAL_HOME = “D:\Program Files\GDAL\gdal-2.3.3”</code></p>
<p>注意：这里的地址要根据自己的实际地址设置</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BGDAL%E9%85%8D%E7%BD%AE/nmake_57.png" alt></p>
<blockquote>
<p>（3）修改第184行的代码为：<code>#WIN64=YES</code></p>
<p>原来的可能中间有空格，原来可能是这样的<code># WIN64=YES</code></p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BGDAL%E9%85%8D%E7%BD%AE/nmake_184.png" alt></p>
<h3 id="3-2-编译"><a href="#3-2-编译" class="headerlink" title="3.2 编译"></a>3.2 编译</h3><blockquote>
<p>首先，打开适用于VS2017的X64的本级工具命令提示</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BGDAL%E9%85%8D%E7%BD%AE/VS2017_x64.png" alt></p>
<blockquote>
<p>在该窗口，进入到gdal 2.3.3目录下</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd D:\Program Files\GDAL\gdal-2.3.3</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后执行下面代码进行编译</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmake /f makefile.vc MSVC_VER=1910 WIN64=yes</span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：在编译过程中，比较耗时，但是编译过程没有问题</p>
</blockquote>
<h3 id="3-3-安装GDAL"><a href="#3-3-安装GDAL" class="headerlink" title="3.3 安装GDAL"></a>3.3 安装GDAL</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmake /f makefile.vc install MSVC_VER=1910 WIN64=yes</span><br><span class="line">nmake /f makefile.vc devinstall MSVC_VER=1910 WIN64=yes</span><br></pre></td></tr></table></figure>
<h2 id="四、VS2017配置GDAL"><a href="#四、VS2017配置GDAL" class="headerlink" title="四、VS2017配置GDAL"></a>四、VS2017配置GDAL</h2><h3 id="4-1-打开VS2017，新建一个C-空项目"><a href="#4-1-打开VS2017，新建一个C-空项目" class="headerlink" title="4.1 打开VS2017，新建一个C++空项目"></a>4.1 打开VS2017，新建一个C++空项目</h3><h3 id="4-2-点击-菜单栏-gt-视图-gt-其他窗口-gt-属性管理器"><a href="#4-2-点击-菜单栏-gt-视图-gt-其他窗口-gt-属性管理器" class="headerlink" title="4.2 点击   菜单栏-&gt;视图-&gt;其他窗口-&gt;属性管理器"></a>4.2 点击   菜单栏-&gt;视图-&gt;其他窗口-&gt;属性管理器</h3><h3 id="4-3-找到-Debug-x64-，右键-Microsoft-CPP-x64-user，点击属性"><a href="#4-3-找到-Debug-x64-，右键-Microsoft-CPP-x64-user，点击属性" class="headerlink" title="4.3 找到  Debug|x64 ，右键 Microsoft.CPP.x64.user，点击属性"></a>4.3 找到  Debug|x64 ，右键 Microsoft.CPP.x64.user，点击属性</h3><h3 id="4-4-在Microsoft-CPP-x64-user属性页中，添加包含目录、库目录"><a href="#4-4-在Microsoft-CPP-x64-user属性页中，添加包含目录、库目录" class="headerlink" title="4.4 在Microsoft.CPP.x64.user属性页中，添加包含目录、库目录"></a>4.4 在Microsoft.CPP.x64.user属性页中，添加包含目录、库目录</h3><blockquote>
<p>添加包含目录</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BGDAL%E9%85%8D%E7%BD%AE/baohanmulu.png" alt></p>
<blockquote>
<p>添加库目录</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BGDAL%E9%85%8D%E7%BD%AE/kumulu.png" alt></p>
<blockquote>
<p>在所有需要点确定的地方，点击确定以保存</p>
</blockquote>
<h3 id="4-5-在Microsoft-CPP-x64-user属性页中，添加附加依赖项"><a href="#4-5-在Microsoft-CPP-x64-user属性页中，添加附加依赖项" class="headerlink" title="4.5 在Microsoft.CPP.x64.user属性页中，添加附加依赖项"></a>4.5 在Microsoft.CPP.x64.user属性页中，添加附加依赖项</h3><blockquote>
<p>手动输入：gdal_i.lib，最后记得确定保存</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BGDAL%E9%85%8D%E7%BD%AE/fujiaxiang.png" alt></p>
<h2 id="五、设置系统变量"><a href="#五、设置系统变量" class="headerlink" title="五、设置系统变量"></a>五、设置系统变量</h2><blockquote>
<p>右键<code>此电脑</code>，点击<code>属性</code>，在弹出的界面框中，点击<code>高级系统设置</code>，然后选择<code>环境变量</code>，最终出现如下界面</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BGDAL%E9%85%8D%E7%BD%AE/system_setup.png" alt></p>
<blockquote>
<p>选择系统变量Path，点击编辑</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BGDAL%E9%85%8D%E7%BD%AE/path_gdal.png" alt></p>
<blockquote>
<p>保险起见，将电脑重启，确保环境变量生效</p>
</blockquote>
<h2 id="六、测试"><a href="#六、测试" class="headerlink" title="六、测试"></a>六、测试</h2><h3 id="6-1-新建main-cpp"><a href="#6-1-新建main-cpp" class="headerlink" title="6.1 新建main.cpp"></a>6.1 新建main.cpp</h3><p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BGDAL%E9%85%8D%E7%BD%AE/mian.png" alt></p>
<h3 id="6-2-拷贝代码"><a href="#6-2-拷贝代码" class="headerlink" title="6.2 拷贝代码"></a>6.2 拷贝代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;gdal_priv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span>* pszFile;</span><br><span class="line">	<span class="built_in">GDALAllRegister</span>();</span><br><span class="line">	pszFile = <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\1.jpg&quot;</span>;</span><br><span class="line">	GDALDataset *poDataset = (GDALDataset*)<span class="built_in">GDALOpen</span>(pszFile, GA_ReadOnly);</span><br><span class="line">	GDALRasterBand *poBand = poDataset-&gt;<span class="built_in">GetRasterBand</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> xsize = poBand-&gt;<span class="built_in">GetXSize</span>();</span><br><span class="line">	<span class="keyword">int</span> ysize = poBand-&gt;<span class="built_in">GetYSize</span>();</span><br><span class="line">	cout &lt;&lt; xsize &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; ysize &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="6-3-解决方案配置"><a href="#6-3-解决方案配置" class="headerlink" title="6.3 解决方案配置"></a>6.3 解决方案配置</h3><blockquote>
<p>这一步很重要</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BGDAL%E9%85%8D%E7%BD%AE/x64.png" alt></p>
<h3 id="6-4-编译"><a href="#6-4-编译" class="headerlink" title="6.4  编译"></a>6.4  编译</h3><blockquote>
<p>菜单栏     生成-&gt;重新生成解决方案</p>
</blockquote>
<h3 id="6-5-运行"><a href="#6-5-运行" class="headerlink" title="6.5 运行"></a>6.5 运行</h3><blockquote>
<p>按F5键运行，此时报如下错误：gdal203.dll 等相关的错误</p>
</blockquote>
<p>解决方法：</p>
<blockquote>
<p>将D:\Program Files\GDAL\gdal-2.3.3目录下的gdal203.dll拷贝到C:\Windows\System32文件夹下</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BGDAL%E9%85%8D%E7%BD%AE/gdal_203.png" alt></p>
<blockquote>
<p>重新编译运行，成功输出图片大小，则配置成功，此时运行成功后的界面如下：</p>
</blockquote>
<p><img src="/2019/06/26/%E7%B3%BB%E7%BB%9F/VS2017%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BGDAL%E9%85%8D%E7%BD%AE/result.png" alt></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>GDAL编译链接参考（前三步）：<a href="https://blog.csdn.net/qq_29413829/article/details/84404677?tdsourcetag=s_pctim_aiomsg#1GDAL_2">csdn博客</a></li>
<li>GDAL在VS2017的配置参考（四五六步）：<a href="https://blog.csdn.net/qq_32153213/article/details/81363588">csdn博客</a></li>
<li>gdal203.dll错误解决参考：<a href="https://blog.csdn.net/Dragonzxc/article/details/80356883">csdn博客</a></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>相比于opencv，这个稍微复杂了一点，参照的文档多一些忙不过好在还是配置成功</p>
</blockquote>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>VS2017</tag>
        <tag>GDAL</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下sublime相关配置</title>
    <url>/2019/07/10/%E7%B3%BB%E7%BB%9F/Windows%E4%B8%8Bsublime%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在windows上下载sublime，一个是为了编辑txt文本文件方便，另一个也能通过Sublime来运行python代码，而不用在cmd窗口或者pycharm上</p>
</blockquote>
<h2 id="一、Sublime-Text3下载"><a href="#一、Sublime-Text3下载" class="headerlink" title="一、Sublime Text3下载"></a>一、Sublime Text3下载</h2><blockquote>
<p> Sublime Text3 下载，请点击<a href="https://www.sublimetext.com/3">官网</a></p>
</blockquote>
<p>有一段时间，不能通过官网下载，每次一点下载的时候，就网页报错，目前还可以下载，当然也是打开了VPN的</p>
<h2 id="二、Sublime配置运行python程序"><a href="#二、Sublime配置运行python程序" class="headerlink" title="二、Sublime配置运行python程序"></a>二、Sublime配置运行python程序</h2><h3 id="2-1-下载Python"><a href="#2-1-下载Python" class="headerlink" title="2.1 下载Python"></a>2.1 下载Python</h3><blockquote>
<p>Python下载，请点击<a href="https://www.python.org/downloads/">官网</a></p>
</blockquote>
<p>我这里下载的是3.73版本，这一段时间，下载一些软件，特别慢，可能是近期比较敏感，因此，我通过在linux下终端翻墙下载，然后在拷贝到本地，进行安装的</p>
<p>linux下终端翻墙下载python的命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains4 wget https://www.python.org/ftp/python/3.7.3/python-3.7.3-amd64.exe</span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/10/%E7%B3%BB%E7%BB%9F/Windows%E4%B8%8Bsublime%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/1.png" alt></p>
<p><img src="/2019/07/10/%E7%B3%BB%E7%BB%9F/Windows%E4%B8%8Bsublime%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/2.png" alt></p>
<h3 id="2-2-安装Python"><a href="#2-2-安装Python" class="headerlink" title="2.2 安装Python"></a>2.2 安装Python</h3><blockquote>
<p>安装过程中，选择自定义安装，并且在 添加到Path变量中一栏处，打勾，将Python添加到环境变量中。最终Python安装在C:\Program Files\Python37  目录下</p>
</blockquote>
<h3 id="2-3-测试Python"><a href="#2-3-测试Python" class="headerlink" title="2.3 测试Python"></a>2.3 测试Python</h3><blockquote>
<p>打开cmd窗口，输入python，如果进入python环境，则安装成功</p>
</blockquote>
<h3 id="2-4-Sublime配置"><a href="#2-4-Sublime配置" class="headerlink" title="2.4 Sublime配置"></a>2.4 Sublime配置</h3><h4 id="2-4-1-插件配置"><a href="#2-4-1-插件配置" class="headerlink" title="2.4.1 插件配置"></a>2.4.1 插件配置</h4><blockquote>
<p>选择 <code>首选项</code>-&gt;<code>浏览插件</code></p>
</blockquote>
<p><img src="/2019/07/10/%E7%B3%BB%E7%BB%9F/Windows%E4%B8%8Bsublime%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/3.png" alt></p>
<blockquote>
<p>在打开的文件夹中，找到Python文件夹，默认是没有的，下图显示的是我已经新建过的Python文件夹</p>
</blockquote>
<p><img src="/2019/07/10/%E7%B3%BB%E7%BB%9F/Windows%E4%B8%8Bsublime%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/4.png" alt></p>
<blockquote>
<p>在python文件夹下新建一个文件，并且命名为Python3.sublime-build，文件里的内容如下</p>
<font color="red">说明：下图中的路径要修改为自己安装的python路径 </font>

</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  &quot;cmd&quot;: [&quot;C:\\Program Files\\Python37\\python.exe&quot;, &quot;-u&quot;, &quot;$file&quot;], </span><br><span class="line">  &quot;file_regex&quot;: &quot;^[ ]File \&quot;(…?)\&quot;, line ([0-9]*)&quot;, </span><br><span class="line">  &quot;selector&quot;: &quot;source.python&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/10/%E7%B3%BB%E7%BB%9F/Windows%E4%B8%8Bsublime%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/5.png" alt></p>
<h4 id="2-4-2-编译配置"><a href="#2-4-2-编译配置" class="headerlink" title="2.4.2  编译配置"></a>2.4.2  编译配置</h4><blockquote>
<p>点击 <code>工具</code>-&gt;<code>编译系统</code>-&gt;<code>自动编译</code>，这里要选择为自动编译</p>
<p>说明：在网上的一些教程很多是选择的Python3，而不是自动编译，这个Python3是我们第一步插件配置完成后产生的</p>
</blockquote>
<p><img src="/2019/07/10/%E7%B3%BB%E7%BB%9F/Windows%E4%B8%8Bsublime%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/6.png" alt></p>
<h4 id="2-4-3-测试"><a href="#2-4-3-测试" class="headerlink" title="2.4.3 测试"></a>2.4.3 测试</h4><blockquote>
<p>新建一个py程序，在py程序中，写入如下代码</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&#x27;hello world&#x27;)</span><br></pre></td></tr></table></figure>
<p>按快捷键ctrl +b即可运行</p>
<p><img src="/2019/07/10/%E7%B3%BB%E7%BB%9F/Windows%E4%B8%8Bsublime%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/7.png" alt></p>
<h3 id="2-5-Sublime提示缺少相关python包"><a href="#2-5-Sublime提示缺少相关python包" class="headerlink" title="2.5 Sublime提示缺少相关python包"></a>2.5 Sublime提示缺少相关python包</h3><blockquote>
<p>在写python代码的过程中，可能经常要导入一些包，而这些包也没有安装，又需要在sublime下运行时，此时需要先安装相关python包，如pyperlicp</p>
</blockquote>
<p>（1）首先要确保pip已经安装，利用pip来安装依赖包</p>
<p>（2）在windows上搜索命令提示符，右键以管理员身份运行</p>
<p><img src="/2019/07/10/%E7%B3%BB%E7%BB%9F/Windows%E4%B8%8Bsublime%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/8.png" alt></p>
<p>（3）安装pyperclip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pyperclip</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一定要在管理员身份权限下进行安装，否则会报权限错误</p>
</blockquote>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h2 id="三、Sublime-配置sublimeREPL"><a href="#三、Sublime-配置sublimeREPL" class="headerlink" title="三、Sublime 配置sublimeREPL"></a>三、Sublime 配置sublimeREPL</h2><blockquote>
<p>主要问题是写的py程序，在sublime下不能进行input，在运行时会报如下的错误：</p>
<p><strong>EOFError: EOF when reading a line</strong>，因此参考网上的教程对该问题进行了解决</p>
</blockquote>
<h3 id="3-1-安装Package-Control包管理工具"><a href="#3-1-安装Package-Control包管理工具" class="headerlink" title="3.1 安装Package Control包管理工具"></a>3.1 安装Package Control包管理工具</h3><blockquote>
<p>按快捷键 <code>ctrl + ~</code>或者 <strong>查看 -&gt; 显示控制栏</strong> 来调出命令界面</p>
</blockquote>
<p>然后输入如下代码到命令输入框中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import urllib.request,os,hashlib; h = &#x27;6f4c264a24d933ce70df5dedcf1dcaee&#x27; + &#x27;ebe013ee18cced0ef93d5f746d80ef60&#x27;; pf = &#x27;Package Control.sublime-package&#x27;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &#x27;http://packagecontrol.io/&#x27; + pf.replace(&#x27; &#x27;, &#x27;%20&#x27;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&#x27;Error validating download (got %s instead of %s), please try manual install&#x27; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &#x27;wb&#x27; ).write(by)</span><br></pre></td></tr></table></figure>
<p>稍等一会儿，重启sublime，如果在首选项下看到有Package Control，则安装成功</p>
<p><img src="/2019/07/10/%E7%B3%BB%E7%BB%9F/Windows%E4%B8%8Bsublime%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/9.png" alt></p>
<h3 id="3-2-安装sublimeREPL"><a href="#3-2-安装sublimeREPL" class="headerlink" title="3.2 安装sublimeREPL"></a>3.2 安装sublimeREPL</h3><blockquote>
<font color="red">下面的所有打开sublime操作，皆在windows的菜单栏搜索sublime，并且以管理员身份打开，否则会无效</font>

<p>打开sublime，按快捷键ctrl + shift +p  或者首选项-&gt;Package Control，输入install后选择 Package Control:Install Package</p>
</blockquote>
<p><img src="/2019/07/10/%E7%B3%BB%E7%BB%9F/Windows%E4%B8%8Bsublime%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/10.png" alt></p>
<p>在弹出的界面输入sublimeREPL，回车等待sublimeREPL的安装（我这里因为已经安装了sublimeREPL，所以并没有出现）</p>
<p><img src="/2019/07/10/%E7%B3%BB%E7%BB%9F/Windows%E4%B8%8Bsublime%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/11.png" alt></p>
<p>安装完成后，重启sublime，如果在菜单栏工具下出现sublimeREPL，则安装成功</p>
<p><img src="/2019/07/10/%E7%B3%BB%E7%BB%9F/Windows%E4%B8%8Bsublime%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/12.png" alt></p>
<h3 id="3-2-sublimeREPL配置"><a href="#3-2-sublimeREPL配置" class="headerlink" title="3.2 sublimeREPL配置"></a>3.2 sublimeREPL配置</h3><blockquote>
<p>在SublimeText3路径下，我的是C:\Program Files (x86)\Sublime Text3\Data\Packages\SublimeREPL\config\Python中找到Main.sublime-menu文件，然后对文件里面的内容进行修改</p>
<p>由于直接用sublime打开该文件，保存时会因为权限不够而无法保存，因此我先将该文件拷贝到其他位置，然后修改过后，在重新拷贝过来进行覆盖</p>
</blockquote>
<p>（1）修改Main.sublime-menu文件</p>
<p>​    通过搜索repl_python，定位到修改内容所在周围，将cmd里面的内容修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;cmd&quot;: [&quot;python&quot;, &quot;-i&quot;, &quot;-u&quot;,&quot;$file_basename&quot;],</span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/10/%E7%B3%BB%E7%BB%9F/Windows%E4%B8%8Bsublime%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/13.png" alt></p>
<p>（2）设置快捷键</p>
<blockquote>
<font color="red">仍然需要注意的是，以管理员身份运行sublime</font>

</blockquote>
<p>​    打开sublime，然后打开<code>首选项</code>-&gt;<code>按键绑定-用户</code>，然后输入如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">	 &#123;</span><br><span class="line">    &quot;keys&quot;: [&quot;f5&quot;],</span><br><span class="line">    &quot;caption&quot;: &quot;SublimeREPL: Python - RUN current file&quot;,</span><br><span class="line">    &quot;command&quot;: &quot;run_existing_window_command&quot;,</span><br><span class="line">    &quot;args&quot;: &#123;</span><br><span class="line">        &quot;id&quot;: &quot;repl_python_run&quot;,</span><br><span class="line">        &quot;file&quot;: &quot;config/Python/Main.sublime-menu&quot;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    &quot;keys&quot;: [&quot;f8&quot;],</span><br><span class="line">    &quot;caption&quot;: &quot;SublimeREPL: Python - PDB current file&quot;,</span><br><span class="line">    &quot;command&quot;: &quot;run_existing_window_command&quot;,</span><br><span class="line">    &quot;args&quot;: &#123;</span><br><span class="line">        &quot;id&quot;: &quot;repl_python_pdb&quot;,</span><br><span class="line">        &quot;file&quot;: &quot;config/Python/Main.sublime-menu&quot;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>最后进行保存即可</p>
<p>（3）配置单窗口调试</p>
<blockquote>
<p>打开C:\Program Files (x86)\Sublime Text3\Data\Packages\SublimeREPL\config\Python文件夹下的Main.sublime-menu；和前面一样，仍然是先拷贝到外面进行修改，然后重新拷贝回来进行覆盖，否则会报权限问题而无法保存</p>
</blockquote>
<p>打开Main.sublime-meun文件后，通过搜索repl_python_run，快速定位到修改内容周围，然后在下图所示位置添加代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;view_id&quot;:&quot;*REPL* [python]&quot;,</span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/10/%E7%B3%BB%E7%BB%9F/Windows%E4%B8%8Bsublime%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/14.png" alt></p>
<p>最后对C:\Program Files (x86)\Sublime Text3\Data\Packages\SublimeREPL文件夹下的sublimerepl.py进行修改（先将py拷贝到外面修改，然后拷贝回来覆盖）</p>
<p>通过搜索view.id快速定位到修改内容附近，安徽将view.id() 修改为view.name()</p>
<p><img src="/2019/07/10/%E7%B3%BB%E7%BB%9F/Windows%E4%B8%8Bsublime%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/15.png" alt></p>
<h3 id="3-3-输入测试"><a href="#3-3-输入测试" class="headerlink" title="3.3 输入测试"></a>3.3 输入测试</h3><blockquote>
<p>以管理员身份打开sublime，并新建py文件，然后按F5键进行测试</p>
</blockquote>
<p><img src="/2019/07/10/%E7%B3%BB%E7%BB%9F/Windows%E4%B8%8Bsublime%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/16.png" alt></p>
<p>如果不是以管理员身份运行的sublime的，则无法输入输出</p>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><ul>
<li>Sublime配置：<a href="https://jingyan.baidu.com/article/d3b74d6418a8381f76e60955.html">百度经验</a></li>
<li><a href="https://packagecontrol.io/installation#st3">Package Control安装</a></li>
<li><a href="https://blog.csdn.net/yeluffy0601/article/details/41811305">Sublime Text3中运行Python提示…</a></li>
<li><a href="https://blog.csdn.net/wuxiangchao_ganlu/article/details/82256933">解决sublimeEPL在同一个窗口中调试的问题</a></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>Sublime作为一个文本编辑器，既能编辑py代码，又能运行的话，是值得作为py编辑器的，相比较而言，能用Sublime运行py的话，就不要用Pycharm，毕竟轻量很多</p>
</blockquote>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>win7下局域网打印机共享</title>
    <url>/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/</url>
    <content><![CDATA[<blockquote>
<h1 id="说明：本方法只在Win7下运行成功，Win10下还未测试，不过Win10应该也能行"><a href="#说明：本方法只在Win7下运行成功，Win10下还未测试，不过Win10应该也能行" class="headerlink" title="说明：本方法只在Win7下运行成功，Win10下还未测试，不过Win10应该也能行"></a>说明：本方法只在Win7下运行成功，Win10下还未测试，不过Win10应该也能行</h1></blockquote>
<h1 id><a href="#" class="headerlink" title=" "></a> </h1><h1 id="一、打印机所在电脑配置"><a href="#一、打印机所在电脑配置" class="headerlink" title="一、打印机所在电脑配置"></a>一、打印机所在电脑配置</h1><h2 id="1、取消禁用Guest用户"><a href="#1、取消禁用Guest用户" class="headerlink" title="1、取消禁用Guest用户"></a>1、取消禁用Guest用户</h2><p>因为别人要访问安装打印机的这个电脑就是以guest账户访问的</p>
<blockquote>
<p>点击【开始】按钮，选择【计算机】并右键，选择【管理】，如下图：</p>
</blockquote>
<p><img src="/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/guest.png" alt></p>
<blockquote>
<p>在弹出的【计算机管理】窗口中，找到【本地用户和组】，选择【用户】，双击【Guest】，打开【Guest属性】窗口，确保【账户已禁用】选项没有被勾选</p>
</blockquote>
<p><img src="/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/guest_jin.png" alt></p>
<h2 id="2、设置共享目标打印机"><a href="#2、设置共享目标打印机" class="headerlink" title="2、设置共享目标打印机"></a>2、设置共享目标打印机</h2><h3 id="（1）共享打印机防火墙设置"><a href="#（1）共享打印机防火墙设置" class="headerlink" title="（1）共享打印机防火墙设置"></a>（1）共享打印机防火墙设置</h3><blockquote>
<p>在桌面选择【计算机】，右键【管理】</p>
</blockquote>
<p><img src="/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/manage.png" alt></p>
<blockquote>
<p>在弹出的【计算机管理】窗口中，选择【服务和应用程序】，接着选择【服务】，然后找到【Windows Firewall】这一项</p>
</blockquote>
<p><img src="/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/firewall.png" alt></p>
<blockquote>
<p>在【Windows Firewall】选项上，右键，点击【属性】，在弹出的窗口中，【启动类型】设置为自动，点击【启动】，如下图所示：</p>
</blockquote>
<p><img src="/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/firewall_start.png" alt></p>
<h3 id="（2）设置共享目标打印机"><a href="#（2）设置共享目标打印机" class="headerlink" title="（2）设置共享目标打印机"></a>（2）设置共享目标打印机</h3><blockquote>
<p>点击【开始】按钮，选择【设备和打印机】</p>
</blockquote>
<p><img src="/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/printer.png" alt></p>
<blockquote>
<p>在弹出的窗口，找到想要共享的打印机（前提打印机已正确连接，驱动已正确安装）</p>
</blockquote>
<p><font color="red">若没有安装驱动程序，则参考如下：<font></font></font></p>
<p>在<a href="https://support.hp.com/cn-zh/drivers/printers">惠普官网</a>上，下载对应打印机驱动（我的为HP LaserJet 1020）程序并安装即可，如下图</p>
<p><img src="/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/printer_driver.png" alt></p>
<blockquote>
<p>在打印机已正确连接，且驱动已正确安装后，选择共享打印机，在该打印机上右键，选择【打印机属性】，如下图：</p>
</blockquote>
<p><img src="/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/printer_shuxing.png" alt></p>
<blockquote>
<p>在弹出的窗口中，切换到【共享】选项卡，勾选【共享这台打印机】，并设置一个共享名（请记住该共享名，后面可能会用到），如下图：</p>
</blockquote>
<p><img src="/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/share.png" alt></p>
<h3 id="（3）高级共享设置"><a href="#（3）高级共享设置" class="headerlink" title="（3）高级共享设置"></a>（3）高级共享设置</h3><blockquote>
<p>打开【开始】按钮，点击【控制面板】，选择【网络和Internet】，选择【网络和共享中心】，在打开的窗口中，记所处的网络类型，选择【选择家庭组和共享选项】</p>
</blockquote>
<p><img src="/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/network.png" alt></p>
<blockquote>
<p>在弹出的窗口中，单击【更改高级共享设置】，【保存修改】</p>
</blockquote>
<p><img src="/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/modify_syso.png" alt></p>
<blockquote>
<p>在弹出的窗口中，注意红色方框标记的选择</p>
</blockquote>
<p><img src="/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/choose.png" alt></p>
<p><img src="/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/choose_2.png" alt></p>
<h1 id="二、局域网内其他电脑配置"><a href="#二、局域网内其他电脑配置" class="headerlink" title="二、局域网内其他电脑配置"></a>二、局域网内其他电脑配置</h1><h2 id="1、首先确保和打印机所在电脑在同一个局域网内"><a href="#1、首先确保和打印机所在电脑在同一个局域网内" class="headerlink" title="1、首先确保和打印机所在电脑在同一个局域网内"></a>1、首先确保和打印机所在电脑在同一个局域网内</h2><h2 id="2、在桌面打开【计算机】，单击【网络】，找到需要连接的机器"><a href="#2、在桌面打开【计算机】，单击【网络】，找到需要连接的机器" class="headerlink" title="2、在桌面打开【计算机】，单击【网络】，找到需要连接的机器"></a>2、在桌面打开【计算机】，单击【网络】，找到需要连接的机器</h2><p><img src="/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/printer_network.png" alt></p>
<h2 id="3、账户登录"><a href="#3、账户登录" class="headerlink" title="3、账户登录"></a>3、账户登录</h2><blockquote>
<p>找到需要连接的机器后，双击，在弹出的窗口中，输入用户名，密码为空</p>
</blockquote>
<p><img src="/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/login.png" alt></p>
<p>账户用户名，需要在打印机所在电脑查看用户名，具体操作如下：</p>
<p>在打印机所在电脑上，点击【开始】按钮，找到用户名，下图中红色方框标记</p>
<p><img src="/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/username.png" alt></p>
<h2 id="4、登录成功后，就能找到打印机"><a href="#4、登录成功后，就能找到打印机" class="headerlink" title="4、登录成功后，就能找到打印机"></a>4、登录成功后，就能找到打印机</h2><p><img src="/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/find_printer.png" alt></p>
<h2 id="5、右键打印机（HP-LaserJet-1020），选择【连接】，进行驱动安装"><a href="#5、右键打印机（HP-LaserJet-1020），选择【连接】，进行驱动安装" class="headerlink" title="5、右键打印机（HP LaserJet 1020），选择【连接】，进行驱动安装"></a>5、右键打印机（HP LaserJet 1020），选择【连接】，进行驱动安装</h2><h1 id="三、打印机使用"><a href="#三、打印机使用" class="headerlink" title="三、打印机使用"></a>三、打印机使用</h1><h2 id="打印测试"><a href="#打印测试" class="headerlink" title="打印测试"></a>打印测试</h2><blockquote>
<p>新建空白word文档， 选择【文件】，【打印】，在打印机列表中，选择对应的打印机，即可完成打印</p>
</blockquote>
<p><img src="/2019/05/17/%E7%B3%BB%E7%BB%9F/win7%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/print_test.png" alt></p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>系统重装后必要软件安装介绍</title>
    <url>/2019/05/16/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E5%90%8E%E5%BF%85%E8%A6%81%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="此软件全部在Windows下"><a href="#此软件全部在Windows下" class="headerlink" title="此软件全部在Windows下"></a>此软件全部在Windows下</h1><h1 id="1、Windows激活工具"><a href="#1、Windows激活工具" class="headerlink" title="1、Windows激活工具"></a>1、Windows激活工具</h1><blockquote>
<p>KMS激活工具：<a href="http://www.yishimei.cn/network/319.html">http://www.yishimei.cn/network/319.html</a></p>
<p>说明：此工具用于激活windows极好，但是office等好像没有激活过（近两年没测试过）</p>
</blockquote>
<h1 id="2、办公软件（Office-2013软件及破解工具）"><a href="#2、办公软件（Office-2013软件及破解工具）" class="headerlink" title="2、办公软件（Office 2013软件及破解工具）"></a>2、办公软件（Office 2013软件及破解工具）</h1><blockquote>
<p>百度网盘下载地址：链接: <a href="https://pan.baidu.com/s/1O1EoQi0e4K-9CB7-Xeg56A">https://pan.baidu.com/s/1O1EoQi0e4K-9CB7-Xeg56A</a> 提取码: j5ku </p>
</blockquote>
<p><img src="/2019/05/16/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E5%90%8E%E5%BF%85%E8%A6%81%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%BB%8B%E7%BB%8D/office_download.png" alt></p>
<blockquote>
<p>说明：<code>KMSpico_Install</code>为 <code>office</code>激活工具</p>
<p>解压后，运行<code>KMDELDI.exe</code>，在弹出的窗口中，点击红色按钮即可激活<code>office</code></p>
</blockquote>
<h1 id="3、解压软件（7zip）"><a href="#3、解压软件（7zip）" class="headerlink" title="3、解压软件（7zip）"></a>3、解压软件（7zip）</h1><blockquote>
<p>下载地址：<a href="https://www.7-zip.org/">https://www.7-zip.org/</a></p>
<p>说明：相比于其他的解压软件，无广告，且解压速度快，体验效果最好</p>
</blockquote>
<h1 id="4、输入法（搜狗输入法）"><a href="#4、输入法（搜狗输入法）" class="headerlink" title="4、输入法（搜狗输入法）"></a>4、输入法（搜狗输入法）</h1><blockquote>
<p>下载地址：<a href="https://pinyin.sogou.com/">https://pinyin.sogou.com/</a></p>
<p>说明：一直都用的搜狗输入法，感觉挺不错的</p>
</blockquote>
<h1 id="5、浏览器（Chrome）"><a href="#5、浏览器（Chrome）" class="headerlink" title="5、浏览器（Chrome）"></a>5、浏览器（Chrome）</h1><blockquote>
<p>下载地址：<a href="https://www.google.cn/chrome/">https://www.google.cn/chrome/</a></p>
<p>说明：作为一名IT行业相关人员，chrome浏览器首选，其次，火狐</p>
</blockquote>
<h1 id="6、文本编辑器（Sublime-Text3）"><a href="#6、文本编辑器（Sublime-Text3）" class="headerlink" title="6、文本编辑器（Sublime Text3）"></a>6、文本编辑器（Sublime Text3）</h1><blockquote>
<p>下载地址：<a href="https://www.sublimetext.com/3">https://www.sublimetext.com/3</a></p>
<p>说明：相比于Vscode，本人更倾向于Sublime</p>
</blockquote>
<h1 id="7、PDF阅读器（福昕阅读器）"><a href="#7、PDF阅读器（福昕阅读器）" class="headerlink" title="7、PDF阅读器（福昕阅读器）"></a>7、PDF阅读器（福昕阅读器）</h1><blockquote>
<p>下载地址：<a href="https://www.foxitsoftware.cn/downloads/">https://www.foxitsoftware.cn/downloads/</a></p>
<p>说明：听说该软件还有破解版的，可以直接对PDF文件进行编辑</p>
</blockquote>
<h1 id="8、视频播放器（PotPlayer）"><a href="#8、视频播放器（PotPlayer）" class="headerlink" title="8、视频播放器（PotPlayer）"></a>8、视频播放器（PotPlayer）</h1><blockquote>
<p>下载地址：<a href="https://daumpotplayer.com/download/">https://daumpotplayer.com/download/</a></p>
<p>说明：比较好用的一个视频播放器</p>
</blockquote>
<h1 id="9、视频格式转换器（格式工厂）"><a href="#9、视频格式转换器（格式工厂）" class="headerlink" title="9、视频格式转换器（格式工厂）"></a>9、视频格式转换器（格式工厂）</h1><blockquote>
<p>下载地址：<a href="http://www.pcfreetime.com/formatfactory/CN/download.html">http://www.pcfreetime.com/formatfactory/CN/download.html</a></p>
<p>说明：视频之间的格式转换，以及截取视频部分片段都挺好用的</p>
</blockquote>
<h1 id="10、文件搜索工具（Everything）"><a href="#10、文件搜索工具（Everything）" class="headerlink" title="10、文件搜索工具（Everything）"></a>10、文件搜索工具（Everything）</h1><blockquote>
<p>下载地址：<a href="https://www.voidtools.com/zh-cn/downloads/">https://www.voidtools.com/zh-cn/downloads/</a></p>
<p> 说明：文件整个硬盘搜索，又快又方便，强烈推荐</p>
</blockquote>
<h1 id="11、思维导图工具（XMind）"><a href="#11、思维导图工具（XMind）" class="headerlink" title="11、思维导图工具（XMind）"></a>11、思维导图工具（XMind）</h1><blockquote>
<p>下载地址：<a href="https://www.xmind.net/">https://www.xmind.net/</a></p>
<p>说明：官网下载的只能免费试用一段时间，但是做思维导图，效果极棒</p>
<p>破解版下载地址：链接: <a href="https://pan.baidu.com/s/1RaNGeqRb4uSJRYo-Aq8l4w">https://pan.baidu.com/s/1RaNGeqRb4uSJRYo-Aq8l4w</a> 提取码: ks42 </p>
</blockquote>
<h1 id="12、远程控制工具（Teamviewer）"><a href="#12、远程控制工具（Teamviewer）" class="headerlink" title="12、远程控制工具（Teamviewer）"></a>12、远程控制工具（Teamviewer）</h1><blockquote>
<p>下载地址：<a href="https://www.teamviewer.com/cn/">https://www.teamviewer.com/cn/</a></p>
<p>说明：非常好用的软件，比QQ远程电脑控制不知道好在哪里去，并且可以手机远程控制电脑，只要双方都下载该软件，即能实现远程控制</p>
<p>但是用久了之后，可能会被检测出商业用途，5分钟内强制下线，可以通过修改mac地址解决</p>
</blockquote>
<h1 id="13、笔记（有道云笔记）"><a href="#13、笔记（有道云笔记）" class="headerlink" title="13、笔记（有道云笔记）"></a>13、笔记（有道云笔记）</h1><blockquote>
<p>下载地址：<a href="https://note.youdao.com/?keyfrom=ydoc">https://note.youdao.com/?keyfrom=ydoc</a></p>
<p>说明：本人用这个比较习惯一点，并且我还扩容过，总共有13G呢~，但是部分人喜欢印象笔记，因人而异吧</p>
</blockquote>
<h1 id="14、音乐（网易云音乐）"><a href="#14、音乐（网易云音乐）" class="headerlink" title="14、音乐（网易云音乐）"></a>14、音乐（网易云音乐）</h1><blockquote>
<p>下载地址：<a href="https://music.163.com/">https://music.163.com/</a></p>
<p>说明：相比其他的音乐播放器，更爱网易云，很多人来网易云不是听歌，而是为了看评论，哈哈~</p>
</blockquote>
<h1 id="15、便签工具（win7自带桌面便签）"><a href="#15、便签工具（win7自带桌面便签）" class="headerlink" title="15、便签工具（win7自带桌面便签）"></a>15、便签工具（win7自带桌面便签）</h1><blockquote>
<p>说明：使用windows自带的便签，每次开机都会显示在桌面，可以起到很好的提醒作用，但是有一款软件好像还可以，叫<code>敬业签</code>，但是还没有用过，还不清楚性能咋样</p>
</blockquote>
<p><img src="/2019/05/16/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E5%90%8E%E5%BF%85%E8%A6%81%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%BB%8B%E7%BB%8D/bianqian.png" alt></p>
<h1 id="16、百度云盘下载加速软件（Speed盘）"><a href="#16、百度云盘下载加速软件（Speed盘）" class="headerlink" title="16、百度云盘下载加速软件（Speed盘）"></a>16、百度云盘下载加速软件（Speed盘）</h1><blockquote>
<p>说明：这里不添加下载链接，因为对此软件存疑</p>
<p>该软件能对百度云盘的文件下载起到很快的加速作用，但使用该软件是否会泄露我们的相关信息，这点暂时未知</p>
<p>只知道以前下载时是不需要登录百度云盘账号的，现在下载好像必须要登录云盘账号</p>
<p>因此，不太推荐使用该软件</p>
</blockquote>
<h1 id="17、广告（视频）过滤软件（ADSafe）"><a href="#17、广告（视频）过滤软件（ADSafe）" class="headerlink" title="17、广告（视频）过滤软件（ADSafe）"></a>17、广告（视频）过滤软件（ADSafe）</h1><blockquote>
<p>下载地址：<a href="http://www.ad-safe.com/">http://www.ad-safe.com/</a></p>
<p>说明：以前没有办视频会员的时候，经常使用该软件进行视频广告过滤，过滤效果很好，但是现在一般都用会员看视频了，已经很长时间没有使用过该软件。</p>
<p>但是这个安全性如何，不太清楚</p>
</blockquote>
<h1 id="18、以下为个人喜欢的一些软件（IT行业相关）"><a href="#18、以下为个人喜欢的一些软件（IT行业相关）" class="headerlink" title="18、以下为个人喜欢的一些软件（IT行业相关）"></a>18、以下为个人喜欢的一些软件（IT行业相关）</h1><h2 id="（1）SSH远程访问软件"><a href="#（1）SSH远程访问软件" class="headerlink" title="（1）SSH远程访问软件"></a>（1）SSH远程访问软件</h2><blockquote>
<ul>
<li><p><code>Xshell</code>：<a href="https://www.netsarang.com/zh/">https://www.netsarang.com/zh/</a></p>
<p>说明：感觉还不错，相比其他的，这个整体效果不错</p>
</li>
<li><p><code>WinSCP</code>：<a href="https://winscp.net/eng/download.php">https://winscp.net/eng/download.php</a></p>
<p>说明：可以直接对远程电脑文件进行修改，不需要本地修改在上传，值得推荐（在线编辑远程文件）</p>
</li>
<li><p>FileZilla：<a href="https://filezilla-project.org/">https://filezilla-project.org/</a></p>
<p>说明：可以本地修改文件，然后上传到远程电脑上（更多用于文件上传）</p>
</li>
<li><p>Putty：<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html</a></p>
<p>说明：连接上远程电脑后，可以运行程序，进行相应操作</p>
<p>小结：刚入门时，使用Putty软件，进行远程控制，但是发现无法上传文件，于是使用FileZilla软件进行文件上传，后来发现，每次需要本地修改在上传比较麻烦，使用WinSCP软件，连接后可以在线编辑。而Xshell软件用于连接服务器挺好的</p>
</li>
</ul>
</blockquote>
<h2 id="（2）Git工具"><a href="#（2）Git工具" class="headerlink" title="（2）Git工具"></a>（2）Git工具</h2><blockquote>
<p>下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
<p>说明：用于github管理，作为一名程序猿，这个还是得有</p>
</blockquote>
<h2 id="（3）翻墙软件（SS）"><a href="#（3）翻墙软件（SS）" class="headerlink" title="（3）翻墙软件（SS）"></a>（3）翻墙软件（SS）</h2><blockquote>
<p>下载地址：<a href="https://github.com/shadowsocks/shadowsocks-windows/releases">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p>
<p>说明：<code>ss</code>全称是<code>shadowsocks</code>，国内翻墙一般都用<code>ss</code>，但是也还有另外一款翻墙软件，简称叫<code>ssr</code>，全名应该叫<code>shadowsocks-rss</code>，是基于<code>ss</code>做过修改的，但是具体哪个好用，感觉都差不多，我用的比较多的是<code>ss</code></p>
</blockquote>
<h2 id="（4）MD编辑器（Markdown编辑器之Typora）"><a href="#（4）MD编辑器（Markdown编辑器之Typora）" class="headerlink" title="（4）MD编辑器（Markdown编辑器之Typora）"></a>（4）MD编辑器（Markdown编辑器之Typora）</h2><blockquote>
<p>下载地址：<a href="https://www.typora.io/">https://www.typora.io/</a></p>
<p>说明：在博客编辑这方面，Typora非常好用，虽然刚体验，但体验效果贼好</p>
</blockquote>
<h2 id="（5）C-编译器（Dev-C-）"><a href="#（5）C-编译器（Dev-C-）" class="headerlink" title="（5）C++编译器（Dev C++）"></a>（5）C++编译器（Dev C++）</h2><blockquote>
<p>下载地址：<a href="https://sourceforge.net/projects/orwelldevcpp/">https://sourceforge.net/projects/orwelldevcpp/</a></p>
<p>说明：喜欢这一款编译器，是因为易安装，轻量级，只用于C++代码编程，如果要进行C++开发的话，还是选择VS</p>
</blockquote>
<h1 id="19、好友推荐："><a href="#19、好友推荐：" class="headerlink" title="19、好友推荐："></a>19、好友推荐：</h1><h2 id="（1）Java编译器（IDEA）"><a href="#（1）Java编译器（IDEA）" class="headerlink" title="（1）Java编译器（IDEA）"></a>（1）Java编译器（IDEA）</h2><h2 id="（2）在线工具"><a href="#（2）在线工具" class="headerlink" title="（2）在线工具"></a>（2）在线工具</h2><blockquote>
<p>网址：<a href="http://tool.oschina.net/?tdsourcetag=s_pctim_aiomsg">http://tool.oschina.net/?tdsourcetag=s_pctim_aiomsg</a></p>
</blockquote>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>(转)win10 git安装 exit code128错误</title>
    <url>/2021/05/18/%E7%B3%BB%E7%BB%9F/%EF%BC%88%E8%BD%AC%EF%BC%89win10%E5%AE%89%E8%A3%85git%E6%8A%A5exit%20code128%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>刚重装完win10系统，结果在安装git的时候莫名的就报了错误，因此才做的相关笔记</p>
</blockquote>
<h2 id="测试成功的方法"><a href="#测试成功的方法" class="headerlink" title="测试成功的方法"></a>测试成功的方法</h2><blockquote>
<p>适用于WIN10的解决方案：</p>
</blockquote>
<p>​    A：电脑菜单搜索CMD</p>
<p>​    B：鼠标右键出现的命令提示符</p>
<p>​    C：以管理员身份运行</p>
<p>​    D：在出现的面板里输入 sfc /scannow==&gt;回车键   （可能需要重启电脑）</p>
<p>​    E： 等待修复完成======&gt;问题解决</p>
<p><img src="/2021/05/18/%E7%B3%BB%E7%BB%9F/%EF%BC%88%E8%BD%AC%EF%BC%89win10%E5%AE%89%E8%A3%85git%E6%8A%A5exit%20code128%E9%94%99%E8%AF%AF/sfc.png" alt></p>
<h2 id="原文网址："><a href="#原文网址：" class="headerlink" title="原文网址："></a>原文网址：</h2><blockquote>
<p><a href="https://blog.csdn.net/zxssoft/article/details/84989850">https://blog.csdn.net/zxssoft/article/details/84989850</a></p>
</blockquote>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用笔记</title>
    <url>/2019/08/31/%E9%9A%8F%E7%AC%94/Git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>有时候，在将代码上传到Github时，不可避免的会使用到Git相关的教程，本篇博客将暂时记录一下，Git使用过程中遇到过的一些问题，后面有时间会好好的学一学Git。</p>
</blockquote>
<h2 id="一、Git上传文件至Github"><a href="#一、Git上传文件至Github" class="headerlink" title="一、Git上传文件至Github"></a>一、Git上传文件至Github</h2><h3 id="1-1-git配置"><a href="#1-1-git配置" class="headerlink" title="1.1 git配置"></a>1.1 git配置</h3><blockquote>
<p>这里将不再介绍如何安装git，及git的一些相关配置，如有需要，可以直接查看<a href="https://ldgyyf.cn/2019/05/14/Hexo/Hexo-Github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/">该文</a></p>
</blockquote>
<h3 id="1-2-Github创建new-repository"><a href="#1-2-Github创建new-repository" class="headerlink" title="1.2 Github创建new repository"></a>1.2 Github创建new repository</h3><blockquote>
<p>在github上创建新的repository，创建后将出现如下界面</p>
</blockquote>
<p><img src="/2019/08/31/%E9%9A%8F%E7%AC%94/Git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/1.png" alt></p>
<h3 id="1-3-git上传文件"><a href="#1-3-git上传文件" class="headerlink" title="1.3 git上传文件"></a>1.3 git上传文件</h3><blockquote>
<p>需要先创建一个新文件夹，然后在该文件夹下使用git bash打开git窗口，依次执行如下命令</p>
</blockquote>
<p>（1）使用<code>git init</code>命令，将这个目录变成git可以管理的仓库</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> init <span class="comment"># 对新的文件夹 都需要执行该操作</span></span><br></pre></td></tr></table></figure>
<p>（2）使用<code>git add</code>命令，告诉Git，将文件添加到仓库</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> add README.md <span class="comment"># 将单个文件README.md添加到git仓库</span></span><br><span class="line">git add .  <span class="comment"># 将该文件目录下的所有文件添加到git仓库</span></span><br></pre></td></tr></table></figure>
<p>（3）使用<code>git commit</code>命令，把文件提交到仓库</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m <span class="string">&quot;对本次提交的注释&quot;</span></span><br></pre></td></tr></table></figure>
<p>（4）使用<code>git remote</code>命令，关联远程仓库</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> remote add origin https://github.com/ldgcug/Test.git <span class="comment"># 一定要注意链接地址</span></span><br></pre></td></tr></table></figure>
<p>（5）使用<code>git push</code>命令，将本地仓库的内容推送到远程仓库</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> push -u origin master</span><br></pre></td></tr></table></figure>
<p><strong>注：若已经执行过git init，且以前将文件也推送到远程仓库后，需要添加新的文件上传到远程仓库时，只需要执行下面的三条命令即可</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> add README.md <span class="comment"># 将单个文件README.md添加到git仓库</span></span><br><span class="line">git commit -m <span class="string">&quot;对本次提交的注释&quot;</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>代码实现（七）之DDPG</title>
    <url>/2019/08/24/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8BDDPG/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>DDPG算法主要是将DPG和DQN的特性结合起来，和前面的AC算法相比，Actor输出的不在是行为的概率，而是具体的行为，用于连续动作的预测。其理论部分请阅读<a href="https://ldgyyf.cn/2019/07/31/论文/深度强化学习/DRL论文阅读（七）之DPG方法/">DRL论文阅读（七）</a>和<a href="https://ldgyyf.cn/2019/08/04/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BDDPG%E7%AE%97%E6%B3%95/">DRL论文阅读（八）</a></p>
<p>本文的代码基于<a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/6-2-DDPG/">莫烦大神</a>的代码，进行少量修改而成（参考的是简单版，测试过程中，莫烦的DDPG初始版本还存在一点问题）</p>
</blockquote>
<h2 id="一、实验环境"><a href="#一、实验环境" class="headerlink" title="一、实验环境"></a>一、实验环境</h2><blockquote>
<p>主要使用Pendulum环境，且采用的是连续行为空间</p>
</blockquote>
<h2 id="二、DDPG算法"><a href="#二、DDPG算法" class="headerlink" title="二、DDPG算法"></a>二、DDPG算法</h2><p><strong>DDPG框架图</strong></p>
<p><img src="/2019/08/24/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8BDDPG/1.jpg" alt></p>
<p><strong>DDPG算法流程</strong></p>
<p><img src="/2019/08/24/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8BDDPG/2.png" alt></p>
<h2 id="三、代码部分"><a href="#三、代码部分" class="headerlink" title="三、代码部分"></a>三、代码部分</h2><blockquote>
<p>直接查看<a href="https://github.com/ldgcug/DeepReinforcementLearning-Tensorflow/tree/master/DDPG">所有代码</a></p>
</blockquote>
<h3 id="3-1-代码组成"><a href="#3-1-代码组成" class="headerlink" title="3.1 代码组成"></a>3.1 代码组成</h3><blockquote>
<p>代码主要由两部分组成，一部分是关于DDPG算法结构的py程序，另一部分是关于gym的运行环境</p>
</blockquote>
<p><strong>程序架构</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DDPG</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="comment"># 状态维度，动作维度，连续动作空间，其中关于其他的参数在init中自定义赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,s_dim,a_dim,a_bound</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建Actor网络</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_a</span>(<span class="params">self,s,scope,trainable</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建Critic网络</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_c</span>(<span class="params">self,s,a,scope,trainable</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 更新目标网络的参数，这里是使用soft更新方式，和DQN一定步数更新有所区别</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train_target</span>(<span class="params">self</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 经验池存储数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">store_transition</span>(<span class="params">self,s,a,r,s_,done</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 选择确定性行为</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_action</span>(<span class="params">self,s</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># DDPG训练</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn</span>(<span class="params">self</span>):</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-网络-DDPG-py"><a href="#3-2-网络-DDPG-py" class="headerlink" title="3.2 网络-DDPG.py"></a>3.2 网络-DDPG.py</h3><p><strong>init函数、Actor网络和Critic网络</strong></p>
]]></content>
      <categories>
        <category>代码</category>
        <category>深度强化学习</category>
      </categories>
      <tags>
        <tag>DRL</tag>
        <tag>OpenAI gym</tag>
        <tag>DDPG</tag>
      </tags>
  </entry>
  <entry>
    <title>代码实现（三）之Prioritized Experience Replay</title>
    <url>/2019/08/09/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BPrioritized-Experience-Replay/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>理论部分，点击<a href="https://ldgyyf.cn/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E9%9A%8F%E6%9C%BA%E9%87%87%E6%A0%B7%EF%BC%88Prioritized-Experience-Replay%EF%BC%89/">DRL论文阅读（三</a>）查看</p>
<p>本文的代码主要参考了<a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/blob/master/contents/5.2_Prioritized_Replay_DQN/RL_brain.py">莫烦</a>和<a href="https://github.com/BlueFisher/Reinforcement-Learning/tree/master/Deep_Q_Network/Prioritized_DQN">Fisher’s</a>的代码，在他们的基础之上，修改为自己习惯能看懂的代码</p>
<p>Prioritized DQN不同于DQN/DDQN的是，它关注的是经验回放池中那些很少但有用的正面信息</p>
</blockquote>
<h2 id="一、实验环境"><a href="#一、实验环境" class="headerlink" title="一、实验环境"></a>一、实验环境</h2><blockquote>
<p>使用MountainCar环境来对算法进行测试</p>
</blockquote>
<p><img src="/2019/08/09/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BPrioritized-Experience-Replay/1.png" alt></p>
<p>和之前有所不同的是，这次我们不需要重度改变它的reward。所以只要没有拿到小旗子，reward = -1，拿到小旗子时，定义reward = 10。比起之前的DQN，这个reward定义更加准确。如果使用这种reward定义方式，可以想象Nature DQN会花很久的时间学习，因为记忆库中只有很少很少的+10 的reward可以学习，正负样本不一样，而使用Prioritized DQN，就会重视这种少量的，但值得学习的样本。</p>
<h2 id="二、Prioritized-Experience-Replay"><a href="#二、Prioritized-Experience-Replay" class="headerlink" title="二、Prioritized Experience Replay"></a>二、Prioritized Experience Replay</h2><p><strong>伪代码</strong></p>
<p><img src="/2019/08/09/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BPrioritized-Experience-Replay/2.png" alt></p>
<p>在该算法中，我们batch抽样时，并不是随机抽样，而是按照Memory中的样本的优先级来抽，这样能更有效的找到我们需要学习的样本。</p>
<p><strong>SumTree</strong></p>
<p>由于使用贪婪法来选取优先经验的时间复杂度太高，同时还有其他问题，所以我们用$P(i) = \frac{p_i^\alpha}{\sum_k p_k^\alpha}$来定义某个片段的选取概率，其中我们采用比例优先的方式来计算$p_i$，即$p_i = |\delta_i| + \epsilon$，$\delta_i$为TD-Error，$\epsilon$为一个很小的正数，为了避免TD-Error为0的特殊边缘例子也能被采样到，并用SumTree这种数据结构来表示每个存储的片段。</p>
<p>SumTree是一种二叉树类型的数据结构，所有叶子节点存储优先级$p_i$，所有父节点为子节点之和，所以这棵树的根节点为所有叶子节点的和，如下图所示：</p>
<p><img src="/2019/08/09/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BPrioritized-Experience-Replay/3.png" alt></p>
<p>抽样时，我们会将$p_i$的总和除以batch_size，分成batch_size个区间，如上图例子所示，一共有<code>3、10、12、4、1、2、8、2</code>等八个优先级节点$p_i$，如果设置batch_size为6，则会分成6个区间，每个区间为：<code>[0-7],[7-14],[14-21],[21-28],[28-35],[35-41]</code>，在分别在这6个区间中均匀的随机选取一个数，从根节点依次往下搜索。</p>
<p>如果在第4个区间[21-28]抽取到了24，则将24与根节点的左节点进行比较，因为24 &lt; 29，所以继续向左搜索，将24与29的左节点比较，发现24 &gt; 13，则继续向右搜索，同时 24 - 13 = 11。将11与16的左节点比较，11 &lt; 12，因为12已经是叶子节点，则搜索完毕，选择12这个优先级。</p>
<p>图中叶子节点下面的括号中的区间表示该优先级可以被搜索到的范围，由此可见优先级大的被搜索到的概率就高，同时优先级小的，也有一定的概率被选中。</p>
<h2 id="三、代码部分"><a href="#三、代码部分" class="headerlink" title="三、代码部分"></a>三、代码部分</h2><blockquote>
<p>没有按照文中，与Double DQN结合，而是与Nature DQN相结合</p>
<p>若想要看全部代码，直接查看<a href="https://github.com/ldgcug/DeepReinforcementLearning-Tensorflow/tree/master/Prioritized">所有代码</a></p>
</blockquote>
<h3 id="3-1-代码组成"><a href="#3-1-代码组成" class="headerlink" title="3.1 代码组成"></a>3.1 代码组成</h3><blockquote>
<p>代码由两部分组成，分别为<strong>prioritized.py</strong> 和<strong>run_MountainCar.py</strong></p>
<p>（1）prioritized.py</p>
<p>​        这个代码中主要包含三个类：SumTree、Memory(prioritized)、DQNPrioritizedReplay</p>
<p>后面又重新添加了Double DQN的prioritized.py，这里将不对这个进行说明，毕竟代码改动很少</p>
</blockquote>
<h3 id="3-2-网络-prioritized-py"><a href="#3-2-网络-prioritized-py" class="headerlink" title="3.2 网络-prioritized.py"></a>3.2 网络-prioritized.py</h3><h4 id="3-2-1-SumTree有效抽样"><a href="#3-2-1-SumTree有效抽样" class="headerlink" title="3.2.1  SumTree有效抽样"></a>3.2.1  SumTree有效抽样</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SumTree</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,capacity</span>):</span></span><br><span class="line">		self.capacity = capacity <span class="comment"># SumTree能存储的最多优先级个数，如之前的SumTree图，则值为8</span></span><br><span class="line">		self.tree = np.zeros(<span class="number">2</span> * capacity - <span class="number">1</span>) <span class="comment"># 顺序表存储二叉树，其个数为 2 * capacity -1</span></span><br><span class="line">		self.data = np.zeros(capacity,dtype=<span class="built_in">object</span>) <span class="comment"># 每个优先级对应的经验片段，dtype必须要添加</span></span><br><span class="line"></span><br><span class="line">		self.size = <span class="number">0</span></span><br><span class="line">		self.curr_point = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当有新的sample时，添加进tree 和data</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self,data</span>):</span></span><br><span class="line">		self.data[self.curr_point] = data <span class="comment">#存储的为(s,a,r,s_,done)</span></span><br><span class="line">        </span><br><span class="line">		self.update(self.curr_point,<span class="built_in">max</span>(self.tree[self.capacity-<span class="number">1</span>:self.capacity+self.size]) + <span class="number">1</span>)<span class="comment">#添加数据时，默认优先级为当前的最大优先级+1</span></span><br><span class="line"></span><br><span class="line">		self.curr_point += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> self.curr_point &gt;= self.capacity:</span><br><span class="line">			self.curr_point = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> self.size &lt; self.capacity:</span><br><span class="line">			self.size += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">	<span class="comment"># 当sample被train后，有了新的TD-Error，就在tree中更新</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self,point,weight</span>):</span></span><br><span class="line">		tree_idx = point + self.capacity - <span class="number">1</span> <span class="comment">#这样才能得到最下面的叶子节索引</span></span><br><span class="line">		change = weight - self.tree[tree_idx]</span><br><span class="line"></span><br><span class="line">		self.tree[tree_idx] = weight</span><br><span class="line">		parent = (tree_idx - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">		<span class="keyword">while</span> parent &gt;= <span class="number">0</span>:  <span class="comment">#这种方法比递归更快</span></span><br><span class="line">			self.tree[parent] += change</span><br><span class="line">			parent = (parent -<span class="number">1</span>) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">total_p</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="keyword">return</span> self.tree[<span class="number">0</span>] <span class="comment">#获取所有的叶子节点之和</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">#获取最小的优先级，在计算重要性比率中将会使用</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get_min</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">min</span>(self.tree[self.capacity - <span class="number">1</span>: self.capacity + self.size -<span class="number">1</span>])</span><br><span class="line">	<span class="comment">#根据一个权重进行抽样</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">sample</span>(<span class="params">self,v</span>):</span></span><br><span class="line">		idx = <span class="number">0</span></span><br><span class="line">		<span class="keyword">while</span> idx &lt; self.capacity-<span class="number">1</span>:</span><br><span class="line">			l_idx = idx * <span class="number">2</span> +<span class="number">1</span></span><br><span class="line">			r_idx = l_idx +<span class="number">1</span></span><br><span class="line">			<span class="keyword">if</span> self.tree[l_idx] &gt;= v:</span><br><span class="line">				idx = l_idx </span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				idx = r_idx </span><br><span class="line">				v = v - self.tree[l_idx]</span><br><span class="line"></span><br><span class="line">		point = idx - (self.capacity - <span class="number">1</span>) <span class="comment">#计算叶子节点的索引</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> point,self.data[point],self.tree[idx] / self.total_p()</span><br></pre></td></tr></table></figure>
<h4 id="3-2-2-Memory（Prioritized的存储，DQN不采用）"><a href="#3-2-2-Memory（Prioritized的存储，DQN不采用）" class="headerlink" title="3.2.2 Memory（Prioritized的存储，DQN不采用）"></a>3.2.2 Memory（Prioritized的存储，DQN不采用）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,batch_size,max_size,beta</span>):</span></span><br><span class="line">		self.batch_size = batch_size <span class="comment">#mini_batch的大小</span></span><br><span class="line">		<span class="comment">#self.max_size = 2**math.floor(math.log2(max_size))</span></span><br><span class="line">		self.beta = beta</span><br><span class="line">		self.sum_tree = SumTree(max_size)</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">store</span>(<span class="params">self,s,a,r,s_,done</span>):</span></span><br><span class="line">		transitions = (s,a,r,s_,done)</span><br><span class="line">		self.sum_tree.add(transitions)</span><br><span class="line">	</span><br><span class="line">    <span class="comment">#采样samples</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get_mini_batches</span>(<span class="params">self</span>):</span></span><br><span class="line">		n_sample = self.batch_size <span class="keyword">if</span> self.sum_tree.size &gt;= self.batch_size <span class="keyword">else</span> self.sum_tree.size  <span class="comment">#采样的个数</span></span><br><span class="line">		total = self.sum_tree.total_p() <span class="comment">#获取所有TD-Error的和</span></span><br><span class="line"></span><br><span class="line">		step = total // n_sample <span class="comment">#生成n_sample个区间</span></span><br><span class="line">		points_transitions_probs = []</span><br><span class="line">		</span><br><span class="line">        <span class="comment">#在每个区间均匀随机的抽取一个数，并去SumTree中采样</span></span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n_sample):</span><br><span class="line">			v = np.random.uniform(i * step,(i +<span class="number">1</span>) * step -<span class="number">1</span>)</span><br><span class="line">			t = self.sum_tree.sample(v)</span><br><span class="line">			points_transitions_probs.append(t)</span><br><span class="line"></span><br><span class="line">		points,transitions,probs = <span class="built_in">zip</span>(*points_transitions_probs)</span><br><span class="line"></span><br><span class="line">		<span class="comment">#max_importance_ratio = (n_sample * self.sum_tree.get_min())**-self.beta</span></span><br><span class="line">		mini_prob = self.sum_tree.get_min() / total <span class="comment">#计算最小的p_i</span></span><br><span class="line">		importance_ratio = [<span class="built_in">pow</span>(probs[i] /mini_prob,-self.beta) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(probs))] <span class="comment">#重要性采样的权重</span></span><br><span class="line">		<span class="comment">#tuple(np.array(e) for e in zip(*transitions))</span></span><br><span class="line">		<span class="keyword">return</span> points,transitions,importance_ratio</span><br><span class="line">	</span><br><span class="line">    <span class="comment">#训练完抽取的samples后，要更新tree中的sample的TD-Error</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self,points,td_error</span>):</span></span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(points)):</span><br><span class="line">			td_error += <span class="number">0.01</span> <span class="comment">#为了防止TD-Error为0，加一个小的数，如果不加，则会发生除0错误</span></span><br><span class="line">			self.sum_tree.update(points[i],td_error[i]) <span class="comment">#更新TD-Error</span></span><br></pre></td></tr></table></figure>
<p>在伪代码中，重要性采样的权重</p>
<p>$w_j = \frac{(N <em> P(j))^{-\beta}}{max_i(w_i)} = \frac{(N </em> P(j))^{-\beta}}{max_i((N * P(i))^{-\beta})} = \frac{(P(j))^{-\beta}}{max_i((P(i))^{-\beta})} = (\frac {p_j}{min_iP(i)})^{-\beta}$</p>
<p>且伪代码中的第十二行赋值实际是$p_j = （|\delta_i| + \epsilon）^\alpha $，如果采用rank-based，则为$rank(i)^{-\alpha}$，我们的代码中$\alpha$设置为了1，因此才会是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">td_error += <span class="number">0.01</span></span><br></pre></td></tr></table></figure>
<p>去更新TD-Error</p>
<p>在莫烦的代码中，$\alpha$设置的为0.6，因此更新为这样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_update</span>(<span class="params">self, tree_idx, abs_errors</span>):</span></span><br><span class="line">    abs_errors += self.epsilon  <span class="comment"># convert to abs and avoid 0</span></span><br><span class="line">    clipped_errors = np.minimum(abs_errors, self.abs_err_upper)</span><br><span class="line">    ps = np.power(clipped_errors, self.alpha)</span><br><span class="line">    <span class="keyword">for</span> ti, p <span class="keyword">in</span> <span class="built_in">zip</span>(tree_idx, ps):</span><br><span class="line">        self.tree.update(ti, p)</span><br></pre></td></tr></table></figure>
<h4 id="3-3-3-DQNPrioritizedReplay训练"><a href="#3-3-3-DQNPrioritizedReplay训练" class="headerlink" title="3.3.3 DQNPrioritizedReplay训练"></a>3.3.3 DQNPrioritizedReplay训练</h4><blockquote>
<p>只说明添加了Prioritized之后的代码部分</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DQNPrioritizedReplay</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">#计算DQN中的experience数量和大小</span></span><br><span class="line">		self.memory_count = <span class="number">0</span></span><br><span class="line">		self.memory_size = memory_size</span><br><span class="line">        </span><br><span class="line">		self.batch_size = batch_size</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.prioritized:</span><br><span class="line">			self.memory = Memory(batch_size,memory_size,<span class="number">0.9</span>)<span class="comment">#Prioritized采用Memory方式</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			self.memory = deque() <span class="comment">#DQN自己定义队列</span></span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_net</span>(<span class="params">self</span>):</span>   </span><br><span class="line">        <span class="keyword">if</span> self.prioritized:</span><br><span class="line">			self.importance_ratio = tf.placeholder(tf.float32,[<span class="literal">None</span>,<span class="number">1</span>],name = <span class="string">&#x27;importance_ratio&#x27;</span>)<span class="comment">#重要性采样的权重占位符</span></span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">store_transition</span>(<span class="params">self,s,a,r,s_,done</span>):</span></span><br><span class="line">		transition = (s,a,r,s_,done)</span><br><span class="line">		<span class="keyword">if</span> self.prioritized:</span><br><span class="line">			self.memory.store(s,a,r,s_,done)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="keyword">if</span> self.memory_count &lt; self.memory_size:</span><br><span class="line">				self.memory.append(transition)</span><br><span class="line">				self.memory_count += <span class="number">1</span></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				self.memory.popleft()</span><br><span class="line">				self.memory.append(transition)</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">learn</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.prioritized:</span><br><span class="line">			points,mini_batch,importance_ratio = self.memory.get_mini_batches()</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="comment"># sample batch memory from all memory</span></span><br><span class="line">			<span class="keyword">if</span> self.memory_count &gt; self.batch_size:</span><br><span class="line">				mini_batch = random.sample(self.memory,self.batch_size)</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				mini_batch = random.sample(self.memory,self.memory_count)</span><br><span class="line">		</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.prioritized:</span><br><span class="line">			_ = self.sess.run(self.train_op,feed_dict=&#123;self.s:states,self.q_target:q_target,self.importance_ratio:np.array([importance_ratio]).T&#125;)</span><br><span class="line">            <span class="comment">#这里要计算TD-Error</span></span><br><span class="line">			td_error = self.sess.run(self.td_error,feed_dict=&#123;self.s:states,self.q_target:q_target,self.importance_ratio:np.array([importance_ratio]).T&#125;)</span><br><span class="line">			loss = self.sess.run(self.loss,feed_dict=&#123;self.s:states,self.q_target:q_target,self.importance_ratio:np.array([importance_ratio]).T&#125;)</span><br><span class="line">            <span class="comment">#计算完后，要更新samples的TD-Error</span></span><br><span class="line">			self.memory.update(points,td_error)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			loss = self.sess.run(self.loss,feed_dict=&#123;self.s:states,self.q_target:q_target&#125;)</span><br><span class="line">			_ = self.sess.run(self.train_op,feed_dict=&#123;self.s:states,self.q_target:q_target&#125;)</span><br></pre></td></tr></table></figure>
<p>这里的Prioritized DQN和Nature DQN的experience存储方式不同。</p>
<p>但突然想到了一个问题：</p>
<p>Nature DQN是在Memory里面有很多个数据，从里面去均匀随机抽取</p>
<p>而Prioritized DQN好像只存储了mini-batch个数据，并且对这些数据进行替换更新，但是在更新过程中，会不会存在将重要的数据给替换掉了呢？如这重要数据就是正面奖励的数据，而用负面奖励数据去替换掉了？</p>
<h2 id="四、结果显示"><a href="#四、结果显示" class="headerlink" title="四、结果显示"></a>四、结果显示</h2><blockquote>
<p>在训练的时候，将env.render()注释掉，首先训练过程会很快</p>
<p>其次是没有注释时，小车好像很难到达旗子那里去，不知道env.render()的影响为什么这么大</p>
<p>下面的图片结果都是在注释掉的情况下训练产生的，没有注释时，时间太长，且一直找不到旗子</p>
<p>注释下，几分钟就可以完成训练（CPU）</p>
<p>而没注释，20分钟了可能5个episode都没有完成</p>
</blockquote>
<p><strong>（1）DQN下的训练</strong></p>
<p>某一次训练</p>
<p><img src="/2019/08/09/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BPrioritized-Experience-Replay/4.png" alt></p>
<p>另一次训练结果</p>
<p><img src="/2019/08/09/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BPrioritized-Experience-Replay/5.png" alt></p>
<p><strong>（2）Double DQN下的训练</strong></p>
<p>没有加seed</p>
<p>某一次训练</p>
<p><img src="/2019/08/09/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BPrioritized-Experience-Replay/6.png" alt></p>
<p>某一次训练</p>
<p><img src="/2019/08/09/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BPrioritized-Experience-Replay/7.png" alt></p>
<p>但是在输出中，步数是不止这么一点的，还不太清楚是为什么没有达到6w步（显示），但是能看出Prioritized 在找到一次正面奖励之后，还是比DQN要训练的快的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#======================== Double  DQN ======================================</span></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">26000</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">36000</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">39000</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">41000</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">42000</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">4</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">44000</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;finished&#x27;</span>) </span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">45000</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">6</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">48000</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">7</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">53000</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">8</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">54000</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">9</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">55000</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">56000</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">10</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">11</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">57000</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">58000</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">13</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">59000</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">60000</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">61000</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">62000</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">63000</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==============================Double DQN withPrioritized ======================</span></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">33000</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">37000</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">38000</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">39000</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">4</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">44000</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">45000</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">6</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">46000</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">7</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">47000</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">8</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">48000</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">9</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> target_params_replaces </span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">49000</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">10</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">11</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">50000</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">13</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">51000</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">52000</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;current steps:&#x27;</span>, <span class="number">53000</span>)</span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;episode:&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;finished&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>从图中可以看出，我们都从两种方法最初拿到第一个<code>R += 10</code>奖励的时候算起，看看经历过一次<code>R += 10</code>后，他们有没有好好利用这次的奖励，可以看出，有Prioritized replay的可以高效利用这些不常拿到的奖励，并好好学习他们。所以 Prioritized replay会更快结束每个episode，很快就到达了小旗子。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>对代码中seed函数不是太能理解，反正是对随机数产生变化的函数</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/4-6-prioritized-replay/">莫烦解析</a></li>
<li><p><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/blob/master/contents/5.2_Prioritized_Replay_DQN/RL_brain.py">莫烦代码</a></p>
</li>
<li><p><a href="https://bluefisher.github.io/2018/06/02/Prioritized-Experience-Replay-%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/">Fisher’s 博客</a></p>
</li>
<li><a href="https://github.com/BlueFisher/Reinforcement-Learning/tree/master/Deep_Q_Network/Prioritized_DQN">Fisher’s代码</a></li>
<li><a href="https://www.cnblogs.com/pinard/p/9797695.html">刘建平博客</a></li>
<li><a href="https://github.com/ljpzzz/machinelearning/blob/master/reinforcement-learning/ddqn_prioritised_replay.py">刘建平代码</a></li>
<li><a href="https://stepneverstop.github.io/Prioritized-Experience-Replay.html">论文解析</a></li>
</ul>
]]></content>
      <categories>
        <category>代码</category>
        <category>深度强化学习</category>
      </categories>
      <tags>
        <tag>DRL</tag>
        <tag>OpenAI gym</tag>
        <tag>Prioritized Experience Replay</tag>
      </tags>
  </entry>
  <entry>
    <title>代码实现（二）之Double DQN</title>
    <url>/2019/08/08/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDouble-DQN/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>理论部分，这里将不再强调，直接强调重点部分（理论部分请点击<a href="https://ldgyyf.cn/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%9B%AE%E6%A0%87Q%E5%80%BC%E8%AE%A1%E7%AE%97%EF%BC%88Double-DQN%EF%BC%89/">Double DQN</a>）</p>
<p>经验证，DQN中使用max操作，会使得其Q值会出现过估计的情况，因此提出了DQN的改进算法之一：Double DQN；Double DQN就是将DQN中的目标Q值的动作与计算分离，来减缓过估计情况。</p>
<p>本文的代码，主要参考<a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5.1_Double_DQN">莫烦大神</a>的代码，只做了少量的修改。</p>
</blockquote>
<h2 id="一、实验环境"><a href="#一、实验环境" class="headerlink" title="一、实验环境"></a>一、实验环境</h2><blockquote>
<p>总共测试了三种环境，其中CartPole和MountainCar的环境，在<a href="https://ldgyyf.cn/2019/08/06/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BNature-DQN/#more">上一节</a>已经介绍过，这一次，添加了一个Pendulum环境。</p>
</blockquote>
<h3 id="1-1-Pendulum环境简单介绍"><a href="#1-1-Pendulum环境简单介绍" class="headerlink" title="1.1 Pendulum环境简单介绍"></a>1.1 Pendulum环境简单介绍</h3><p><strong>目标说明：</strong><a href="https://gym.openai.com/envs/Pendulum-v0/">详细网址</a></p>
<p><img src="/2019/08/08/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDouble-DQN/1.png" alt></p>
<p>倒立摆摆问题是对照文献中的经典问题。在这个版本的问题中，钟摆以随机位置开始，目标是将其向上摆动，使其保持直立。</p>
<p><strong>环境介绍：</strong><a href="https://github.com/openai/gym/wiki/Pendulum-v0">详细网址</a>，<a href="https://github.com/openai/gym/blob/master/gym/envs/classic_control/pendulum.py">pendulum源代码</a></p>
<p><img src="/2019/08/08/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDouble-DQN/2.png" alt></p>
<h2 id="二、Double-DQN"><a href="#二、Double-DQN" class="headerlink" title="二、Double DQN"></a>二、Double DQN</h2><p>在<strong>DQN</strong>中，其$Y_t^{DQN}$的计算公式为：</p>
<script type="math/tex; mode=display">
Y_t^{DQN} \equiv R_{t+1} + \gamma \max_a Q(S_{t+1},a; \theta_t^-)</script><p>其中，$\theta_t^-$为$Target Q$的网络参数。</p>
<p>正是因为其max操作，使得其Q值可能比真实值要高，导致动作-值函数过估计。</p>
<p>而<strong>Double DQN</strong>中，则对$Y_t^{DQN}$进行了一个小小的改动，改动后如下：</p>
<script type="math/tex; mode=display">
Y_t^{DoubleQ} \equiv R_{t+1} + \gamma Q(S_{t+1},\arg\max_a Q(S_{t+1},a;\theta_t);\theta^-_t)</script><p>使用Q网络的参数$\theta$来估计贪婪策略的价值，使用$TargetQ$网络的参数$\theta^-$来公平的评估该策略的价值</p>
<h2 id="三、代码部分"><a href="#三、代码部分" class="headerlink" title="三、代码部分"></a>三、代码部分</h2><blockquote>
<p>Double DQN的代码相比于DQN，只改动了一处。直接查看<a href="https://github.com/ldgcug/DeepReinforcementLearning-Tensorflow/tree/master/DDQN">所有代码</a></p>
</blockquote>
<h3 id="3-1-代码组成"><a href="#3-1-代码组成" class="headerlink" title="3.1 代码组成"></a>3.1 代码组成</h3><blockquote>
<p>所有代码里面，主要包含6个代码：</p>
<p>（1）ddqn.py和ddqn_truth.py</p>
<p>​        这两个代码几乎完全一致，不同的是，在ddqn.py中，只包含ddqn的算法；而在ddqn_truth.py中，同时包含了ddqn算法和dqn算法，并且添加了求真实Q-values的值</p>
<p>（2）run_CartPole.py</p>
<p>​        这个和上一节DQN里面的代码基本完全一致，较之前，多了一个测试环节，测试训练的效果，测试差不多能达到300分。并且主要用于展示损失函数图和累计奖励图</p>
<p>（3）run_MountainCar.py</p>
<p>​        这个就和上一节的完全一致了，除了调用的是DDQN外，就没有区别了</p>
<p>（4）run_CartPole_truth.py和run_Pendulum.py</p>
<p>​        这两个主函数里面代用的则是ddqn_truth.py函数，最终用于展示其DQN和Double DQN的过估计情况</p>
</blockquote>
<h3 id="3-2-网络-ddqn-py"><a href="#3-2-网络-ddqn-py" class="headerlink" title="3.2 网络-ddqn.py"></a>3.2 网络-ddqn.py</h3><blockquote>
<p>主要用来显示损失函数图和累计奖励图</p>
</blockquote>
<p><strong>ddqn.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q_next = self.sess.run(self.q_next,feed_dict=&#123;self.s_:next_states&#125;)</span><br><span class="line">q_eval = self.sess.run(self.q_eval,feed_dict=&#123;self.s:states&#125;)</span><br><span class="line"><span class="comment"># add q_eval_next</span></span><br><span class="line">q_eval_next = self.sess.run(self.q_eval,feed_dict=&#123;self.s:next_states&#125;)</span><br><span class="line">q_target = q_eval.copy()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mini_batch)):</span><br><span class="line">	<span class="keyword">if</span> dones[k]:</span><br><span class="line">		q_target[k][actions[k]] = rewards[k]</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="comment"># dqn</span></span><br><span class="line">		<span class="comment"># q_target[k][actions[k]]	= rewards[k] + self.gamma * np.max(q_next[k])</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># double dqn</span></span><br><span class="line">		max_action_next = np.argmax(q_eval_next,axis=<span class="number">1</span>)<span class="comment"># argmax Q </span></span><br><span class="line">		<span class="comment">#print(&#x27;q_next&#x27;,q_next)</span></span><br><span class="line">		q_target[k][actions[k]]	= rewards[k] + self.gamma * q_next[k,max_action_next[k]]</span><br></pre></td></tr></table></figure>
<p><strong>dqn.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q_next = self.sess.run(self.q_next,feed_dict=&#123;self.s_:next_states&#125;)</span><br><span class="line">q_eval = self.sess.run(self.q_eval,feed_dict=&#123;self.s:states&#125;)</span><br><span class="line">q_target = q_eval.copy()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mini_batch)):</span><br><span class="line">	<span class="keyword">if</span> dones[k]:</span><br><span class="line">		q_target[k][actions[k]] = rewards[k]</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		q_target[k][actions[k]]	= rewards[k] + self.gamma * np.<span class="built_in">max</span>(q_next[k])</span><br></pre></td></tr></table></figure>
<p>Double DQN 和DQN的代码的主要差别如上，很明显：</p>
<p>首先，在Double DQN中，多了一个Q值：q_eval_next</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q_eval_next = self.sess.run(self.q_eval,feed_dict=&#123;self.s:next_states&#125;)</span><br></pre></td></tr></table></figure>
<p>这一行对应了公式里面的：$Q(S_{t+1},a;\theta_t)$</p>
<p>值得注意的是，这里仍然用的是Q网络，但是状态为下一状态$S_{t+1}$</p>
<p>然后，在计算时首先求出$argmax$，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">max_action_next = np.argmax(q_eval_next,axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>这一行则对应了$\arg\max<em>a Q(S</em>{t+1},a;\theta_t)$，这样就得到了行为$a$</p>
<p>最后则是计算$Y_t^{DQN}$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q_target[k][actions[k]]	= rewards[k] + self.gamma * q_next[k,max_action_next[k]]</span><br></pre></td></tr></table></figure>
<p>通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">q_next[k,max_action_next[k]]</span><br></pre></td></tr></table></figure>
<p>则直接获取$Q’(s,a)$的值，而不再是用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">np.max(q_next[k])</span><br></pre></td></tr></table></figure>
<p>获取$\max Q’(s,a)$，要注意这其中的区别</p>
<h3 id="3-3-网络-ddqn-truth-py"><a href="#3-3-网络-ddqn-truth-py" class="headerlink" title="3.3 网络-ddqn_truth.py"></a>3.3 网络-ddqn_truth.py</h3><blockquote>
<p>把dqn和ddqn算法全部添加进来，并且计算真实Q-values值，用于展示dqn和ddqn与真实Q-values之间的差别的图形</p>
</blockquote>
<p>（1）在init函数里面，主要多了double_q和sess的变量，其中double_q的变量是为了判断是否用ddqn，还是dqn。因为要展示两种算法与真实Q-values之间的差异，因此还需要接收主函数输入的sess</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,double_q = <span class="literal">True</span>,sess = <span class="literal">None</span></span>):</span></span><br><span class="line">    self.double_q = double_q <span class="comment">#decide to use double q or not</span></span><br><span class="line">    <span class="keyword">if</span> sess <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">		self.sess = tf.Session()</span><br><span class="line">		self.sess.run(tf.global_variables_initializer())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">		self.sess = sess</span><br><span class="line">    <span class="comment"># record the truth</span></span><br><span class="line">	self.q = [] <span class="comment">#用来记录真实的Q-values值</span></span><br><span class="line">	self.running_q = <span class="number">0</span> <span class="comment">#用于计算真实Q-values值</span></span><br></pre></td></tr></table></figure>
<p>（2）在e-greedy行为选择这里，添加了计算真实Q-values的代码，其真值通过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.running_q = self.running_q * <span class="number">0.99</span> + <span class="number">0.01</span> * np.<span class="built_in">max</span>(actions_value)</span><br></pre></td></tr></table></figure>
<p>来实现（为什么？还没有去思考）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose_action</span>(<span class="params">self,state</span>):</span></span><br><span class="line">	</span><br><span class="line">	actions_value = self.sess.run(self.q_eval,feed_dict=&#123;self.s:state.reshape(-<span class="number">1</span>,self.s_dim)&#125;)</span><br><span class="line">	self.running_q = self.running_q * <span class="number">0.99</span> + <span class="number">0.01</span> * np.<span class="built_in">max</span>(actions_value)</span><br><span class="line">	self.q.append(self.running_q)</span><br><span class="line">	<span class="keyword">if</span> np.random.uniform() &lt; self.epsilon:</span><br><span class="line">		<span class="keyword">return</span> np.argmax(actions_value)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> np.random.randint(<span class="number">0</span>,self.a_dim)</span><br></pre></td></tr></table></figure>
<p>（3）在learn函数里面，通过self.double_q来判断是否用double dqn算法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">learn</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># double dqn 需要添加的Q值</span></span><br><span class="line">    q_eval_next = self.sess.run(self.q_eval,feed_dict=&#123;self.s:next_states&#125;)</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mini_batch)):</span><br><span class="line">			<span class="keyword">if</span> dones[k]:</span><br><span class="line">				q_target[k][actions[k]] = rewards[k]</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				<span class="keyword">if</span> self.double_q:</span><br><span class="line">					<span class="comment"># double dqn</span></span><br><span class="line">					max_action_next = np.argmax(q_eval_next,axis=<span class="number">1</span>)<span class="comment"># argmax Q </span></span><br><span class="line">					q_target[k][actions[k]]	= rewards[k] + self.gamma * q_next[k,max_action_next[k]]</span><br><span class="line">				<span class="keyword">else</span>:</span><br><span class="line">					q_target[k][actions[k]]	= rewards[k] + self.gamma * np.<span class="built_in">max</span>(q_next[k])</span><br></pre></td></tr></table></figure>
<h3 id="3-4-主函数-run-CartPole-py"><a href="#3-4-主函数-run-CartPole-py" class="headerlink" title="3.4 主函数-run_CartPole.py"></a>3.4 主函数-run_CartPole.py</h3><blockquote>
<p>和第一节有所不同的是，在训练过程中添加了测试的部分</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total_steps = <span class="number">0</span></span><br><span class="line">total_reward = []</span><br><span class="line"></span><br><span class="line">EPISODE = <span class="number">100</span></span><br><span class="line">STEP = <span class="number">300</span></span><br><span class="line">TEST = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i_episode <span class="keyword">in</span> <span class="built_in">range</span>(EPISODE):</span><br><span class="line">	s = env.reset()</span><br><span class="line">	ep_r = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(STEP):</span><br><span class="line">		env.render()</span><br><span class="line"></span><br><span class="line">		a = RL.choose_action(s)</span><br><span class="line">		s_,r,done,info = env.step(a)</span><br><span class="line">		<span class="comment"># the smaller theta and closer to center the better</span></span><br><span class="line">		x, x_dot, theta, theta_dot = s_</span><br><span class="line">		r1 = (env.x_threshold - <span class="built_in">abs</span>(x))/env.x_threshold - <span class="number">0.8</span></span><br><span class="line">		r2 = (env.theta_threshold_radians - <span class="built_in">abs</span>(theta))/env.theta_threshold_radians - <span class="number">0.5</span></span><br><span class="line">		r = r1 + r2</span><br><span class="line">		RL.store_transition(s,a,r,s_,done)</span><br><span class="line"></span><br><span class="line">		ep_r += r </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> total_steps &gt; <span class="number">1000</span>:</span><br><span class="line">			RL.learn()</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> done:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;episode:&#x27;</span>,i_episode,<span class="string">&#x27;ep_r:&#x27;</span>,<span class="built_in">round</span>(ep_r,<span class="number">2</span>),<span class="string">&#x27;epsilon&#x27;</span>,<span class="built_in">round</span>(RL.epsilon,<span class="number">2</span>),<span class="string">&#x27;buffer_size:&#x27;</span>,RL.memory_count,<span class="string">&#x27;steps:&#x27;</span>,total_steps)</span><br><span class="line">			total_reward.append(ep_r)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">		s = s_</span><br><span class="line">		total_steps += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># Test every 10 episodes</span></span><br><span class="line">	<span class="keyword">if</span> i_episode % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">		total_rewards = <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(TEST):</span><br><span class="line">			state = env.reset()</span><br><span class="line">			<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(STEP):</span><br><span class="line">				env.render()</span><br><span class="line">				action = RL.get_action(state) <span class="comment"># direct action for test</span></span><br><span class="line">				state,reward,done,_ = env.step(action)</span><br><span class="line">				total_rewards += reward</span><br><span class="line">				<span class="keyword">if</span> done:</span><br><span class="line">					<span class="keyword">break</span></span><br><span class="line">		ave_reward = total_rewards/TEST</span><br><span class="line">		<span class="built_in">print</span> (<span class="string">&#x27;episode: &#x27;</span>,i_episode,<span class="string">&#x27;Evaluation Average Reward:&#x27;</span>,ave_reward)</span><br></pre></td></tr></table></figure>
<h3 id="3-5-主函数-run-Pendulum-py"><a href="#3-5-主函数-run-Pendulum-py" class="headerlink" title="3.5 主函数-run_Pendulum.py"></a>3.5 主函数-run_Pendulum.py</h3><blockquote>
<p>显示dqn和ddqn算法相比于真实Q-values差异的图像</p>
</blockquote>
<p>需要说一下的是，因为需要计算dqn和ddqn的值，并显示，因此在这里需要创建两个RL，通过double_q来判断使用何种算法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> ddqn_truth <span class="keyword">import</span> DDQN </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">env = gym.make(<span class="string">&#x27;Pendulum-v0&#x27;</span>)</span><br><span class="line">env = env.unwrapped</span><br><span class="line">env.seed(<span class="number">1</span>) <span class="comment"># 可重复实验</span></span><br><span class="line"></span><br><span class="line">MEMORY_SIZE = <span class="number">3000</span></span><br><span class="line">ACTION_SPACE = <span class="number">11</span>  <span class="comment"># 将原本的连续动作分离成 11 个动作</span></span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;Natural_DQN&#x27;</span>):</span><br><span class="line"></span><br><span class="line">    natural_DQN = DDQN(s_dim = env.observation_space.shape[<span class="number">0</span>],</span><br><span class="line">             a_dim = ACTION_SPACE,</span><br><span class="line">             learning_rate = <span class="number">0.005</span>,</span><br><span class="line">             e_greedy = <span class="number">0.9</span>,</span><br><span class="line">             replace_target_iter = <span class="number">200</span>,</span><br><span class="line">             memory_size = MEMORY_SIZE,</span><br><span class="line">             e_greedy_increment = <span class="number">0.001</span>,</span><br><span class="line">             double_q = <span class="literal">False</span>,</span><br><span class="line">             sess = sess)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;Double_DQN&#x27;</span>):</span><br><span class="line"></span><br><span class="line">    double_DQN = DDQN(s_dim = env.observation_space.shape[<span class="number">0</span>],</span><br><span class="line">             a_dim = ACTION_SPACE,</span><br><span class="line">             learning_rate = <span class="number">0.005</span>,</span><br><span class="line">             e_greedy = <span class="number">0.9</span>,</span><br><span class="line">             replace_target_iter = <span class="number">200</span>,</span><br><span class="line">             memory_size = MEMORY_SIZE,</span><br><span class="line">             e_greedy_increment = <span class="number">0.001</span>,</span><br><span class="line">             double_q = <span class="literal">True</span>,</span><br><span class="line">             sess = sess)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">RL</span>):</span></span><br><span class="line">    total_steps = <span class="number">0</span></span><br><span class="line">    s = env.reset()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        env.render()</span><br><span class="line">        a = RL.choose_action(s)</span><br><span class="line">        f_action = (a-(ACTION_SPACE-<span class="number">1</span>)/<span class="number">2</span>)/((ACTION_SPACE-<span class="number">1</span>)/<span class="number">4</span>)   <span class="comment"># convert to [-2 ~ 2] float actions</span></span><br><span class="line">        s_, r, done, info = env.step(np.array([f_action]))</span><br><span class="line"></span><br><span class="line">        r /= <span class="number">10</span> <span class="comment"># normalize to a range of (-1, 0). r = 0 when get upright</span></span><br><span class="line">        <span class="comment"># the Q target at upright state will be 0, because Q_target = r + gamma * Qmax(s&#x27;, a&#x27;) = 0 + gamma * 0</span></span><br><span class="line">        <span class="comment"># so when Q at this state is greater than 0, the agent overestimates the Q. Please refer to the final result.</span></span><br><span class="line">        RL.store_transition(s,a,r,s_,done)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> total_steps &gt; MEMORY_SIZE: <span class="comment">#learning</span></span><br><span class="line">            RL.learn()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> total_steps - MEMORY_SIZE &gt; <span class="number">20000</span>: <span class="comment"># stop game</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        s = s_</span><br><span class="line">        total_steps += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RL.q  </span><br><span class="line"></span><br><span class="line">q_natural = train(natural_DQN)</span><br><span class="line">q_double = train(double_DQN)</span><br><span class="line"></span><br><span class="line">plt.plot(np.array(q_natural), c=<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;natural&#x27;</span>)</span><br><span class="line">plt.plot(np.array(q_double), c=<span class="string">&#x27;b&#x27;</span>, label=<span class="string">&#x27;double&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Q eval&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;training steps&#x27;</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>另外，这里的行为维度a_dim为11，是将原本的连续动作离散化为11个动作，至于为什么离散化为11个动作？</p>
<p>可能是因为在<a href="https://github.com/openai/gym/blob/master/gym/envs/classic_control/pendulum.py">源码</a>里面，将行为限定在了[-8,2]里面，因此输入的有11维</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.max_speed=<span class="number">8</span></span><br><span class="line">   self.max_torque=<span class="number">2.</span></span><br><span class="line">   u = np.clip(u, -self.max_torque, self.max_torque)[<span class="number">0</span>]	<span class="comment"># 这里的u是输入的行为</span></span><br></pre></td></tr></table></figure>
<p>而后面又将获取到的行为做下面操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f_action = (a-(ACTION_SPACE-<span class="number">1</span>)/<span class="number">2</span>)/((ACTION_SPACE-<span class="number">1</span>)/<span class="number">4</span>) <span class="comment"># convert to [-2 ~ 2] </span></span><br></pre></td></tr></table></figure>
<p>是因为在环境介绍部分说明了行为的界限范围[-2,2]，所以才做的该操作</p>
<p><img src="/2019/08/08/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDouble-DQN/2.png" alt></p>
<p>至于$r = r /10$，将奖励限定在(-1,0)的操作还没太看懂，我觉得应该是除以20才对，在介绍部分说明了奖励的取值范围为[-16,0]</p>
<p><img src="/2019/08/08/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDouble-DQN/3.png" alt></p>
<p>最后，则显示了两个算法与真实Q-values的差异图像</p>
<h2 id="四、结果显示"><a href="#四、结果显示" class="headerlink" title="四、结果显示"></a>四、结果显示</h2><p><strong>DDQN算法</strong></p>
<p>（1）run_CartPole.py</p>
<p>​    100个episode的损失函数如和累计奖励图</p>
<p><img src="/2019/08/08/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDouble-DQN/4.png" alt></p>
<p><img src="/2019/08/08/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDouble-DQN/5.png" alt></p>
<p>​    （2）run_CartPole_truth.py</p>
<p>100个episode训练过车中的动作-值函数的近似</p>
<p>可以看出Double DQN比 nature DQN的值还是要低一些的，即能缓解其过度估计情况，不知道真实值是多少，只是输出来看看效果</p>
<p><img src="/2019/08/08/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDouble-DQN/6.png" alt></p>
<p>（3）run_MountainCar.py</p>
<p>15个episode的损失函数图和累计奖励图</p>
<p><img src="/2019/08/08/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDouble-DQN/7.png" alt></p>
<p><img src="/2019/08/08/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDouble-DQN/8.png" alt></p>
<p>（4）run_Pendulum.py</p>
<p>​    这个是用莫烦的代码跑的</p>
<p><img src="/2019/08/08/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDouble-DQN/9.png" alt></p>
<p>而下图则是我根据莫烦的代码修改后，测试的，图像当然是差不多的，至少证明了我改写过后的代码是没有问题的（虽然只改动了一点点，但是改为自己习惯的就好）</p>
<p><img src="/2019/08/08/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDouble-DQN/10.png" alt></p>
<p>从这个图中则可以看出，我们的真实Q-values值是0，而Nature DQN在预估的过程中，存在不少高估的情况，改用Double DQN，则会好很多</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>通过这个实验对Double DQN有了更加深刻的了解，并且对DQN的高估也有了一个较直观的理解，但是对里面的一些参数是如何确定的，这点还是有点疑惑，目前还是主要以理解算法为主</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5.1_Double_DQN">莫烦-Double DQN</a></li>
<li><p><a href="https://github.com/openai/gym/blob/master/gym/envs/classic_control/pendulum.py">pendulum源码</a></p>
</li>
<li><p><a href="https://github.com/openai/gym/wiki/Pendulum-v0">pendulum环境介绍</a></p>
</li>
<li><p><a href="https://gym.openai.com/envs/Pendulum-v0/">pendulum目标介绍</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>代码</category>
        <category>深度强化学习</category>
      </categories>
      <tags>
        <tag>DRL</tag>
        <tag>OpenAI gym</tag>
        <tag>Double DQN</tag>
      </tags>
  </entry>
  <entry>
    <title>代码实现（五）之Policy Gradient</title>
    <url>/2019/08/12/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPolicy-Gradient/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>Policy Gradient是RL里面基于Policy-Based的方法，与前面的DQN的基于Value-Based的方法不同。其理论部分，查看<a href="https://ldgyyf.cn/2019/07/23/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPolicy-Gradient%E7%90%86%E8%A7%A3/">DRL论文阅读（五）</a></p>
<p>本篇代码是基于<a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/7_Policy_gradient_softmax">莫烦</a>的代码，然后进行了少量的修改，实践中使用的是离散行为空间的softmax策略函数，而不是连续行为空间的高斯策略函数</p>
</blockquote>
<h2 id="一、实验环境"><a href="#一、实验环境" class="headerlink" title="一、实验环境"></a>一、实验环境</h2><blockquote>
<p>使用CartPole和MountainCar作为实验环境，这里将不再对环境进行说明</p>
</blockquote>
<h2 id="二、Policy-Gradient"><a href="#二、Policy-Gradient" class="headerlink" title="二、Policy Gradient"></a>二、Policy Gradient</h2><p><strong>算法伪代码</strong>：采用的是蒙特卡洛策略梯度reinforce算法(不带基数)</p>
<p>它是一个基于整条回合数据的更新，即在训练之前，要先收集整个episode的(s,a,r)，然后在进行参数更新</p>
<p><img src="/2019/08/12/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPolicy-Gradient/1.png" alt></p>
<p>$\nabla<em>\theta log \pi</em>\theta(s,a)<em>v$ 表示在状态$s$对所选动作 $a$ 的吃惊度，如果 $\pi<em>\theta(s,a)$ 概率越小，则反向的  $log\pi  </em>\theta(s,a)$ (即 $-log\pi  <em>\theta(s,a)$ )越大，如果在 $\pi</em>\theta(s,a)$ 很小的情况下，拿到了一个大的 $R$ ，也就是大的 $V$ ，则 $-\nabla<em>\theta log \pi</em>\theta(s,a)</em>v$ 就更大，表示更吃惊（我选了一个不常选的动作，结果发现它得到了一个好的reward，那我就得对我这次的参数进行一个大幅度的修改）。这也就是吃惊度的物理意义。</p>
<p><strong>策略梯度公式</strong></p>
<script type="math/tex; mode=display">
\nabla_\theta J(\theta) = E_{\pi\theta}[\nabla_\theta log \pi_\theta(s,a) Q^{\pi\theta}(s,a)]</script><p><strong>策略函数：</strong></p>
<ul>
<li><p><strong>softmax策略函数</strong></p>
<script type="math/tex; mode=display">
\pi_\theta(s,a) = \frac{e^{\phi(s,a)^T \theta}}{ \sum_{b} e^{\phi(s,b)^T \theta}}</script><script type="math/tex; mode=display">
\nabla_\theta log\pi_\theta(s,a) = \phi(s,a) - E_{\pi\theta}[\phi(s,\cdot)]</script><p>其中，$\phi(s,a)$表示状态-动作对的L维特征向量</p>
</li>
<li><p><strong>高斯策略函数</strong></p>
<script type="math/tex; mode=display">
\mu(s) = \phi(s)^T \theta</script><script type="math/tex; mode=display">
a \sim N(\mu(s),\sigma^2)</script></li>
</ul>
<script type="math/tex; mode=display">
\nabla_\theta log \pi_\theta(s,a) = \frac{(a-\mu(s)) \phi(s)}{\sigma^2}</script><h2 id="三、代码部分"><a href="#三、代码部分" class="headerlink" title="三、代码部分"></a>三、代码部分</h2><blockquote>
<p>直接查看<a href="https://github.com/ldgcug/DeepReinforcementLearning-Tensorflow/tree/master/Policy%20Gradient">完整代码</a></p>
</blockquote>
<h3 id="3-1-代码组成"><a href="#3-1-代码组成" class="headerlink" title="3.1 代码组成"></a>3.1 代码组成</h3><blockquote>
<p>代码主要由三部分组成：<strong>policy_gradient.py</strong>、<strong>run_CartPole.py</strong>、<strong>run_MountainCar.py</strong></p>
</blockquote>
<h3 id="3-2-网络-policy-gradient-py"><a href="#3-2-网络-policy-gradient-py" class="headerlink" title="3.2 网络-policy_gradient.py"></a>3.2 网络-policy_gradient.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf </span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">tf.set_random_seed(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PolicyGradient</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,</span></span></span><br><span class="line"><span class="params"><span class="function">				 s_dim,</span></span></span><br><span class="line"><span class="params"><span class="function">				 a_dim,</span></span></span><br><span class="line"><span class="params"><span class="function">				 learning_rate = <span class="number">0.01</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">				 reward_decay = <span class="number">0.95</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">				 output_graph = <span class="literal">False</span></span></span></span><br><span class="line"><span class="params"><span class="function">	</span>):</span></span><br><span class="line">		self.s_dim = s_dim</span><br><span class="line">		self.a_dim = a_dim</span><br><span class="line">		self.lr = learning_rate <span class="comment"># 学习率</span></span><br><span class="line">		self.gamma = reward_decay <span class="comment"># reward 递减率</span></span><br><span class="line">        </span><br><span class="line">		self.ep_obs,self.ep_as,self.ep_rs = [],[],[] <span class="comment">#用来存储s,a,r</span></span><br><span class="line"></span><br><span class="line">		self.build_net()  <span class="comment"># 建立 policy 神经网络</span></span><br><span class="line"></span><br><span class="line">		self.sess = tf.Session()</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> output_graph:</span><br><span class="line">			tf.summary.FileWriter(<span class="string">&quot;logs/&quot;</span>,self.sess.graph)</span><br><span class="line"></span><br><span class="line">		self.sess.run(tf.global_variables_initializer())</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">build_net</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># 输入</span></span><br><span class="line">		self.s = tf.placeholder(tf.float32,[<span class="literal">None</span>,self.s_dim],name=<span class="string">&#x27;s_dim&#x27;</span>)   <span class="comment"># 接收 observation</span></span><br><span class="line">		self.tf_acts = tf.placeholder(tf.int32,[<span class="literal">None</span>,],name=<span class="string">&quot;actions_num&quot;</span>) <span class="comment"># 接收我们在这个回合中选过的 actions</span></span><br><span class="line">		self.tf_vt = tf.placeholder(tf.float32,[<span class="literal">None</span>,],name=<span class="string">&quot;actions_value&quot;</span>)<span class="comment"># 接收每个 state-action 所对应的 value (通过 reward 计算)</span></span><br><span class="line">		<span class="comment"># 网络参数</span></span><br><span class="line">		w_initializer = tf.random_normal_initializer(<span class="number">0.</span>,<span class="number">0.3</span>)</span><br><span class="line">		b_initializer = tf.constant_initializer(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">		c_names = [<span class="string">&#x27;softmax_output&#x27;</span>,tf.GraphKeys.GLOBAL_VARIABLES]</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 隐藏层1 使用relu激活函数</span></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;fc1&#x27;</span>):</span><br><span class="line">			w1 = tf.get_variable(<span class="string">&#x27;w1&#x27;</span>,[self.s_dim,<span class="number">20</span>],initializer=w_initializer,collections=c_names)</span><br><span class="line">			b1 = tf.get_variable(<span class="string">&#x27;b1&#x27;</span>,[<span class="number">20</span>],initializer=b_initializer,collections=c_names)</span><br><span class="line">			fc1 = tf.nn.relu(tf.matmul(self.s,w1)+b1)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 隐藏层最后一层，输出是不需要激活函数的</span></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;fc2&#x27;</span>):</span><br><span class="line">			w2 = tf.get_variable(<span class="string">&#x27;w2&#x27;</span>,[<span class="number">20</span>,self.a_dim],initializer=w_initializer,collections=c_names)</span><br><span class="line">			b2 = tf.get_variable(<span class="string">&#x27;b2&#x27;</span>,[self.a_dim],initializer=b_initializer,collections=c_names)</span><br><span class="line">			all_act  = tf.matmul(fc1,w2) + b2</span><br><span class="line"></span><br><span class="line">		<span class="comment"># softmax 输出层，输出每个行为所对应的概率</span></span><br><span class="line">		self.all_act_prob = tf.nn.softmax(all_act,name=<span class="string">&#x27;act_prob&#x27;</span>)  </span><br><span class="line"></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;loss&#x27;</span>):</span><br><span class="line">             <span class="comment"># 最大化 总体 reward (log_p * R) 就是在最小化 -(log_p * R), 而 tf 的功能里只有最小化 loss</span></span><br><span class="line">			neg_log_prob = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=all_act,labels=self.tf_acts) <span class="comment"># 所选 action 的概率 -log 值</span></span><br><span class="line">			<span class="comment"># 或者使用下面这种方式</span></span><br><span class="line">			<span class="comment"># neg_log_prob = tf.reduce_sum(-tf.log(self.all_act_prob)*tf.one_hot(self.tf_acts, self.n_actions), axis=1)</span></span><br><span class="line">			loss = tf.reduce_mean(neg_log_prob * self.tf_vt) <span class="comment"># (vt = 本reward + 衰减的未来reward) 引导参数的梯度下降</span></span><br><span class="line">		<span class="comment">#使用的是Adam优化器</span></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;train&#x27;</span>):</span><br><span class="line">			self.train_op = tf.train.AdamOptimizer(self.lr).minimize(loss)</span><br><span class="line">	</span><br><span class="line">    <span class="comment">#根据softmax所输出的概率选择行为</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">choose_action</span>(<span class="params">self,state</span>):</span></span><br><span class="line">		prob_weights = self.sess.run(self.all_act_prob,feed_dict=&#123;self.s:state.reshape(-<span class="number">1</span>,self.s_dim)&#125;) <span class="comment"># 所有 action 的概率</span></span><br><span class="line">		action = np.random.choice(<span class="built_in">range</span>(prob_weights.shape[<span class="number">1</span>]),p=prob_weights.ravel())  <span class="comment"># 根据概率来选 action</span></span><br><span class="line">		<span class="keyword">return</span> action</span><br><span class="line">    </span><br><span class="line">	<span class="comment">#存储整个episode的s,a,r</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">store_transition</span>(<span class="params">self,s,a,r</span>):</span></span><br><span class="line">		self.ep_obs.append(s)</span><br><span class="line">		self.ep_as.append(a)</span><br><span class="line">		self.ep_rs.append(r)</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">learn</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="comment"># 衰减, 并标准化这回合的 reward</span></span><br><span class="line">		discounted_ep_rs_norm = self.discount_and_norm_rewards()</span><br><span class="line"></span><br><span class="line">		<span class="comment"># train on episode</span></span><br><span class="line">		self.sess.run(self.train_op,feed_dict=&#123;</span><br><span class="line">					self.s:np.vstack(self.ep_obs), <span class="comment"># shape=[None, n_obs]</span></span><br><span class="line">					self.tf_acts:np.array(self.ep_as),  <span class="comment"># shape=[None, ]</span></span><br><span class="line">					self.tf_vt:discounted_ep_rs_norm  <span class="comment"># shape=[None, ]</span></span><br><span class="line">			&#125;)</span><br><span class="line">		self.ep_obs,self.ep_as,self.ep_rs = [],[],[] <span class="comment"># 训练完后，清空，在重新保存</span></span><br><span class="line">		<span class="keyword">return</span> discounted_ep_rs_norm <span class="comment"># 返回这一回合的 state-action value</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">#和以往的不同的是，这里是从后向前计算</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">discount_and_norm_rewards</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="comment"># discount episode rewards</span></span><br><span class="line">		discounted_ep_rs = np.zeros_like(self.ep_rs)</span><br><span class="line">		running_add = <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(self.ep_rs))): <span class="comment">#反转，后向前</span></span><br><span class="line">			running_add = running_add * self.gamma + self.ep_rs[t]</span><br><span class="line">			discounted_ep_rs[t] = running_add</span><br><span class="line"></span><br><span class="line">		<span class="comment"># normalize episode rewards</span></span><br><span class="line">		discounted_ep_rs -= np.mean(discounted_ep_rs)</span><br><span class="line">		discounted_ep_rs /= np.std(discounted_ep_rs)</span><br><span class="line">		<span class="keyword">return</span> discounted_ep_rs</span><br></pre></td></tr></table></figure>
<p><strong>部分语句解释：</strong></p>
<p>（1）*.shape[1]和ravel函数</p>
<blockquote>
<p>这里取prob_weights.shape[1]表示获取prob_weights的列个数，.shape[0]则表示行个数，即行为的维度</p>
<p>ravel函数表示扁平化，即拉成一个维度，<a href="https://www.cnblogs.com/mzct123/p/8659193.html">ravel函数详情</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">action = np.random.choice(<span class="built_in">range</span>(prob_weights.shape[<span class="number">1</span>]),p=prob_weights.ravel())</span><br></pre></td></tr></table></figure>
<p>（2）zeros_like函数</p>
<blockquote>
<p>返回与指定数组具有相同形状和数据类型的数组，并且数组中的值都为0。<a href="https://www.cjavapy.com/article/92/">函数详情</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">discounted_ep_rs = np.zeros_like(self.ep_rs)</span><br></pre></td></tr></table></figure>
<p>（3）reversed函数</p>
<blockquote>
<p>反转，PG算法中是前向，不是后向，因此需要反转。<a href="https://www.runoob.com/python3/python3-func-reversed.html">函数详情</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(self.ep_rs))):</span><br></pre></td></tr></table></figure>
<p>（4）np.std函数</p>
<blockquote>
<p>计算矩阵标准差，<a href="https://blog.csdn.net/chixujohnny/article/details/51106481">函数详情</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">discounted_ep_rs /= np.std(discounted_ep_rs)</span><br></pre></td></tr></table></figure>
<p>（5）np.vstack函数</p>
<blockquote>
<p>按照垂直方向堆叠数组，<a href="https://blog.csdn.net/csdn15698845876/article/details/73380803">函数详情</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.s:np.vstack(self.ep_obs),</span><br></pre></td></tr></table></figure>
<p>（6）tf.nn.sparse_softmax_cross_entropy_with_logits函数</p>
<blockquote>
<p>这个地方没怎么搞懂，<a href="https://blog.csdn.net/ZJRN1027/article/details/80199248">函数详情</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">neg_log_prob = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=all_act,labels=self.tf_acts)</span><br></pre></td></tr></table></figure>
<p>但若是换成这一种表达方式的话就是指：</p>
<p><strong>self.all_act_prob</strong>表示所有的行为对应的概率；</p>
<p><strong>tf.log(self.all_act_prob)*tf.one_hot(self.tf_acts, self.n_actions)</strong>这样就能知道我采取的是哪一个行为，而用one_hot则是为了用矩阵相乘，因为前面的是矩阵，one_hot只有被采取的行为为1，其他的为0。</p>
<p>添加负号是因为tf没有最大化，只有最小化，而我们想要实现<code>log</code>的最大化，即最小化<code>-log</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">neg_log_prob = tf.reduce_sum(-tf.log(self.all_act_prob)*tf.one_hot(self.tf_acts, self.n_actions), axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><strong>注：疑惑的地方，没弄懂</strong></p>
<p>（1）这里的这两个输入，为什么是[None,]，后面为什么是空的？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.tf_acts = tf.placeholder(tf.int32,[<span class="literal">None</span>,],name=<span class="string">&quot;actions_num&quot;</span>)</span><br><span class="line">self.tf_vt = tf.placeholder(tf.float32,[<span class="literal">None</span>,],name=<span class="string">&quot;actions_value&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>（2）计算损失函数</p>
<p>这里的损失函数，干嘛要求均值呢？即用tf.reduce_mean？</p>
<p>softmax策略函数体现在哪里，只是在前面直接用来求最后的输出层就可以了吗？这样就是用的softmax策略函数？那么前面关于softmax策略函数的梯度公式给出是干啥的呢？$\nabla<em>\theta log\pi</em>\theta(s,a) = \phi(s,a) - E_{\pi\theta}[\phi(s,\cdot)]$ </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;loss&#x27;</span>):</span><br><span class="line">    neg_log_prob = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=all_act,labels=self.tf_acts)</span><br><span class="line">    <span class="comment"># 或者使用下面这种方式</span></span><br><span class="line">    <span class="comment"># neg_log_prob = tf.reduce_sum(-tf.log(self.all_act_prob)*tf.one_hot(self.tf_acts, self.n_actions), axis=1)</span></span><br><span class="line">    loss = tf.reduce_mean(neg_log_prob * self.tf_vt) <span class="comment"># reward guided loss</span></span><br></pre></td></tr></table></figure>
<p><strong>这里用的损失函数的优化器，选用的是Adam，而不是前面DQN相关的RMSP</strong></p>
<h3 id="3-3-主函数-run-CartPole-py"><a href="#3-3-主函数-run-CartPole-py" class="headerlink" title="3.3 主函数-run_CartPole.py"></a>3.3 主函数-run_CartPole.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">from</span> policy_gradient <span class="keyword">import</span> PolicyGradient</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">DISPLAY_REWARD_THRESHOLD = <span class="number">400</span> <span class="comment"># 当 回合总 reward 大于 400 时显示模拟窗口</span></span><br><span class="line">RENDER = <span class="literal">False</span> <span class="comment"># 在屏幕上显示模拟窗口会拖慢运行速度, 我们等计算机学得差不多了再显示模拟</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">env = gym.make(<span class="string">&#x27;CartPole-v0&#x27;</span>)</span><br><span class="line">env.seed(<span class="number">1</span>)  <span class="comment">#普通的 PG 方法, 使得回合的 variance 比较大, 所以我们选了一个好点的随机种子</span></span><br><span class="line">env = env.unwrapped <span class="comment"># 取消限制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(env.action_space)</span><br><span class="line"><span class="built_in">print</span>(env.observation_space)</span><br><span class="line"><span class="built_in">print</span>(env.observation_space.high)</span><br><span class="line"><span class="built_in">print</span>(env.observation_space.low)</span><br><span class="line"></span><br><span class="line">RL = PolicyGradient(</span><br><span class="line">		s_dim = env.observation_space.shape[<span class="number">0</span>],</span><br><span class="line">		a_dim = env.action_space.n,</span><br><span class="line">		learning_rate = <span class="number">0.02</span>,</span><br><span class="line">		reward_decay = <span class="number">0.99</span>,</span><br><span class="line">		<span class="comment">#output_graph = True # output_graph=True,    # 输出 tensorboard 文件</span></span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i_epsiode <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3000</span>):</span><br><span class="line"></span><br><span class="line">	s = env.reset()</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		<span class="keyword">if</span> RENDER: env.render()</span><br><span class="line"></span><br><span class="line">		a = RL.choose_action(s)</span><br><span class="line">		s_,r,done,info = env.step(a)</span><br><span class="line"></span><br><span class="line">		RL.store_transition(s,a,r) <span class="comment"># 存储这一回合的 transition</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> done:</span><br><span class="line">			ep_rs_sum = <span class="built_in">sum</span>(RL.ep_rs)</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> <span class="string">&#x27;running_reward&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">globals</span>():</span><br><span class="line">				running_reward = ep_rs_sum</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 对应训练过程中的discount reward</span></span><br><span class="line">				running_reward = running_reward * <span class="number">0.99</span> + ep_rs_sum * <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> running_reward &gt; DISPLAY_REWARD_THRESHOLD: RENDER = <span class="literal">True</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;episode:&#x27;</span>,i_epsiode,<span class="string">&quot;reward:&quot;</span>,<span class="built_in">int</span>(running_reward))</span><br><span class="line"></span><br><span class="line">			vt = RL.learn()<span class="comment"># 学习, 输出 vt</span></span><br><span class="line">			<span class="comment">#这个地方 可以加可以不加</span></span><br><span class="line">			<span class="keyword">if</span> i_epsiode == <span class="number">0</span>:</span><br><span class="line">				plt.plot(vt) </span><br><span class="line">				plt.xlabel(<span class="string">&#x27;episode steps&#x27;</span>)</span><br><span class="line">				plt.ylabel(<span class="string">&#x27;normalized state-action value&#x27;</span>)</span><br><span class="line">				plt.show()</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">		s = s_,</span><br></pre></td></tr></table></figure>
<h3 id="3-4-主函数-run-MountainCar-py"><a href="#3-4-主函数-run-MountainCar-py" class="headerlink" title="3.4 主函数-run_MountainCar.py"></a>3.4 主函数-run_MountainCar.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">from</span> policy_gradient <span class="keyword">import</span> PolicyGradient</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">DISPLAY_REWARD_THRESHOLD = -<span class="number">2000</span> <span class="comment"># renders environment if total episode reward is greater then this threshold</span></span><br><span class="line">RENDER = <span class="literal">False</span> <span class="comment"># rendering wastes time</span></span><br><span class="line"></span><br><span class="line">env = gym.make(<span class="string">&#x27;MountainCar-v0&#x27;</span>)</span><br><span class="line">env.seed(<span class="number">1</span>)     <span class="comment"># reproducible, general Policy gradient has high variance</span></span><br><span class="line">env = env.unwrapped</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(env.action_space)</span><br><span class="line"><span class="built_in">print</span>(env.observation_space)</span><br><span class="line"><span class="built_in">print</span>(env.observation_space.high)</span><br><span class="line"><span class="built_in">print</span>(env.observation_space.low)</span><br><span class="line"></span><br><span class="line">RL = PolicyGradient(</span><br><span class="line">		s_dim = env.observation_space.shape[<span class="number">0</span>],</span><br><span class="line">		a_dim = env.action_space.n,</span><br><span class="line">		learning_rate = <span class="number">0.02</span>,</span><br><span class="line">		reward_decay = <span class="number">0.995</span>,</span><br><span class="line">		<span class="comment">#output_graph = True</span></span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i_epsiode <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line"></span><br><span class="line">	s = env.reset()</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		<span class="keyword">if</span> RENDER: env.render()</span><br><span class="line"></span><br><span class="line">		a = RL.choose_action(s)</span><br><span class="line">		s_,r,done,info = env.step(a)</span><br><span class="line"></span><br><span class="line">		RL.store_transition(s,a,r)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> done:</span><br><span class="line">			ep_rs_sum = <span class="built_in">sum</span>(RL.ep_rs)</span><br><span class="line">			<span class="keyword">if</span> <span class="string">&#x27;running_reward&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">globals</span>():</span><br><span class="line">				running_reward = ep_rs_sum</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				running_reward = running_reward * <span class="number">0.99</span> + ep_rs_sum * <span class="number">0.01</span></span><br><span class="line">			<span class="keyword">if</span> running_reward &gt; DISPLAY_REWARD_THRESHOLD: RENDER = <span class="literal">True</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;episode:&#x27;</span>,i_epsiode,<span class="string">&quot;reward:&quot;</span>,<span class="built_in">int</span>(running_reward))</span><br><span class="line">			vt = RL.learn()</span><br><span class="line">			<span class="keyword">if</span> i_epsiode == <span class="number">30</span>:</span><br><span class="line">				plt.plot(vt)</span><br><span class="line">				plt.xlabel(<span class="string">&#x27;episode steps&#x27;</span>)</span><br><span class="line">				plt.ylabel(<span class="string">&#x27;normalized state-action value&#x27;</span>)</span><br><span class="line">				plt.show()</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">		s = s_</span><br></pre></td></tr></table></figure>
<h2 id="四、界面显示"><a href="#四、界面显示" class="headerlink" title="四、界面显示"></a>四、界面显示</h2><blockquote>
<p>参考<a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/5-2-policy-gradient-softmax2/">莫烦</a>讲解</p>
</blockquote>
<p><strong>run_CartPole.py</strong></p>
<p><img src="/2019/08/12/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPolicy-Gradient/2.png" alt></p>
<p>可以看出，左边的$v_t$有较高的值，右边的$v_t$有较低的值，也就说通过$v_t$再说明：</p>
<p>“<strong>请重视我这回合刚开始时的一系列动作，因为前面一段时间杆子还没有掉下来，而且请惩罚我之后的一系列动作，因为后面的动作让杆子掉下来了</strong>”或者是</p>
<p>“<strong>我每次都想让这个动作在下一次增加被选的可能性（$\nabla<em>\theta log \pi</em>\theta(s,a)$），但是增加可能性的这种做法是好还是坏呢？这就要由$v_t$告诉我了，所有后一段时间的增加可能性做法并没有被提倡，而前段时间的增加可能性做法是被提倡的。</strong>”</p>
<p>这样，$v_t$就能通过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss = tf.reduce_mean(neg_log_prob * self.tf_vt)</span><br></pre></td></tr></table></figure>
<p>诱导gradient descent朝着正确的方向发展了。</p>
<p><strong>run_MountainCar.py</strong></p>
<p><img src="/2019/08/12/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPolicy-Gradient/3.png" alt></p>
<p>MountainCar这张图的意思是在说：</p>
<p><strong>“请重视我这回合最后的一系列动作, 因为这一系列动作让我爬上了山. 而且请惩罚我开始的一系列动作, 因为这些动作没能让我爬上山”.</strong></p>
<p>同样，通过$v_t$来诱导梯度下降的方向。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>和Value-Based相比，网络结构发生了很多变化，并且没有Target网络，也不需要DQN的经验池等等，代码简洁了很多，并且损失函数的优化器不一样。这个只是最基础的PG算法，下面将开始AC算法</p>
<p>在网络的代码中，PG在build_net、choose_action、store_transition处和之前的Value-Based方法有所改变，并且新添加了discount_and_norm_rewards函数</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/5-1-policy-gradient-softmax1/">莫烦算法介绍</a></li>
<li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/blob/master/contents/7_Policy_gradient_softmax/run_MountainCar.py">莫烦代码</a></li>
<li><a href="https://www.cnblogs.com/pinard/p/10137696.html">刘建平算法介绍</a></li>
<li><a href="https://github.com/ljpzzz/machinelearning/blob/master/reinforcement-learning/policy_gradient.py">刘建平代码</a></li>
<li><a href="https://bluefisher.github.io/2018/05/10/Actor-Critic-Softmax-Gaussian-Policy-%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/">Fisher’s代码介绍</a></li>
<li><a href="https://github.com/BlueFisher/Reinforcement-Learning/blob/master/Actor_Critic/actor_critic_pendulum.py">Fisher’s代码（AC含高斯策略函数）</a></li>
</ul>
]]></content>
      <categories>
        <category>代码</category>
        <category>深度强化学习</category>
      </categories>
      <tags>
        <tag>DRL</tag>
        <tag>OpenAI gym</tag>
        <tag>Policy Gradient</tag>
      </tags>
  </entry>
  <entry>
    <title>代码实现（四）之 Dueling DQN</title>
    <url>/2019/08/10/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B-Dueling-DQN/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>Dueling  DQN 相比较于之前的Double DQN（目标Q值方面的优化）、Prioritized Experience Replay（经验回放池的优化），这次注重的是神经网络的优化，即将最后的Q网络分为V网络和A网络。</p>
<p>其中，V网络仅仅与状态S有关，与具体要采用的动作A无关，通常称为状态价值函数；</p>
<p>A网络同时与状态S和动作A有关，通常称为动作优势函数。</p>
<p>其理论部分，点击<a href="https://ldgyyf.cn/2019/07/19/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%EF%BC%88Dueling-DQN%EF%BC%89/">DRL论文阅读（四）</a></p>
<p>本文的代码主要参考<a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5.3_Dueling_DQN">莫烦</a>的代码来修改的。</p>
</blockquote>
<h2 id="一、实验环境"><a href="#一、实验环境" class="headerlink" title="一、实验环境"></a>一、实验环境</h2><blockquote>
<p>使用Pendulum来作为实验环境</p>
</blockquote>
<p><img src="/2019/08/10/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B-Dueling-DQN/1.png" alt></p>
<p>这个实验环境的动作空间是连续的，其范围为[-2,2]。在前面的Double DQN实验中，我们将连续动作空间离散化为11个动作。</p>
<p>在本节的实验中，将分别离散化为5、15、25、35个行为空间来看其效果。</p>
<h2 id="二、Dueling-DQN"><a href="#二、Dueling-DQN" class="headerlink" title="二、Dueling DQN"></a>二、Dueling DQN</h2><p>传统的Nature DQN的输出最后是<strong>卷积层</strong>先经过<strong>全连接层</strong>，然后在输出对应于每个动作行为a的值。</p>
<p>而现在的Dueling DQN则是将<strong>最后一个卷积层</strong>的输出分为两部分，分别是<strong>V网络</strong>和<strong>A网络</strong>，如下图下方的分支中，上面的为V网络，下面的为A网络。</p>
<p>其中</p>
<ul>
<li><strong>V(s)</strong>：V(s)表示状态本身的好坏，一般为<strong>一个值</strong>（<strong>标量</strong>）。</li>
<li><strong>A(s,a)</strong>：A(s,a)表示当前状态下采取的行为的好坏，一般为<strong>n个值</strong>，因此A网络决定了策略</li>
</ul>
<p><img src="/2019/08/10/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B-Dueling-DQN/2.png" alt></p>
<p><strong>Dueling DQN的Q网络计算公式如下：</strong></p>
<script type="math/tex; mode=display">
Q(s,a;\theta,\alpha,\beta) = V(s;\theta,\beta) + \left(A(s,a;\theta,\alpha) - \frac{1}{|\mathcal{A}|}\sum_{a'} A(s,a';\theta,\alpha) \right)</script><p>其中，$\theta$为卷积层参数，$\beta$为V网络全连接层参数,$\alpha$为A网络全连接层参数</p>
<h2 id="三、代码部分"><a href="#三、代码部分" class="headerlink" title="三、代码部分"></a>三、代码部分</h2><blockquote>
<p>Dueling DQN相比于Nature网络，只在最后的网络结构部分改变了一点点，其他的都没有任何变化</p>
<p>若想看完整代码，直接<a href="https://github.com/ldgcug/DeepReinforcementLearning-Tensorflow/tree/master/Dueling%20DQN">查看所有代码</a></p>
</blockquote>
<h3 id="3-1-代码组成"><a href="#3-1-代码组成" class="headerlink" title="3.1 代码组成"></a>3.1 代码组成</h3><blockquote>
<p>本节的代码主要包含两个部分：dueling_dqn.py和run_Pendulum.py</p>
</blockquote>
<h3 id="3-2-网络-dueling-dqn-py"><a href="#3-2-网络-dueling-dqn-py" class="headerlink" title="3.2 网络-dueling_dqn.py"></a>3.2 网络-dueling_dqn.py</h3><blockquote>
<p>只在网络结构部分发生了变化</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DueilingDQN</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">...,dueling=<span class="literal">True</span>,sess=<span class="literal">None</span></span>)</span></span><br><span class="line"><span class="function">    	<span class="title">self</span>.<span class="title">dueling</span> = <span class="title">dueling</span> #会建立两个<span class="title">DQN</span>，其中一个是<span class="title">Dueling</span> <span class="title">DQN</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">        # 针对建立两个 <span class="title">DQN</span> 的模式修改了 <span class="title">tf</span>.<span class="title">Session</span>() 的建立方式</span></span><br><span class="line"><span class="function">        <span class="title">if</span> <span class="title">sess</span> <span class="title">is</span> <span class="title">None</span>:</span></span><br><span class="line">			self.sess = tf.Session()</span><br><span class="line">			self.sess.run(tf.global_variables_initializer())</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			self.sess = sess</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_net</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="comment"># ************************ build evaluate net *****************************</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;eval_net&#x27;</span>):</span><br><span class="line">			c_names = [<span class="string">&#x27;eval_net_params&#x27;</span>,tf.GraphKeys.GLOBAL_VARIABLES]</span><br><span class="line">			</span><br><span class="line">            <span class="comment">#第一层，两种DQN都一样</span></span><br><span class="line">			<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;layer1&#x27;</span>):</span><br><span class="line">				w1 = tf.get_variable(<span class="string">&#x27;w1&#x27;</span>,[self.s_dim,<span class="number">20</span>],initializer=w_initializer,collections=c_names)</span><br><span class="line">				b1 = tf.get_variable(<span class="string">&#x27;b1&#x27;</span>,[<span class="number">20</span>],initializer=b_initializer,collections=c_names)</span><br><span class="line">				l1 = tf.nn.relu(tf.matmul(self.s,w1)+b1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> self.dueling:</span><br><span class="line">				<span class="comment">#Dueling DQN</span></span><br><span class="line">				<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;Value&#x27;</span>): <span class="comment">#专门分析state的Value</span></span><br><span class="line">					w2 = tf.get_variable(<span class="string">&#x27;w2&#x27;</span>,[<span class="number">20</span>,<span class="number">1</span>],initializer=w_initializer,collections=c_names)</span><br><span class="line">					b2 = tf.get_variable(<span class="string">&#x27;b2&#x27;</span>,[<span class="number">1</span>],initializer=b_initializer,collections=c_names)</span><br><span class="line">					self.V = tf.matmul(l1,w2) + b2</span><br><span class="line"></span><br><span class="line">				<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;Advantage&#x27;</span>): <span class="comment">#专门分析每种动作的Advantage</span></span><br><span class="line">					w2 = tf.get_variable(<span class="string">&#x27;w2&#x27;</span>,[<span class="number">20</span>,self.a_dim],initializer=w_initializer,collections=c_names)</span><br><span class="line">					b2 = tf.get_variable(<span class="string">&#x27;b2&#x27;</span>,[self.a_dim],initializer=b_initializer,collections=c_names)</span><br><span class="line">					self.A = tf.matmul(l1,w2) + b2</span><br><span class="line"></span><br><span class="line">				<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;Q&#x27;</span>): <span class="comment"># 合并 V 和 A, 为了不让 A 直接学成了 Q, 我们减掉了 A 的均值</span></span><br><span class="line">					self.q_eval = self.V + (self.A - tf.reduce_mean(self.A,axis=<span class="number">1</span>,keep_dims=<span class="literal">True</span>))</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;Q&#x27;</span>): <span class="comment"># 普通的 DQN 第二层</span></span><br><span class="line">					w2 = tf.get_variable(<span class="string">&#x27;w2&#x27;</span>,[<span class="number">20</span>,self.a_dim],initializer=w_initializer,collections=c_names)</span><br><span class="line">					b2 = tf.get_variable(<span class="string">&#x27;b2&#x27;</span>,[self.a_dim],initializer=b_initializer,collections=c_names)</span><br><span class="line">					self.q_eval = tf.matmul(l1,w2) + b2</span><br><span class="line"></span><br><span class="line">		<span class="comment"># ************************ build target net *****************************</span></span><br><span class="line">		<span class="comment"># target net 网络和前面的evaluate net网络一样，除了输入由s变为s_，输出self.q_eval变为self.q_next外，没有任何区别</span></span><br></pre></td></tr></table></figure>
<p>在V网络中，因为其输出是一个标量值，因此维度这里为[20,1]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w2 = tf.get_variable(<span class="string">&#x27;w2&#x27;</span>,[<span class="number">20</span>,<span class="number">1</span>],initializer=w_initializer,collections=c_names)</span><br></pre></td></tr></table></figure>
<p>而A网络的输出，对应的每个a的值，因此维度为[20,self.a_dim]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w2 = tf.get_variable(<span class="string">&#x27;w2&#x27;</span>,[<span class="number">20</span>,self.a_dim],initializer=w_initializer,collections=c_names)</span><br></pre></td></tr></table></figure>
<p>最后，V和A网络合并，成为Q网络</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.q_eval = self.V + (self.A - tf.reduce_mean(self.A,axis=<span class="number">1</span>,keep_dims=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure>
<h3 id="3-3-主函数-run-Pendulum-py"><a href="#3-3-主函数-run-Pendulum-py" class="headerlink" title="3.3 主函数-run_Pendulum.py"></a>3.3 主函数-run_Pendulum.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">env = gym.make(<span class="string">&#x27;Pendulum-v0&#x27;</span>)</span><br><span class="line">env = env.unwrapped</span><br><span class="line">env.seed(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">MEMORY_SIZE = <span class="number">3000</span></span><br><span class="line">ACTION_SPACE = <span class="number">15</span> <span class="comment">#将在这里修改行为空间的离散值，可以为5、15、25、35等</span></span><br></pre></td></tr></table></figure>
<h2 id="四、结果显示"><a href="#四、结果显示" class="headerlink" title="四、结果显示"></a>四、结果显示</h2><p>5个actions</p>
<p><img src="/2019/08/10/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B-Dueling-DQN/3.png" alt></p>
<p>15个actions</p>
<p><img src="/2019/08/10/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B-Dueling-DQN/4.png" alt></p>
<p>25个actions</p>
<p><img src="/2019/08/10/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B-Dueling-DQN/5.png" alt></p>
<p>35个actions</p>
<p><img src="/2019/08/10/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B-Dueling-DQN/6.png" alt></p>
<p>累积奖励reward，在杆子立起来的时候奖励为0，其他时候都是负值，所以当累积奖励没有在降低时2，说明杆子已经被成功立很久了。</p>
<p>我们发现当可用动作越高，学习难度就越大，不过Dueling DQN还是回比Nature DQN学习得更快，收敛效果更好。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>至此，DQN即DQN的三个优化方面的代码已经全部简单测试完毕，并且也差不多了解了其代码，对原理将会更加理解，其中Prioritized Experience Replay的代码部分最为复杂，Double DQN只在最后计算Q值的部分改动了一点点，Dueling  DQN在网络结构部分改变了一点点。</p>
<p>后面，将会开始Policy Gradient的代码学习。</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5.3_Dueling_DQN">莫烦Dueling DQN代码部分</a></p>
</li>
<li><p><a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/4-7-dueling-DQN/">莫烦Dueling DQN讲解部分</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>代码</category>
        <category>深度强化学习</category>
      </categories>
      <tags>
        <tag>DRL</tag>
        <tag>OpenAI gym</tag>
        <tag>Dueling DQN</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建OpenAI gym环境并简单测试</title>
    <url>/2019/08/05/%E4%BB%A3%E7%A0%81/DRL/%E6%90%AD%E5%BB%BAOpenAI-gym%E7%8E%AF%E5%A2%83%E5%B9%B6%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>搭建OpenAI gym环境的目的是为了后面的一系列DRL的强化学习代码的实现，因为OpenAI gym提供了很多的环境，并且训练较快，不用耗很长时间才能看到效果，因此是一个不错的环境。</p>
<p>我已经在gazebo中基于ardrone实现了一个关于DQN算法的验证，由于机器性能及其他的原因，耗时很长。并且也在airsim中做了一个简单的DQN实验训练，训练结果很好。但是也正是由于目前只会DQN的算法，而其他的DRL算法不会，因此才搭建该环境用于编写DRL算法，以进一步加深自己的理解。</p>
</blockquote>
<h2 id="一、安装gym环境"><a href="#一、安装gym环境" class="headerlink" title="一、安装gym环境"></a>一、安装gym环境</h2><blockquote>
<p>我这里采用的是pip方式安装，当然也可以git源码进行安装</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo pip install gym</span><br></pre></td></tr></table></figure>
<h2 id="二、简单测试"><a href="#二、简单测试" class="headerlink" title="二、简单测试"></a>二、简单测试</h2><p><strong>coding:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line">env = gym.make(<span class="string">&#x27;CartPole-v0&#x27;</span>)	<span class="comment">#定义使用gym库中的哪一个环境</span></span><br><span class="line">env.reset()	<span class="comment">#重置环境的状态，返回观察</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">	env.render() <span class="comment">#重绘环境的一帧。默认模式一般比较友好，如弹出一个窗口</span></span><br><span class="line">	env.step(env.action_space.sample()) <span class="comment">#从行为集中，随机选取一个行为并执行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;action_space&#x27;</span>,env.action_space)	<span class="comment">#查看这个环境中可用的action有多少个</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;observation&#x27;</span>,env.observation_space)	<span class="comment">#查看这个环境中可用的observation有多少个</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;max&#x27;</span>,env.observation_space.high)	<span class="comment">#查看observation最高取值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;min&#x27;</span>,env.observation_space.low)	<span class="comment">#查看observation最低取值</span></span><br></pre></td></tr></table></figure>
<p><strong>输出：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27;action_space&#x27;</span>, Discrete(<span class="number">2</span>))</span><br><span class="line">(<span class="string">&#x27;observation&#x27;</span>, Box(<span class="number">4</span>,))</span><br><span class="line">(<span class="string">&#x27;max&#x27;</span>, array([<span class="number">4.8000002e+00</span>, <span class="number">3.4028235e+38</span>, <span class="number">4.1887903e-01</span>, <span class="number">3.4028235e+38</span>],</span><br><span class="line">      dtype=float32))</span><br><span class="line">(<span class="string">&#x27;min&#x27;</span>, array([-<span class="number">4.8000002e+00</span>, -<span class="number">3.4028235e+38</span>, -<span class="number">4.1887903e-01</span>, -<span class="number">3.4028235e+38</span>],</span><br><span class="line">      dtype=float32))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/2019/08/05/%E4%BB%A3%E7%A0%81/DRL/%E6%90%AD%E5%BB%BAOpenAI-gym%E7%8E%AF%E5%A2%83%E5%B9%B6%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95/1.png" alt></p>
<h2 id="三、带返回值的测试"><a href="#三、带返回值的测试" class="headerlink" title="三、带返回值的测试"></a>三、带返回值的测试</h2><p><strong>coding：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line">env = gym.make(<span class="string">&#x27;CartPole-v0&#x27;</span>)</span><br><span class="line">observation = env.reset()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">	env.render()</span><br><span class="line">	action = env.action_space.sample()</span><br><span class="line">	observation,reward,done,info = env.step(action)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;observation&#x27;</span>,observation)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;reward&#x27;</span>,reward)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;action&#x27;</span>,action)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;info&#x27;</span>,info)</span><br></pre></td></tr></table></figure>
<p><strong>最后部分输出：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27;observation&#x27;</span>, array([ -<span class="number">11.94872903</span>,   -<span class="number">0.1539066</span> , -<span class="number">130.92118709</span>,  -<span class="number">11.77476314</span>]))</span><br><span class="line">(<span class="string">&#x27;reward&#x27;</span>, <span class="number">0.0</span>)</span><br><span class="line">(<span class="string">&#x27;action&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">(<span class="string">&#x27;info&#x27;</span>, &#123;<span class="string">&#x27;TimeLimit.truncated&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">(<span class="string">&#x27;observation&#x27;</span>, array([ -<span class="number">11.95180716</span>,    <span class="number">0.13505849</span>, -<span class="number">131.15668235</span>,  -<span class="number">11.74811091</span>]))</span><br><span class="line">(<span class="string">&#x27;reward&#x27;</span>, <span class="number">0.0</span>)</span><br><span class="line">(<span class="string">&#x27;action&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">&#x27;info&#x27;</span>, &#123;<span class="string">&#x27;TimeLimit.truncated&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">(<span class="string">&#x27;observation&#x27;</span>, array([-<span class="number">1.19491060e+01</span>,  <span class="number">3.22343601e-02</span>, -<span class="number">1.31391645e+02</span>, -<span class="number">1.14306883e+01</span>]))</span><br><span class="line">(<span class="string">&#x27;reward&#x27;</span>, <span class="number">0.0</span>)</span><br><span class="line">(<span class="string">&#x27;action&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">(<span class="string">&#x27;info&#x27;</span>, &#123;<span class="string">&#x27;TimeLimit.truncated&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">(<span class="string">&#x27;observation&#x27;</span>, array([-<span class="number">1.19484613e+01</span>, -<span class="number">9.94364542e-02</span>, -<span class="number">1.31620258e+02</span>, -<span class="number">1.11078703e+01</span>]))</span><br><span class="line">(<span class="string">&#x27;reward&#x27;</span>, <span class="number">0.0</span>)</span><br><span class="line">(<span class="string">&#x27;action&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">(<span class="string">&#x27;info&#x27;</span>, &#123;<span class="string">&#x27;TimeLimit.truncated&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">(<span class="string">&#x27;observation&#x27;</span>, array([ -<span class="number">11.95045003</span>,   -<span class="number">0.25909084</span>, -<span class="number">131.84241574</span>,  -<span class="number">10.78671897</span>]))</span><br><span class="line">(<span class="string">&#x27;reward&#x27;</span>, <span class="number">0.0</span>)</span><br><span class="line">(<span class="string">&#x27;action&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">(<span class="string">&#x27;info&#x27;</span>, &#123;<span class="string">&#x27;TimeLimit.truncated&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">(<span class="string">&#x27;observation&#x27;</span>, array([ -<span class="number">11.95563185</span>,   -<span class="number">0.44371529</span>, -<span class="number">132.05815012</span>,  -<span class="number">10.48063232</span>]))</span><br><span class="line">(<span class="string">&#x27;reward&#x27;</span>, <span class="number">0.0</span>)</span><br><span class="line">(<span class="string">&#x27;action&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">(<span class="string">&#x27;info&#x27;</span>, &#123;<span class="string">&#x27;TimeLimit.truncated&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">(<span class="string">&#x27;observation&#x27;</span>, array([ -<span class="number">11.96450615</span>,   -<span class="number">0.64896802</span>, -<span class="number">132.26776277</span>,  -<span class="number">10.2072994</span> ]))</span><br><span class="line">(<span class="string">&#x27;reward&#x27;</span>, <span class="number">0.0</span>)</span><br><span class="line">(<span class="string">&#x27;action&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">(<span class="string">&#x27;info&#x27;</span>, &#123;<span class="string">&#x27;TimeLimit.truncated&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">(<span class="string">&#x27;observation&#x27;</span>, array([ -<span class="number">11.97748551</span>,   -<span class="number">0.48282207</span>, -<span class="number">132.47190876</span>,  -<span class="number">10.53652414</span>]))</span><br><span class="line">(<span class="string">&#x27;reward&#x27;</span>, <span class="number">0.0</span>)</span><br><span class="line">(<span class="string">&#x27;action&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">&#x27;info&#x27;</span>, &#123;<span class="string">&#x27;TimeLimit.truncated&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">(<span class="string">&#x27;observation&#x27;</span>, array([ -<span class="number">11.98714196</span>,   -<span class="number">0.72162235</span>, -<span class="number">132.68263924</span>,  -<span class="number">10.37392887</span>]))</span><br><span class="line">(<span class="string">&#x27;reward&#x27;</span>, <span class="number">0.0</span>)</span><br><span class="line">(<span class="string">&#x27;action&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">(<span class="string">&#x27;info&#x27;</span>, &#123;<span class="string">&#x27;TimeLimit.truncated&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">(<span class="string">&#x27;observation&#x27;</span>, array([ -<span class="number">12.0015744</span> ,   -<span class="number">0.5940356</span> , -<span class="number">132.89011782</span>,  -<span class="number">10.71312018</span>]))</span><br><span class="line">(<span class="string">&#x27;reward&#x27;</span>, <span class="number">0.0</span>)</span><br><span class="line">(<span class="string">&#x27;action&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">&#x27;info&#x27;</span>, &#123;<span class="string">&#x27;TimeLimit.truncated&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">(<span class="string">&#x27;observation&#x27;</span>, array([ -<span class="number">12.01345511</span>,   -<span class="number">0.86021586</span>, -<span class="number">133.10438022</span>,  -<span class="number">10.7166571</span> ]))</span><br><span class="line">(<span class="string">&#x27;reward&#x27;</span>, <span class="number">0.0</span>)</span><br><span class="line">(<span class="string">&#x27;action&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">(<span class="string">&#x27;info&#x27;</span>, &#123;<span class="string">&#x27;TimeLimit.truncated&#x27;</span>: <span class="literal">False</span>&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="四、保存训练视频"><a href="#四、保存训练视频" class="headerlink" title="四、保存训练视频"></a>四、保存训练视频</h2><p><strong>前提：</strong>需要安装一些依赖库，否则会报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y python-numpy python-dev cmake zlib1g-dev libjpeg-dev xvfb libav-tools xorg-dev python-opengl libboost-<span class="built_in">all</span>-dev libsdl2-dev swig</span><br></pre></td></tr></table></figure>
<p><strong>coding:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"></span><br><span class="line">env = gym.make(<span class="string">&#x27;CartPole-v0&#x27;</span>)</span><br><span class="line">env = gym.wrappers.Monitor(env,<span class="string">&quot;CartPole-experiment-1&quot;</span>,video_callable=<span class="keyword">lambda</span> episode_id: episode_id % <span class="number">5</span> == <span class="number">0</span>,force=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> episode <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">	observation = env.reset()</span><br><span class="line">	<span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">		env.render()</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;observation&#x27;</span>,observation)</span><br><span class="line">		action = env.action_space.sample()</span><br><span class="line">		observation,reward,done,info = env.step(action)</span><br><span class="line">		<span class="keyword">if</span> done:</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">env.close()</span><br></pre></td></tr></table></figure>
<p>运行完后，会在同级目录生成一个CatPole-experiment-1的文件夹，文件夹里的文件内容如下：</p>
<p><img src="/2019/08/05/%E4%BB%A3%E7%A0%81/DRL/%E6%90%AD%E5%BB%BAOpenAI-gym%E7%8E%AF%E5%A2%83%E5%B9%B6%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95/2.png" alt></p>
<p>打开其中的MP4时，提示无法打开，然后按照提示默认安装即可</p>
<p><img src="/2019/08/05/%E4%BB%A3%E7%A0%81/DRL/%E6%90%AD%E5%BB%BAOpenAI-gym%E7%8E%AF%E5%A2%83%E5%B9%B6%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95/3.png" alt></p>
<p><strong>注意：</strong></p>
<ul>
<li>video_callable=lambda episode_id: episode_id % 5 == 0：是每隔5秒保存一次，因此文件夹中有4个MP4视频，但是每个视频都很短暂，每个episode保存视频的话，参考<a href="https://github.com/openai/gym/issues/494">这里</a></li>
<li>force=True：是每次运行代码时，将之前生成的json文件和MP4文件直接覆盖掉</li>
</ul>
<p>目前对这些json文件什么的还不是太清楚，总之是能保存一些训练的视频的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>这部分主要是做一个OpenAI gym的环境安装及简单测试，并且测试的代码能够看到图形和实际运动的效果即可。后面将开始DRL的代码编写。</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p><a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/4-4-gym/">莫烦OpenAI gym环境库</a></p>
</li>
<li><p><a href="https://blog.csdn.net/LK274857347/article/details/83109420">OpenAI Gym基础教程</a></p>
</li>
<li><p><a href="https://pypi.org/project/gym/0.7.0/">gym官网</a></p>
</li>
<li><p><a href="https://github.com/openai/gym/blob/master/gym/envs/classic_control/cartpole.py">cartpole官方源码</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>代码</category>
        <category>深度强化学习</category>
      </categories>
      <tags>
        <tag>DRL</tag>
        <tag>OpenAI gym</tag>
      </tags>
  </entry>
  <entry>
    <title>请回答1988</title>
    <url>/2020/06/06/%E5%BD%B1%E8%AF%84/%E7%94%B5%E8%A7%86%E5%89%A7/%E8%AF%B7%E5%9B%9E%E7%AD%941988/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>一直都听说这是部很经典的电视剧，在毕业季的前夕，还是花了不少的时间看完了这部电视剧，看完，确实有不少感慨，也就还是记录一点什么吧…</p>
</blockquote>
<h1 id="影片背景"><a href="#影片背景" class="headerlink" title="影片背景"></a>影片背景</h1><p>​        整部影片讲述了1988年至1994年间，韩国双门洞一个胡同内的几个小家庭之间的故事，从这个故事中，能真切的感觉出他们之间的爱情、友情、亲情。但其不同家庭之间的那种良好氛围，还是给我一种乌托邦式的感觉，可能是当今社会基本不存在这种邻居情谊了吧。</p>
<p>还未写完，正在写。。。。。。</p>
]]></content>
      <categories>
        <category>影评</category>
        <category>电视剧</category>
      </categories>
      <tags>
        <tag>影评</tag>
      </tags>
  </entry>
  <entry>
    <title>家常小厨</title>
    <url>/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>好的厨艺都是慢慢从家常菜开始练起的……</p>
</blockquote>
<h2 id="菜品"><a href="#菜品" class="headerlink" title="菜品"></a>菜品</h2><blockquote>
<p>红烧鲫鱼、番茄炒蛋、手撕包菜、猪耳朵、蒜苗炒肉</p>
</blockquote>
<p><img src="/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/image-20210424105048001.png" alt="image-20210424105018072"></p>
<blockquote>
<p>清炒豇豆、花生米</p>
</blockquote>
<p><img src="/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/image-20210424105246194.png" alt="QQ图片20210424105249"></p>
<blockquote>
<p>清蒸鲈鱼</p>
</blockquote>
<p><img src="/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/QQ图片20210424105930.jpg" alt="QQ图片20210424105930"></p>
<blockquote>
<p>糍粑，还是喜欢家里的绿豆馅</p>
</blockquote>
<p><img src="/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/QQ图片20210424110114.jpg" alt="QQ图片20210424110114"></p>
<blockquote>
<p>可乐鸡腿</p>
</blockquote>
<p><img src="/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/QQ图片20210424110144.jpg" alt="QQ图片20210424110144"></p>
<blockquote>
<p>前腿骨（第一次吃自己熬得汤，贼香）</p>
</blockquote>
<p><img src="/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/QQ图片20210424110217.jpg" alt="QQ图片20210424110217"></p>
<blockquote>
<p>家常的土豆炒肉和鲫鱼，这个时候就发现一个好的器皿显得格外的重要了</p>
</blockquote>
<p><img src="/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/QQ图片20210424110325.jpg" alt="QQ图片20210424110325"></p>
<blockquote>
<p>红烧鱼块，第一次做成功的，还是很有纪念意义的</p>
</blockquote>
<p><img src="/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/QQ图片20210424114732.jpg" alt="QQ图片20210424114732"></p>
<blockquote>
<p>早期做的鲈鱼，色香味看着还是差了一丢丢</p>
</blockquote>
<p><img src="/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/QQ图片20210424114845.jpg" alt="QQ图片20210424114845"></p>
<blockquote>
<p>可乐鸡翅，当时收汁没有收好，历历在目呀</p>
</blockquote>
<p><img src="/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/QQ图片20210424114947.jpg" alt="QQ图片20210424114947"></p>
<blockquote>
<p>青椒炒肉</p>
</blockquote>
<p><img src="/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/QQ图片20210424115112.jpg" alt="QQ图片20210424115112"></p>
<blockquote>
<p>滑藕片，现在回看起来，还是感觉差了一些些</p>
</blockquote>
<p><img src="/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/QQ图片20210424115146-1619236670840.jpg" alt="QQ图片20210424115146"></p>
<blockquote>
<p>第一次做的家常豆腐，第一豆腐没买好，第二做的确实也差，下次得把我张大厨的照片附上……</p>
</blockquote>
<p><img src="/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/QQ图片20210424115153.jpg" alt="QQ图片20210424115153"></p>
<blockquote>
<p>这就是我刚做饭的时候，经常做的千张炒肉、酸辣土豆丝，果然，厨艺还是得多做才行……</p>
</blockquote>
<p><img src="/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/QQ图片20210424115204.jpg" alt="QQ图片20210424115204"></p>
<blockquote>
<p>火锅配酒、天长地久</p>
</blockquote>
<p><img src="/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/QQ图片20210424110413.jpg" alt="QQ图片20210424110413"></p>
<blockquote>
<p>就是这一次熬得汤，最为nice，可惜的是当时还有两个骨头吃不下了，后来放了两天，没时间吃扔掉了。</p>
</blockquote>
<p><img src="/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/QQ图片20210424120017.jpg" alt="QQ图片20210424120017"></p>
<blockquote>
<p>这就是我孙大厨做的酸菜鱼，我也要能做出他这样才行。加油！！！</p>
</blockquote>
<p><img src="/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/QQ图片20210424120039.jpg" alt="QQ图片20210424120039"><img src="/2021/04/24/%E7%94%9F%E6%B4%BB/%E5%8E%A8%E8%89%BA/%E5%AE%B6%E5%B8%B8%E5%B0%8F%E5%8E%A8/QQ图片20210424105346.jpg" alt="QQ图片20210424105346"></p>
]]></content>
      <tags>
        <tag>生活</tag>
        <tag>厨艺</tag>
      </tags>
  </entry>
  <entry>
    <title>19年上半年校医院体检</title>
    <url>/2019/05/29/%E7%94%9F%E6%B4%BB/%E7%94%9F%E7%90%86/19%E5%B9%B4%E4%B8%8A%E5%8D%8A%E5%B9%B4%E6%A0%A1%E5%8C%BB%E9%99%A2%E4%BD%93%E6%A3%80/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>由于马上需要去公司实习，可能需要上交体检表，在学校校医院做了一个简单的体检，其中基本的体检费40元，除此之外，我还做了一些其他方面的体检</p>
</blockquote>
<p>整个体检项目如下图：总计146元</p>
<p><img src="/2019/05/29/%E7%94%9F%E6%B4%BB/%E7%94%9F%E7%90%86/19%E5%B9%B4%E4%B8%8A%E5%8D%8A%E5%B9%B4%E6%A0%A1%E5%8C%BB%E9%99%A2%E4%BD%93%E6%A3%80/tijian.jpg" alt></p>
<blockquote>
<p> 抽血</p>
</blockquote>
<p>​    抽血检测方面，应该就会检测乙肝两对半、肾功能全套和血常规三项</p>
<blockquote>
<p>心电图</p>
</blockquote>
<p>在做心电图的过程中，主要就是医生用几个类似于夹子一样的东西给身体夹着，其中包括左右手掌下面一点位置夹两个，一个是右腿靠近脚的地方夹一个；另外在身体正面，用6个左右类似于吸盘的东西吸在上。</p>
<p>整个过程就是这么多，没有任何疼痛感</p>
<p>心电图方面有些小问题，医生建议说少熬夜。在做心电图的过程中，问了一下我平常运动情况和熬夜情况，最近确实熬夜比较多，运动也几乎没有，以后还是要注意，毕竟身体是革命的本钱。</p>
<blockquote>
<p>其他体检</p>
</blockquote>
<p>除了上面两个比较重要的外，其他的就例如内科（呼吸、心跳什么的）、外科（眼耳鼻喉外观观测一下）、放射性透视（胸透），最后就是一些其他的身高体重、视力、色盲情况如何了，不太重要</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>目前尿酸530较高，心电图也有点问题，下次体检需要特别注意这两块</p>
</blockquote>
]]></content>
      <categories>
        <category>生活</category>
        <category>生理</category>
      </categories>
      <tags>
        <tag>生理</tag>
      </tags>
  </entry>
  <entry>
    <title>Youtube视频链接下载方法</title>
    <url>/2019/05/21/%E7%94%9F%E6%B4%BB/%E8%A7%86%E9%A2%91/Youtube%E8%A7%86%E9%A2%91%E9%93%BE%E6%8E%A5%E4%B8%8B%E8%BD%BD%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="在线下载Youtube视频链接网址："><a href="#在线下载Youtube视频链接网址：" class="headerlink" title="在线下载Youtube视频链接网址："></a>在线下载Youtube视频链接网址：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.vidpaw.com/cn</span><br></pre></td></tr></table></figure>
<p><img src="/2019/05/21/%E7%94%9F%E6%B4%BB/%E8%A7%86%E9%A2%91/Youtube%E8%A7%86%E9%A2%91%E9%93%BE%E6%8E%A5%E4%B8%8B%E8%BD%BD%E6%96%B9%E6%B3%95/youtube.png" alt></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>视频</category>
      </categories>
      <tags>
        <tag>视频</tag>
      </tags>
  </entry>
  <entry>
    <title>DRL论文阅读（一）之DQN方法</title>
    <url>/2019/07/17/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BDQN%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>以往的Q-learning算法只适合解决小问题，如果问题太大，则无法分别学习到所有状态下的所有动作值，因此提出了DQN。DQN的本质上仍然是Q-learning，只是利用了神经网络表示动作值函数，并利用了经验回放和单独设立目标网络这两个技巧，但是DQN本身是无法克服Q-learning本身锁固有的缺点-过估计。过估计是指估计的值函数比真实值函数要大。之所以存在过估计的问题，根源在于Q-learning中的最大化操作</p>
</blockquote>
<h2 id="一、论文题目"><a href="#一、论文题目" class="headerlink" title="一、论文题目"></a>一、论文题目</h2><blockquote>
<p><strong>Autonomous Quadrotor Landing using Deep Reinforcement Learning</strong> </p>
</blockquote>
<h2 id="二、研究目标"><a href="#二、研究目标" class="headerlink" title="二、研究目标"></a>二、研究目标</h2><blockquote>
<p>在仿真中使用DRL方法实现无人机在标记logo上的自主降落</p>
</blockquote>
<p><img src="/2019/07/17/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BDQN%E6%96%B9%E6%B3%95/1.png" alt></p>
<h2 id="三、问题定义"><a href="#三、问题定义" class="headerlink" title="三、问题定义"></a>三、问题定义</h2><blockquote>
<p>地标着陆问题：使无人机精准降落在地标上</p>
</blockquote>
<ul>
<li><strong>标记检测</strong>：无人机固定高度，只在xy方向上移动，最终到达标记点正上方</li>
<li><strong>垂直下降</strong>：在标记点正上方，慢慢下降，减少无人机与地标的距离</li>
<li><strong>降落</strong>：降落在标记点上</li>
</ul>
<p><img src="/2019/07/17/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BDQN%E6%96%B9%E6%B3%95/2.png" alt></p>
<h2 id="四、研究方法介绍"><a href="#四、研究方法介绍" class="headerlink" title="四、研究方法介绍"></a>四、研究方法介绍</h2><blockquote>
<p>DRL：DQN方法</p>
</blockquote>
<h3 id="4-1-马尔科夫决策过程"><a href="#4-1-马尔科夫决策过程" class="headerlink" title="4.1 马尔科夫决策过程"></a>4.1 马尔科夫决策过程</h3><blockquote>
<p><strong>目标：</strong>训练一个无人机agent，它从环境中得到状态和奖励，然后选取一个行为，作用于环境</p>
</blockquote>
<p><strong>MDP定义：</strong></p>
<ul>
<li><strong>状态集：</strong>一般为xy坐标或者图片的集合（<font color="red">本文中为图片集合</font>）</li>
<li><strong>行为集：</strong>agent可能采取的动作的集合（<font color="red">本文中一般为前后左右</font>）</li>
<li><strong>转换函数：</strong>状态s在行为a下转移到s’的概率（<font color="red">本文中为mode free</font>）</li>
<li><strong>奖励函数：</strong>不同的任务一般奖励不同（<font color="red">本文正面奖励：+1，负面奖励：-1，生活成本：-0.01</font>）</li>
<li><strong>起始状态：</strong>每次训练之前的agent位置（<font color="red">本文中为固定区域内的随机方向和随机位置</font>）</li>
<li><strong>结束状态：</strong>训练完成后的agent位置（<font color="red">本文中为降落到标记点上</font>）<ul>
<li>​    <strong>结束条件：</strong>当前episode达到最大步数或者强制截止（超出边界）</li>
</ul>
</li>
</ul>
<p><img src="/2019/07/17/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BDQN%E6%96%B9%E6%B3%95/3.png" alt></p>
<h3 id="4-2-CNN网络"><a href="#4-2-CNN网络" class="headerlink" title="4.2 CNN网络"></a>4.2 CNN网络</h3><blockquote>
<p>对于相对较大较复杂的环境，一般Q表无法存储，此时，使用CNN进行函数值逼近</p>
</blockquote>
<ul>
<li><strong>输入：</strong>灰度图像（4张）</li>
<li><strong>输出：</strong>行为集</li>
</ul>
<p><img src="/2019/07/17/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BDQN%E6%96%B9%E6%B3%95/4.png" alt></p>
<h3 id="4-3-DQN（标记检测）"><a href="#4-3-DQN（标记检测）" class="headerlink" title="4.3 DQN（标记检测）"></a>4.3 DQN（标记检测）</h3><blockquote>
<p>主要包含：经验池、CNN Network、CNN Target Netword</p>
<p>其中target网络和cnn网络局哟相同的网络结构</p>
</blockquote>
<h4 id="4-3-1-DQN之经验回放"><a href="#4-3-1-DQN之经验回放" class="headerlink" title="4.3.1 DQN之经验回放"></a>4.3.1 DQN之经验回放</h4><blockquote>
<p>训练DQN网络之前，先要进行随机行为选取，然后将agent执行随机行为产生的数据存储到经验池中，经验池中的数据为（s,a,s’,r,done）：当前状态、当前状态采取的动作，执行完动作后的下一个状态，执行完动作后的奖励、执行完动作后当前episode是否结束</p>
</blockquote>
<p>在训练的过程中，需要将经验池中的（s,a）作为输入，输入到CNN网络中，每次选取经验池中的一批数据进行输入，然后CNN网络训练参数，最终agent从环境中获取s，输入到训练好的CNN网络中，CNN返回最大概率的行为给agent，agent执行该动作，作用于环境</p>
<p><img src="/2019/07/17/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BDQN%E6%96%B9%E6%B3%95/5.png" alt></p>
<h4 id="4-3-2-DQN调参"><a href="#4-3-2-DQN调参" class="headerlink" title="4.3.2 DQN调参"></a>4.3.2 DQN调参</h4><blockquote>
<p>在DQN的两个网络中，target网络和cnn网络具有相同的网络结构，并且初始网络参数相同</p>
</blockquote>
<p>训练过程中，cnn网络的参数一直在更新，当执行到一定的步数之后，将cnn网络的参数赋给target网络参数，保持两个网络参数相同，然后在进行cnn网络参数更新，以此往复</p>
<p><img src="/2019/07/17/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BDQN%E6%96%B9%E6%B3%95/6.png" alt></p>
<h4 id="4-3-3-DQN网络测试"><a href="#4-3-3-DQN网络测试" class="headerlink" title="4.3.3 DQN网络测试"></a>4.3.3 DQN网络测试</h4><blockquote>
<p>训练好DQN网络之后，agent首先感知环境，从环境中获取状态s，并把状态s作为输入，输入到DQN网络，DQN网络返回动作a给agent，agent执行该动作a作用于环境，环境发生变化，agent会获得新的状态s，以此往复，就能利用DQN网络进行测试了</p>
</blockquote>
<p><img src="/2019/07/17/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BDQN%E6%96%B9%E6%B3%95/7.png" alt></p>
<h3 id="4-4-Double-DQN-优先级经验回放：垂直下降"><a href="#4-4-Double-DQN-优先级经验回放：垂直下降" class="headerlink" title="4.4 Double DQN + 优先级经验回放：垂直下降"></a>4.4 Double DQN + 优先级经验回放：垂直下降</h3><blockquote>
<p>在垂直下降部分，使用的Double DQN方法和优先级经验回放</p>
</blockquote>
<h3 id="4-5-DQN-与Double-DQN比较"><a href="#4-5-DQN-与Double-DQN比较" class="headerlink" title="4.5 DQN 与Double DQN比较"></a>4.5 DQN 与Double DQN比较</h3><blockquote>
<p>只是目标Q网络稍有不同，其他一样</p>
</blockquote>
<p><img src="/2019/07/17/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BDQN%E6%96%B9%E6%B3%95/8.png" alt></p>
<h2 id="五、实验环境"><a href="#五、实验环境" class="headerlink" title="五、实验环境"></a>五、实验环境</h2><ul>
<li><strong>仿真平台：</strong>Gazebo7</li>
<li><strong>ROS版本：</strong>ros kinetic</li>
<li><strong>无人机：</strong>Parrot AR Drone2</li>
<li><strong>纹理：</strong>自定义的一些纹理图</li>
<li><strong>训练硬件</strong>（训练5.2天完成）：<ul>
<li>处理器：i7  8核</li>
<li>RAM：32G</li>
<li>显卡：NVIDIA Quadro K2200</li>
</ul>
</li>
</ul>
<h2 id="六、实验结果"><a href="#六、实验结果" class="headerlink" title="六、实验结果"></a>六、实验结果</h2><h3 id="6-1-标记检测"><a href="#6-1-标记检测" class="headerlink" title="6.1 标记检测"></a>6.1 标记检测</h3><blockquote>
<p>标记检测部分，训练的agent能超过人类水平</p>
</blockquote>
<p><img src="/2019/07/17/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BDQN%E6%96%B9%E6%B3%95/9.png" alt></p>
<h3 id="6-2-垂直下降"><a href="#6-2-垂直下降" class="headerlink" title="6.2 垂直下降"></a>6.2 垂直下降</h3><blockquote>
<p>垂直下降部分，训练的agent能接近人类水平</p>
</blockquote>
<p><img src="/2019/07/17/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BDQN%E6%96%B9%E6%B3%95/10.png" alt></p>
<h2 id="七、未来展望"><a href="#七、未来展望" class="headerlink" title="七、未来展望"></a>七、未来展望</h2><blockquote>
<p>未来的工作将会关注仿真和现实中的一些差距方面</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>DQN方法的创新点（相比于Q-learning）</p>
</blockquote>
<ul>
<li><p><strong>加入神经网络</strong>：DQN利用深度卷积神经网络逼近值函数</p>
<p>DQN的行为值函数用神经网络逼近，属于非线性逼近。</p>
</li>
<li><p><strong>加入经验回放</strong>：DQN利用经验回放训练强化学习过程</p>
<p>在训练神经网络时，存在的假设是训练数据是独立同分布的，但是通过强化学习采集的数据之间存在关联性，利用这些数据进行顺序训练，神经网络不稳定。经验回放可以打破数据间的关联。</p>
<p>在强化学习训练过程中，智能体将数据存储到一个经验回放池中，在利用均匀随机采样的方法从经验池中抽取数据，然后利用抽取的数据训练神经网络，这样就打破了数据之间的关联性</p>
</li>
<li><p><strong>加入目标网络：</strong>DQN利用目标网络降低当前Q值和目标Q值间的关联性</p>
<p>在利用神经网络逼近值函数时，计算TD目标的动作值函数所用的网络参数</p>
<script type="math/tex; mode=display">
\Theta</script><p>与梯度计算中要逼近的值函数所用的网络参数相同，这样就存在关联性（数据样本和网络训练之间的相关性）</p>
<p>为了解决该问题，加入了目标网络，计算值函数逼近的网络表示为</p>
<script type="math/tex; mode=display">
\Theta</script><p>用于动作值函数逼近的网络表示为</p>
<script type="math/tex; mode=display">
\Theta'</script><p>而该动作值函数网络在固定的步数更新一次                </p>
</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>DQN与Double DQN讨论：<a href="http://www.broadview.com.cn/article/419382">DQN方法创新</a>                </li>
</ul>
<p>  ​<br>  ​                </p>
]]></content>
      <categories>
        <category>论文</category>
        <category>深度强化学习</category>
      </categories>
      <tags>
        <tag>DRL</tag>
        <tag>DQN</tag>
      </tags>
  </entry>
  <entry>
    <title>DRL论文阅读（七）之DPG方法</title>
    <url>/2019/07/31/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8BDPG%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>为什么需要引入确定性策略梯度？</p>
<p>传统的策略梯度算法以概率形式$\pi<em>\theta(a|s) = P[a|s;\theta]$来表示一个策略，以此来随机的选择行为。但DPG用一种确定性的策略形式$a=\mu</em>\theta(s)$。</p>
<p>DPG有着比PG更简单的形式：DPG的策略函数的更新就是action-value的期望，这种简单的形式使得DPG比PG更有效，同时在高维度行为空间也比PG表现更好</p>
</blockquote>
<h2 id="一、论文题目"><a href="#一、论文题目" class="headerlink" title="一、论文题目"></a>一、论文题目</h2><blockquote>
<p><strong>Deterministic Policy Gradient Algorithms</strong> </p>
</blockquote>
<h2 id="二、研究目标"><a href="#二、研究目标" class="headerlink" title="二、研究目标"></a>二、研究目标</h2><blockquote>
<p>研究一种更有效的估计策略梯度以及能在高维度行为空间表现更好的算法</p>
</blockquote>
<h2 id="三、问题定义"><a href="#三、问题定义" class="headerlink" title="三、问题定义"></a>三、问题定义</h2><blockquote>
<p>对以往的随机策略而言，对于某一些动作集合来说，它可能是连续值，或者非常高维的离散值，这样动作的空间维度很大。如果使用使用随机策略，即像DQN一样研究它所有的可能动作的概率，并计算出各个可能的动作的价值的话，那需要的样本量是非常大才行的。于是有人就想出确定性策略来简化这个问题。</p>
</blockquote>
<ul>
<li><strong>随机策略：</strong>在相同的策略下，在同一个状态处，采用的动作是基于一个概率分布$\pi_\theta(a|s) = P[a|s;\theta]$的，即是不确定的。</li>
<li><strong>确定性策略：</strong>在同一个状态处，虽然采用的动作概率不同，但是最大概率只有一个，如果我们只取最大概率的动作，去掉这个概率分布，那么则会简化很多，即作为确定性策略。<strong>相同的策略，在同一个状态处，动作是唯一确定的，即$\pi_\theta(s) = a$。</strong></li>
</ul>
<h2 id="四、DPG方法介绍"><a href="#四、DPG方法介绍" class="headerlink" title="四、DPG方法介绍"></a>四、DPG方法介绍</h2><h3 id="4-1-知识回顾"><a href="#4-1-知识回顾" class="headerlink" title="4.1 知识回顾"></a>4.1 知识回顾</h3><h4 id="4-1-1-随机策略梯度（Stochastic-Policy-Gradient）"><a href="#4-1-1-随机策略梯度（Stochastic-Policy-Gradient）" class="headerlink" title="4.1.1 随机策略梯度（Stochastic Policy Gradient）"></a>4.1.1 随机策略梯度（Stochastic Policy Gradient）</h4><blockquote>
<p>策略梯度的根本目的就是使累计奖励最大，即最大化期望reward：</p>
</blockquote>
<script type="math/tex; mode=display">
\begin{split} J(\pi_\theta) &= \int_S \rho^\pi(s)\int_A\pi_\theta(s,a)r(s,a)dads \\&= E_{s\sim\rho^\pi,a\sim\pi_\theta}[r(s,a)]\end{split}\tag{1}</script><p>策略梯度的基本思想就是沿着$\nabla<em>\theta J(\pi</em>\theta)$方向调整参数：</p>
<script type="math/tex; mode=display">
\begin{split} \nabla_\theta J(\pi_\theta) &= \int_S \rho^\pi(s)\int_A\nabla_\theta\pi_\theta(a|s)Q^\pi(s,a)dads \\ &=E_{s\sim\rho^\pi,a\sim\pi_\theta}[\nabla_\theta log\pi_\theta(a|s)Q^\pi(s,a)] \end{split}\tag{2}</script><p><strong>推导过程：</strong></p>
<p><img src="/2019/07/31/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8BDPG%E6%96%B9%E6%B3%95/1.png" alt></p>
<p>综上，尽管状态分布$\rho^\pi(s)$依赖于策略的参数，但策略梯度并不依赖于状态分布的梯度</p>
<h4 id="4-1-2-随机Actor-Critic算法（Stochastic-Actor-Critic-Algorithms）"><a href="#4-1-2-随机Actor-Critic算法（Stochastic-Actor-Critic-Algorithms）" class="headerlink" title="4.1.2 随机Actor-Critic算法（Stochastic Actor-Critic Algorithms）"></a>4.1.2 随机Actor-Critic算法（Stochastic Actor-Critic Algorithms）</h4><blockquote>
<p>基于策略梯度理论的actor-critic算法是一个被广泛使用的框架，该框架主要由两部分组成：</p>
<ul>
<li>actor通过随机梯度上升更新随机策略$\pi_\theta(s)$的参数$\theta$</li>
<li>critic来估计行为价值函数$Q^w(s,a) \approx Q^\pi(s,a)$，例如时间差分（TD）算法</li>
</ul>
<p>注：我们不知道公式中的真实action-value对应关系的函数$Q^\pi(s,a)$，但是我们使用参数$w$创建近似的价值函数$Q^w(s,a) $，通过合适的策略计算算法，使得$Q^w(s,a) \approx Q^\pi(s,a)$</p>
</blockquote>
<p>但是，通常来说，用$Q^w(s,a) $来逼近$ Q^\pi(s,a)$，会引入偏差，为了消除偏差，近似函数应满足：</p>
<ol>
<li>$Q<em>w(s,a) = \nabla</em>\theta log \pi_\theta(a|s)^Tw$（对于随机策略的函数逼近为线性）</li>
<li>$\varepsilon^2(w) = E<em>{s\sim\rho^\pi,a\sim\pi</em>\theta} [(Q^{w}(s,a) - Q^\pi(s,a))^2]$（参数$w$，应该最小化均方差）</li>
</ol>
<p>则我的策略梯度为：</p>
<script type="math/tex; mode=display">
\nabla_\theta J(\pi_\theta)=E_{s\sim\rho^\pi,a\sim\pi_\theta}[\nabla_\theta log\pi_\theta(a|s)Q^w(s,a)</script><p>在实践中，一般放宽条件2，更有利于算法通过时间差分学习到更有效的评估函数。如果条件1、2全部满足的话，整个算法相当于不适用critic。</p>
<h3 id="4-2-离线策略（异策略）Actor-Critic（Off-Policy-Actor-Critic）"><a href="#4-2-离线策略（异策略）Actor-Critic（Off-Policy-Actor-Critic）" class="headerlink" title="4.2 离线策略（异策略）Actor-Critic（Off-Policy Actor-Critic）"></a>4.2 离线策略（异策略）Actor-Critic（Off-Policy Actor-Critic）</h3><blockquote>
<p>Off-policy的意思就是我们训练用的数据使用的策略和当前要更新的策略不是一个策略，设数据使用的策略为$\beta$，而当前要训练的策略是$\pi$，这里用到了importance sampling。</p>
</blockquote>
<p>即不同于行为策略$\pi$的off-policy（异） 策略$\beta$来选择状态、行为轨迹（trajectories）</p>
<p>目标函数通常修改为目标策略的价值函数：</p>
<script type="math/tex; mode=display">
\begin{split} J_\beta(\pi_\theta) &= \int_S \rho^\beta(s) V^\pi(s)ds \\ &=\int_S\int_A\rho^\beta(s)\pi_\theta(a|s)Q^\pi(s,a)dads \end{split}</script><p>Off-policy的 策略梯度为:</p>
<script type="math/tex; mode=display">
\begin{split} \nabla_\theta J_\beta(\pi_\theta) &\approx \int_S\int_A\rho^\beta(s)\nabla_\theta\pi_\theta(a|s)Q^\pi(s,a)dads  \\ &= E_{s\sim\rho^\pi,a\sim\pi_\theta}[ \frac{\pi_\theta(a|s)}{\beta_\theta(a|s)}\nabla_\theta log\pi_\theta(a|s)Q^\pi(s,a)] \end{split}\tag{4\5}</script><p>离线（Off-policy）actor-critic算法（OffPAC）使用行为策略（behaviour policy）$\beta(a|s)$来生成轨迹，critic会用状态价值函数$V^v(s)\approx V^\pi(s)$来进行估计，actor用来更新策略的参数$\theta$，actor和critic都是通过离线的轨迹数据来进行训练，和上面公式不同的是，我们在这里用TD-error $\delta<em>t = r</em>{t+1} + \gamma V^v(s<em>{t+1}) - V^v(s_t)$代替上式中的$Q^\pi(s,a)$，这样可以提供真实梯度的近似值。在更新actor和critic时，都需要用重要性采样比率$\frac{\pi</em>\theta(a|s)}{\beta_\theta(a|s)}$来进行重要性采样，这一比率来判断action到底是根据策略$\pi$还是$\beta $。</p>
<h3 id="4-3-确定性策略梯度（Gradients-of-Deterministic-Policies）"><a href="#4-3-确定性策略梯度（Gradients-of-Deterministic-Policies）" class="headerlink" title="4.3 确定性策略梯度（Gradients of Deterministic Policies）"></a>4.3 确定性策略梯度（Gradients of Deterministic Policies）</h3><blockquote>
<p>现在考虑如何将策略梯度扩展到确定性策略，即$a=\mu_\theta (s)$。类似于前面提到的随机策略梯度，确定性策略梯度实际上是随机策略梯度的一个特例</p>
</blockquote>
<h4 id="4-3-1-动作-值函数梯度（Action-Value-Gradients）"><a href="#4-3-1-动作-值函数梯度（Action-Value-Gradients）" class="headerlink" title="4.3.1 动作-值函数梯度（Action-Value Gradients）"></a>4.3.1 动作-值函数梯度（Action-Value Gradients）</h4><blockquote>
<p>绝大多数的model free强化学习算法都是基于一般的策略迭代，即策略评估（policy evaluation）和策略改善（policy improvement）交替进行。策略评估就是估计动作-值函数$Q^\pi(s,a)$或$Q^\mu(s,a)$，比如用MC（蒙特卡洛）或TD来进行估计，然后在进行策略改善，策略改善最常用的方法是用贪心法：$\mu^{k+1}(s) = argmax_a Q^{\mu^k}(s,a)$</p>
</blockquote>
<p>但是在连续行为空间中，策略改善环节的贪心法就不可行，因为贪心法需要在每一步都最大化，因此就出现了问题。一个简单的替代方案就是将策略往$Q$的梯度方向移动，而不是全局最大化$Q$。具体来说，对于每一个探索果的状态$s$，策略网络的参数$\theta^{k+1}$以$\nabla<em>\theta Q^{\mu^k}(s,\mu</em>\theta(s))$的一定比例来更新。每个不同的状态，都提供了一个更新的方向，所有方向的均值，可以看做$\rho^\mu(s)$。</p>
<script type="math/tex; mode=display">
\theta^{k+1} = \theta^k + \alpha E_{s\sim\rho^{\mu^k}}[\nabla_\theta Q^{\mu^k}(s,\mu_\theta(s))]</script><p>策略改善可以分解为动作-值函数的梯度和评估策略的梯度更新，根据导数的链式法则：</p>
<script type="math/tex; mode=display">
\theta^{k+1} = \theta^k + \alpha E_{s\sim\rho^{\mu^k}}[\nabla_\theta \mu_\theta(s) \nabla_a Q^{\mu^k}(s,a)|_{a=\mu_\theta(s)}]</script><p>按照惯例，$\nabla<em>\theta \mu</em>\theta(s)$是一个雅克比矩阵，也就是说，每一列都是梯度$\nabla<em>\theta[\mu</em>\theta(s)]|_d$（d是动作空间的维度）。通过改变策略，不同的状态都会被探索，并且状态分布$\rho^\mu(s)$也会改变。</p>
<h3 id="4-4-确定性策略梯度定理（Deterministic-Policy-Gradient-Theorem）"><a href="#4-4-确定性策略梯度定理（Deterministic-Policy-Gradient-Theorem）" class="headerlink" title="4.4 确定性策略梯度定理（Deterministic Policy Gradient Theorem）"></a>4.4 确定性策略梯度定理（Deterministic Policy Gradient Theorem）</h3><blockquote>
<p>现在考虑带有参数向量$\theta \epsilon R^n$的确定性策略$\mu_\theta:S \rightarrow A$</p>
</blockquote>
<p>定义：</p>
<ul>
<li>目标函数:$J(\mu_\theta) = E[r_1^\gamma|\mu]$</li>
<li>概率分布：$p(s \rightarrow s’,t,\mu)$</li>
<li>折扣状态分布：$\rho^\mu(s)$</li>
</ul>
<p>类比于随机策略，因为此时是确定性策略，所以不需要在对行为$a$做积分求期望，则累计奖励期望为：</p>
<script type="math/tex; mode=display">
\begin{split} J(\mu_\theta) &= \int_S \rho^\mu(s)r(s,\mu_\theta(s)) ds \\ &=E_{s\sim\rho^\mu}[r(s,\mu_\theta(s))] \end{split}</script><p>如果MDP过程满足$p(s’|s,a)$，$\nabla<em>ap(s’|s,a)$，$\mu</em>\theta(s)$，$\nabla<em>\theta \mu</em>\theta(s)$，$r(s,a)$，$\nabla<em>a r(s,a)$，$p_1(s)$在参数$s,a,s’,x$下都是连续的，那么意味着$\nabla</em>\theta \mu_\theta(s)$和$\nabla_a Q^\mu(s,a)$存在且确定性策略梯度存在。那么与随机策略梯度相同，我们使用$Q$值来代替即时奖励，则对于$J$的梯度，即DPG为：</p>
<script type="math/tex; mode=display">
\begin{split} \nabla_\theta J(\mu_\theta) &= \int_S \rho^\mu(s)\nabla_\theta \mu_\theta(s) \nabla_aQ^\mu(s,a)|_{a= \mu_\theta(s)}ds \\ &= E_{s\sim\rho^\mu}[\nabla_\theta \mu_\theta(s)  \nabla_aQ^\mu(s,a)|_{a= \mu_\theta(s)}]  \\ &= E_{s\sim\rho^\mu}[\nabla_\theta Q^\mu(s, \mu_\theta(s))] 
\end{split} \tag{9}</script><p>可以发现，与随机策略梯度相比，DPG少了对行为的积分，多了对动作-值函数的梯度，这也使得DPG需要更少的采样却能达到比随机策略梯度更好的效果。</p>
<p><strong>证明过程</strong>：（我没怎么看懂）</p>
<p><img src="/2019/07/31/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8BDPG%E6%96%B9%E6%B3%95/2.png" alt></p>
<p><img src="/2019/07/31/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8BDPG%E6%96%B9%E6%B3%95/3.png" alt></p>
<p><img src="/2019/07/31/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8BDPG%E6%96%B9%E6%B3%95/4.png" alt></p>
<p><img src="/2019/07/31/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8BDPG%E6%96%B9%E6%B3%95/5.png" alt></p>
<h4 id="4-4-1-确定性策略是随机策略梯度的极限形式"><a href="#4-4-1-确定性策略是随机策略梯度的极限形式" class="headerlink" title="4.4.1 确定性策略是随机策略梯度的极限形式"></a>4.4.1 确定性策略是随机策略梯度的极限形式</h4><blockquote>
<p>DPG公式乍看并不像随机策略梯度公式，但实际上DPG是岁及策略梯度的一种特例情况。假设定义随机策略的参数为$\pi<em>{\mu</em>\theta,\delta}$，其中$\delta$是方差参数，也就是说，如果$\delta = 0$，则随机策略等于确定性策略$\pi<em>{\mu</em>\theta } \equiv \mu_\theta$，所以可以得出策略梯度的极限形式： </p>
</blockquote>
<script type="math/tex; mode=display">
\lim_{\delta \rightarrow 0} \nabla_\theta J(\pi_{\mu_\theta,\delta}) = \nabla_\theta J(\mu_\theta) \tag{10}</script><h3 id="4-5-确定性Actor-Critic算法"><a href="#4-5-确定性Actor-Critic算法" class="headerlink" title="4.5 确定性Actor-Critic算法"></a>4.5 确定性Actor-Critic算法</h3><blockquote>
<p>与随机Actor-Critic算法类似，用一个可导的动作-值函数$Q^w(s,a)$来估计$Q^\mu (s,a) $</p>
</blockquote>
<h4 id="4-5-1-On-Policy-确定性AC"><a href="#4-5-1-On-Policy-确定性AC" class="headerlink" title="4.5.1 On-Policy 确定性AC"></a>4.5.1 On-Policy 确定性AC</h4><blockquote>
<p>对于同策略（On-Policy）AC，critic使用Sarsa来估计动作-值函数，算法为：</p>
</blockquote>
<p><img src="/2019/07/31/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8BDPG%E6%96%B9%E6%B3%95/6.png" alt></p>
<p>其中，同策略的确定性策略梯度为：</p>
<p><img src="/2019/07/31/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8BDPG%E6%96%B9%E6%B3%95/10.png" alt></p>
<h4 id="4-5-2-Off-Policy-确定性AC"><a href="#4-5-2-Off-Policy-确定性AC" class="headerlink" title="4.5.2 Off-Policy 确定性AC"></a>4.5.2 Off-Policy 确定性AC</h4><blockquote>
<p>对于异策略来说，在生成样本轨迹时所用的策略可以使任意的随机行为策略$\beta(s,a)$，目标函数$J$为：</p>
</blockquote>
<p><img src="/2019/07/31/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8BDPG%E6%96%B9%E6%B3%95/7.png" alt></p>
<p>梯度为：</p>
<p><img src="/2019/07/31/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8BDPG%E6%96%B9%E6%B3%95/8.png" alt></p>
<p>critic采用Q-learing的学习策略来估计动作-值函数：</p>
<p><img src="/2019/07/31/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8BDPG%E6%96%B9%E6%B3%95/9.png" alt></p>
<p>可以看出同策略和异策略的不同之处在于对$a<em>t$的生成，同策略用的是确定性策略，异策略则用的是一个任意的随机策略。不同的是同策略是选择状态$s</em>{t+1}$最大的$Q$，而异策略是选择状态$s<em>{t+1}$和动作$\mu(s</em>{t+1})$的$Q$。</p>
<h3 id="4-6-无偏证明"><a href="#4-6-无偏证明" class="headerlink" title="4.6 无偏证明"></a>4.6 无偏证明</h3><blockquote>
<p>这部分是证明用Q代替期望奖励时如何无偏</p>
</blockquote>
<h2 id="五、结果"><a href="#五、结果" class="headerlink" title="五、结果"></a>五、结果</h2><blockquote>
<p>红色是本文结果：DAC off-policy &gt; SAC off-policy &gt; SAC on-policy</p>
</blockquote>
<p><img src="/2019/07/31/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8BDPG%E6%96%B9%E6%B3%95/11.png" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>好吧，自从看PG以来，关于PG、AC、DPG这里总是感觉有点懂又有一点不懂，作为DDPG以及A3C等的基础，先做一个大概的了解吧，后面看了DDPG和A3C后，在回过来看看，是否会理解更深刻一点</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote>
<p>主要参考了下面博客中的前两篇</p>
</blockquote>
<ul>
<li><p><a href="https://bluefisher.github.io/2018/05/16/Deterministic-Policy-Gradient/">Deterministic Policy Gradient-Fisher’s Blog</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/53613085">Deterministic Policy Gradient Algorithms阅读笔记（or翻译）</a></p>
</li>
<li><p><a href="https://blog.csdn.net/taoyafan/article/details/94363459">RL论文阅读七 Deterministic Policy Gradient Algorithms</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/statruidong/p/10765579.html">文献笔记Deterministic Policy Gradient Algorithms</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_37895339/article/details/84881872">强化学习-确定性策略强化学习-DPG&amp;DDPG算法推导及分析</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>论文</category>
        <category>深度强化学习</category>
      </categories>
      <tags>
        <tag>DRL</tag>
        <tag>DPG</tag>
      </tags>
  </entry>
  <entry>
    <title>DRL论文阅读（三）之DQN改进随机采样（Prioritized Experience Replay）</title>
    <url>/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E9%9A%8F%E6%9C%BA%E9%87%87%E6%A0%B7%EF%BC%88Prioritized-Experience-Replay%EF%BC%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>上一篇介绍了Double DQN对DQN的目标Q值优化，这篇将介绍在DDQN的基础上，对经验回放池的优化</p>
</blockquote>
<h2 id="一、论文题目"><a href="#一、论文题目" class="headerlink" title="一、论文题目"></a>一、论文题目</h2><blockquote>
<p><strong>PRIORITIZED EXPERIENCE REPLAY</strong> </p>
</blockquote>
<h2 id="二、研究目标"><a href="#二、研究目标" class="headerlink" title="二、研究目标"></a>二、研究目标</h2><blockquote>
<p>在DDQN基础上，改进经验回放池的均匀随机采样算法，使得学习更高效</p>
</blockquote>
<h2 id="三、问题定义"><a href="#三、问题定义" class="headerlink" title="三、问题定义"></a>三、问题定义</h2><blockquote>
<p>DDQN的均匀随机采样问题</p>
</blockquote>
<p>以往的DQN或DDQN的做法是从buffer中均匀随机采样，这样会导致一些有用的样本可能被抽到的次数少，并且存储数据的空间有限，当空间存满之后，每次放入一个experience就要丢弃先前的一个experience。那么就要思考下面两个问题</p>
<ul>
<li><strong>选择那些experience保存</strong></li>
<li><strong>选择那些experience被回放</strong></li>
</ul>
<p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E9%9A%8F%E6%9C%BA%E9%87%87%E6%A0%B7%EF%BC%88Prioritized-Experience-Replay%EF%BC%89/1.png" alt></p>
<h2 id="四、PRIORITIZED-REPLAY-方法介绍"><a href="#四、PRIORITIZED-REPLAY-方法介绍" class="headerlink" title="四、PRIORITIZED REPLAY 方法介绍"></a>四、PRIORITIZED REPLAY 方法介绍</h2><blockquote>
<p>作者针对上面的两个问题，着重解决的是第二个问题，即选择那些experience被回放</p>
</blockquote>
<h3 id="4-1-举例说明"><a href="#4-1-举例说明" class="headerlink" title="4.1 举例说明"></a>4.1 举例说明</h3><p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E9%9A%8F%E6%9C%BA%E9%87%87%E6%A0%B7%EF%BC%88Prioritized-Experience-Replay%EF%BC%89/2.png" alt></p>
<blockquote>
<p>如上图所示，本文给出了一个例子来充分的说明优先的潜在好处。引入了称为“Blind Cliffwalk”的环境，来示例说明当奖赏非常 rare的时候，探索所遇到的挑战。假设仅有 n 个状态，这个环境就要求足够的随机步骤直到得到第一个非零奖励；确切的讲，随机的选择动作序列就会有 2^（-n）的概率才能得到第一个非零奖赏。此外，最相关的 experience却藏在大量的失败的尝试当中。</p>
</blockquote>
<p>本文利用这个例子来显示了两个agents的学习次数的不同。可以看到这两个agent都从同一个经验回放池中去获取Q-learning的更新，第一个agent随机均匀采样experience，第二个agent唤醒一个oracle来进行优先级experience采样。这个oracle贪婪的选择使得在当前状态下最大化降低全局损失的experience。</p>
<p>从上图右侧，也能看出，按照一定优化序列得到的experience比均匀随机采样要花费很少的尝试步骤，这明显的提升了训练速度。</p>
<p><strong>注：</strong>这里的oracle可以理解为上帝，文中的意思指的是实验跑完了，回过来看如何如何做最好，相当于一种离线学习，即oracle采样的数据是最好的一组batch</p>
<h3 id="4-2-Prioritizing-with-TD-Error"><a href="#4-2-Prioritizing-with-TD-Error" class="headerlink" title="4.2 Prioritizing with TD-Error"></a>4.2 Prioritizing with TD-Error</h3><blockquote>
<p><strong>Temporal-difference（TD）error</strong>表示一个experience的惊奇度或出乎意料的程度</p>
</blockquote>
<p><strong>引入TD-Error：</strong>引入TD-Error的目的是给每一个experience添加一个TD-Error标准，在每次进行更新时，从buffer中选择绝对值对打的TD-Error的样例进行回放。然后对该样例进行Q-learning的更新，更新Q值和TD-Error的权重。新的experience到来之后，没有已知的 TD-error，所以我们将其放到最大优先级的行列，确保所有的 experience 至少回放一次。</p>
<p>TD-Error公式如下：</p>
<p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E9%9A%8F%E6%9C%BA%E9%87%87%E6%A0%B7%EF%BC%88Prioritized-Experience-Replay%EF%BC%89/3.png" alt></p>
<p><strong>引入TD-Error后的好处：</strong></p>
<p>oracle的做法可以极大的降低无用的尝试，加速了算法的执行速度</p>
<p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E9%9A%8F%E6%9C%BA%E9%87%87%E6%A0%B7%EF%BC%88Prioritized-Experience-Replay%EF%BC%89/11.png" alt></p>
<h3 id="4-3-Stochastic-Priorization"><a href="#4-3-Stochastic-Priorization" class="headerlink" title="4.3 Stochastic Priorization"></a>4.3 Stochastic Priorization</h3><blockquote>
<p>引入 Stochastic Priorization的目的是为了缓解多样性的损失</p>
</blockquote>
<p>在上一步引入TD-Error后会产生两个问题：</p>
<ul>
<li><p>为了避免消耗太多资源遍历整个memory，我们只为那些被replay的experience更新TD-error；如果一开始就被赋予一个很低的TD-error，在很长一段时间内可能都不会被replay</p>
</li>
<li><p>贪婪优先集中于一个小的经验子集，误差收缩的很慢，特别是使用函数估计的时候，意味着初始的高误差转移被经常回放。缺乏多样性使得该系统倾向于 over-fitting</p>
<p>（为什么丧失多样性造成过拟合：对于DQN，回放就是把经验池中取出的experience中的s状态输入到Q-network中，next state 输入到target Q-network中，然后进行一系列计算loss，反向传播更新网络参数，如果一直重复这一条信息输入，那么我对于训练网络过程来说精度会很高，而当测试的时候，输入别的状态就会使测试精度降低，即过拟合）</p>
</li>
<li><p>对 noise spikes 非常敏感，bootstrapping 会加剧该现象，估计误差又会成为另一个噪声的来源</p>
</li>
</ul>
<p>为了解决上述问题，我们引入了一个<strong>随机采样</strong>的方法，该方法结合了 <strong>纯粹的贪婪优先</strong> 和 <strong>均匀随机采样</strong>。我们确保被采样的概率在experience优先级上是单调的，与此同时，确保最低优先级的experience的概率也是非零的。具体的，我们定义采样experience  i 的概率为：</p>
<p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E9%9A%8F%E6%9C%BA%E9%87%87%E6%A0%B7%EF%BC%88Prioritized-Experience-Replay%EF%BC%89/4.png" alt></p>
<p>其中，pi 是experience i 的优先级。指数 α 决定了使用多少优先级，当 α 等于 0 的时候是均匀的情况</p>
<p>pi有以下两种变体：</p>
<ul>
<li><p>直接的、成比例优先（<strong>Proportional Variant</strong>）：</p>
<p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E9%9A%8F%E6%9C%BA%E9%87%87%E6%A0%B7%EF%BC%88Prioritized-Experience-Replay%EF%BC%89/5.png" alt></p>
<p>这里的</p>
<script type="math/tex; mode=display">
\epsilon</script><p>是一个很小的数字，这样就保证了有些TD-Error为0的特殊边缘例子也能够被采样到</p>
</li>
<li><p>间接的、基于排行的优先（<strong>Rank-based Variant</strong>）：</p>
<p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E9%9A%8F%E6%9C%BA%E9%87%87%E6%A0%B7%EF%BC%88Prioritized-Experience-Replay%EF%BC%89/6.png" alt></p>
<p>rank（i）是根据</p>
<script type="math/tex; mode=display">
|\delta|</script><p>排序后，i 的排名</p>
</li>
</ul>
<p>两个分布都是随着误差单调的，但是后者更鲁棒，因为其对离群点不敏感。两个变体相对均匀的baseline来讲都是有很大优势</p>
<h4 id="4-3-1-Proportional-Variant"><a href="#4-3-1-Proportional-Variant" class="headerlink" title="4.3.1 Proportional Variant"></a>4.3.1 Proportional Variant</h4><blockquote>
<p>本文提出的Sum Tree，Sum Tree是一种树形结构，每片树叶存储每个样本的优先级 <code>p</code>, 每个树枝节点只有两个分叉, 节点的值是两个分叉的合, 所以 SumTree 的顶端就是所有 <code>p</code> 的合. 正如下面<a href="https://jaromiru.com/2016/11/07/lets-make-a-dqn-double-learning-and-prioritized-experience-replay/">图片(来自Jaromír Janisch)</a>, 最下面一层树叶存储样本的 <code>p</code>, 叶子上一层最左边的 13 = 3 + 10, 按这个规律相加, 顶层的 root 就是全部 <code>p</code> 的合了.</p>
</blockquote>
<p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E9%9A%8F%E6%9C%BA%E9%87%87%E6%A0%B7%EF%BC%88Prioritized-Experience-Replay%EF%BC%89/8.png" alt></p>
<p>抽样时, 我们会将 <code>p</code> 的总合 除以 batch size, 分成 batch size 那么多区间, (n=sum(p)/batch_size). 如果将所有 node 的 priority 加起来是42的话, 我们如果抽6个样本, 这时的区间拥有的 priority 可能是这样.</p>
<p>[0-7], [7-14], [14-21], [21-28], [28-35], [35-42]</p>
<p>然后在每个区间里随机选取一个数. 比如在第区间 <code>[21-28]</code> 里选到了24, 就按照这个 24 从最顶上的42开始向下搜索. 首先看到最顶上 <code>42</code> 下面有两个 child nodes, 拿着手中的24对比左边的 child <code>29</code>, 如果 左边的 child 比自己手中的值大, 那我们就走左边这条路, 接着再对比 <code>29</code> 下面的左边那个点 <code>13</code>, 这时, 手中的 24 比 <code>13</code> 大, 那我们就走右边的路, 并且将手中的值根据 <code>13</code> 修改一下, 变成 24-13 = 11. 接着拿着 11 和 <code>13</code>左下角的 <code>12</code> 比, 结果 <code>12</code> 比 11 大, 那我们就选 12 当做这次选到的 priority, 并且也选择 12 对应的数据.</p>
<p><strong>注</strong>：上面的说明是参照的网上教程写的，这里在写一下自己的理解</p>
<p><strong>个人理解：</strong>图片中的所有叶子节点（3、10、12、4、1、2、8、2）对应于每一个experience的TD-Error，然后两个两个组合，构成哈夫曼树，即会生成顶层的根root，并且其值为42。然后在进行分区，分区后再每个区间进行抽值，如抽到的为n。抽值后，从根节点开始找（从上至下，从左至右），如果遇见其子节点m比n大，则走该子节点的路，如果遇见子节点m比n小，则走另一个子节点路，并且n=n-m.，直到找到叶子节点，选择叶子节点中那个比当前n值大的experience。</p>
<h4 id="4-3-2-Rank-based-Variant"><a href="#4-3-2-Rank-based-Variant" class="headerlink" title="4.3.2 Rank-based Variant"></a>4.3.2 Rank-based Variant</h4><blockquote>
<p>将buffer分为k个等概率的分段，从每一个分段中进行贪婪优先采样</p>
</blockquote>
<p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E9%9A%8F%E6%9C%BA%E9%87%87%E6%A0%B7%EF%BC%88Prioritized-Experience-Replay%EF%BC%89/7.png" alt></p>
<h3 id="4-4-Annealing-the-bias"><a href="#4-4-Annealing-the-bias" class="headerlink" title="4.4  Annealing the bias"></a>4.4  Annealing the bias</h3><blockquote>
<p>利用随机更新得来的期望值的预测依赖于这些更新，对应其期望的同样的分布。优先回放引入了误差，因为它以一种不受控的形式改变了分布，从而改变了预测会收敛到的 solution（即使 policy 和 状态分布都固定）。我们可以用下面的重要性采样权重（importance-sample weights）来修正该误差：</p>
</blockquote>
<p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E9%9A%8F%E6%9C%BA%E9%87%87%E6%A0%B7%EF%BC%88Prioritized-Experience-Replay%EF%BC%89/9.png" alt></p>
<p><strong>Importance sampling的影响：</strong></p>
<p>在典型的强化学习场景中，更新的无偏性在训练结束接近收敛时是最重要的，因为由于策略、状态分布和引导目标的改变，有bias会高度不稳定，与未修正的优先重放相比，Importance sampling使学习变得不那么具有侵略性，一方面导致了较慢的初始学习，另一方面又降低了过早收敛的风险，有时甚至是更好的最终结果。与uniform重放相比，修正的优先级排序平均表现更好。</p>
<h3 id="4-4-本文采用方法"><a href="#4-4-本文采用方法" class="headerlink" title="4.4 本文采用方法"></a>4.4 本文采用方法</h3><blockquote>
<p>本文将优先回放和 Double Q-learning 相结合，就是将 均匀随机采样 替换为 本文提出的 随机优先和重要性采样方法，具体算法见下图</p>
</blockquote>
<p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E9%9A%8F%E6%9C%BA%E9%87%87%E6%A0%B7%EF%BC%88Prioritized-Experience-Replay%EF%BC%89/10.png" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>Prioritized Replay DQN和DDQN相比，收敛速度有了很大的提高，避免了一些没有价值的迭代，因此是一个不错的优化点。同时它也可以直接集成DDQN算法，所以是一个比较常用的DQN算法。</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p>论文理解1：<a href="https://www.cnblogs.com/wangxiaocvpr/p/5660232.html">传送门</a></p>
</li>
<li><p>论文理解2：<a href="https://zhuanlan.zhihu.com/p/38358183">传送门</a></p>
</li>
<li><p>代码样例：<a href="https://www.cnblogs.com/pinard/p/9797695.html">传送门</a></p>
</li>
<li><p>莫烦大神：<a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/4-6-prioritized-replay/">传送门</a></p>
</li>
<li><p>很不错的网址：<a href="https://www.echenshe.com/class/rl/4-6-prioritized-replay.html">传送门</a></p>
</li>
<li><p>4.3.1里面的图片来源：<a href="https://jaromiru.com/2016/11/07/lets-make-a-dqn-double-learning-and-prioritized-experience-replay/">传送门</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>论文</category>
        <category>深度强化学习</category>
      </categories>
      <tags>
        <tag>DRL</tag>
        <tag>Prioritized Experience Replay</tag>
        <tag>DQN</tag>
      </tags>
  </entry>
  <entry>
    <title>DRL论文阅读（九）之A3C算法</title>
    <url>/2019/08/05/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BA3C%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>针对普通AC算法中比较难收敛的问题，DeepMind在<em>Asynchronous Methods for Deep Reinforcement Learning</em>一文中，介绍了另一种简单的轻量级深度强化学习框架——异步地进行深度神经网络梯度下降。论文提出了四种标准强化学习算法的异步变体，分别是<strong>Asynchronous  one-step Q-Learning，Asynchronous  one-step Sarsa，Asynchronous  n-stepQ-Learning，Asynchronous Advantage Actor-Critic</strong>，都取得了不错的稳定效果，尤其是最后一个，简称A3C，更是有着最好的性能表现，在多核CPU上学习比在GPU上学习的时间减少了一半。</p>
</blockquote>
<h2 id="一、论文题目"><a href="#一、论文题目" class="headerlink" title="一、论文题目"></a>一、论文题目</h2><blockquote>
<p><strong>Asynchronous Methods for Deep Reinforcement Learning</strong> </p>
</blockquote>
<h2 id="二、研究目标"><a href="#二、研究目标" class="headerlink" title="二、研究目标"></a>二、研究目标</h2><blockquote>
<p>研究一种新的算法架构解决普通AC算法中难收敛的问题及深度神经网络训练中的不稳定性（不使用经验回放机制）</p>
</blockquote>
<h2 id="三、问题定义"><a href="#三、问题定义" class="headerlink" title="三、问题定义"></a>三、问题定义</h2><blockquote>
<p>以往简单的<code>online RL</code>算法与深度神经网络结合是不稳定的，因此许多人提出了多种解决方案来稳定其算法，这些方法有一个共同的想法：一个<code>online agent</code>遇到的观测数据序列是<code>non-stationary</code> 的，<code>online RL</code>的更新是强相关的。因此通过将agent的数据存储在经验回放池（experience replay buffer）中，数据可以从不同的时间步骤上，批处理或随机采样。这种方法可以降低<code>non-stationary</code>和其更新的相关性。但同时也将这些算法限制在了<code>off-policy</code>的<code>RL</code>算法 。</p>
</blockquote>
<p>使用经验回放池的方法来解决其不稳定性的算法<code>有DQN、DDPG</code>等。</p>
<p>但是经验回放池存在两个问题：</p>
<ul>
<li>agent与环境的每次实时交互都需要耗费很多的内存和计算力</li>
<li>经验回放机制要求agent采用异策略（off-policy）方法来进行学习，而off-policy方法只能基于就策略生成的数据进行更新</li>
</ul>
<p>经验回放有什么问题呢？回放池数据相关性太强，用于训练的时候效果很可能不佳。举个例子，我们学习下棋，总是和同一个人下，期望能提高棋艺。这当然没有问题，但是到一定程度就很难在提高了，此时最后的方法就是另寻高手切磋。</p>
<p>此外，以往<code>DRL</code>的训练都依赖于计算能力很强的图形处理器（如<code>GPU</code>）</p>
<h2 id="四、A3C算法介绍"><a href="#四、A3C算法介绍" class="headerlink" title="四、A3C算法介绍"></a>四、<code>A3C</code>算法介绍</h2><blockquote>
<p><code>A3C</code>算法全称为<code>Asynchronous Advantage Actor-Critic</code>，将AC放到多个线程中同步训练，可以有效的利用计算机资源，提升训练效用。简单概括，就是：它会创建多个并行的环境，让多个拥有副结构的agent同时在这些并行环境上更新主结构中的参数。并行中的agent们互不干扰，而主结构的参数更新受到副结构提交更新的不连续性干扰，所以更新的相关性被降低，收敛性提高。</p>
</blockquote>
<h3 id="4-1-背景知识"><a href="#4-1-背景知识" class="headerlink" title="4.1 背景知识"></a>4.1 背景知识</h3><blockquote>
<p><code>DRL</code>算法大致可以分为两个类别：<strong>Value-Based</strong>和<strong>Policy-Based</strong>，Value-Based的经典算法为<strong>Q-Learning</strong>，Policy-Based的经典算法为<strong>Policy Gradient Method</strong></p>
</blockquote>
<ul>
<li><strong>Value-Based</strong>：是预测某个state下所有Action的期望价值（Q值），之后通过选择最大Q值对应的Action执行策略，适合仅有少量离散取值的Action的环境</li>
<li><strong>Policy-Based</strong>：是直接预测某个state下应该采取的Action，适合高维连续Action的环境，更通用</li>
</ul>
<p>根据是否对state的变化进行预测，<code>RL</code>又可以分为<strong>model-based</strong>和<strong>model-free</strong>：</p>
<ul>
<li><strong>model-based</strong>：根据state和采取的action预测接下来的state，并利用这个信息训练强化学习模型（知道状态的转移概率）</li>
<li><strong>model-free：</strong>不需要对环境状态进行任何预测，也不考虑行动将如何影响环境，直接对策略或action的期望价值进行预测，计算效率非常高</li>
</ul>
<p>因为复杂环境中难以使用model预测接下来的环境状态，所以传统的<code>DRL</code>都是基于model-free。</p>
<h4 id="4-1-1-基本概念"><a href="#4-1-1-基本概念" class="headerlink" title="4.1.1 基本概念"></a>4.1.1 基本概念</h4><ul>
<li><p>$s_t $：在t时刻，agent观察到的环境状态，如观察到的环境图像，或agent在环境中的位置、速度、机器人关节角度等</p>
</li>
<li><p>$a<em>t$：在t时刻，agent选择的行为（action），通过环境执行后，环境状态由$s_t$转换为$s</em>{t+1}$</p>
</li>
<li><p>$r(s_t,a_t)$函数（转移函数）：环境在$s_t$执行行为$a_t$后，返回的单步奖励值</p>
</li>
<li><p>$R_t$：$：是从当前状态直到将来某个状态，期间所有行为所获得奖励值的加权总和，即discounted future reward</p>
<script type="math/tex; mode=display">
R_t = \sum_{i=t}^T \gamma^{i-t} r(s_i,a_i)</script><p>其中，$\gamma$是discounted rate，表示折扣因子，$\gamma \epsilon[0,1]$，通常取0.99</p>
</li>
<li><p>动作-值函数：</p>
<script type="math/tex; mode=display">
Q^\pi(s,a) = E[R_t|s_t = s,a]</script></li>
<li><p>状态价值函数：</p>
<script type="math/tex; mode=display">
V^\pi(s) = E[R_t|s_t = s ]</script></li>
</ul>
<h4 id="4-1-2-Value-Based-amp-model-free"><a href="#4-1-2-Value-Based-amp-model-free" class="headerlink" title="4.1.2 Value-Based &amp; model-free"></a>4.1.2 Value-Based &amp; model-free</h4><p><strong>神经网络近似动作-值函数</strong>：使用参数$\theta$来对动作-值函数进行近似$Q(s,a,\theta)$</p>
<p><strong>one-step Q-Learning</strong>：</p>
<p>​    损失函数Loss Function：</p>
<script type="math/tex; mode=display">
L_i(\theta_i) = E(r + \gamma  \cdot max_{a'}Q(s',a';\theta_{i-1}) - Q(s,a;\theta_i))^2</script><p>​    其中，$r + \gamma  \cdot max<em>{a’}Q(s’,a’;\theta</em>{i-1}^-)$一般称为<strong>Target Q</strong>网络</p>
<p><strong>n-step Q-Learning：</strong></p>
<p>​    $Target Q = r<em>t + \gamma r</em>{t+1} + … +\gamma ^{n-1}r<em>{t+n-1} +  \gamma^n max</em>{a’}Q(s’,a’;\theta_{i-1}^-)$</p>
<font color="red">one-step缺点：得到一个奖励r仅仅直接影响了得到该奖励的状态总做对（s,a）的值。其他state action pair的值仅仅间接的通过更新value Q(s,a)来影响，这使得学习过程缓慢，因为许多更新都需要传播一个reward给相关进行的states和actions。</font>

<p>n-step优点：一个奖励r直接影响先前n个state action pair，学习更有效。</p>
<h4 id="4-1-3-Policy-Based-amp-model-free"><a href="#4-1-3-Policy-Based-amp-model-free" class="headerlink" title="4.1.3 Policy-Based &amp; model-free"></a>4.1.3 Policy-Based &amp; model-free</h4><p>直接将策略参数化：$\pi(a|s;\theta)$，通过迭代更新$\theta$，使总奖励期望$E[R_t]$梯度上升</p>
<p>具体地：</p>
<p><img src="/2019/08/05/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BA3C%E7%AE%97%E6%B3%95/1.png" alt></p>
<p>①中，$\pi(a_t|s_t;\theta)$表示在$s_t,\theta$的情况下选择动作$a_t$的概率。概率的对数乘以该动作的总奖励$R_t$，对$\theta$求梯度，以梯度上升的方式更新$\theta$。该公式的意义在于，奖励越高的动作越努力提高它出现的概率。</p>
<p>但是在某些情况下，每个动作的总回报$R_t$都不为负，那么多有的梯度值都大于等于0，此时每个动作出现的概率都会提高，这在很大程度上减缓了学习的速度，而且使得梯度的方差也很大。因此需要对$R_t$使用某种标准化操作来降低梯度的方差。</p>
<p>②中，可以让$R_t$减去一个基线b(baseline)，b通常设为$R_t$的一个期望估计，即$b_t(s_t) \approx V^\pi(s_t)$，通过求梯度更新$\theta$，总奖励超过基线的动作的概率会提高，反之则降低，同时块还可以降低梯度方差（证明略）。这种方式被叫做<strong>Actor-Critic</strong>体系结构，其中策略$\pi$是actor，基线$b_t$是critic。</p>
<p>③中，$R_t - b_t(s_t)$可以使用动作优势函数$A^\pi(a_t,s_t) = Q^\pi(a_t,s_t) - V^\pi(s_t)$代替，因为$R_t$可以视为$Q^\pi(a_t,s_t)$的估计，基线$b_t(s_t)$视为$V^\pi(s_t)$的估计。</p>
<h3 id="4-2-异步RL框架"><a href="#4-2-异步RL框架" class="headerlink" title="4.2 异步RL框架"></a>4.2 异步RL框架</h3><blockquote>
<p>本文提出了多线程的各种算法的异步变种，即：<strong>one-step Q-Learning</strong>，<strong>one-step Sarsa</strong>，<strong>n-step Q-Learning</strong>，以及<strong>advantage actor-critic</strong>。设计这些算法的目的是找到RL算法可以训练深度神经网络策略而不用花费太多的计算资源，但是RL算法又不尽相同，actor-critic算法是on-policy策略搜索算法，但是Q-Learning是off-policy value-based方法，我们利用两种主要的想法来实现四种算法以达到我们的目标。</p>
</blockquote>
<ol>
<li>利用异步actor-learners，利用单机的多CPU线程，将这些learner保持在一个机器上，省去了多个learner之间通信的开销，使得可以利用<code>Hogwild!</code>的方式更新而完成训练</li>
<li>利用multiple actor-learners并行性尽可能的去探索环境的不同部分</li>
</ol>
<p>不同线程的agent，其探索策略不同以保证多样性，不需要经验回放机制，通过各并行agent收集的样本训练降低样本相关性，且学习的速度和线程数大约成线性关系，能适用off-policy、on-policy、离散型、连续性动作。</p>
<h4 id="4-2-1-Asynchronous-one-step-Q-Learning"><a href="#4-2-1-Asynchronous-one-step-Q-Learning" class="headerlink" title="4.2.1 Asynchronous one-step Q-Learning"></a>4.2.1 Asynchronous one-step Q-Learning</h4><p><img src="/2019/08/05/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BA3C%E7%AE%97%E6%B3%95/2.png" alt></p>
<p><strong>算法大致流程：</strong>有两个全局的$Q(s,a;\theta)$和$Q(s,a;\theta^-)$，每个线程独立的以$\epsilon - greedy$方式进行行为探索，然后根据Q-Learning算法更新$\theta$参数，但这里的更新不是直接将更新提交到全局$Q(s,a;\theta)$网络中，而是先自己保留更新的梯度，在每隔一段时间，将自己的梯度更新到全局神经网络中，同时每隔一段时间将全局神经网络参数同步到自己的参数中。</p>
<h4 id="4-2-2-Asynchronous-one-step-Sarsa"><a href="#4-2-2-Asynchronous-one-step-Sarsa" class="headerlink" title="4.2.2 Asynchronous one-step Sarsa"></a>4.2.2 Asynchronous one-step Sarsa</h4><blockquote>
<p>相比较Q-Learning，Sarsa只有一处不同，即$TargetQ = r+\gamma Q(s’,a’;\theta^-)$;</p>
<p>且Sarsa是on-policy，Q-Learning是off-policy</p>
</blockquote>
<p><img src="/2019/08/05/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BA3C%E7%AE%97%E6%B3%95/3.png" alt></p>
<h4 id="4-2-3-Asynchronous-n-step-Q-Learning"><a href="#4-2-3-Asynchronous-n-step-Q-Learning" class="headerlink" title="4.2.3 Asynchronous n-step Q-Learning"></a>4.2.3 Asynchronous n-step Q-Learning</h4><p><img src="/2019/08/05/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BA3C%E7%AE%97%E6%B3%95/4.png" alt></p>
<p>常见的情况下，一般会用后向视角（backward view），即用资格迹（eligibility traces）来更新，但这个算法用不了不大常见的正向视角（forward view），作者解释因为再以动量梯度更新的方式训练神经网络和反向传播过程中，正向视角更加简单。</p>
<h4 id="4-2-4-A3C（Asynchronous-advantage-actor-critic）"><a href="#4-2-4-A3C（Asynchronous-advantage-actor-critic）" class="headerlink" title="4.2.4 A3C（Asynchronous advantage actor-critic）"></a>4.2.4 A3C（Asynchronous advantage actor-critic）</h4><p><img src="/2019/08/05/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BA3C%E7%AE%97%E6%B3%95/5.png" alt></p>
<p>A3C的更新公式有两条，一条<strong>梯度上升</strong>更新策略$\pi$的参数，如前面介绍的actor-critic结构：</p>
<script type="math/tex; mode=display">
\nabla_{\theta'}  log \pi (a_t|st;\theta')A(s_t,a_t;\theta',\theta'_v)</script><p>其中，$A(s_t,a_t;\theta’,\theta’_v)$是优势函数的估计（算法中表示为$R-V(s_i;\theta’_v)$）</p>
<script type="math/tex; mode=display">
A(s_t,a_t;\theta',\theta'_v) = \sum_{i=0}^{k-1} \gamma^i r_{t+i} +\gamma^kV(s_{t+k};\theta'_v) -V(s_t;\theta'_v)</script><p>$\theta’$是策略$\pi$的参数，$\theta’_v$是状态值函数的参数。k是可以变化的，上届由n-step决定，即n。</p>
<p><strong>在实际操作中，论文在该公式中加入了策略$\pi$的熵项$\beta\nabla_{\theta’}H(\pi(s_t;\theta’))$，防止过早的进入次优策略。</strong></p>
<p>另一条公式是使用TD方式<strong>梯度下降</strong>更新状态值函数的参数，即算法中的$\partial (R-V(s_i;\theta’_v))^2 / \partial\theta’_v$</p>
<p><strong>注意</strong>：</p>
<p>上面四个算法都是等所有的异步agent执行完后再用累计的梯度信息更新网络参数。其中n-step的算法（后两个）需要每个agent复制一份子网络，每个agent执行n步后倒退算出每步的总奖励和相关梯度，用累计梯度更新更新主网络参数（如果不复制子网络，则等单个agent执行完n-step耗时太多，而one-step可忽略这个影响）。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>A3C解决了Actor-Critic难以收敛的问题，同时更重要的是，它提供了一种通用的异步的并发的强化学习框架，这个框架不止可以用于A3C，还能应用于其他的强化学习算法。</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote>
<p>本文主要参考了下面链接中的前两篇</p>
</blockquote>
<ul>
<li><a href="https://blog.csdn.net/u013236946/article/details/73195035">深度强化学习—A3C</a></li>
<li><p><a href="https://bluefisher.github.io/2018/05/17/Asynchronous-Methods-for-Deep-Reinforcement-Learning/">Fisher’s Blog博客</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/pinard/p/10334127.html">强化学习（十五）A3C</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>论文</category>
        <category>深度强化学习</category>
      </categories>
      <tags>
        <tag>DRL</tag>
        <tag>A3C</tag>
      </tags>
  </entry>
  <entry>
    <title>DRL论文阅读（二）之DQN改进目标Q值计算（Double DQN）</title>
    <url>/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%9B%AE%E6%A0%87Q%E5%80%BC%E8%AE%A1%E7%AE%97%EF%BC%88Double-DQN%EF%BC%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在DDQN之前，基本所有的目标Q值都是通过贪婪法直接得到，无论是Q-learning还是DQN（Nature）。虽然DQN中用了两个Q网络并使用目标Q网络计算Q值，但是在得到a的过程中，还是使用的贪婪法计算得到。</p>
<p>使用max虽然可以让Q值向可能的优化目标靠拢，但是很容易过犹不及，导致过度估计，过度估计即最使得估计得值函数比值函数的真实值大，从而可能会影响最终的策略决策，导致最终的策略并非最优，而是次优</p>
</blockquote>
<h2 id="一、论文题目"><a href="#一、论文题目" class="headerlink" title="一、论文题目"></a>一、论文题目</h2><blockquote>
<p><strong>Deep Reinforcement Learning with Double Q-learning</strong> </p>
</blockquote>
<h2 id="二、研究目标"><a href="#二、研究目标" class="headerlink" title="二、研究目标"></a>二、研究目标</h2><blockquote>
<p>改进目标Q网络算法解决DQN存在的过度估计问题</p>
</blockquote>
<h2 id="三、问题定义"><a href="#三、问题定义" class="headerlink" title="三、问题定义"></a>三、问题定义</h2><blockquote>
<p>DQN的过度估计问题</p>
</blockquote>
<ul>
<li>如果过度估计确实存在，是否会对实践中的表现产生负面影响</li>
</ul>
<h2 id="四、DDQN介绍"><a href="#四、DDQN介绍" class="headerlink" title="四、DDQN介绍"></a>四、DDQN介绍</h2><h3 id="4-1-Q-learning参数更新"><a href="#4-1-Q-learning参数更新" class="headerlink" title="4.1 Q-learning参数更新"></a>4.1 Q-learning参数更新</h3><blockquote>
<p>Q-learning在参数更新过程中，用于计算动作值函数的<code>Yt Q</code>网络的参数与值函数的Q网络参数相同，这样在数据样本和网络训练之间存在相关性</p>
</blockquote>
<p>计算时，公式（2）里面是计算出最大的Q值（找出每个a对应的Q值，并求出最大值）</p>
<p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%9B%AE%E6%A0%87Q%E5%80%BC%E8%AE%A1%E7%AE%97%EF%BC%88Double-DQN%EF%BC%89/1.png" alt></p>
<h3 id="4-2-Deep-Q-Network参数更新"><a href="#4-2-Deep-Q-Network参数更新" class="headerlink" title="4.2 Deep Q Network参数更新"></a>4.2 Deep Q Network参数更新</h3><blockquote>
<p>DQN在Q-learning的基础之上引入了目标Q网络和经验回放，在进行参数更新的过程中，使用<code>Target Q</code>来计算动作值函数，<code>Target Q</code>网络和值函数的Q网络结构相同，并且初始参数相同，在固定的step下，将值函数的Q网络参数传递给Target Q网络参数，进行更新，打破了数据样本和网络训练之间的相关性</p>
</blockquote>
<p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%9B%AE%E6%A0%87Q%E5%80%BC%E8%AE%A1%E7%AE%97%EF%BC%88Double-DQN%EF%BC%89/2.png" alt></p>
<h3 id="4-3-Double-DQN-参数更新"><a href="#4-3-Double-DQN-参数更新" class="headerlink" title="4.3 Double DQN 参数更新"></a>4.3 Double DQN 参数更新</h3><h4 id="4-3-1-Double-Q思想"><a href="#4-3-1-Double-Q思想" class="headerlink" title="4.3.1 Double Q思想"></a>4.3.1 Double Q思想</h4><blockquote>
<p>在Q-learning和DQN中动作值函数都采用了max操作，可能会导致动作值函数的过度估计。为了防止这种情况，Double Q-leaning通过解耦目标Q值动作的选择与目标Q值的计算这两步，来消除过度估计得问题</p>
</blockquote>
<p>可以将公式（2）修改为下图，在计算时，首先求出使得Q值最大的行为a，然后将该a作为当前状态的输入行为，求出Q值</p>
<p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%9B%AE%E6%A0%87Q%E5%80%BC%E8%AE%A1%E7%AE%97%EF%BC%88Double-DQN%EF%BC%89/3.png" alt></p>
<h4 id="4-3-2-Double-Q-learning"><a href="#4-3-2-Double-Q-learning" class="headerlink" title="4.3.2 Double Q-learning"></a>4.3.2 Double Q-learning</h4><blockquote>
<p>使用Q网络参数，估计贪婪政策的价值，并用<code>Target Q</code>网络的参数来公平的评估该策略的价值</p>
</blockquote>
<p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%9B%AE%E6%A0%87Q%E5%80%BC%E8%AE%A1%E7%AE%97%EF%BC%88Double-DQN%EF%BC%89/4.png" alt></p>
<h4 id="4-3-3-Double-DQN"><a href="#4-3-3-Double-DQN" class="headerlink" title="4.3.3 Double DQN"></a>4.3.3 Double DQN</h4><p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%9B%AE%E6%A0%87Q%E5%80%BC%E8%AE%A1%E7%AE%97%EF%BC%88Double-DQN%EF%BC%89/5.png" alt></p>
<h2 id="五、实验"><a href="#五、实验" class="headerlink" title="五、实验"></a>五、实验</h2><h3 id="5-1-Q-learning过度估计"><a href="#5-1-Q-learning过度估计" class="headerlink" title="5.1 Q-learning过度估计"></a>5.1 Q-learning过度估计</h3><blockquote>
<p>Q-learning的过度估计随着action的增加而增加，而Double Q-learning则是无偏的</p>
</blockquote>
<p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%9B%AE%E6%A0%87Q%E5%80%BC%E8%AE%A1%E7%AE%97%EF%BC%88Double-DQN%EF%BC%89/6.png" alt></p>
<h3 id="5-2-真实action下的过度统计"><a href="#5-2-真实action下的过度统计" class="headerlink" title="5.2 真实action下的过度统计"></a>5.2 真实action下的过度统计</h3><blockquote>
<p>过度估计可能会阻碍学习到最优策略，而使用Double Q-learning减少过度估计，策略会得到改善</p>
</blockquote>
<p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%9B%AE%E6%A0%87Q%E5%80%BC%E8%AE%A1%E7%AE%97%EF%BC%88Double-DQN%EF%BC%89/7.png" alt></p>
<h3 id="5-3-DQN的过度估计分析"><a href="#5-3-DQN的过度估计分析" class="headerlink" title="5.3 DQN的过度估计分析"></a>5.3 DQN的过度估计分析</h3><blockquote>
<p>Double DQN在值函数的准确性和策略质量方面都优于DQN</p>
</blockquote>
<p><img src="/2019/07/18/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%9B%AE%E6%A0%87Q%E5%80%BC%E8%AE%A1%E7%AE%97%EF%BC%88Double-DQN%EF%BC%89/8.png" alt></p>
<h2 id="六、讨论"><a href="#六、讨论" class="headerlink" title="六、讨论"></a>六、讨论</h2><h3 id="6-1-误差来源"><a href="#6-1-误差来源" class="headerlink" title="6.1 误差来源"></a>6.1 误差来源</h3><ul>
<li>环境噪声</li>
<li>函数近似</li>
<li>非平稳性</li>
</ul>
<h3 id="6-2-贡献"><a href="#6-2-贡献" class="headerlink" title="6.2 贡献"></a>6.2 贡献</h3><ul>
<li>证明了Q学习在大规模问题中为什么会出现过度估计的情况</li>
<li>通过分析Atari游戏里的价值估计，发现这些过度估计在实践中比以前承认的更为普遍与严重</li>
<li>证明Double Q-learning可以大规模使用，能成功减少这种过度估计，是学习更加稳定可靠</li>
<li>提出了Douuble DQN算法</li>
<li>证明了Double DQN能找到更好测策略</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>Q-learning和DQN中的max操作使得估计得值函数比值函数的真实值大。</p>
<p>如果值函数每一点的值都被过估计了相同的幅度，即过估计量是均匀的，那么由于最优策略是贪婪策略，即找到最大的值函数所对应的动作，这时候最优策略是保持不变的。也就是说，在这种情况下，即使值函数被过估计了，也不影响最优的策略。强化学习的目标是找到最优的策略，而不是要得到值函数，所以这时候就算是值函数被过估计了，最终也不影响我们解决问题。然而，在实际情况中，过估计量并非是均匀的，因此值函数的过估计会影响最终的策略决策，从而导致最终的策略并非最优，而只是次优。</p>
<p>为了解决值函数过估计的问题，Double Q-learning 将动作的选择和动作的评估分别用不同的值函数实现</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p>Double DQN理解：<a href="https://www.cnblogs.com/pinard/p/9778063.html">传送门</a></p>
</li>
<li><p>Double DQN和DQN讨论：<a href="http://www.broadview.com.cn/article/419382">传送门</a></p>
</li>
<li><p>代码参考：<a href="http://www.imooc.com/article/262461">传送门</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>论文</category>
        <category>深度强化学习</category>
      </categories>
      <tags>
        <tag>DRL</tag>
        <tag>Double DQN</tag>
        <tag>DQN</tag>
      </tags>
  </entry>
  <entry>
    <title>DRL论文阅读（五）之Policy Gradient理解</title>
    <url>/2019/07/23/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPolicy-Gradient%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在前面的四篇DQN强化学习算法中，主要是对价值函数进行了近似表示，这是只一种<strong>基于价值函数（Value Based）</strong>的方法，是基于状态价值函数V(s)或者动作价值函数Q(s,a)的控制问题解法。在确定性的环境中，当我们知道了每个状态价值函数V(s)的数值之后，策略就可以选择使得下一个状态期望状态价值函数最大的行动a。但是在随机的环境中状态价值函数V(s)就不太好用了，因为它不能直接指导我们进行行动的选择。因此，在控制问题中更常用的是动作价值函数Q(s,a)，它描述了在某个状态s下采取不同的行动a产生的期望收益。但是这是一种间接的做法，那有没有更直接的做法呢？</p>
<p>有！那就是<strong>直接更新策略</strong>。本文将介绍一种更为直接的方式解决强化学习中的控制问题—<strong>策略梯度方法</strong>，它属于另一类，即<strong>基于策略的方法（Policy Based）</strong>。</p>
</blockquote>
<h2 id="一、论文题目"><a href="#一、论文题目" class="headerlink" title="一、论文题目"></a>一、论文题目</h2><blockquote>
<p><strong>Policy Gradient Methods for Reinforcement Learning with Function Approximation</strong> </p>
</blockquote>
<h2 id="二、研究目标"><a href="#二、研究目标" class="headerlink" title="二、研究目标"></a>二、研究目标</h2><blockquote>
<p>研究一种更直接的方法解决强化学习中的控制问题，之前的控制方法是一种间接方法</p>
</blockquote>
<h2 id="三、问题定义"><a href="#三、问题定义" class="headerlink" title="三、问题定义"></a>三、问题定义</h2><h3 id="3-1-Value-Based方法的局限性"><a href="#3-1-Value-Based方法的局限性" class="headerlink" title="3.1 Value Based方法的局限性"></a>3.1 Value Based方法的局限性</h3><ul>
<li>首先，它面向的是确定性策略，而最优策略通常是随机的</li>
<li>其次，DQN系列方法对连续动作的处理能力不足。如果在一个连续空间内挑选动作，则Q值将会在无穷多的动作中计算价值，从而选择行为，这可吃不消</li>
<li>最后，算法收敛障碍。一个行动的估计值的任意小的变化可以导致它被选择或不被选择，这种不连续变化是算法保证收敛的一个关键障碍</li>
</ul>
<h3 id="3-2-Policy-Based方法的优缺点"><a href="#3-2-Policy-Based方法的优缺点" class="headerlink" title="3.2 Policy Based方法的优缺点"></a>3.2 Policy Based方法的优缺点</h3><p><strong>优点：</strong></p>
<ul>
<li>连续的动作空间（高维空间）中更加高效</li>
<li>可以实现随机化的策略</li>
<li>某种情况下，价值函数可能比较难以计算，而策略函数比较容易</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>通常收敛到局部最优而非全局最后</li>
<li>评估一个策略通常低效（这个过程可能慢，但是具有更高的可变性，其中也会出现很多并不有效的尝试，且方差高）</li>
</ul>
<h2 id="四、Policy-Gradient算法介绍"><a href="#四、Policy-Gradient算法介绍" class="headerlink" title="四、Policy Gradient算法介绍"></a>四、Policy Gradient算法介绍</h2><h3 id="4-1-Value-Based网络"><a href="#4-1-Value-Based网络" class="headerlink" title="4.1 Value Based网络"></a>4.1 Value Based网络</h3><blockquote>
<p>在Value Based强化学习方法中，我们对价值函数进行了近似表示，引入了一个动作价值函数Q，这个函数由参数w描述，并接受状态s与动作a的输入，计算后得到近似的动作价值，即：</p>
</blockquote>
<script type="math/tex; mode=display">
Q(s,a,w)\equiv\pi(s,a)</script><h3 id="4-2-Policy-Network"><a href="#4-2-Policy-Network" class="headerlink" title="4.2 Policy Network"></a>4.2 Policy Network</h3><blockquote>
<p>Policy Gradient 基本思想就是通过更新Policy Network来直接更新策略</p>
</blockquote>
<p><strong>Policy Network：</strong>实际上就是一个神经网络，<strong>输入是状态，输出直接就是动作（不是Q值）</strong></p>
<p>输出一般有以下两种方式：</p>
<ul>
<li><strong>概率方式：</strong>输出某一个动作的概率</li>
<li><strong>确定性方式：</strong>输出具体的某一个动作</li>
</ul>
<p>举例如下图所示：输入当前的状态，输出action的概率分布，选择概率最大的一个action作为要执行的操作。</p>
<p><img src="/2019/07/23/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPolicy-Gradient%E7%90%86%E8%A7%A3/1.png" alt></p>
<p>在Policy Based强化学习方法下，我们采样类似的思路，只不过这时我们对策略进行近似表示。此时策略π可以被描述为一个包含参数θ的函数,即：</p>
<script type="math/tex; mode=display">
\pi_\theta(s,a) = P(a|s,\theta) \equiv\pi(a|s)</script><p><strong>Policy Based的方法就是使用参数θ来逼近拟合状态值函数V<em>π（s）和状态动作值函数Q</em>π（s，a）的分布。</strong></p>
<script type="math/tex; mode=display">
V_\theta(s) \equiv V_\pi(s)</script><script type="math/tex; mode=display">
Q_\theta(s,a) \equiv Q_\pi(s,a)</script><p>将策略表示成一个连续的函数后，我们就可以用连续函数的优化方法来寻找最优的策略了。而最常用的方法就是<strong>梯度上升法</strong>了，那么这个梯度对应的优化目标如何定义呢？</p>
<h3 id="4-3-更新Policy-Network"><a href="#4-3-更新Policy-Network" class="headerlink" title="4.3 更新Policy Network"></a>4.3 更新Policy Network</h3><blockquote>
<p>Policy Gradient不通过误差反向传播，它通过观测信息选出一个行为直接进行反向传播，当然出人意料的是他并没有误差，而是利用reward奖励直接对选择行为的可能性进行增强和减弱，好的行为会被增加下一次被选中的概率，不好的行为会被减弱下次被选中的概率。</p>
</blockquote>
<p>如果要更新 Policy Network 策略网络，或者说要使用梯度上升的方法来更新网络，需要有一个目标函数，且此时的策略Policy参数化为</p>
<script type="math/tex; mode=display">
\pi_\theta(s,a) = P(a|s,\theta) \equiv\pi(a|s)</script><p>使用model-free的方法，不借助与agent做决策而是将agent丢入不确定的动态环境下，不提供动态环境的信息，让agent自己瞎溜达根据所获得的策略信息更新参数。</p>
<p>对于所有强化学习的任务来说，其实<strong>目标都是使所有带衰减 reward 的累加期望最大</strong>。即如下式所示</p>
<script type="math/tex; mode=display">
J(\theta) = E{(r_1 + \gamma*r_2 + \gamma^2 * r_3 +...|\pi_\theta)}</script><h4 id="4-3-1-策略梯度的目标函数"><a href="#4-3-1-策略梯度的目标函数" class="headerlink" title="4.3.1 策略梯度的目标函数"></a>4.3.1 策略梯度的目标函数</h4><blockquote>
<p>策略梯度的目标函数主要有以下三种方式</p>
</blockquote>
<p>（1）最简单的目标函数就是初始状态收获的期望，即目标函数为：</p>
<script type="math/tex; mode=display">
J_1(\theta) = V_{\pi\theta}(s1) = E_{\pi\theta}[v1]</script><p>（2）有的问题没有明确的初始状态，那么我们的目标函数可以定义为平均价值，即</p>
<script type="math/tex; mode=display">
J_{av}V(\theta) = \sum_s d^{\pi\theta}(s)V^{\pi\theta}(s)</script><p>其中，$d^{\pi\theta}(s)$是基于策略πθ生成的马尔科夫链关于状态的静态分布</p>
<p>（3）使用每次time-step的平均奖励：</p>
<script type="math/tex; mode=display">
J_{av}R(\theta) = \sum{_s}d^{\pi\theta}(s)\sum{_a}\pi_{\theta}(s,a)R^a_s</script><p>为了改进策略，我们希望能够按照<code>J(θ)</code>的正梯度方向对π函数进行更新。假设θ是策略函数π的参数，本文的<strong>第一个基本结论</strong>为，无论上面哪种形式的<code>J(θ)</code>，其梯度都可以被表示为（后面会稍微证明一下）:</p>
<script type="math/tex; mode=display">
\nabla_\theta J(\theta) = E_{\pi\theta}[\nabla_\theta log\pi_\theta (s,a)Q_\pi(s,a)]</script><p>其中的</p>
<script type="math/tex; mode=display">
\nabla_\theta log\pi_\theta (s,a)</script><p>我们一般称为分值函数（score function）</p>
<p>我们暂定使用初始值法做目标函数</p>
<script type="math/tex; mode=display">
J(\theta) = V^{\pi\theta}(s1) = E_{\pi\theta}[v1] = E(r_1 + \gamma * r_2 + \gamma^2 *r_3 + ......|\pi_\theta )</script><p>对该目标函数进行最大化也就是在搜索一组参数向量θ，使得目标函数最大。这实际做的事改变策略概率而非改变行动轨迹的工作，所以我们接下来就要使用梯度下降求解</p>
<script type="math/tex; mode=display">
\nabla_\theta J(\theta)</script><p><img src="/2019/07/23/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPolicy-Gradient%E7%90%86%E8%A7%A3/2.png" alt></p>
<p>在连续策略上选用Gaussian Policy，在离散策略下采用softmax Policy</p>
<h4 id="4-3-2-策略梯度定理（The-policy-gradient-theorem）"><a href="#4-3-2-策略梯度定理（The-policy-gradient-theorem）" class="headerlink" title="4.3.2 策略梯度定理（The policy gradient theorem）"></a>4.3.2 策略梯度定理（The policy gradient theorem）</h4><blockquote>
<p>由于我们是基于model-free的所以无法事先知道动态环境的状态分布，而奖励函数又依赖于动作和状态分布，所以无法进行求导，所以我们需要把奖励采用无偏估计的方法计算出来，首先随机采样然后取均值来估计</p>
</blockquote>
<p>假设一个只有一步的MDP，对它使用策略梯度下降。πθ(s,a)表示关于参数θ的函数，映射是P(a|s,θ)。它在状态s所执行-a动作的奖励为r = R(s,a)。那么选择动作a的奖励为πθ(s,a) * R(s,a)：表示在该策略下所获得的奖励，在状态s的加权奖励为</p>
<script type="math/tex; mode=display">
J(\theta) = \sum_{a \epsilon A}\pi_\theta(s,a)R(s,a)</script><p><strong>推导过程如下：</strong></p>
<p>由于</p>
<script type="math/tex; mode=display">
J(\theta) = E_{\pi\theta}[R(s,a)]</script><p>因此</p>
<script type="math/tex; mode=display">
J(\theta) = \sum_{s\epsilon S}d(s) \sum_{a \epsilon A } \pi_\theta(s,a) R(s,a)</script><p>梯度为：</p>
<script type="math/tex; mode=display">
\nabla_\theta J(\theta) = \nabla_\theta  \sum_{s\epsilon S}d(s) \sum_{a \epsilon A } \pi_\theta(s,a) R(s,a)</script><script type="math/tex; mode=display">
\nabla_\theta J(\theta) =\sum_{s\epsilon S}d(s)\sum_{a \epsilon A } \nabla_\theta \pi_\theta(s,a) R(s,a)</script><p>假设策略πθ为零的时候可微，则</p>
<script type="math/tex; mode=display">
\because (log_a y)' = \frac{y' }{y * ln  a}</script><script type="math/tex; mode=display">
\therefore \nabla_\theta \pi_\theta(s,a) = \pi_\theta(s,a) * \frac{\nabla_\theta \pi_\theta(s,a)}  {\pi_\theta(s,a)} = \pi_\theta(s,a) *  \nabla_\theta log \pi_\theta(s,a)</script><script type="math/tex; mode=display">
\therefore \nabla_\theta J(\theta) = \sum_{s\epsilon S}d(s) \sum_{a \epsilon A } \pi_\theta(s,a)  \nabla_\theta log \pi_\theta(s,a)  R(s,a)</script><p>其中，d(s)是策略中的状态分布，π(s,a)是当前状态的动作概率分布，所以可以将策略梯度恢复成期望形式</p>
<script type="math/tex; mode=display">
\nabla_\theta J(\theta) = E[\nabla_\theta log \pi_\theta(s,a)  R(s,a)]</script><p>且</p>
<script type="math/tex; mode=display">
\nabla_\theta log \pi_\theta(s,a)</script><p>为分值函数（score function）</p>
<p>然后在将似然率方式的策略梯度方法应用到多步MDPs上，此时因为奖励值应该为过程中的多步奖励值之和，在这里使用Qπ(s,a)代替单步奖励值R(s,a)，对于任意可微的<strong>策略梯度</strong>如下（<strong>策略价值计算公式</strong>）：</p>
<script type="math/tex; mode=display">
\nabla_\theta J(\theta) = E_{\pi\theta}[\nabla_\theta log \pi_\theta(s,a) Q^{\pi\theta}(s,a)]</script><p>策略梯度定理详细推导过程如下</p>
<p><img src="/2019/07/23/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPolicy-Gradient%E7%90%86%E8%A7%A3/3.png" alt></p>
<p>策略梯度公式已经求出，并且我们的分值函数也能求出，但是关于策略函数πθ(s,a)又是如何确定的呢？</p>
<h4 id="4-3-3-策略函数的设计"><a href="#4-3-3-策略函数的设计" class="headerlink" title="4.3.3 策略函数的设计"></a>4.3.3 策略函数的设计</h4><blockquote>
<p>常用的策略函数有两种，分别是softmax策略函数和高斯策略函数</p>
</blockquote>
<p>现在回头看前面策略函数πθ(s,a)的设计，在之前它一直都是一个数学符号</p>
<ul>
<li><p><strong>softmax策略函数：</strong>主要应用于<strong>离散空间</strong>，softmax策略函数使用描述状态和行为的特征</p>
<script type="math/tex; mode=display">
\phi (s,a)</script><p>与参数θ的线性组合来权衡一个行为发生的几率，即：</p>
<script type="math/tex; mode=display">
\pi_\theta(s,a) = \frac{e^{\phi(s,a)^T \theta}}{ \sum_{b} e^{\phi(s,b)^T \theta}}</script><p>其中，</p>
<script type="math/tex; mode=display">
\phi_{sa}</script><p>表示状态-动作对的L维特征向量</p>
<p>所以，其分值函数为：</p>
<script type="math/tex; mode=display">
\nabla_\theta log\pi_\theta(s,a) = \phi(s,a) - E_{\pi\theta}[\phi(s,\cdot)]</script></li>
<li><p><strong>高斯策略函数：</strong>应用于<strong>连续行为空间</strong>的一种常用策略，通常对于均值有一个参数化的表示，同样也可以是一些特征的线性代数和：</p>
<script type="math/tex; mode=display">
\mu(s) = \phi(s)^T \theta</script><p>方差可以是固定值，也可以用参数化表示</p>
<p>行为对应于一个具体的数值，该数值以从</p>
<script type="math/tex; mode=display">
\mu(s)</script><p>为均值，</p>
<script type="math/tex; mode=display">
\sigma</script><p>为标准差的高斯分布中随机采样产生：</p>
<script type="math/tex; mode=display">
a \sim N(\mu(s),\sigma^2)</script><p>对应的分值函数是：</p>
<script type="math/tex; mode=display">
\nabla_\theta log \pi_\theta(s,a) = \frac{(a-\mu(s)) \phi(s)}{\sigma^2}</script><p>有了策略梯度和策略函数，我们就可以得到第一版的策略梯度算法了</p>
</li>
</ul>
<h3 id="4-4-蒙特卡洛策略梯度reinforce算法-不带基数"><a href="#4-4-蒙特卡洛策略梯度reinforce算法-不带基数" class="headerlink" title="4.4 蒙特卡洛策略梯度reinforce算法(不带基数)"></a>4.4 蒙特卡洛策略梯度reinforce算法(不带基数)</h3><blockquote>
<p>针对具有完整Episode的情况，我们应用策略梯度理论，使用随机梯度上升来更新参数，对于公式里的期望，我们通过采样的形式来替代，即时候用t时刻的奖励（return）作为当前策略下行为价值的无偏估计，表现为：返回v(t)作为Qπ（st，at）的无偏估计，使用价值函数V(s)近似代替了Qπ（s,a）</p>
</blockquote>
<p>策略梯度就可以为：</p>
<script type="math/tex; mode=display">
\Delta \theta_t = \alpha \nabla_\theta log \pi_\theta (s_t,a_t) v_t</script><p>参数更新：</p>
<script type="math/tex; mode=display">
\theta_{t+1} = \theta +\alpha \nabla_\theta log \pi_\theta (s_t,a_t) v_t</script><p><strong>算法描述：</strong>先随机初始化策略函数的参数θ，对当前策略下的一个Episode：</p>
<script type="math/tex; mode=display">
{(s_1,a_1,r_2,...,s_{T-1},a_{T-1},r_T) \sim \pi_\theta}</script><p>从t=1 到t = T-1的每一个时刻，计算个体获得的奖励v(t) ,然后更新参数θ。如此重复每一个Episode，直到结束.</p>
<p>算法伪代码如下：</p>
<p><img src="/2019/07/23/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPolicy-Gradient%E7%90%86%E8%A7%A3/4.png" alt></p>
<p>需要注意的是：</p>
<ul>
<li>只有当一个Episode结束之后，我们才能得到该轨迹上各个状态对应的v(t)。因此该方法需要先采样一个完整的轨迹，然后在倒回来对每个状态更新参数</li>
<li>上面描述的Vt就是奖励，使用v而不是G可能考虑的是用它作为价值的期望，从这里也能看出这是有噪声的采样</li>
</ul>
<p>但是该方法虽然是无偏的，但是方差非常大，所以运行速度也很慢。这个时候可以提出一个baseline来减少方差，那么如何选择baseline？</p>
<h3 id="4-5-蒙特卡洛策略梯度reinforce算法（带基数）"><a href="#4-5-蒙特卡洛策略梯度reinforce算法（带基数）" class="headerlink" title="4.5 蒙特卡洛策略梯度reinforce算法（带基数）"></a>4.5 蒙特卡洛策略梯度reinforce算法（带基数）</h3><blockquote>
<p>在某些情况下，可能会出现每一个动作的奖励值都是正数，但是由于我们是通过采样的方式进行更新的，所以这时候可以引入一个基数b，则原式需要修改为</p>
</blockquote>
<script type="math/tex; mode=display">
\nabla_\theta J(\theta) = E_{\pi\theta}[\nabla_\theta log \pi_\theta (s,a)[Q^{\pi\theta} (s,a) - b(s)]]</script><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>PG算法主要是直接对策略进行更新，看过原文，对原文中有很多都没有较好的理解，因此就在网上浏览了很多的博客加强自己的理解，现在仍然比较懵，可能也是刚开始的原因，后面就要开始真真学习DRL的Policy Based方法了</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://sealzhang.tk/iQuant/chapter_7.html">第七讲：强化学习策略梯度类方法</a></li>
<li><a href="https://wulc.me/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/">强化学习笔记（3）-从Policy Gradient 到A3C</a></li>
<li><a href="https://blog.csdn.net/qq_30615903/article/details/80747380">Policy Gradient算法详解</a></li>
<li><p><a href="https://www.ibm.com/developerworks/cn/analytics/library/ba-lo-deep-introduce-policy-gradient/index.html">深入浅出介绍策略梯度</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/statruidong/p/10663988.html">文献笔记</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/28348110">强化学习 第七讲 策略梯度</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>论文</category>
        <category>深度强化学习</category>
      </categories>
      <tags>
        <tag>DRL</tag>
        <tag>Policy Gradient</tag>
      </tags>
  </entry>
  <entry>
    <title>DRL论文阅读（四）之DQN改进网络结构（Dueling DQN）</title>
    <url>/2019/07/19/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%EF%BC%88Dueling-DQN%EF%BC%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>DDQN对DQN的目标Q值进行优化，去除max操作来减少过度估计的问题，Prioritized Replay DQN对DQN的经验回访池进行优化，给每个experience一个权重值，并按权重采样来优化算法提高训练速度，而这篇博客即将介绍的是Dueling DQN，对DQN的神经网络结构进行优化</p>
</blockquote>
<h2 id="一、论文题目"><a href="#一、论文题目" class="headerlink" title="一、论文题目"></a>一、论文题目</h2><blockquote>
<p><strong>Dueling Network Architectures for Deep Reinforcement Learning</strong> </p>
</blockquote>
<h2 id="二、研究目标"><a href="#二、研究目标" class="headerlink" title="二、研究目标"></a>二、研究目标</h2><blockquote>
<p>改进DQN的神经网络结构来加快学习速率</p>
</blockquote>
<h2 id="三、问题定义"><a href="#三、问题定义" class="headerlink" title="三、问题定义"></a>三、问题定义</h2><blockquote>
<p>DQN的神经网络结构优化问题</p>
</blockquote>
<ul>
<li>以往的DQN网络最后的输出为每个action的Q-values值（在某个确定的状态下）。但是对于许多状态，根本没有必要去预测每个action对应的Q-value值</li>
</ul>
<p><img src="/2019/07/19/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%EF%BC%88Dueling-DQN%EF%BC%89/1.png" alt></p>
<h2 id="四、Dueling-DQN方法介绍"><a href="#四、Dueling-DQN方法介绍" class="headerlink" title="四、Dueling DQN方法介绍"></a>四、Dueling DQN方法介绍</h2><blockquote>
<p>Dueling DQN将Q网络分成两部分:</p>
<p>第一部分仅仅与状态S有关，与具体要采用的动作A无关，这部分称为状态价值函数部分，记</p>
<script type="math/tex; mode=display">
V(s;\theta,\beta)</script><p>第二部分同时与状态S和动作A有关，这部分称为动作优势函数，记</p>
<script type="math/tex; mode=display">
A(s,a;\theta,\alpha)</script><p>其中，theta是卷积层参数，alpha和beta分别是两只路的全连接层参数</p>
</blockquote>
<h3 id="4-1-Dueling-DQN网络结构"><a href="#4-1-Dueling-DQN网络结构" class="headerlink" title="4.1 Dueling DQN网络结构"></a>4.1 Dueling DQN网络结构</h3><blockquote>
<p>Dueling DQN的网络结构如下图第二个网络结构</p>
</blockquote>
<p><img src="/2019/07/19/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%EF%BC%88Dueling-DQN%EF%BC%89/2.png" alt></p>
<p>如上图所示，第一个网络结构是一般的DQN网络模型(<strong>输入层</strong>-&gt;<strong>三个卷积层</strong>-&gt;<strong>两个全连接层</strong>-&gt;<strong>输出每个动作的Q值</strong>)</p>
<p>而第二个网络结构则是本文即将介绍的Dueling DQN网络模型，Dueling DQN将卷积层提取的抽象特征分流到两个支路中。其中上路代表的是状态价值函数V（s），表示静态的状态环境下本身具有的价值，它表明了状态的好坏程度；下路代表的是依赖状态的动作优势函数A（s，a），表示在某个状态下，选择某个action额外带来的价值，它表明了在这个状态下各个动作的相对好坏程度。最后这两路聚合在一起得到每个动作的Q值。</p>
<p>最终Dueling DQN可以如下图：</p>
<p><img src="/2019/07/19/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%EF%BC%88Dueling-DQN%EF%BC%89/3.png" alt></p>
<p><strong>注：</strong></p>
<ul>
<li><p><strong>V（s）：</strong>V（s）表示状态本身的好坏，一般为<strong>一个值</strong>（标量）</p>
</li>
<li><p><strong>A（s，a）：</strong>A（s，a）表示当前状态下采取的行动的好坏，一般为<strong>n个值</strong>，因此A（s，a）决定了策略</p>
</li>
</ul>
<h3 id="4-2-Dueling-DQN的Q值"><a href="#4-2-Dueling-DQN的Q值" class="headerlink" title="4.2 Dueling DQN的Q值"></a>4.2 Dueling DQN的Q值</h3><blockquote>
<p>由前面可知，Q值由V(s) 和A(s，a)合并得到，其Q值的公式如下</p>
</blockquote>
<p><img src="/2019/07/19/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%EF%BC%88Dueling-DQN%EF%BC%89/4.png" alt></p>
<p>其中，theta是卷积层参数，beta是V(s)的全连接层参数，alpha是A(s，a)的全连接参数</p>
<p>但是上面的公式也存在一些问题，效果并不好，因为它不具备可辨识性：<strong>通过Q值无法反过来确定V和A。</strong></p>
<p>因此，可以强制令所选择的贪婪动作优势函数为0：</p>
<p><img src="/2019/07/19/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%EF%BC%88Dueling-DQN%EF%BC%89/5.png" alt></p>
<p>这样我们就能得到唯一的值函数：</p>
<p><img src="/2019/07/19/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%EF%BC%88Dueling-DQN%EF%BC%89/6.png" alt></p>
<p>其中，a*如下：</p>
<p><img src="/2019/07/19/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%EF%BC%88Dueling-DQN%EF%BC%89/7.png" alt></p>
<p><strong>说明：</strong>在公式（8）中减去了一个最优的a所对应A值，这样A-A就为0了，A本身就是要寻找到最合适的a，然后确定A值，这样Q值就等于V值，并且V网络给出了最优V-值的估计，那么相应的A网络也给出了A的估计</p>
<p>但是在实际操作中，我们采用的方法是减去A的平均，本文的Dueling DQN方法就是采用的这种方式，因此，公式（8）修改为公式（9）：</p>
<p><img src="/2019/07/19/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%EF%BC%88Dueling-DQN%EF%BC%89/9.png" alt></p>
<p>虽然这样得到的V和A不在是具有真实意义的V和A，但是能增加稳定性（因为采用 <code>-max</code>会在更新时损害最优A的值），并且通过减去A的平均能有以下三个优点：</p>
<ul>
<li>平均值和最大值的测试结果非常类似，但是平均值公式比较简洁</li>
<li>没有改变A(s,a)的相对顺序，保证了该状态下各个动作的优势函数相对顺序不变，保留了Dueling DQN的Q值的所有性质</li>
<li>能够去除多余的自由度，提高算法的稳定性</li>
</ul>
<h3 id="4-3-举例说明"><a href="#4-3-举例说明" class="headerlink" title="4.3 举例说明"></a>4.3 举例说明</h3><blockquote>
<p>Dueling DQN能学习到在没有动作的影响下环境状态的价值V(s)。如下图</p>
</blockquote>
<p>下图中的左右两列分别表示V(s)和A(s,a)，图中的红色区域表示V(s)和A(s,a)所关注的地方</p>
<p>在训练过程中，V(s)关注地平线上是否有车辆出现（此时动作的选择影响不大）以及分数，如下图第一行；而A(s,a)则更关心会立即造成碰撞的车辆，此时动作的选择很重要，如下图第二行</p>
<p><img src="/2019/07/19/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%EF%BC%88Dueling-DQN%EF%BC%89/10.png" alt></p>
<h2 id="五、实验"><a href="#五、实验" class="headerlink" title="五、实验"></a>五、实验</h2><h3 id="5-2-实验方法"><a href="#5-2-实验方法" class="headerlink" title="5.2 实验方法"></a>5.2 实验方法</h3><blockquote>
<p>采用方法：Dueling DQN + DDQN + Prioritized Replay DQN</p>
</blockquote>
<p><img src="/2019/07/19/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%EF%BC%88Dueling-DQN%EF%BC%89/11.png" alt></p>
<p><strong>MDP：</strong></p>
<ul>
<li><strong>状态集：</strong>70（水平50，两垂直各10）</li>
<li><strong>行为集：</strong>5（上、下、左、右、无操作）</li>
<li><strong>转换函数：</strong>model free</li>
<li><strong>奖励函数：</strong>红点获得正面奖励</li>
<li><strong>起始状态：</strong>左下角</li>
<li><strong>结束状态：</strong>右下角</li>
</ul>
<h3 id="5-2-实验结果"><a href="#5-2-实验结果" class="headerlink" title="5.2 实验结果"></a>5.2 实验结果</h3><blockquote>
<p>当行为越多时，dueling DQN的性能就更好</p>
</blockquote>
<p><img src="/2019/07/19/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%EF%BC%88Dueling-DQN%EF%BC%89/12.png" alt></p>
<p>其中，5,10,20的含义是：5个行为时表示上下左右、无操作共五个，而10和20则分别是在5个行为的基础之上添加了5个和15个无操作行为。SE表示平方误差<img src="/2019/07/19/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BDQN%E6%94%B9%E8%BF%9B%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%EF%BC%88Dueling-DQN%EF%BC%89/13.png" alt></p>
<h2 id="六、结论"><a href="#六、结论" class="headerlink" title="六、结论"></a>六、结论</h2><blockquote>
<p>Dueling DQN的优势部分在于其有效学习状态值函数的能力</p>
</blockquote>
<ul>
<li>V函数可以得到更多的学习机会，因为以往一次只更新一个动作对应的Q值</li>
<li>V函数的泛化性更好，当动作越多时，优势越明显。直观上看，当有新动作加入时，它并不需要从零开始学习</li>
<li>因为Q函数在动作和状态的维度上的绝对值往往差很多，这会引起噪声和贪婪策略的突变，使用Dueling DQN可以改善这个问题</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>到目前为止，关于DQN的方法和有关DQN的优化方面，算是已经全部阅读完了，后续要在开始看其他的DRL论文，后面要加强的是这几种方法的一些小训练测试</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p>Dueling DQN论文理解：</p>
<ul>
<li><a href="https://blog.csdn.net/u013236946/article/details/73161586">博文1</a></li>
<li><a href="https://www.cnblogs.com/pinard/p/9923859.html">博文2</a></li>
<li><a href="https://www.jianshu.com/p/0fb311d96da4">博文3</a></li>
<li><a href="https://www.jianshu.com/p/0fb311d96da4">博文4</a></li>
</ul>
</li>
<li><p>DQN代码（还没有测试过）：<a href="http://lanbing510.info/2018/07/17/DQN.html">博文1</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>论文</category>
        <category>深度强化学习</category>
      </categories>
      <tags>
        <tag>DRL</tag>
        <tag>Dueling DQN</tag>
        <tag>DQN</tag>
      </tags>
  </entry>
  <entry>
    <title>python多个csv文件合并成一个csv</title>
    <url>/2019/05/26/%E8%AF%AD%E8%A8%80/Python/python%E5%A4%9A%E4%B8%AAcsv%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6%E6%88%90%E4%B8%80%E4%B8%AAcsv/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>在训练过程中，会产生多个txt转的csv文件，最后需要合并成一个完整的csv。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding:utf8 -*-</span><br><span class="line">import glob</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">csvx_list = glob.glob(&#x27;*.csv&#x27;)</span><br><span class="line">print(&#x27;总共发现%s个CSV文件&#x27;% len(csvx_list))</span><br><span class="line">time.sleep(2)</span><br><span class="line">print(&#x27;正在处理............&#x27;)</span><br><span class="line">for i in csvx_list:</span><br><span class="line">    fr = open(i,&#x27;r&#x27;).read()</span><br><span class="line">    with open(&#x27;csv_to_csv.csv&#x27;,&#x27;a&#x27;) as f:</span><br><span class="line">        f.write(fr)</span><br><span class="line">    print(&#x27;写入成功！&#x27;)</span><br><span class="line">print(&#x27;写入完毕！&#x27;)</span><br><span class="line">print(&#x27;10秒钟自动关闭程序！&#x27;)</span><br><span class="line">time.sleep(10)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python实现谷歌翻译PDF换行的问题</title>
    <url>/2019/05/14/%E8%AF%AD%E8%A8%80/Python/python%E5%AE%9E%E7%8E%B0%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91PDF%E6%8D%A2%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><h3 id="（1）浏览器-chrome"><a href="#（1）浏览器-chrome" class="headerlink" title="（1）浏览器 chrome"></a>（1）浏览器 chrome</h3><h3 id="（2）python编辑器：pycharm"><a href="#（2）python编辑器：pycharm" class="headerlink" title="（2）python编辑器：pycharm"></a>（2）python编辑器：pycharm</h3><h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><h3 id="1、-pycharm上安装pyperclip、webbrowserdownloader"><a href="#1、-pycharm上安装pyperclip、webbrowserdownloader" class="headerlink" title="1、 pycharm上安装pyperclip、webbrowserdownloader"></a>1、 pycharm上安装pyperclip、webbrowserdownloader</h3><p><img src="/2019/05/14/%E8%AF%AD%E8%A8%80/Python/python%E5%AE%9E%E7%8E%B0%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91PDF%E6%8D%A2%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98/pycharm.png" alt="logo"></p>
<h3 id="2、创建google-translate-py文件，并将如下代码复制粘贴至google-translate-py文件"><a href="#2、创建google-translate-py文件，并将如下代码复制粘贴至google-translate-py文件" class="headerlink" title="2、创建google_translate.py文件，并将如下代码复制粘贴至google_translate.py文件"></a>2、创建google_translate.py文件，并将如下代码复制粘贴至google_translate.py文件</h3><blockquote>
<p>添加了百度翻译，运行这个py程序，将会在谷歌窗口弹出两个页面，分别是谷歌翻译和百度翻译</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> pyperclip</span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"></span><br><span class="line">copyBuff = <span class="string">&#x27; &#x27;</span></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="comment">#convinent to change num</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> num == <span class="number">1</span>:</span><br><span class="line">    num = num + <span class="number">1</span></span><br><span class="line">    copyedText = pyperclip.paste()</span><br><span class="line">    <span class="keyword">if</span> copyBuff != copyedText:</span><br><span class="line">        copyBuff = copyedText</span><br><span class="line">    normalizedText = copyBuff.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    url = <span class="string">&#x27;https://translate.google.cn/#en/zh-CN/&#x27;</span> + normalizedText</span><br><span class="line">    webbrowser.<span class="built_in">open</span>(url)</span><br><span class="line">    url = <span class="string">&#x27;https://fanyi.baidu.com/#en/zh/&#x27;</span> + normalizedText</span><br><span class="line">    webbrowser.<span class="built_in">open</span>(url)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3、运行"><a href="#3、运行" class="headerlink" title="3、运行"></a>3、运行</h3><h4 id="（1）在pdf上任意选择一个段落，复制"><a href="#（1）在pdf上任意选择一个段落，复制" class="headerlink" title="（1）在pdf上任意选择一个段落，复制"></a>（1）在pdf上任意选择一个段落，复制</h4><p><img src="/2019/05/14/%E8%AF%AD%E8%A8%80/Python/python%E5%AE%9E%E7%8E%B0%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91PDF%E6%8D%A2%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98/pdf.png" alt="logo"></p>
<h4 id="（2）运行google-translate-py程序，chrome浏览器会自动弹出一个google翻译界面，刚才复制的内容就会直接翻译"><a href="#（2）运行google-translate-py程序，chrome浏览器会自动弹出一个google翻译界面，刚才复制的内容就会直接翻译" class="headerlink" title="（2）运行google_translate.py程序，chrome浏览器会自动弹出一个google翻译界面，刚才复制的内容就会直接翻译"></a>（2）运行google_translate.py程序，chrome浏览器会自动弹出一个google翻译界面，刚才复制的内容就会直接翻译</h4><p><img src="/2019/05/14/%E8%AF%AD%E8%A8%80/Python/python%E5%AE%9E%E7%8E%B0%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91PDF%E6%8D%A2%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98/google_trans.png" alt="logo"></p>
<h2 id="注：在换行出现‘-’的情况下，可能没有处理，即如下情况："><a href="#注：在换行出现‘-’的情况下，可能没有处理，即如下情况：" class="headerlink" title="注：在换行出现‘-’的情况下，可能没有处理，即如下情况："></a>注：在换行出现‘-’的情况下，可能没有处理，即如下情况：</h2><pre><code>在di-rectly这里，google翻译中没有解决，不过不影响翻译
We present the first deep learning model to successfully learn control policies di-rectly from high-dimensional sensory input using reinforcement learning. 
</code></pre>]]></content>
      <categories>
        <category>语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>初始Airsim（五）之PX4、Mavros控制</title>
    <url>/2019/08/13/Airsim/%E5%88%9D%E5%A7%8BAirsim%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPX4%E3%80%81Mavros%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p><a href="http://wiki.ros.org/mavros#mavros.2BAC8-Plugins.sys_status">mavros</a>包允许在运行ROS的计算机、支持MAVLink的飞控板以及支持MAVLink的地面站之间通讯。MAVROS可以用来与任何支持MAVLink的飞控板通讯。</p>
<p>基于mavros和mavlink协议，实现对airsim的控制</p>
</blockquote>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<p>针对<a href="https://ldgyyf.cn/2019/07/10/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BQGC%E3%80%81SITL%E3%80%81%E6%88%B7%E5%A4%96UE4%E5%9C%BA%E6%99%AF%E9%85%8D%E7%BD%AE/">上一节</a>中mavros的配置，在安装<strong>./install_geographiclib_datasets.sh（二进制安装）</strong>或者<strong>./src/mavros/mavros/scripts/install_geographiclib_datasets.sh（源码安装）</strong>时，最好加上<strong>proxychains4</strong>，即翻墙安装，因为在重新测试的过程中，初始没有加proxychains4，启动launch文件时，一直报<strong>GeographicLib exception</strong>相关的错误。</p>
</blockquote>
<p><strong>错误提示信息</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[FATAL] [<span class="number">1455208235.573568497</span>]: UAS: GeographicLib exception: File <span class="keyword">not</span> readable /usr/share/GeographicLib/geoids/egm96-<span class="number">5.</span>pgm | Run install_geographiclib_dataset.sh script <span class="keyword">in</span> order to install Geoid Model dataset!</span><br><span class="line"></span><br><span class="line">================================================================================REQUIRED process [mavros-<span class="number">2</span>] has died!</span><br><span class="line">process has died [pid <span class="number">2396</span>, exit code -<span class="number">6</span>, cmd /home/ubuntu/catkin_ws_wyz/devel/lib/mavros/mavros_node __name:=mavros __log:=/home/ubuntu/.ros/log/c5fc1ef8-d0dc-<span class="number">11e5</span>-89a3-00044b65bbf5/mavros-<span class="number">2.</span>log].</span><br><span class="line">log file: /home/ubuntu/.ros/log/c5fc1ef8-d0dc-<span class="number">11e5</span>-89a3-00044b65bbf5/mavros-<span class="number">2</span>*.log</span><br><span class="line">Initiating shutdown!</span><br><span class="line">================================================================================</span><br><span class="line">[mavros-<span class="number">2</span>] killing on exit</span><br><span class="line">[rosout-<span class="number">1</span>] killing on exit</span><br><span class="line">[master] killing on exit</span><br><span class="line">shutting down processing monitor...</span><br><span class="line"><span class="meta">... </span>shutting down processing monitor complete</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p><img src="/2019/08/13/Airsim/%E5%88%9D%E5%A7%8BAirsim%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPX4%E3%80%81Mavros%E6%8E%A7%E5%88%B6/1.png" alt></p>
<p>并且，参考网上的方法都没有作用：<a href="https://blog.csdn.net/sinat_31135199/article/details/78329851">参考1</a>、<a href="https://blog.csdn.net/abc869788668/article/details/78323395">参考2</a>，其实这两种方法说的都是同一种，即加权限重新安装。</p>
<p>最后在安装时，添加了proxychains4后，则没有报错，上一节也已经更新。</p>
<h2 id="一、mavros控制"><a href="#一、mavros控制" class="headerlink" title="一、mavros控制"></a>一、mavros控制</h2><blockquote>
<p>前提：已经按照<a href="https://ldgyyf.cn/2019/07/10/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BQGC%E3%80%81SITL%E3%80%81%E6%88%B7%E5%A4%96UE4%E5%9C%BA%E6%99%AF%E9%85%8D%E7%BD%AE/">上一节</a>的配置，安装了mavros、mavlink及PX4的编译等，且settings.json也配置为PX4</p>
</blockquote>
<h3 id="1-1-启动环境"><a href="#1-1-启动环境" class="headerlink" title="1.1 启动环境"></a>1.1 启动环境</h3><p><strong>（1）编译PX4</strong></p>
<blockquote>
<p>编译，等待UDP的连接</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd PX4/Firmware</span><br><span class="line">make posix_sitl_ekf2 none_iris</span><br></pre></td></tr></table></figure>
<p><strong>（2）运行UE4Editor，启动UE4环境，加载airsim</strong></p>
<blockquote>
<p><strong>UE4Editor</strong>文件在<strong>~/UnrealEngine/Engine/Binaries/Linux/</strong>目录下</p>
</blockquote>
<p>双击运行UE4Editor即可</p>
<p><strong>（3）启动px4.launch文件</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ~/catkin_ws</span><br><span class="line">source devel/setup.bash</span><br><span class="line">roslaunch mavros px4.launch fcu_url:=<span class="string">&quot;udp://:14540@127.0.0.1:14557&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-mavros控制"><a href="#1-2-mavros控制" class="headerlink" title="1.2 mavros控制"></a>1.2 mavros控制</h3><blockquote>
<p>基于UE4Editor启动，并加载的Rolling环境</p>
</blockquote>
<p><strong>（1）起飞降落的命令控制</strong></p>
<blockquote>
<p>根据GPS的坐标进行起飞降落控制，目前还不能通过命令实现drone的飞行</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rosservice call /mavros/cmd/arming true</span><br><span class="line">rosservice call /mavros/cmd/takeoff -- <span class="number">0</span> <span class="number">0</span> <span class="number">47.6420</span> -<span class="number">122.1404</span> <span class="number">126.1</span></span><br><span class="line">rosservice call /mavros/cmd/land -- <span class="number">0</span> <span class="number">0</span> <span class="number">47.6420</span> -<span class="number">122.1404</span> <span class="number">123</span></span><br></pre></td></tr></table></figure>
<h4 id="1-2-1-代码组成"><a href="#1-2-1-代码组成" class="headerlink" title="1.2.1 代码组成"></a>1.2.1 代码组成</h4><blockquote>
<p>主要是参考<a href="https://github.com/darknight-007/docking">darknight-007/docking</a>的代码，并对他/她的代码进行测试，发现存在一点问题，于是在testVelocityControl.py中添加了自己的代码，目前飞行没有问题，主要基于速度控制实现了一个长方形的飞行控制，其轨迹图见3.4</p>
<p>直接查看<a href="https://github.com/ldgcug/Airsim_Controller/tree/master/Mavros_Controller">所有代码</a></p>
</blockquote>
<p>主要包含三部分，PID.py、VelocityController.py、testVelocityControl.py。其中PID.py和VelocityController.py和参考的代码完全一致，没有做改动，主要是修改testVelocityControl.py等</p>
<h4 id="1-2-2-testVelocityControl-py结构"><a href="#1-2-2-testVelocityControl-py结构" class="headerlink" title="1.2.2 testVelocityControl.py结构"></a>1.2.2 testVelocityControl.py结构</h4><blockquote>
<p>目前起飞时通过设置的GPS坐标来起飞的，即不论drone在哪，都会在设置的GPS点处进行起飞，虽然降落同样也是设置的和起飞的GPS坐标差不多，但是它是当前位置降落</p>
<p>关于起飞和降落这一部分还存在一些问题</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#轨迹点（4个轨迹点，起飞后依次到达，实现长方形的飞行控制）</span></span><br><span class="line">navigate = [</span><br><span class="line"> [<span class="number">0</span>,<span class="number">7</span>,<span class="number">3</span>],</span><br><span class="line"> [<span class="number">30</span>,<span class="number">7</span>,<span class="number">3</span>],</span><br><span class="line"> [<span class="number">30</span>,<span class="number">0</span>,<span class="number">3</span>],</span><br><span class="line"> [<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>]</span><br><span class="line">]</span><br><span class="line">navigate_count = <span class="number">0</span> <span class="comment">#用于记录当前的目标点</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuadController</span>:</span></span><br><span class="line">    <span class="comment">#给target目标赋值</span></span><br><span class="line">    target = Pose()</span><br><span class="line">    target.position.x = navigate[navigate_count][<span class="number">0</span>]</span><br><span class="line">    target.position.y = navigate[navigate_count][<span class="number">1</span>]</span><br><span class="line">    target.position.z = navigate[navigate_count][<span class="number">2</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.desire_v = <span class="number">1.5</span> <span class="comment">#设定期望速度</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">            <span class="comment">#起飞后，要将mode修改为OFFBOARD才能控制飞行</span></span><br><span class="line">            set_mode = rospy.ServiceProxy(<span class="string">&#x27;/mavros/set_mode&#x27;</span>,SetMode)</span><br><span class="line">            mode = set_mode(custom_mode = <span class="string">&#x27;OFFBOARD&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;change mode to OFFBOARD:&#x27;</span>,count)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="comment">#且必须要发布topic才行，不发布修改mode不起作用（还不太明白是为啥）</span></span><br><span class="line">            self.des_vel = vController.update(self.cur_pose)</span><br><span class="line">            vel_pub.publish(self.des_vel)</span><br><span class="line">            rate.sleep()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> self.isReadyToFly:</span><br><span class="line">                x1,y1,z1 = self.cur_pose.pose.position.x,self.cur_pose.pose.position.y,self.cur_pose.pose.position.z            </span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>((x1 - self.target.position.x) **<span class="number">2</span> +(y1 - self.target.position.y)**<span class="number">2</span> +(z1 - self.target.position.z) **<span class="number">2</span>) &lt; <span class="number">0.5</span>**<span class="number">2</span>:<span class="comment">#设定一个阈值，使得无人机当前到达目标区域附近即可更新目标点</span></span><br><span class="line">                    <span class="comment">#通过切换mode为LOITER实现悬停，否则会执行之前的速度指令</span></span><br><span class="line">                    set_mode = rospy.ServiceProxy(<span class="string">&#x27;/mavros/set_mode&#x27;</span>,SetMode)</span><br><span class="line">                    mode = set_mode(custom_mode = <span class="string">&#x27;LOITER&#x27;</span>)</span><br><span class="line">                    rate.sleep()</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">#到达当前目标点后，更新目标点的下一个位置</span></span><br><span class="line">          			<span class="keyword">global</span> navigate_count</span><br><span class="line">                    navigate_count += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> navigate_count &lt; <span class="built_in">len</span>(navigate):</span><br><span class="line">                        self.target.position.x = navigate[navigate_count][<span class="number">0</span>]</span><br><span class="line">                        self.target.position.y = navigate[navigate_count][<span class="number">1</span>]</span><br><span class="line">                        self.target.position.z = navigate[navigate_count][<span class="number">2</span>]</span><br><span class="line">                        vController.setTarget(self.target)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&#x27;cur_pose:&#x27;</span>,[x1,y1,z1])</span><br><span class="line">                <span class="comment">#速度归一化为期望速度</span></span><br><span class="line">                self.des_vel = vController.update(self.cur_pose)</span><br><span class="line">                vx,vy = self.des_vel.twist.linear.x,self.des_vel.twist.linear.y</span><br><span class="line">                vx_ = <span class="number">1.0</span> * vx / (math.sqrt(vx**<span class="number">2</span> + vy**<span class="number">2</span>)) *self.desire_v</span><br><span class="line">                vy_ = <span class="number">1.0</span> * vy / (math.sqrt(vx**<span class="number">2</span> + vy**<span class="number">2</span>)) *self.desire_v</span><br><span class="line"></span><br><span class="line">                self.des_vel.twist.linear.x,self.des_vel.twist.linear.y = vx_,vy_</span><br><span class="line">                </span><br><span class="line">                vel_pub.publish(self.des_vel)<span class="comment">#发布速度指令</span></span><br><span class="line">           <span class="comment">#到达所有轨迹点后，降落，同样要先悬停，进行速度清0</span></span><br><span class="line">           <span class="keyword">if</span> navigate_count &gt;= <span class="built_in">len</span>(navigate):</span><br><span class="line">                set_mode = rospy.ServiceProxy(<span class="string">&#x27;/mavros/set_mode&#x27;</span>,SetMode)</span><br><span class="line">                mode = set_mode(custom_mode = <span class="string">&#x27;LOITER&#x27;</span>)</span><br><span class="line">                rate.sleep()</span><br><span class="line">                self.land()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">arming</span>(<span class="params">self</span>):</span> <span class="comment">#解锁</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">takeoff</span>(<span class="params">self</span>):</span><span class="comment">#起飞</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">land</span>(<span class="params">self</span>):</span><span class="comment">#降落</span></span><br></pre></td></tr></table></figure>
<h2 id="二、rviz安装及测试"><a href="#二、rviz安装及测试" class="headerlink" title="二、rviz安装及测试"></a>二、rviz安装及测试</h2><blockquote>
<p>安装rviz，是为了实时显示drone的飞行轨迹，轨迹也可以用QGC来显示，但是没有rviz好</p>
</blockquote>
<h3 id="2-1-rviz安装"><a href="#2-1-rviz安装" class="headerlink" title="2.1 rviz安装"></a>2.1 rviz安装</h3><p><strong>安装rviz</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-rviz</span><br></pre></td></tr></table></figure>
<p><strong>环境检测及安装</strong></p>
<p>在使用<strong>rosmake rviz</strong>命令的时候，提示我没有rosmake，因此在第2步，先安装了rosmake</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rosdep install rviz</span><br><span class="line">sudo apt-get install python-rosmake</span><br><span class="line">rosmake rviz</span><br></pre></td></tr></table></figure>
<h3 id="2-2-运行rviz"><a href="#2-2-运行rviz" class="headerlink" title="2.2 运行rviz"></a>2.2 运行rviz</h3><p><strong>在新终端运行roscore，启动rosmaster</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure>
<p><strong>在另一个新终端运行rviz</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rosrun rviz rviz</span><br></pre></td></tr></table></figure>
<p><img src="/2019/08/13/Airsim/%E5%88%9D%E5%A7%8BAirsim%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPX4%E3%80%81Mavros%E6%8E%A7%E5%88%B6/2.png" alt></p>
<h2 id="三、rviz实时显示mavros控制飞行轨迹"><a href="#三、rviz实时显示mavros控制飞行轨迹" class="headerlink" title="三、rviz实时显示mavros控制飞行轨迹"></a>三、rviz实时显示mavros控制飞行轨迹</h2><h3 id="3-1-启动UE4环境"><a href="#3-1-启动UE4环境" class="headerlink" title="3.1 启动UE4环境"></a>3.1 启动UE4环境</h3><blockquote>
<p>参照<strong>1.1节</strong></p>
</blockquote>
<h3 id="3-2-mavros控制代码里面发布相关topic"><a href="#3-2-mavros控制代码里面发布相关topic" class="headerlink" title="3.2 mavros控制代码里面发布相关topic"></a>3.2 mavros控制代码里面发布相关topic</h3><p>通过使用<strong>nav_msgs/Path</strong>来实现，其结构为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">std_msgs/Header header</span><br><span class="line">	uint32 seq</span><br><span class="line">	time stamp</span><br><span class="line">	string frame_id</span><br><span class="line">geometry_msgs/PoseStamped[] poses</span><br><span class="line">	std_msgs/Header header</span><br><span class="line">		uint32 seq</span><br><span class="line">		time stamp</span><br><span class="line">		string frame_id</span><br><span class="line">	geometry_msgs/Pose pose</span><br><span class="line">		geometry_msgs/Point position</span><br><span class="line">			float64 x</span><br><span class="line">			float64 y</span><br><span class="line">			float64 z</span><br><span class="line">		geometry_msgs/Quaternion orientation</span><br><span class="line">			float64 x</span><br><span class="line">			float64 y</span><br><span class="line">			float64 z		</span><br><span class="line">			float64 w</span><br></pre></td></tr></table></figure>
<p>（1）添加相关代码（不完整）</p>
<blockquote>
<p>主要是先获取drone的当前姿态数据，其数据结构见上，然后将该数据用nav_msgs/Path发布出去</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> Pose, PoseStamped</span><br><span class="line"><span class="keyword">from</span> nav_msgs.msg <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">path = Path()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuadController</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        pos_sub = rospy.Subscriber(<span class="string">&#x27;/mavros/local_position/pose&#x27;</span>, PoseStamped, callback=self.pos_cb)<span class="comment">#通过该topic获取其相对位置坐标</span></span><br><span class="line">        self.path_pub = rospy.Publisher(<span class="string">&#x27;/path&#x27;</span>,Path,queue_size=<span class="number">10</span>)<span class="comment">#发布topic</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pos_cb</span>(<span class="params">self, msg</span>):</span></span><br><span class="line">        <span class="comment"># print msg</span></span><br><span class="line">        self.cur_pose = msg</span><br><span class="line">        <span class="keyword">global</span> path</span><br><span class="line">        path.header = msg.header</span><br><span class="line">        pose = PoseStamped()</span><br><span class="line">        pose.header = msg.header</span><br><span class="line">        pose.pose = msg.pose </span><br><span class="line">        path.poses.append(pose)</span><br><span class="line">        self.path_pub.publish(path)</span><br></pre></td></tr></table></figure>
<h3 id="3-3-启动rviz"><a href="#3-3-启动rviz" class="headerlink" title="3.3 启动rviz"></a>3.3 启动rviz</h3><blockquote>
<p>目前是通过在终端输入命令来启动rviz的，其实也可以写在launch文件里面</p>
</blockquote>
<p><strong>（1）命令启动rviz</strong></p>
<p>​    由于<strong>3.1节</strong>里启动了px4.launch文件，因此不需要再启动roscore</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun rviz rviz</span><br></pre></td></tr></table></figure>
<p><strong>（2）添加代码中发布的相关的topic</strong></p>
<p>在打开的rviz界面中，点击Add，然后选择添加Path</p>
<p><img src="/2019/08/13/Airsim/%E5%88%9D%E5%A7%8BAirsim%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPX4%E3%80%81Mavros%E6%8E%A7%E5%88%B6/3.png" alt></p>
<p>则会看到，左边多出了Path的相关信息，然后在Topic的右侧写入刚才发布的topic（/path）</p>
<p><img src="/2019/08/13/Airsim/%E5%88%9D%E5%A7%8BAirsim%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPX4%E3%80%81Mavros%E6%8E%A7%E5%88%B6/4.png" alt></p>
<h3 id="3-4-运行mavros控制代码"><a href="#3-4-运行mavros控制代码" class="headerlink" title="3.4 运行mavros控制代码"></a>3.4 运行mavros控制代码</h3><p><strong>rviz显示</strong></p>
<p>则在rviz里面能看到飞行轨迹了，我这里设置的mavros是飞行一个长方形的轨迹</p>
<p><img src="/2019/08/13/Airsim/%E5%88%9D%E5%A7%8BAirsim%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPX4%E3%80%81Mavros%E6%8E%A7%E5%88%B6/5.png" alt></p>
<h3 id="3-5-说明："><a href="#3-5-说明：" class="headerlink" title="3.5 说明："></a><strong>3.5 说明</strong>：</h3><p>​    airsim里面也自带了一些rviz.launch文件，进行启动，我之前有测试过，启动launch之后，然后显示飞行轨迹时有报错，因此不采用这种方法，也没有去解决该错误，下图左边框出部分是报错信息，也没有成功显示飞行轨迹</p>
<p><img src="/2019/08/13/Airsim/%E5%88%9D%E5%A7%8BAirsim%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPX4%E3%80%81Mavros%E6%8E%A7%E5%88%B6/6.png" alt></p>
<p>​    顺带介绍一下，运行airsim里自带的这些launch文件的步骤，<a href="https://github.com/microsoft/AirSim/tree/master/ros/src/airsim_ros_pkgs">github详情</a></p>
<p>​    <strong>（1）升级cmake</strong>（要求cmake3.10版本以上）</p>
<blockquote>
<font color="red">注意一定不要先卸载cmake，即执行**sudo apt-get autoremove cmake**命令，执行该命令后，会把ros的一些相关依赖和mavros给卸载掉，若执行了则又需要重装ros</font>

</blockquote>
<p>​        首先，去<a href="https://cmake.org/download/">cmake官网</a>手动下载cmake3.12.2，或者直接快捷跳到<a href="https://github.com/Kitware/CMake/releases?after=v3.13.4">github</a>下载地址，我这里采用命令下载</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wget proxychains4 https://github.com/Kitware/CMake/releases/download/v3<span class="number">.12</span><span class="number">.2</span>/cmake-<span class="number">3.12</span><span class="number">.2</span>-Linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>
<p>​        解压：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar zxvf cmake-<span class="number">3.12</span><span class="number">.2</span>-Linux-x86_64.tar.gz </span><br></pre></td></tr></table></figure>
<p>​        创建软连接：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo mv cmake-<span class="number">3.12</span><span class="number">.2</span>-Linux-x86_64 /opt/cmake-<span class="number">3.12</span><span class="number">.2</span></span><br><span class="line">sudo ln -sf /opt/cmake-<span class="number">3.12</span><span class="number">.2</span>/<span class="built_in">bin</span>/* /usr/<span class="built_in">bin</span></span><br></pre></td></tr></table></figure>
<p>​        最后，查看cmake版本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmake --version</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">cmake version <span class="number">3.12</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line">CMake suite maintained <span class="keyword">and</span> supported by Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure>
<p>​    <strong>（2）编译</strong>(catkin build或catkin_make都可以)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd Airsim/ros</span><br><span class="line">catkin build</span><br></pre></td></tr></table></figure>
<p>​    <strong>（3）运行</strong></p>
<p>​        只是为了显示rviz，运不运行airsim_node.launch都无所谓，但是添加了airsim_node.launch之后，rviz界面会多出一个东西，具体见下图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">source devel/setup.bash</span><br><span class="line">roslaunch airsim_ros_pkgs airsim_node.launch</span><br><span class="line">roslaunch airsim_tutorial_pkgs rviz.launch </span><br></pre></td></tr></table></figure>
<p><img src="/2019/08/13/Airsim/%E5%88%9D%E5%A7%8BAirsim%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPX4%E3%80%81Mavros%E6%8E%A7%E5%88%B6/7.png" alt></p>
<p><strong>但是这个ros里面的airsim_node.launch，应该就发布了一些可以控制的命令topic，关于具体的控制，则没有去研究</strong></p>
<h2 id="四、rviz实时显示自定义ros控制飞行轨迹"><a href="#四、rviz实时显示自定义ros控制飞行轨迹" class="headerlink" title="四、rviz实时显示自定义ros控制飞行轨迹"></a>四、rviz实时显示自定义ros控制飞行轨迹</h2><blockquote>
<p>这个关于自定义的ros控制，然后用rviz去显示器轨迹的时候，真的耗了我不少的功夫，原因在于网上的教程或说明更多的是教你如何写代码，并且用的是别人创建好的ros包，而且没有去获取机器人的位置。关于自己定义的ros包，没有什么说明。总之与我所面临的问题不太一样，后来经过测试，终于发现了其问题所在。</p>
</blockquote>
<p>由于对ros和rviz不太熟，甚至最开始一度觉得自定义的ros，需要发布tf信息即可。而我的ros发布的消息并没有tf。直接说问题吧</p>
<p><strong>原来的mavros控制下，其rviz相关代码如下，然后在rviz里面输入发布的topic就可以了</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> Pose, PoseStamped</span><br><span class="line"><span class="keyword">from</span> nav_msgs.msg <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">path = Path()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuadController</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        pos_sub = rospy.Subscriber(<span class="string">&#x27;/mavros/local_position/pose&#x27;</span>, PoseStamped, callback=self.pos_cb)<span class="comment">#通过该topic获取其相对位置坐标</span></span><br><span class="line">        self.path_pub = rospy.Publisher(<span class="string">&#x27;/path&#x27;</span>,Path,queue_size=<span class="number">10</span>)<span class="comment">#发布topic</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pos_cb</span>(<span class="params">self, msg</span>):</span></span><br><span class="line">        self.cur_pose = msg</span><br><span class="line">        <span class="keyword">global</span> path</span><br><span class="line">        path.header = msg.header</span><br><span class="line">        pose = PoseStamped()</span><br><span class="line">        pose.header = msg.header</span><br><span class="line">        pose.pose = msg.pose </span><br><span class="line">        path.poses.append(pose)</span><br><span class="line">        self.path_pub.publish(path)</span><br></pre></td></tr></table></figure>
<p>自定义ros的rviz显示，按照道理，和上面代码差不多，但有部分需要修改，最开始按照上面的代码运行后，在rviz里显示下面的错误（这个错误其实就是一直在提示map的Fixed Frame不对，不存在，在mavros是不需要这个地方的）</p>
<p><img src="/2019/08/13/Airsim/%E5%88%9D%E5%A7%8BAirsim%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPX4%E3%80%81Mavros%E6%8E%A7%E5%88%B6/8.png" alt></p>
<p>后来，将其代码进行修改，代码参考了<a href="http://www.yanglajiao.com/article/wendox/53905501">玩转四旋翼无人机</a>，但是并不需要进行tf广播，而且里面的tf广播好像还存在问题。修改后的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> nav_msgs.msg <span class="keyword">import</span>  Path</span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> PoseStamped</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">path</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.pose_sub = rospy.Subscriber(<span class="string">&#x27;/drone1/airsimPose&#x27;</span>,PoseStamped,self.add_pose_path)</span><br><span class="line">        self.path_pub = rospy.Publisher(<span class="string">&#x27;/drone1/path&#x27;</span>, Path, queue_size=<span class="number">10</span>)</span><br><span class="line">        self.path = Path()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_pose_path</span>(<span class="params">self,msg</span>):</span></span><br><span class="line">        self.path.header = msg.header</span><br><span class="line">        self.path.header.frame_id = <span class="string">&#x27;drone1&#x27;</span> <span class="comment">#这个frame_id很重要</span></span><br><span class="line">        pose = PoseStamped()</span><br><span class="line">        pose.header = msg.header</span><br><span class="line">        pose.pose = msg.pose</span><br><span class="line">        <span class="comment">#下面的取相反值，是因为airsim的坐标和rviz的坐标不太一样，相反就刚好是其轨迹</span></span><br><span class="line">        <span class="comment">#否则，airsim里向上值是负的，而rviz会显示的向下飞</span></span><br><span class="line">        pose.pose.position.z = -pose.pose.position.z</span><br><span class="line">        pose.pose.position.y = -pose.pose.position.y</span><br><span class="line">        self.path.poses.append(pose)</span><br><span class="line">        self.path_pub.publish(self.path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;path&#x27;</span>,[msg.pose.position])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    rospy.init_node(<span class="string">&#x27;airsim_path&#x27;</span>)</span><br><span class="line">    mpath = path()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">        rospy.spin()</span><br></pre></td></tr></table></figure>
<p>然后，在rviz里面，将Fixed Frame修改为自定义的frame_id，这样就不会报错。</p>
<p><img src="/2019/08/13/Airsim/%E5%88%9D%E5%A7%8BAirsim%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPX4%E3%80%81Mavros%E6%8E%A7%E5%88%B6/9.png" alt></p>
<p><strong>最后，显示自定义的ros控制的飞行轨迹</strong></p>
<p><img src="/2019/08/13/Airsim/%E5%88%9D%E5%A7%8BAirsim%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8BPX4%E3%80%81Mavros%E6%8E%A7%E5%88%B6/10.png" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>关于mavros，现在理解的还不太多，但对其控制逻辑也有了一个基本的了解，其逻辑如下</p>
</blockquote>
<p>（1） <strong>解锁：</strong>首先完成解锁动作</p>
<p>（2） <strong>起飞：</strong>控制起飞（从特定的经纬度处起飞，暂时还没有对起飞进行优化）</p>
<p>（3） <strong>模式切换：</strong>起飞后，若要执行飞行命令，则需要将mode切换为OFFBOARD（并且在切换的过程中，必须要发布命令，否则切换无效）。</p>
<p>（4） <strong>给定轨迹点：</strong>通过距离差值给速度，并且设定期望速度，最后对速度进行归一化。</p>
<p>（5） <strong>悬停：</strong>到达目标点后，需要进行悬停操作，否则，之前的速度还会存在影响，即对速度进行清零操作。Mavros的悬停操作为切换模式，将mode切换为LOITER即可实现悬停。</p>
<p>（6） <strong>降落：</strong>降落前，最好也先悬停一下，在进行降落。同样，和起飞类似，也是给定经纬度进行降落，不过降落好像并不是在特定位置降落。</p>
<p>若要实现多个轨迹点的操作，则在到达目标点并悬停后，重新给定一个轨迹点即可。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p><a href="https://answers.ros.org/question/278616/how-to-create-a-publisher-about-trajectory-path-then-show-it-in-rviz/">rviz python代码</a></p>
</li>
<li><p><a href="https://blog.csdn.net/baidu_38485156/article/details/81201079">ros的可视化工具rviz的安装与运行</a></p>
</li>
<li><p><a href="https://www.linuxidc.com/Linux/2018-09/154165.htm">cmake升级</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Airsim</category>
      </categories>
      <tags>
        <tag>Airsim</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>初始Airsim（六）之多机控制</title>
    <url>/2019/08/19/Airsim/%E5%88%9D%E5%A7%8BAirsim%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8B%E5%A4%9A%E6%9C%BA%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>之前的控制部分都是在单个drone或car的条件下进行控制的，本篇博客将基于多个drone进行控制</p>
</blockquote>
<h2 id="一、settings-json设置"><a href="#一、settings-json设置" class="headerlink" title="一、settings.json设置"></a>一、settings.json设置</h2><blockquote>
<p>多机的配置如下，其中如果要设置某一个drone的初始角度，则只需要修改Yaw的值即可。</p>
<p>Yaw的值一般取<strong>[0,90,-90,180]</strong>这4个值中的一个</p>
<p>这里的drone2的Yaw设置的为180，通过api获取的yaw为-3.14</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;SeeDocsAt&quot;</span>: <span class="string">&quot;https://github.com/Microsoft/AirSim/blob/master/docs/settings.md&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;SettingsVersion&quot;</span>: <span class="number">1.2</span>,</span><br><span class="line">  <span class="attr">&quot;SimMode&quot;</span>:<span class="string">&quot;Multirotor&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;Vehicles&quot;</span>:&#123;</span><br><span class="line">  	<span class="attr">&quot;Drone1&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;VehicleType&quot;</span>:<span class="string">&quot;SimpleFlight&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;X&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Y&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Z&quot;</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;Pitch&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Roll&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Yaw&quot;</span>:<span class="number">0</span></span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;Drone2&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;VehicleType&quot;</span>:<span class="string">&quot;SimpleFlight&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;X&quot;</span>:<span class="number">4</span>,<span class="attr">&quot;Y&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Z&quot;</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;Pitch&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Roll&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Yaw&quot;</span>:<span class="number">180</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二、代码部分"><a href="#二、代码部分" class="headerlink" title="二、代码部分"></a>二、代码部分</h2><blockquote>
<p>直接查看<a href="https://github.com/ldgcug/Airsim_Controller">所有代码</a></p>
</blockquote>
<h3 id="2-1-API控制"><a href="#2-1-API控制" class="headerlink" title="2.1 API控制"></a>2.1 API控制</h3><p> <strong>connect_simulator.py</strong></p>
<blockquote>
<p>下面只展示一些比较核心的代码</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connect</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,vehicle_name</span>):</span></span><br><span class="line">		<span class="keyword">if</span> vehicle_name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">			vehicle_name = <span class="string">&#x27;Drone1&#x27;</span></span><br><span class="line"></span><br><span class="line">		self.vehicle_name = vehicle_name</span><br><span class="line"></span><br><span class="line">		<span class="comment"># connect simulator</span></span><br><span class="line">		self.client = airsim.MultirotorClient()</span><br><span class="line">		self.client.confirmConnection()</span><br><span class="line">		self.client.enableApiControl(<span class="literal">True</span>,vehicle_name)</span><br><span class="line">		self.client.armDisarm(<span class="literal">True</span>,vehicle_name)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># get data from airsim</span></span><br><span class="line">	<span class="comment">#获取drone1的姿态信息 </span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">getQuadrotorPose_Drone1</span>(<span class="params">self</span>):</span> <span class="comment">#(x,y,z)</span></span><br><span class="line">		init_drone1_x,init_drone1_y,init_drone1_z = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span><span class="comment">#由于在settings.json里面可能会给drone设置坐标，因此这里的xyz的值要与json文件里的值进行对应，之所以这样做，是因为不论在json文件中给drone设定何处的xyz坐标值，实际获取的drone的初始坐标都是（0,0,0），因此才加上了初始值</span></span><br><span class="line">		state = self.client.simGetVehiclePose(vehicle_name=self.vehicle_name)</span><br><span class="line">		state.position.x_val += init_drone1_x</span><br><span class="line">		state.position.y_val += init_drone1_y</span><br><span class="line">		state.position.z_val += init_drone1_z</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;position:&#x27;</span>,[state.position.x_val,state.position.y_val,state.position.z_val])</span><br><span class="line">		<span class="keyword">return</span> state</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获取drone2的姿态信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getQuadrotorPose_Drone2</span>(<span class="params">self</span>):</span> <span class="comment">#(x,y,z)</span></span><br><span class="line">		init_drone2_x,init_drone2_y,init_drone2_z = <span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span> <span class="comment">#这里的x=4就对应于json中的drone2的x坐标值</span></span><br><span class="line">		state = self.client.simGetVehiclePose(vehicle_name=self.vehicle_name)</span><br><span class="line">		state.position.x_val += init_drone2_x</span><br><span class="line">		state.position.y_val += init_drone2_y</span><br><span class="line">		state.position.z_val += init_drone2_z</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;position:&#x27;</span>,[state.position.x_val,state.position.y_val,state.position.z_val])</span><br><span class="line">		<span class="keyword">return</span> state</span><br></pre></td></tr></table></figure>
<h4 id="2-1-1位置控制"><a href="#2-1-1位置控制" class="headerlink" title="2.1.1位置控制"></a>2.1.1位置控制</h4><p><strong>Drone1控制</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> connect_simulator <span class="keyword">import</span> Connect  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Navigate</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.keyControl = Connect(vehicle_name=<span class="string">&#x27;Drone1&#x27;</span>)</span><br><span class="line">        <span class="comment"># 这里又设定了一个初始坐标值，是为了后面的计算，并且这里的初始值也与json里对应</span></span><br><span class="line">		self.init_drone1_x,self.init_drone1_y,self.init_drone1_z = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">auto_navigate</span>(<span class="params">self,navigate_point,direction</span>):</span></span><br><span class="line">		x,y,z,v = navigate_point[<span class="number">0</span>],navigate_point[<span class="number">1</span>],navigate_point[<span class="number">2</span>],navigate_point[<span class="number">3</span>] <span class="comment">#轨迹点目标值</span></span><br><span class="line">		<span class="comment"># 这里之所以要减去初始值，是因为在使用moveByPosition的API时，无人机并不是到目标值就停止</span></span><br><span class="line">        <span class="comment"># 例如，xyz的初始坐标为（0,0,0），目标点（20,0,-3），无人机会在起飞后，最终到达（20,0,-3）停止</span></span><br><span class="line">        <span class="comment"># 若xyz的初始坐标为(10,0,0)，目标点（20,0,-3），无人机最终会到达（30,0,-3）处停止</span></span><br><span class="line">        <span class="comment"># 因此，在获取到目标点之后，减去xyz的初始值即可</span></span><br><span class="line">        x -= self.init_drone1_x</span><br><span class="line">		y -= self.init_drone1_y</span><br><span class="line">		z -= self.init_drone1_z</span><br><span class="line">		self.keyControl.moveByPosition(x,y,z,v)</span><br><span class="line">		self.keyControl.getQuadrotorPose_Drone1()</span><br><span class="line">		<span class="keyword">if</span> direction == <span class="string">&quot;left&quot;</span>:</span><br><span class="line">			self.keyControl.yaw_left()</span><br><span class="line">		<span class="keyword">elif</span> direction == <span class="string">&quot;right&quot;</span>:</span><br><span class="line">			self.keyControl.yaw_right()</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;direction&#x27;</span>,self.keyControl.direction)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">	control = Navigate()</span><br><span class="line">	<span class="comment"># 设定轨迹点</span></span><br><span class="line">	navigate_point = [</span><br><span class="line">		[<span class="number">78</span>,-<span class="number">1.5</span>,-<span class="number">3</span>,<span class="number">5</span>],</span><br><span class="line">		[<span class="number">78</span>,-<span class="number">126</span>,-<span class="number">3</span>,<span class="number">5</span>],</span><br><span class="line">		[<span class="number">124</span>,-<span class="number">130</span>,-<span class="number">3</span>,<span class="number">5</span>],</span><br><span class="line">		[<span class="number">124</span>,<span class="number">124</span>,-<span class="number">3</span>,<span class="number">5</span>],</span><br><span class="line">		[<span class="number">3</span>,<span class="number">124</span>,-<span class="number">3</span>,<span class="number">5</span>],</span><br><span class="line">		[<span class="number">0</span>,<span class="number">0</span>,-<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">	]</span><br><span class="line">    <span class="comment"># 设定转角方向</span></span><br><span class="line">	direction =[</span><br><span class="line">		<span class="string">&quot;left&quot;</span>,</span><br><span class="line">		<span class="string">&quot;right&quot;</span>,</span><br><span class="line">		<span class="string">&quot;right&quot;</span>,</span><br><span class="line">		<span class="string">&quot;right&quot;</span>,</span><br><span class="line">		<span class="string">&quot;right&quot;</span>,</span><br><span class="line">		<span class="string">&quot;right&quot;</span></span><br><span class="line">	]</span><br><span class="line"></span><br><span class="line">	control.keyControl.takeoff()</span><br><span class="line"></span><br><span class="line">	control.keyControl.getQuadrotorPose_Drone1()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(navigate_point)):</span><br><span class="line">		control.auto_navigate(navigate_point[i],direction[i])</span><br><span class="line"></span><br><span class="line">	control.keyControl.land()</span><br><span class="line"></span><br><span class="line">	control.keyControl.reset()</span><br></pre></td></tr></table></figure>
<p><strong>Drone2控制</strong></p>
<p>和Drone1的控制代码基本完全一样，只是xyz的初始坐标值可能需要更换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> connect_simulator <span class="keyword">import</span> Connect  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Navigate</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">		self.keyControl = Connect(vehicle_name=<span class="string">&#x27;Drone2&#x27;</span>)</span><br><span class="line">		self.init_drone2_x,self.init_drone2_y,self.init_drone2_z = <span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">auto_navigate</span>(<span class="params">self,navigate_point,direction</span>):</span></span><br><span class="line">		x,y,z,v = navigate_point[<span class="number">0</span>],navigate_point[<span class="number">1</span>],navigate_point[<span class="number">2</span>],navigate_point[<span class="number">3</span>]</span><br><span class="line">		x -= self.init_drone2_x</span><br><span class="line">		y -= self.init_drone2_y</span><br><span class="line">		z -= self.init_drone2_z</span><br></pre></td></tr></table></figure>
<h4 id="2-1-2-速度控制"><a href="#2-1-2-速度控制" class="headerlink" title="2.1.2 速度控制"></a>2.1.2 速度控制</h4><p><strong>Drone1控制</strong></p>
<p>关于下面代码中的坐标系转换问题，<a href="https://zhuanlan.zhihu.com/p/22597258">坐标转换参考</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">NED = Body * A (yaw，直接获得的偏航角)</span><br><span class="line">Body = NED * A(-yaw，获得的偏航角取负)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> connect_simulator <span class="keyword">import</span> Connect  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Move</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">		self.keyControl = Connect(vehicle_name=<span class="string">&#x27;Drone1&#x27;</span>)</span><br><span class="line">		self.desire_v = <span class="number">2</span> <span class="comment">#期望速度</span></span><br><span class="line">		self.thr = <span class="number">2</span>  <span class="comment"># 半径阈值</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># NED坐标转换为BODY坐标</span></span><br><span class="line">    <span class="comment"># 在实际控制过程中，从airsim中获取的姿态信息是属于NED坐标，而我们控制drone则属于BODY坐标控制</span></span><br><span class="line">    <span class="comment"># BODY坐标控制，即以drone的机头为前方，+x表示正前方飞行，+y表示正右方飞行，不论机头朝向何方，都是该控制规则</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">NED_TO_BODY</span>(<span class="params">self,ned_x,ned_y,ned_z</span>):</span></span><br><span class="line">		imu = self.keyControl.getImuInfo() <span class="comment"># 获取drone的imu信息</span></span><br><span class="line">		self.hudu = -imu[<span class="number">2</span>] <span class="comment"># imu:(pitch,roll,yaw)，获取的yaw取值范围为（-3.14，+3.14），即实际获取的为弧度信息；这里为什么添加了一个“-”，取相反值，是因为 NED = BODY * A (A表示转换矩阵)，如果要获取BODY坐标，则  BODY = NED * A^(-1)，这里涉及到了逆矩阵，还要考虑矩阵是否可逆；因此可以用  BODY = NED * A ，A里面的参数为-yaw即可</span></span><br><span class="line">		self.angle = <span class="built_in">round</span>(self.hudu,<span class="number">2</span>) / <span class="number">3.14</span> * <span class="number">180</span> <span class="comment">#将弧度转换为角度</span></span><br><span class="line">		NED = np.array([ned_x,ned_y,ned_z]) <span class="comment">#转换为数组形式，方便后面矩阵相乘</span></span><br><span class="line">		matrix_B_N = np.array([[<span class="built_in">round</span>(math.cos(self.hudu),<span class="number">2</span>),<span class="built_in">round</span>(math.sin(self.hudu),<span class="number">2</span>),<span class="number">0</span>],</span><br><span class="line">							   [<span class="built_in">round</span>(-math.sin(self.hudu),<span class="number">2</span>),<span class="built_in">round</span>(math.cos(self.hudu),<span class="number">2</span>),<span class="number">0</span>],</span><br><span class="line">							   [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]]) <span class="comment">#转换矩阵A</span></span><br><span class="line">		Body = NED.dot(matrix_B_N) <span class="comment"># 矩阵乘法</span></span><br><span class="line">		<span class="keyword">return</span> Body</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">auto_movebyvelocity</span>(<span class="params">self,target_position,direction</span>):</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># 这里获取的xyz,x1,y1都是属于NED坐标</span></span><br><span class="line">		x,y,t = target_position[<span class="number">0</span>],target_position[<span class="number">1</span>],target_position[<span class="number">3</span>]</span><br><span class="line">		state = self.keyControl.getQuadrotorPose_Drone1() <span class="comment">#获取的实际坐标值已经在connect中进行了添加初始化坐标值操作</span></span><br><span class="line">		x1,y1 = state.position.x_val,state.position.y_val</span><br><span class="line"></span><br><span class="line">		delta_x ,delta_y = x-x1,y-y1 <span class="comment"># 获取xy方向的差值</span></span><br><span class="line">		vx,vy = delta_x / t,delta_y / t  <span class="comment"># 设定t=1，根据distance得到v</span></span><br><span class="line"></span><br><span class="line">		body = self.NED_TO_BODY(vx,vy,<span class="number">0</span>) <span class="comment">#将NED坐标转换为BODY坐标</span></span><br><span class="line">		vx,vy = body[<span class="number">0</span>],body[<span class="number">1</span>] <span class="comment">#BODY</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment"># 对速度进行归一化，并用vx_,vy_表示真正要输入的速度控制值</span></span><br><span class="line">		vx_ = vx / (math.sqrt(<span class="built_in">pow</span>(delta_x,<span class="number">2</span>) + <span class="built_in">pow</span>(delta_y,<span class="number">2</span>))) * self.desire_v</span><br><span class="line">		vy_ = vy / (math.sqrt(<span class="built_in">pow</span>(delta_x,<span class="number">2</span>) + <span class="built_in">pow</span>(delta_y,<span class="number">2</span>))) * self.desire_v</span><br><span class="line">		vz = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span> math.sqrt(<span class="built_in">pow</span>((x - x1),<span class="number">2</span>) + <span class="built_in">pow</span>((y-y1),<span class="number">2</span>)) &gt; self.thr:<span class="comment">#判断是否到达目标区域</span></span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> math.sqrt(<span class="built_in">pow</span>((x - x1),<span class="number">2</span>) + <span class="built_in">pow</span>((y-y1),<span class="number">2</span>)) &lt;= self.thr:</span><br><span class="line">				self.keyControl.moveByVelocity(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>) <span class="comment"># 到达目标区域，速度赋值为0</span></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				delta_x ,delta_y = x-x1,y-y1</span><br><span class="line">				vx,vy = delta_x / t,delta_y / t</span><br><span class="line"></span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&#x27;target position:&#x27;</span>,[x,y],<span class="string">&#x27;current position:&#x27;</span>,[x1,y1])</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&#x27;vx:&#x27;</span>,vx,<span class="string">&#x27;vy:&#x27;</span>,vy)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">				body = self.NED_TO_BODY(vx,vy,<span class="number">0</span>)</span><br><span class="line">				vx,vy = body[<span class="number">0</span>],body[<span class="number">1</span>] <span class="comment">#BODY</span></span><br><span class="line"></span><br><span class="line">				</span><br><span class="line">				vx_ = vx / (math.sqrt(<span class="built_in">pow</span>(delta_x,<span class="number">2</span>) + <span class="built_in">pow</span>(delta_y,<span class="number">2</span>))) * self.desire_v</span><br><span class="line">				vy_ = vy / (math.sqrt(<span class="built_in">pow</span>(delta_x,<span class="number">2</span>) + <span class="built_in">pow</span>(delta_y,<span class="number">2</span>))) * self.desire_v</span><br><span class="line"></span><br><span class="line">				temp_vx_,temp_vy_ = vx_,vy_</span><br><span class="line">                </span><br><span class="line">				<span class="comment"># 根据不同的方向，实现+x永远朝着drone的机头正前方飞行</span></span><br><span class="line">				<span class="keyword">if</span> self.direction == <span class="string">&quot;North&quot;</span>:</span><br><span class="line">					<span class="built_in">print</span>(<span class="string">&#x27;North&#x27;</span>)</span><br><span class="line">					vx_,vy_ = temp_vx_,temp_vy_ <span class="comment"># x,y</span></span><br><span class="line">				<span class="keyword">elif</span> self.direction == <span class="string">&quot;West&quot;</span>: </span><br><span class="line">					<span class="built_in">print</span>(<span class="string">&#x27;West&#x27;</span>)</span><br><span class="line">					vx_,vy_ = temp_vy_,-temp_vx_ <span class="comment"># y -x</span></span><br><span class="line">				<span class="keyword">elif</span> self.direction == <span class="string">&quot;South&quot;</span>:</span><br><span class="line">					<span class="built_in">print</span>(<span class="string">&#x27;South&#x27;</span>)</span><br><span class="line">					vx_,vy_ = -temp_vx_,-temp_vy_  <span class="comment"># -x -y</span></span><br><span class="line">				<span class="keyword">elif</span> self.direction == <span class="string">&quot;East&quot;</span>:</span><br><span class="line">					<span class="built_in">print</span>(<span class="string">&#x27;East&#x27;</span>)</span><br><span class="line">					vx_,vy_ = -temp_vy_,temp_vx_ <span class="comment"># -y x</span></span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&#x27;vx_:&#x27;</span>,vx_,<span class="string">&#x27;vy_:&#x27;</span>,vy_)</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">				self.keyControl.moveByVelocity(vx_,vy_,vz,t)<span class="comment"># 发送归一化后的速度控制指令，这里的t=1，即实现每秒飞行 1 * self.desire_v 米，因此不需要添加sleep操作</span></span><br><span class="line"></span><br><span class="line">			state = self.keyControl.getQuadrotorPose_Drone1()<span class="comment">#获取新的坐标值</span></span><br><span class="line">			x1,y1 = state.position.x_val,state.position.y_val</span><br><span class="line">        <span class="comment"># 进行转角操作</span></span><br><span class="line">        <span class="keyword">if</span> direction == <span class="string">&quot;left&quot;</span>:</span><br><span class="line">			self.keyControl.yaw_left()</span><br><span class="line">		<span class="keyword">elif</span> direction == <span class="string">&quot;right&quot;</span>:</span><br><span class="line">			self.keyControl.yaw_right()</span><br><span class="line"></span><br><span class="line">		self.direction = self.keyControl.direction <span class="comment">#获取新的无人机机头朝向</span></span><br><span class="line"></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;direction&#x27;</span>,self.keyControl.direction)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	control = Move()</span><br><span class="line"></span><br><span class="line">	cmd_vel = [</span><br><span class="line">		[<span class="number">78.0</span>,-<span class="number">1.5</span>,-<span class="number">3</span>,<span class="number">1.0</span>],</span><br><span class="line">		[<span class="number">78.0</span>,-<span class="number">127.0</span>,-<span class="number">3</span>,<span class="number">1.0</span>],</span><br><span class="line">		[<span class="number">125.0</span>,-<span class="number">127.0</span>,-<span class="number">3</span>,<span class="number">1.0</span>],</span><br><span class="line">		[<span class="number">125.0</span>,<span class="number">125.5</span>,-<span class="number">3</span>,<span class="number">1.0</span>],</span><br><span class="line">		[<span class="number">1.5</span>,<span class="number">124.0</span>,-<span class="number">3</span>,<span class="number">1.0</span>],</span><br><span class="line">		[<span class="number">0.0</span>,<span class="number">0.0</span>,-<span class="number">3</span>,<span class="number">1.0</span>]</span><br><span class="line">	]</span><br><span class="line">	direction = [</span><br><span class="line">		<span class="string">&quot;left&quot;</span>,</span><br><span class="line">		<span class="string">&quot;right&quot;</span>,</span><br><span class="line">		<span class="string">&quot;right&quot;</span>,</span><br><span class="line">		<span class="string">&quot;right&quot;</span>,</span><br><span class="line">		<span class="string">&quot;right&quot;</span>,</span><br><span class="line">		<span class="string">&quot;right&quot;</span></span><br><span class="line">	]</span><br><span class="line"></span><br><span class="line">	control.keyControl.takeoff()</span><br><span class="line">	control.direction = control.keyControl.direction</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;init direction&#x27;</span>,control.direction)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cmd_vel)):</span><br><span class="line">		control.auto_movebyvelocity(cmd_vel[i],direction[i])</span><br><span class="line"></span><br><span class="line">	control.keyControl.land()</span><br><span class="line">	control.keyControl.reset()</span><br></pre></td></tr></table></figure>
<p><strong>Drone2控制</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> connect_simulator <span class="keyword">import</span> Connect  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Move</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">		self.keyControl = Connect(vehicle_name=<span class="string">&#x27;Drone2&#x27;</span>)</span><br><span class="line">		self.desire_v = <span class="number">2</span></span><br><span class="line">		self.thr = <span class="number">2</span></span><br><span class="line">其余的部分基本完全一样，只是在获取坐标的时候，将state = self.keyControl.getQuadrotorPose_Drone1()换成state = self.keyControl.getQuadrotorPose_Drone2()即可</span><br></pre></td></tr></table></figure>
<h3 id="2-2-UDP控制"><a href="#2-2-UDP控制" class="headerlink" title="2.2 UDP控制"></a>2.2 UDP控制</h3><blockquote>
<p>目前暂时不考虑两台机器间的UDP通信控制，和API控制差不多的思想</p>
<p>但在UDP的单机控制代码中，还没有将速度控制修改为2.1里面的坐标系转换和期望速度控制，这点需要注意</p>
</blockquote>
<h4 id="2-2-1-位置控制"><a href="#2-2-1-位置控制" class="headerlink" title="2.2.1 位置控制"></a>2.2.1 位置控制</h4><h4 id="2-2-2-速度控制"><a href="#2-2-2-速度控制" class="headerlink" title="2.2.2 速度控制"></a>2.2.2 速度控制</h4><h3 id="2-3-ROS控制"><a href="#2-3-ROS控制" class="headerlink" title="2.3 ROS控制"></a>2.3 ROS控制</h3><p> <strong>connect_simulator.py</strong></p>
<blockquote>
<p>更多的介绍和API控制中，稍微有些区别的地方，公共的地方将不再显示</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connect</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,vehicle_name</span>):</span></span><br><span class="line">        self.count = <span class="number">0</span> <span class="comment"># 添加了计数器，用于判断ros的发送与接收频率是否接近一致</span></span><br><span class="line">        self.lock = threading.Lock() <span class="comment"># 添加线程锁</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># control command </span></span><br><span class="line">    <span class="comment"># 例如，在起飞的过程中，添加了一个线程锁，确保该指令执行完成</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">takeoff</span>(<span class="params">self</span>):</span></span><br><span class="line">		self.lock.acquire()</span><br><span class="line">		self.client.takeoffAsync(vehicle_name=self.vehicle_name).join()</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;takeoff finished&#x27;</span>)</span><br><span class="line">		self.lock.release() </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#在进行速度控制，通过count判断，这边接收到了多少天来自控制程序中的ros命令</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveByVelocity</span>(<span class="params">self,data</span>):</span></span><br><span class="line">		self.lock.acquire()</span><br><span class="line">		vx,vy,vz,t = data.vx,data.vy,data.vz,data.t</span><br><span class="line">		self.client.moveByVelocityAsync(vx,vy,vz,t,vehicle_name=self.vehicle_name).join()</span><br><span class="line">		self.count += <span class="number">1</span></span><br><span class="line">		<span class="comment">#self.client.moveByVelocityAsync(0,0,0,0.01).join()</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;linear velocity is:&#x27;</span>,vx,vy,vz)</span><br><span class="line">		self.lock.release() </span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;count:&#x27;</span>,self.count)</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># get data from airsim</span></span><br><span class="line">    <span class="comment"># 和之前有点不同的是，在这里获取drone的坐标值时，没有在加上初始坐标值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getQuadrotorPose</span>(<span class="params">self</span>):</span> <span class="comment">#(x,y,z)</span></span><br><span class="line">		state = self.client.simGetVehiclePose(vehicle_name=self.vehicle_name)</span><br><span class="line">		<span class="comment">#print(&#x27;position:&#x27;,[state.position.x_val,state.position.y_val,state.position.z_val])</span></span><br><span class="line">		<span class="keyword">return</span> state</span><br></pre></td></tr></table></figure>
<p><strong>drone1_pub_topic.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> connect_simulator <span class="keyword">import</span> Connect</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirsimPubTopic</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">		self.vehicle_name = <span class="string">&#x27;Drone1&#x27;</span></span><br><span class="line">		self.client = Connect(vehicle_name=self.vehicle_name)</span><br><span class="line">        <span class="comment">#在发布的时候，一定要注意topic名称，这里为/drone1/airsimPose，要将drone1和drone2区分开</span></span><br><span class="line">        self.rotor_pose_pub 	=	rospy.Publisher(<span class="string">&#x27;/drone1/airsimPose&#x27;</span>,PoseStamped,queue_size=<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># init difference coordinates (x,y,z)</span></span><br><span class="line">		<span class="comment"># =========  when I set the (x,y,z) in settings.json ,I got the coordinates will be (0,0,0) ==========</span></span><br><span class="line">		<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">			&quot;Drone1&quot;:&#123;</span></span><br><span class="line"><span class="string">			      &quot;VehicleType&quot;:&quot;SimpleFlight&quot;,</span></span><br><span class="line"><span class="string">			      &quot;X&quot;:0,&quot;Y&quot;:0,&quot;Z&quot;:0</span></span><br><span class="line"><span class="string">    		&#125;</span></span><br><span class="line"><span class="string">		&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 在这里设定了初始的对应于json的xyz坐标，但是设置的都为0，即相当于没有设置，在控制程序中进行了相关操作</span></span><br><span class="line">		self.ue4_x = <span class="number">0</span></span><br><span class="line">		self.ue4_y = <span class="number">0</span></span><br><span class="line">		self.ue4_z = <span class="number">0</span></span><br><span class="line">        self.rate = rospy.Rate(<span class="number">250</span>)  <span class="comment"># 频率设定的为250hz</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetAirsimPose</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">		multirotor_state = self.client.getQuadrotorPose()</span><br><span class="line">		pose = multirotor_state.position</span><br><span class="line">		orientation = multirotor_state.orientation</span><br><span class="line"></span><br><span class="line">		self.simPose = PoseStamped()</span><br><span class="line">        <span class="comment"># 在该处加上了xyz的初始坐标，而不是在connect里面添加</span></span><br><span class="line">		self.simPose.pose.position.x = pose.x_val + self.ue4_x</span><br><span class="line">		self.simPose.pose.position.y = pose.y_val + self.ue4_y</span><br><span class="line">		self.simPose.pose.position.z = pose.z_val + self.ue4_z</span><br><span class="line">		self.simPose.pose.orientation.w = orientation.w_val</span><br><span class="line">		self.simPose.pose.orientation.x = orientation.x_val</span><br><span class="line">		self.simPose.pose.orientation.y = orientation.y_val</span><br><span class="line">		self.simPose.pose.orientation.z = orientation.z_val</span><br><span class="line">		self.simPose.header.stamp = rospy.Time.now()</span><br><span class="line">		self.simPose.header.seq = <span class="number">1</span></span><br><span class="line">		self.simPose.header.frame_id = <span class="string">&quot;airsim_pose&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>drone1_sub_topic.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> connect_simulator <span class="keyword">import</span> Connect</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirsimSubTopic</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">		self.vehicle_name = <span class="string">&#x27;Drone1&#x27;</span></span><br><span class="line">		self.client = Connect(vehicle_name=self.vehicle_name)</span><br><span class="line">		self.direction = self.client.direction</span><br><span class="line">        <span class="comment"># 这里订阅的topic的名称也为drone1</span></span><br><span class="line">        self.subTakeoff = rospy.Subscriber(<span class="string">&quot;/drone1/airsim/takeoff&quot;</span>,Empty,self.SendTakeoff)</span><br><span class="line">        self.rate = rospy.Rate(<span class="number">250</span>)  <span class="comment"># 250hz</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#在这里进行了转换，即保证+x永远朝着机头正前方飞行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SendVelocity</span>(<span class="params">self,data</span>):</span></span><br><span class="line">		<span class="comment">#self.client.moveByVelocity(data.vx,data.vy,data.vz,data.t)</span></span><br><span class="line">		vx,vy,vz,t = data.vx,data.vy,data.vz,data.t</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;velocity direction&#x27;</span>,self.direction)</span><br><span class="line">		<span class="keyword">if</span> self.direction == <span class="string">&quot;North&quot;</span>:</span><br><span class="line">			data.vx ,data.vy = vx,vy <span class="comment"># x,y</span></span><br><span class="line">		<span class="keyword">elif</span> self.direction == <span class="string">&quot;West&quot;</span>:</span><br><span class="line">			data.vx ,data.vy = vy,-vx <span class="comment"># y,-x</span></span><br><span class="line">		<span class="keyword">elif</span> self.direction == <span class="string">&quot;South&quot;</span>: </span><br><span class="line">			data.vx ,data.vy = -vx,-vy <span class="comment"># -x,-y</span></span><br><span class="line">		<span class="keyword">elif</span> self.direction == <span class="string">&quot;East&quot;</span>:</span><br><span class="line">			data.vx ,data.vy = -vy,vx <span class="comment"># -y,x</span></span><br><span class="line">		self.client.moveByVelocity(data)</span><br></pre></td></tr></table></figure>
<p><strong>drone2_pub_topic.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> connect_simulator <span class="keyword">import</span> Connect</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirsimPubTopic</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">		self.vehicle_name = <span class="string">&#x27;Drone2&#x27;</span></span><br><span class="line">		self.client = Connect(vehicle_name=self.vehicle_name)</span><br><span class="line">        <span class="comment">#这里的名称为/drone2/airsimPose</span></span><br><span class="line">        self.rotor_pose_pub 	=	rospy.Publisher(<span class="string">&#x27;/drone2/airsimPose&#x27;</span>,PoseStamped,queue_size=<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 这里设置了drone2的坐标，其实相当于没有设置</span></span><br><span class="line">        self.ue4_x = <span class="number">0</span></span><br><span class="line">		self.ue4_y = <span class="number">0</span></span><br><span class="line">		self.ue4_z = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">		self.rate = rospy.Rate(<span class="number">250</span>)  <span class="comment"># 10hz</span></span><br><span class="line">其他部分基本一样</span><br></pre></td></tr></table></figure>
<p><strong>drone2_sub_topic.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> connect_simulator <span class="keyword">import</span> Connect</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirsimSubTopic</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">		self.vehicle_name = <span class="string">&#x27;Drone2&#x27;</span></span><br><span class="line">		self.client = Connect(vehicle_name=self.vehicle_name)</span><br><span class="line">		self.direction = self.client.direction</span><br><span class="line">		<span class="comment">#subScriber</span></span><br><span class="line">        <span class="comment"># 名称不一样，为drone2</span></span><br><span class="line">		self.subTakeoff = rospy.Subscriber(<span class="string">&quot;/drone2/airsim/takeoff&quot;</span>,Empty,self.SendTakeoff)</span><br><span class="line">        self.rate = rospy.Rate(<span class="number">250</span>)  <span class="comment"># 250hz</span></span><br></pre></td></tr></table></figure>
<p><strong>ros_airsim.launch</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line">	&lt;group ns = <span class="string">&quot;Drone1&quot;</span>&gt;</span><br><span class="line">		&lt;node pkg=<span class="string">&quot;ros_controller&quot;</span> name=<span class="string">&quot;airsim_sub_topic&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;airsim_sub_topic.py&quot;</span> output=<span class="string">&quot;screen&quot;</span> /&gt;</span><br><span class="line">		&lt;node pkg=<span class="string">&quot;ros_controller&quot;</span> name=<span class="string">&quot;airsim_pub_topic&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;airsim_pub_topic.py&quot;</span> /&gt;</span><br><span class="line">	&lt;/group&gt;</span><br><span class="line"></span><br><span class="line">	&lt;group ns = <span class="string">&quot;Drone2&quot;</span>&gt;</span><br><span class="line">		&lt;node pkg=<span class="string">&quot;ros_controller&quot;</span> name=<span class="string">&quot;drone2_sub_topic&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;drone2_sub_topic.py&quot;</span> /&gt;</span><br><span class="line">		&lt;node pkg=<span class="string">&quot;ros_controller&quot;</span> name=<span class="string">&quot;drone2_pub_topic&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;drone2_pub_topic.py&quot;</span> /&gt;</span><br><span class="line">	&lt;/group&gt;</span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure>
<h4 id="2-3-1-位置控制"><a href="#2-3-1-位置控制" class="headerlink" title="2.3.1 位置控制"></a>2.3.1 位置控制</h4><p><strong>drone1控制</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drone1Controller</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 半径阈值</span></span><br><span class="line">		self.thr = <span class="number">2</span></span><br><span class="line">		<span class="comment"># 这里设定的初始坐标才有用，在pub里面设定的是没有用到的，pub中都设为0，即没有设置</span></span><br><span class="line">		self.init_drone1_x,self.init_drone1_y,self.init_drone1_z = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">auto_navigate</span>(<span class="params">self,navigate_point,direction</span>):</span></span><br><span class="line">		x,y,z,v = navigate_point[<span class="number">0</span>],navigate_point[<span class="number">1</span>],navigate_point[<span class="number">2</span>],navigate_point[<span class="number">3</span>]</span><br><span class="line">		x1,y1 = self.pose.x,self.pose.y <span class="comment"># 利用sub订阅时刻获取drone的值</span></span><br><span class="line">        <span class="comment"># 在这里进行了相减，得到真实的实际值</span></span><br><span class="line">		x -= self.init_drone1_x</span><br><span class="line">		y -= self.init_drone1_y</span><br><span class="line">		z -= self.init_drone1_z</span><br><span class="line">		self.moveByPosition(x,y,z,v)</span><br><span class="line">        <span class="comment"># 由于ros的通信机制，在发布指令后，必须等待该指令响应完成，因此用阈值来进行判断，这是和API控制中的一个区别，也是ros的特性导致的</span></span><br><span class="line">		<span class="keyword">while</span> math.sqrt(<span class="built_in">pow</span>((x - x1),<span class="number">2</span>) + <span class="built_in">pow</span>((y-y1),<span class="number">2</span>)) &gt; self.thr:</span><br><span class="line">			self.rate.sleep() <span class="comment"># 隔1秒发布一次指令</span></span><br><span class="line">			x1,y1 = self.pose.x,self.pose.y</span><br><span class="line">            <span class="comment"># 输出当前位置时，需要加上初始值</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;current position&#x27;</span>,x1+self.init_drone1_x,y1 + self.init_drone1_y)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> direction == <span class="string">&quot;left&quot;</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">			self.pubYawLeft.publish(Empty())</span><br><span class="line">		<span class="keyword">elif</span> direction == <span class="string">&quot;right&quot;</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line">			self.pubYawRight.publish(Empty())</span><br><span class="line">		<span class="comment"># 这里添加响应时间，是为了使转向动作完成，否则，在转向过程中，ros已经发布了下一条指令了</span></span><br><span class="line">		time.sleep(<span class="number">2</span>)</span><br><span class="line">		self.hover()</span><br><span class="line">		time.sleep(<span class="number">8</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	drone1_controller = Drone1Controller()</span><br><span class="line">	rospy.init_node(<span class="string">&#x27;drone1_controller&#x27;</span>)</span><br><span class="line">	drone1_controller.rate = rospy.Rate(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><strong>drone2控制</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drone1Controller</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 设定xyz的初始值和json中保持一致，不在pub中进行设置</span></span><br><span class="line">        self.init_drone2_x,self.init_drone2_y,self.init_drone2_z = <span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	drone1_controller = Drone1Controller()</span><br><span class="line">	rospy.init_node(<span class="string">&#x27;drone2_controller&#x27;</span>)</span><br><span class="line">	drone1_controller.rate = rospy.Rate(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h4 id="2-3-2-速度控制"><a href="#2-3-2-速度控制" class="headerlink" title="2.3.2 速度控制"></a>2.3.2 速度控制</h4><p><strong>drone1控制</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drone1Controller</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.desire_v = <span class="number">2</span></span><br><span class="line">		self.thr = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">		self.count = <span class="number">0</span> <span class="comment">#计数，判断发送与接收的频率是否接近一致</span></span><br><span class="line">		self.init_drone1_x,self.init_drone1_y,self.init_drone1_z = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 坐标系转换，使用 BODY = NED * A，即将yaw要取负值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">NED_TO_BODY</span>(<span class="params">self,ned_x,ned_y,ned_z</span>):</span></span><br><span class="line">		self.hudu = -self.imu.yaw </span><br><span class="line">		self.angle = <span class="built_in">round</span>(self.hudu,<span class="number">2</span>) / <span class="number">3.14</span> * <span class="number">180</span></span><br><span class="line">		NED = np.array([ned_x,ned_y,ned_z])</span><br><span class="line">		<span class="comment">#print(&#x27;NED&#x27;,NED)</span></span><br><span class="line">		matrix_B_N = np.array([[<span class="built_in">round</span>(math.cos(self.hudu),<span class="number">2</span>),<span class="built_in">round</span>(math.sin(self.hudu),<span class="number">2</span>),<span class="number">0</span>],</span><br><span class="line">							   [<span class="built_in">round</span>(-math.sin(self.hudu),<span class="number">2</span>),<span class="built_in">round</span>(math.cos(self.hudu),<span class="number">2</span>),<span class="number">0</span>],</span><br><span class="line">							   [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line">		<span class="comment"># print(&#x27;matrix&#x27;,matrix_B_N)</span></span><br><span class="line">		Body = NED.dot(matrix_B_N) <span class="comment"># </span></span><br><span class="line">		<span class="comment">#print(&#x27;body&#x27;,Body)</span></span><br><span class="line">		<span class="keyword">return</span> Body</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">auto_movebyvelocity</span>(<span class="params">self,target_position,direction</span>):</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># NED</span></span><br><span class="line">		x,y,t = target_position[<span class="number">0</span>],target_position[<span class="number">1</span>],target_position[<span class="number">3</span>]</span><br><span class="line">        <span class="comment"># 因为pub中，没有添加初始坐标，因此在这里添加了</span></span><br><span class="line">		x1,y1 = self.pose.x + self.init_drone1_x,self.pose.y + self.init_drone1_y</span><br><span class="line"></span><br><span class="line">		delta_x ,delta_y = x-x1,y-y1</span><br><span class="line">		vx,vy = delta_x / t,delta_y / t  <span class="comment"># NED </span></span><br><span class="line"></span><br><span class="line">		body = self.NED_TO_BODY(vx,vy,<span class="number">0</span>)</span><br><span class="line">		vx,vy = body[<span class="number">0</span>],body[<span class="number">1</span>] <span class="comment">#BODY</span></span><br><span class="line"></span><br><span class="line">		vx_ = vx / (math.sqrt(<span class="built_in">pow</span>(delta_x,<span class="number">2</span>) + <span class="built_in">pow</span>(delta_y,<span class="number">2</span>))) * self.desire_v</span><br><span class="line">		vy_ = vy / (math.sqrt(<span class="built_in">pow</span>(delta_x,<span class="number">2</span>) + <span class="built_in">pow</span>(delta_y,<span class="number">2</span>))) * self.desire_v</span><br><span class="line">		vz = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span> math.sqrt(<span class="built_in">pow</span>((x - x1),<span class="number">2</span>) + <span class="built_in">pow</span>((y-y1),<span class="number">2</span>)) &gt; self.thr:</span><br><span class="line">			<span class="keyword">if</span> math.sqrt(<span class="built_in">pow</span>((x - x1),<span class="number">2</span>) + <span class="built_in">pow</span>((y-y1),<span class="number">2</span>)) &lt;= self.thr:</span><br><span class="line">				self.moveByVelocity(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				delta_x ,delta_y = x-x1,y-y1</span><br><span class="line">				vx,vy = delta_x / t,delta_y / t</span><br><span class="line"></span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&#x27;target position:&#x27;</span>,[x,y],<span class="string">&#x27;current position:&#x27;</span>,[x1 + self.init_drone1_x,y1 + self.init_drone1_y])</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&#x27;vx:&#x27;</span>,vx,<span class="string">&#x27;vy:&#x27;</span>,vy)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">				body = self.NED_TO_BODY(vx,vy,<span class="number">0</span>)</span><br><span class="line">				vx,vy = body[<span class="number">0</span>],body[<span class="number">1</span>] <span class="comment">#BODY</span></span><br><span class="line"></span><br><span class="line">				</span><br><span class="line">				vx_ = vx / (math.sqrt(<span class="built_in">pow</span>(delta_x,<span class="number">2</span>) + <span class="built_in">pow</span>(delta_y,<span class="number">2</span>))) * self.desire_v</span><br><span class="line">				vy_ = vy / (math.sqrt(<span class="built_in">pow</span>(delta_x,<span class="number">2</span>) + <span class="built_in">pow</span>(delta_y,<span class="number">2</span>))) * self.desire_v</span><br><span class="line"></span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&#x27;vx_:&#x27;</span>,vx_,<span class="string">&#x27;vy_:&#x27;</span>,vy_)</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">				self.moveByVelocity(vx_,vy_,vz,t)</span><br><span class="line">			self.rate.sleep() <span class="comment"># 隔1秒发一次，保持了发送与接收的频率接近一致</span></span><br><span class="line">			x1,y1 = self.pose.x + self.init_drone1_x ,self.pose.y + self.init_drone1_y</span><br><span class="line">			self.count += <span class="number">1</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;count:&#x27;</span>,self.count) <span class="comment"># 显示发送次数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	drone1_controller = Drone1Controller()</span><br><span class="line">	rospy.init_node(<span class="string">&#x27;drone1_controller&#x27;</span>)</span><br><span class="line">	drone1_controller.rate = rospy.Rate(<span class="number">1</span>) <span class="comment"># 频率设置为1秒</span></span><br></pre></td></tr></table></figure>
<p><strong>drone2控制</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drone1Controller</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">		self.desire_v = <span class="number">2</span></span><br><span class="line">		self.thr = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">		self.count = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 这里的x设置为了4</span></span><br><span class="line">		self.init_drone2_x,self.init_drone2_y,self.init_drone2_z = <span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	drone1_controller = Drone1Controller()</span><br><span class="line">	rospy.init_node(<span class="string">&#x27;drone2_controller&#x27;</span>)</span><br><span class="line">	drone1_controller.rate = rospy.Rate(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="2-4-rviz显示多条轨迹"><a href="#2-4-rviz显示多条轨迹" class="headerlink" title="2.4 rviz显示多条轨迹"></a>2.4 rviz显示多条轨迹</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> nav_msgs.msg <span class="keyword">import</span>  Path</span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> PoseStamped</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">path</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.pose1_sub = rospy.Subscriber(<span class="string">&#x27;/drone1/airsimPose&#x27;</span>,PoseStamped,self.add_pose1_path)</span><br><span class="line">        self.pose2_sub = rospy.Subscriber(<span class="string">&#x27;/drone2/airsimPose&#x27;</span>,PoseStamped,self.add_pose2_path)</span><br><span class="line">        self.path_pub1 = rospy.Publisher(<span class="string">&#x27;/drone1/path&#x27;</span>, Path, queue_size=<span class="number">10</span>)</span><br><span class="line">        self.path_pub2 = rospy.Publisher(<span class="string">&#x27;/drone2/path&#x27;</span>, Path, queue_size=<span class="number">10</span>)</span><br><span class="line">        self.path1 = Path()</span><br><span class="line">        self.path2 = Path()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_pose1_path</span>(<span class="params">self,msg</span>):</span></span><br><span class="line">        self.path1.header = msg.header</span><br><span class="line">        self.path1.header.frame_id = <span class="string">&#x27;drone1&#x27;</span></span><br><span class="line">        pose = PoseStamped()</span><br><span class="line">        pose.header = msg.header</span><br><span class="line">        pose.pose = msg.pose</span><br><span class="line">        pose.pose.position.z = -pose.pose.position.z</span><br><span class="line">        pose.pose.position.y = -pose.pose.position.y</span><br><span class="line">        self.path1.poses.append(pose)</span><br><span class="line">        self.path_pub1.publish(self.path1)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;path&#x27;</span>,[msg.pose.position])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_pose2_path</span>(<span class="params">self,msg</span>):</span></span><br><span class="line">        self.path2.header = msg.header</span><br><span class="line">        self.path2.header.frame_id = <span class="string">&#x27;drone1&#x27;</span></span><br><span class="line">        pose = PoseStamped()</span><br><span class="line">        pose.header = msg.header</span><br><span class="line">        pose.pose = msg.pose</span><br><span class="line">        pose.pose.position.z = -pose.pose.position.z</span><br><span class="line">        pose.pose.position.y = -pose.pose.position.y</span><br><span class="line">        self.path2.poses.append(pose)</span><br><span class="line">        self.path_pub2.publish(self.path2)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;path&#x27;</span>,[msg.pose.position])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    rospy.init_node(<span class="string">&#x27;airsim_path&#x27;</span>)</span><br><span class="line">    mpath = path()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">        rospy.spin()</span><br></pre></td></tr></table></figure>
<h2 id="三、ros控制的路径显示"><a href="#三、ros控制的路径显示" class="headerlink" title="三、ros控制的路径显示"></a>三、ros控制的路径显示</h2><blockquote>
<p>在下面的两种控制中，drone2的坐标位置为（4,0,0），drone1的坐标位置为（0,0,0）</p>
<p>不论是位置控制还是速度控制，都是先让drone2起飞一会，稍等几秒后，drone1再起飞。并且drone1和drone2的目标轨迹点完全相同</p>
<p>红色的为drone2的运动轨迹，绿色的为drone1的运动轨迹</p>
</blockquote>
<h3 id="3-1-位置控制"><a href="#3-1-位置控制" class="headerlink" title="3.1 位置控制"></a>3.1 位置控制</h3><p><img src="/2019/08/19/Airsim/%E5%88%9D%E5%A7%8BAirsim%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8B%E5%A4%9A%E6%9C%BA%E6%8E%A7%E5%88%B6/1.png" alt></p>
<h3 id="3-2-速度控制"><a href="#3-2-速度控制" class="headerlink" title="3.2 速度控制"></a>3.2 速度控制</h3><p><img src="/2019/08/19/Airsim/%E5%88%9D%E5%A7%8BAirsim%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8B%E5%A4%9A%E6%9C%BA%E6%8E%A7%E5%88%B6/2.png" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>（1）在API控制这一块，其实是不需要考虑其下个指令的发布时间，直接发布位置控制或者速度控制，drone都会在到达目标点后执行下一个控制指令。而速度控制时，其实也是可以给定速度和时间，直接使其到达目标点左右，例如UDP的速度控制中，目前就是这种做法，但是该做法并不好，通过给定目标点和期望速度来控制，这样相对好很多</p>
<p>（2）而在ros控制这一块，由于都是自定义的ros节点，进行发布。在进行速度控制和位置控制时，则不能像API控制那样，因为在ros的指令发布后，airsim响应需要时间，不能在这个响应时间内发布下一条ros命令（ros指令都会存储在缓存中，而airsim则会从缓存中响应的读取指令，于是最好保持发送和接收的一致），所以就添加了很多的操作。目前pub和sub中设置rate为250hz，控制程序中，设置频率为1hz，能保持其一致，但是为什么这样就保持一致了，还没怎么弄明白。</p>
</blockquote>
]]></content>
      <categories>
        <category>Airsim</category>
      </categories>
      <tags>
        <tag>Airsim</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Airsim（十）之Lidar数据获取并显示</title>
    <url>/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在Airsim若要使用Lidar传感器并进行显示，一般都离不开rviz，使用rviz对ros的topic进行显示，但也因此，需要先将数据封装成ros的消息类型，我没有采用官方的airsim_ros包，而是自己进行封装创建。</p>
<p>那么目前导航功能包集只接受使用sensor_msgs/LaserScan或sensor_msgs/PointCloud及新出来的sensor_msgs/PointCloud2消息类型发布的传感器数据。</p>
<p>但我在google或者百度上也搜寻了很多LaserScan和PointCloud之间的区别，没怎么找到，更多的都是介绍如何使用这两个类型去发布ros数据。因此，也只有根据自己的理解去记录。</p>
</blockquote>
<h2 id="一、Airsim添加Lidar传感器"><a href="#一、Airsim添加Lidar传感器" class="headerlink" title="一、Airsim添加Lidar传感器"></a>一、Airsim添加Lidar传感器</h2><blockquote>
<p>详情请点击官方<a href="https://github.com/microsoft/AirSim/blob/master/docs/lidar.md">Lidar文档</a></p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>NumberOfChannels</td>
<td>激光雷达线束（<font color="red">单线或多线</font>），默认为16线</td>
</tr>
<tr>
<td>Range</td>
<td>扫描范围（单位米）</td>
</tr>
<tr>
<td>PointsPerSecond</td>
<td>每秒捕获的点数</td>
</tr>
<tr>
<td>RotationsPerSecon</td>
<td>每秒轮换数</td>
</tr>
<tr>
<td>HorizontalFOVStart</td>
<td>水平起始角度（以度为单位）</td>
</tr>
<tr>
<td>HorizontalFOVEnd</td>
<td>水平结束角度（以度为单位）</td>
</tr>
<tr>
<td>VerticalFOVUpper</td>
<td>Vertical FOV upper limit for the lidar, in degrees</td>
</tr>
<tr>
<td>VerticalFOVLower</td>
<td>垂直角度下限（以度为单位）</td>
</tr>
<tr>
<td>X Y Z</td>
<td>激光雷达相对于车辆的位置（NED坐标，米为单位）</td>
</tr>
<tr>
<td>Roll Pitch Yaw</td>
<td>激光雷达相对车车辆的方向（以度为单位）</td>
</tr>
<tr>
<td>DataFrame</td>
<td>输出中的点的框架</td>
</tr>
</tbody>
</table>
</div>
<font color="red">那么**线束**到底代表什么意思呢？单线和多线又有什么区别？</font>

<p>在<a href="http://www.wangdali.net/lidar/">浅谈激光雷达</a>一文中解释了相关线束的含义，通过浏览，个人理解为：每个线束每秒捕获的点数都有个最大值，如100000，那么多线则能捕获更多的点数，因此多线可以捕获到上百万的点数。单线可以表示为单个圆，多线可以有多个圆。</p>
<p><strong>且多线激光中一般垂直方向角度的范围为40度（不超过40度），忘记是在哪篇文章上看到过</strong></p>
<h3 id="1-1-settings-json默认配置"><a href="#1-1-settings-json默认配置" class="headerlink" title="1.1 settings.json默认配置"></a>1.1 settings.json默认配置</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;SeeDocsAt&quot;</span>: <span class="string">&quot;https://github.com/Microsoft/AirSim/blob/master/docs/settings_json.md&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;SettingsVersion&quot;</span>: <span class="number">1.2</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;SimMode&quot;</span>: <span class="string">&quot;Multirotor&quot;</span>,</span><br><span class="line"></span><br><span class="line">     <span class="attr">&quot;Vehicles&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;Drone1&quot;</span>: &#123;</span><br><span class="line">			<span class="attr">&quot;VehicleType&quot;</span>: <span class="string">&quot;simpleflight&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;AutoCreate&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">			<span class="attr">&quot;Sensors&quot;</span>: &#123;</span><br><span class="line">			    <span class="attr">&quot;LidarSensor1&quot;</span>: &#123; </span><br><span class="line">					<span class="attr">&quot;SensorType&quot;</span>: <span class="number">6</span>, # 6表示使用激光雷达传感器</span><br><span class="line">					<span class="attr">&quot;Enabled&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">					<span class="attr">&quot;NumberOfChannels&quot;</span>: <span class="number">16</span>, # 16线激光</span><br><span class="line">					<span class="attr">&quot;RotationsPerSecond&quot;</span>: <span class="number">10</span>,</span><br><span class="line">					<span class="attr">&quot;PointsPerSecond&quot;</span>: <span class="number">100000</span>,</span><br><span class="line">					<span class="attr">&quot;X&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;Y&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;Z&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">					<span class="attr">&quot;Roll&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;Pitch&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;Yaw&quot;</span> : <span class="number">0</span>, # 定义位姿姿态</span><br><span class="line">					<span class="attr">&quot;VerticalFOVUpper&quot;</span>: <span class="number">-15</span>,</span><br><span class="line">					<span class="attr">&quot;VerticalFOVLower&quot;</span>: <span class="number">-25</span>, # 垂直方向角度范围</span><br><span class="line">					<span class="attr">&quot;HorizontalFOVStart&quot;</span>: <span class="number">-20</span>, </span><br><span class="line">					<span class="attr">&quot;HorizontalFOVEnd&quot;</span>: <span class="number">20</span>, # 水平方向角度范围</span><br><span class="line">					<span class="attr">&quot;DrawDebugPoints&quot;</span>: <span class="literal">true</span>, # 是否在环境中可视</span><br><span class="line">					<span class="attr">&quot;DataFrame&quot;</span>: <span class="string">&quot;SensorLocalFrame&quot;</span> #垂直惯性坐标系<span class="string">&quot;VehicleInertialFrame&quot;</span> or 传感器坐标系<span class="string">&quot;SensorLocalFrame&quot;</span></span><br><span class="line">				&#125;,</span><br><span class="line">				<span class="attr">&quot;LidarSensor2&quot;</span>: &#123;  # 可以定义多个雷达</span><br><span class="line">				   <span class="attr">&quot;SensorType&quot;</span>: <span class="number">6</span>,</span><br><span class="line">					<span class="attr">&quot;Enabled&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">					<span class="attr">&quot;NumberOfChannels&quot;</span>: <span class="number">4</span>,</span><br><span class="line">					<span class="attr">&quot;RotationsPerSecond&quot;</span>: <span class="number">10</span>,</span><br><span class="line">					<span class="attr">&quot;PointsPerSecond&quot;</span>: <span class="number">10000</span>,</span><br><span class="line">					<span class="attr">&quot;X&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;Y&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;Z&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">					<span class="attr">&quot;Roll&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;Pitch&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;Yaw&quot;</span> : <span class="number">0</span>,</span><br><span class="line">					<span class="attr">&quot;VerticalFOVUpper&quot;</span>: <span class="number">-15</span>,</span><br><span class="line">					<span class="attr">&quot;VerticalFOVLower&quot;</span>: <span class="number">-25</span>,</span><br><span class="line">					<span class="attr">&quot;DrawDebugPoints&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">					<span class="attr">&quot;DataFrame&quot;</span>: <span class="string">&quot;SensorLocalFrame&quot;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>如果调用getLidarData（）函数，则将返回点云数组、时间戳和雷达位姿，其中：</strong></p>
<p><strong>点云在雷达坐标系中（NED坐标系，以米为单位）</strong></p>
<p><strong>雷达位姿在车的坐标系中（NED坐标系，以米为单位）</strong></p>
<h3 id="1-2-简单json配置，测试"><a href="#1-2-简单json配置，测试" class="headerlink" title="1.2 简单json配置，测试"></a>1.2 简单json配置，测试</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;SeeDocsAt&quot;</span>: <span class="string">&quot;https://github.com/Microsoft/AirSim/blob/master/docs/settings.md&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;SettingsVersion&quot;</span>: <span class="number">1.2</span>,</span><br><span class="line">  <span class="attr">&quot;SimMode&quot;</span>:<span class="string">&quot;Multirotor&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;Vehicles&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;Drone1&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;VehicleType&quot;</span>:<span class="string">&quot;SimpleFlight&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;X&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Y&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Z&quot;</span>:<span class="number">0</span>,  # 设定无人机的初始坐标</span><br><span class="line">      <span class="attr">&quot;Sensors&quot;</span>:</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;MyLidar1&quot;</span>:</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;SensorType&quot;</span>:<span class="number">6</span>, # 激光雷达传感器为6</span><br><span class="line">          <span class="attr">&quot;Enabled&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;NumberOfChannels&quot;</span>:<span class="number">16</span>, # 16线激光</span><br><span class="line">          <span class="attr">&quot;PointsPerSecond&quot;</span>:<span class="number">10000</span>,</span><br><span class="line">          <span class="attr">&quot;X&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Y&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Z&quot;</span>:<span class="number">-1</span>,</span><br><span class="line">          <span class="attr">&quot;DrawDebugPoints&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;Roll&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;Pitch&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;Yaw&quot;</span> : <span class="number">0</span>, # 定义了雷达相对于无人机的位姿</span><br><span class="line">          <span class="attr">&quot;VerticalFOVUpper&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;VerticalFOVLower&quot;</span>: <span class="number">0</span>, # 垂直角度，一般不超过40度</span><br><span class="line">          <span class="attr">&quot;HorizontalFOVStart&quot;</span>: <span class="number">-20</span>,</span><br><span class="line">          <span class="attr">&quot;HorizontalFOVEnd&quot;</span>: <span class="number">20</span>, # 水平角度范围</span><br><span class="line">          <span class="attr">&quot;DrawDebugPoints&quot;</span>: <span class="literal">true</span>, # 是否在环境中可视</span><br><span class="line">          <span class="attr">&quot;DataFrame&quot;</span>: <span class="string">&quot;SensorLocalFrame&quot;</span> #垂直惯性坐标系<span class="string">&quot;VehicleInertialFrame&quot;</span> or 传感器坐标系<span class="string">&quot;SensorLocalFrame&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>环境中的显示（第一视角）</strong></p>
<p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/1.png" alt></p>
<p><strong>Python代码编写，获取雷达数据</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> airsim</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client = airsim.MultirotorClient()</span><br><span class="line">client.confirmConnection()</span><br><span class="line">client.enableApiControl(<span class="literal">True</span>)</span><br><span class="line">client.armDisarm(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">lidarData = client.getLidarData()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;lidar&#x27;</span>,lidarData)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(lidarData.point_cloud) &gt;<span class="number">3</span>:</span><br><span class="line">	points = np.array(lidarData.point_cloud,dtype=np.dtype(<span class="string">&#x27;f4&#x27;</span>))</span><br><span class="line">	points = np.reshape(points,(<span class="built_in">int</span>(points.shape[<span class="number">0</span>]/<span class="number">3</span>),<span class="number">3</span>))</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;number of points&#x27;</span>),<span class="built_in">len</span>(points)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;\tNo points received from Lidar data&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这里不展示输出内容，因为输出内容比较多，占位置，在每次运行时，其获得的雷达点的个数可能会稍有不同，并且雷达探测到的点也会不一样，不相同才是正常的。</p>
<h2 id="二、单线激光雷达设置"><a href="#二、单线激光雷达设置" class="headerlink" title="二、单线激光雷达设置"></a>二、单线激光雷达设置</h2><h3 id="2-1-settings-json设置"><a href="#2-1-settings-json设置" class="headerlink" title="2.1 settings.json设置"></a>2.1 settings.json设置</h3><blockquote>
<p>为什么要将垂直角度设置为0？因为个人理解单线是水平的，即2维的，如果设置了垂直角度，则将变成三维，后面会显示设置了垂直角度后的区别</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;SeeDocsAt&quot;</span>: <span class="string">&quot;https://github.com/Microsoft/AirSim/blob/master/docs/settings.md&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;SettingsVersion&quot;</span>: <span class="number">1.2</span>,</span><br><span class="line">  <span class="attr">&quot;SimMode&quot;</span>:<span class="string">&quot;Multirotor&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;Vehicles&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;Drone1&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;VehicleType&quot;</span>:<span class="string">&quot;SimpleFlight&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;X&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Y&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Z&quot;</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;Roll&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;Pitch&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;Yaw&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;Sensors&quot;</span>:</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;MyLidar1&quot;</span>:</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;SensorType&quot;</span>:<span class="number">6</span>,</span><br><span class="line">          <span class="attr">&quot;Enabled&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;NumberOfChannels&quot;</span>:<span class="number">1</span>, # 设置为单线</span><br><span class="line">          <span class="attr">&quot;PointsPerSecond&quot;</span>:<span class="number">10000</span>, # 10000个数据点</span><br><span class="line">          <span class="attr">&quot;X&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Y&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Z&quot;</span>:<span class="number">-0.5</span>,</span><br><span class="line">          <span class="attr">&quot;DrawDebugPoints&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;Roll&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;Pitch&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;Yaw&quot;</span> : <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;VerticalFOVUpper&quot;</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;VerticalFOVLower&quot;</span>: <span class="number">0</span>, # 垂直角度为0 </span><br><span class="line">          <span class="attr">&quot;HorizontalFOVStart&quot;</span>: <span class="number">-90</span>, </span><br><span class="line">          <span class="attr">&quot;HorizontalFOVEnd&quot;</span>: <span class="number">90</span>, # 水平180度</span><br><span class="line">          <span class="attr">&quot;DrawDebugPoints&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;DataFrame&quot;</span>: <span class="string">&quot;SensorLocalFrame&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试环境</strong></p>
<p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/2.png" alt></p>
<h3 id="2-2-Python代码编写（LaserScan）"><a href="#2-2-Python代码编写（LaserScan）" class="headerlink" title="2.2 Python代码编写（LaserScan）"></a>2.2 Python代码编写（LaserScan）</h3><blockquote>
<p>LaserScan是一个二维结构，即垂直角度为0</p>
</blockquote>
<p><strong>LaserScan消息定义</strong>：<a href="http://docs.ros.org/api/sensor_msgs/html/msg/LaserScan.html">官方定义</a></p>
<p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/3.png" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Header head：</span><br><span class="line">    uint32 seq //对应一个标识符，随着消息被发布，它会自动增加</span><br><span class="line">    time stamp //时间戳，以激光扫描为例，stamp可能对应每次扫描开始的时间</span><br><span class="line">    string frame_id //以激光扫描为例，它将是激光数据所在帧（坐标系）</span><br><span class="line">    </span><br><span class="line">float32 angle_min        <span class="comment"># scan的开始角度 [弧度]</span></span><br><span class="line">float32 angle_max        <span class="comment"># scan的结束角度 [弧度]</span></span><br><span class="line">float32 angle_increment  <span class="comment"># 测量的角度间的距离 [弧度]</span></span><br><span class="line">float32 time_increment   <span class="comment"># 测量间的时间 [秒]</span></span><br><span class="line">float32 scan_time        <span class="comment"># 扫描间的时间 [秒]</span></span><br><span class="line">float32 range_min        <span class="comment"># 最小的测量距离 [米]</span></span><br><span class="line">float32 range_max        <span class="comment"># 最大的测量距离 [米]</span></span><br><span class="line">float32[] ranges         <span class="comment"># 测量的距离数据 [米] (注意: 值 &lt; range_min 或 &gt; range_max 应当被丢弃)</span></span><br><span class="line">float32[] intensities    <span class="comment"># 强度数据 [device-specific units]</span></span><br></pre></td></tr></table></figure>
<p><strong>ros发布LaserScan消息（Python）</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">import</span> airsim</span><br><span class="line"><span class="keyword">import</span> numpy  <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sensor_msgs.msg <span class="keyword">import</span> LaserSca</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取无人机的xyz坐标，为后面计算距离做准备</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_drone_position</span>(<span class="params">client</span>):</span></span><br><span class="line">	position = client.getMultirotorState().kinematics_estimated.position</span><br><span class="line">	<span class="keyword">return</span> position</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将点云数据转换成相应角度和距离</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">point_cloud_to_angle_position</span>(<span class="params">pos,points</span>):</span></span><br><span class="line">	obs_distance = []</span><br><span class="line">	angles = []</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(points)):</span><br><span class="line">		x = <span class="built_in">round</span>(points[i][<span class="number">0</span>],<span class="number">2</span>)</span><br><span class="line">		y = <span class="built_in">round</span>(points[i][<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line">		z = <span class="built_in">round</span>(points[i][<span class="number">2</span>],<span class="number">2</span>)</span><br><span class="line">		<span class="keyword">if</span> x != <span class="number">0</span>:</span><br><span class="line">			angle = math.atan(y/x) * <span class="number">180</span> / <span class="number">3.14</span> <span class="comment"># 利用三角函数关系求当前角度</span></span><br><span class="line">			angle = math.floor(angle) <span class="comment">#向下取整</span></span><br><span class="line">			angles.append(angle)</span><br><span class="line">			distance = math.sqrt((pos.x_val -x) **<span class="number">2</span> + (pos.y_val-y) **<span class="number">2</span> +(pos.z_val - z)**<span class="number">2</span>) <span class="comment"># 根据激光点坐标和无人机当前点坐标求解距离</span></span><br><span class="line">			obs_distance.append(distance)</span><br><span class="line">		<span class="comment">#print([i,angle,distance])</span></span><br><span class="line">	angles,obs_distance = scale_point_cloud(angles,obs_distance) <span class="comment"># 进行相应变换</span></span><br><span class="line">	<span class="keyword">return</span> angles,obs_distance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在180度范围内，每隔1度，取一个值，即将会取181个值（中间有0度）</span></span><br><span class="line"><span class="comment"># 对每个角度，求出其对应的下标有哪些，然后求均值，表示当前角度的激光点距离</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scale_point_cloud</span>(<span class="params">angles,obs_distance</span>):</span></span><br><span class="line">	angle_min = -<span class="number">90.0</span></span><br><span class="line">	angle_max = <span class="number">90.0</span></span><br><span class="line">	new_angles = []</span><br><span class="line">	new_obs_distance = []</span><br><span class="line">	<span class="comment"># address_index = [x for x in range(len(list_position_name)) if list_position_name[x] == i]</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(angle_max - angle_min + <span class="number">1</span>)):</span><br><span class="line">		address_index = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(angles)) <span class="keyword">if</span> angles[x] == angle_min + i ] <span class="comment"># 求每个角度的下标</span></span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(address_index) == <span class="number">0</span>: <span class="comment">#如果某个角度没有值，则直接给最大值</span></span><br><span class="line">			distance = <span class="number">100.0</span></span><br><span class="line">		<span class="keyword">else</span>: <span class="comment"># 否则，求均值</span></span><br><span class="line">			total_dis = <span class="number">0</span></span><br><span class="line">			<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(address_index)):</span><br><span class="line">				total_dis += obs_distance[address_index[j]]</span><br><span class="line">			distance = total_dis / <span class="built_in">len</span>(address_index)</span><br><span class="line">		new_angles.append(angle_min + i)</span><br><span class="line">		new_obs_distance.append(distance)</span><br><span class="line">		<span class="comment">#print(new_angles[i],new_obs_distance[i])</span></span><br><span class="line">	<span class="keyword">return</span> new_angles,new_obs_distance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布ros数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pub_laserscan</span>(<span class="params">obs_distance</span>):</span></span><br><span class="line">	laserscan = LaserScan()</span><br><span class="line">	laserscan.header.stamp = rospy.Time.now()</span><br><span class="line">	laserscan.header.frame_id = <span class="string">&#x27;lidar&#x27;</span></span><br><span class="line">	laserscan.angle_min = -<span class="number">1.57</span></span><br><span class="line">	laserscan.angle_max = <span class="number">1.57</span> <span class="comment"># 对应180度</span></span><br><span class="line">	laserscan.angle_increment = <span class="number">3.14</span> / <span class="number">180</span> <span class="comment">#弧度的增量，这样就是隔1度取值</span></span><br><span class="line">	laserscan.time_increment = <span class="number">1.0</span>  / <span class="number">10</span>   / <span class="number">180</span> <span class="comment"># 中间的10对应于json中的RotationsPerSecond</span></span><br><span class="line">	laserscan.range_min = <span class="number">0.0</span></span><br><span class="line">	laserscan.range_max = <span class="number">100.0</span></span><br><span class="line">	laserscan.ranges = [] <span class="comment"># 距离</span></span><br><span class="line">	laserscan.intensities = [] <span class="comment"># 强度</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(obs_distance)):</span><br><span class="line">		laserscan.ranges.append(obs_distance[i])</span><br><span class="line">		laserscan.intensities.append(<span class="number">0.0</span>)</span><br><span class="line">	<span class="built_in">print</span>(laserscan)</span><br><span class="line">	<span class="keyword">return</span> laserscan</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># connect the simulator</span></span><br><span class="line">	client = airsim.MultirotorClient()</span><br><span class="line">	client.confirmConnection()</span><br><span class="line">	client.enableApiControl(<span class="literal">True</span>)</span><br><span class="line">	client.armDisarm(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">	scan_pub = rospy.Publisher(<span class="string">&#x27;/scan&#x27;</span>, LaserScan, queue_size=<span class="number">10</span>)</span><br><span class="line">	rate = rospy.Rate(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line"></span><br><span class="line">		<span class="comment"># get the lidar data</span></span><br><span class="line">		lidarData = client.getLidarData()</span><br><span class="line">		<span class="comment">#print(&#x27;lidar&#x27;,lidarData)</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(lidarData.point_cloud) &gt;<span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">			points = np.array(lidarData.point_cloud,dtype=np.dtype(<span class="string">&#x27;f4&#x27;</span>))</span><br><span class="line">			points = np.reshape(points,(<span class="built_in">int</span>(points.shape[<span class="number">0</span>]/<span class="number">3</span>),<span class="number">3</span>))</span><br><span class="line">			<span class="comment">#print(&#x27;points:&#x27;,points)</span></span><br><span class="line">			pos = get_drone_position(client)</span><br><span class="line">			angles,obs_distance = point_cloud_to_angle_position(pos,points)</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;number of points&#x27;</span>),<span class="built_in">len</span>(points)</span><br><span class="line">			laserscan = pub_laserscan(obs_distance)</span><br><span class="line">			scan_pub.publish(laserscan)</span><br><span class="line">			rate.sleep()</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;\tNo points received from Lidar data&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	rospy.init_node(<span class="string">&#x27;drone1_lidar&#x27;</span>,anonymous=<span class="literal">True</span>)</span><br><span class="line">	main()</span><br></pre></td></tr></table></figure>
<p><strong>rviz显示LaserScan数据</strong></p>
<p>要注意，在rviz界面中，将Style的类型设置为Points，否则可能会看不到点，具体的见PointCloud中的图片</p>
<p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/4.png" alt></p>
<h3 id="2-3-Python代码编写（PointCloud）"><a href="#2-3-Python代码编写（PointCloud）" class="headerlink" title="2.3 Python代码编写（PointCloud）"></a>2.3 Python代码编写（PointCloud）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">import</span> airsim</span><br><span class="line"><span class="keyword">import</span> numpy  <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> Point32</span><br><span class="line"><span class="keyword">from</span> sensor_msgs.msg <span class="keyword">import</span> LaserScan,PointCloud</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pub_pointcloud</span>(<span class="params">points</span>):</span></span><br><span class="line">	pc = PointCloud()</span><br><span class="line">	pc.header.stamp = rospy.Time.now()</span><br><span class="line">	pc.header.frame_id = <span class="string">&#x27;lidar&#x27;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(points)):</span><br><span class="line">		pc.points.append(Point32(points[i][<span class="number">0</span>],points[i][<span class="number">1</span>],points[i][<span class="number">2</span>]))</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;pc:&#x27;</span>,pc)</span><br><span class="line">	<span class="keyword">return</span> pc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># connect the simulator</span></span><br><span class="line">	client = airsim.MultirotorClient()</span><br><span class="line">	client.confirmConnection()</span><br><span class="line">	client.enableApiControl(<span class="literal">True</span>)</span><br><span class="line">	client.armDisarm(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">	pointcloud_pub = rospy.Publisher(<span class="string">&#x27;/pointcloud&#x27;</span>, PointCloud, queue_size=<span class="number">10</span>)</span><br><span class="line">	rate = rospy.Rate(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line"></span><br><span class="line">		<span class="comment"># get the lidar data</span></span><br><span class="line">		lidarData = client.getLidarData()</span><br><span class="line">		<span class="comment">#print(&#x27;lidar&#x27;,lidarData)</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(lidarData.point_cloud) &gt;<span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">			points = np.array(lidarData.point_cloud,dtype=np.dtype(<span class="string">&#x27;f4&#x27;</span>))</span><br><span class="line">			points = np.reshape(points,(<span class="built_in">int</span>(points.shape[<span class="number">0</span>]/<span class="number">3</span>),<span class="number">3</span>))</span><br><span class="line">			<span class="comment">#print(&#x27;points:&#x27;,points)</span></span><br><span class="line">			pc = pub_pointcloud(points)</span><br><span class="line">			pointcloud_pub.publish(pc)</span><br><span class="line">			rate.sleep()</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;\tNo points received from Lidar data&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	rospy.init_node(<span class="string">&#x27;drone1_lidar&#x27;</span>,anonymous=<span class="literal">True</span>)</span><br><span class="line">	main()</span><br></pre></td></tr></table></figure>
<p><strong>rviz显示PointCloud数据</strong></p>
<p>其中的Style要设置为Points</p>
<p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/5.png" alt></p>
<h3 id="2-4-rviz同时显示LaserScan和PointCloud数据"><a href="#2-4-rviz同时显示LaserScan和PointCloud数据" class="headerlink" title="2.4 rviz同时显示LaserScan和PointCloud数据"></a>2.4 rviz同时显示LaserScan和PointCloud数据</h3><p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/6.png" alt></p>
<p>上图中，红色的为LaserScan数据，白色的为PointCloud数据，能够从图中看出，红色的和白色的点还是很接近的。为什么不一致呢？因为LaserScan是封装成了180个点，并且对相同的角度的距离求均值得出来的，而PointCloud直接获取的是points数据，没有做任何的修改。因此PointCloud数据更真实一点，但LaserScan目前来说也还行。</p>
<h2 id="三、多线激光雷达设置"><a href="#三、多线激光雷达设置" class="headerlink" title="三、多线激光雷达设置"></a>三、多线激光雷达设置</h2><h3 id="3-1-settings-json设置"><a href="#3-1-settings-json设置" class="headerlink" title="3.1 settings.json设置"></a>3.1 settings.json设置</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;SeeDocsAt&quot;</span>: <span class="string">&quot;https://github.com/Microsoft/AirSim/blob/master/docs/settings.md&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;SettingsVersion&quot;</span>: <span class="number">1.2</span>,</span><br><span class="line">  <span class="attr">&quot;SimMode&quot;</span>:<span class="string">&quot;Multirotor&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;Vehicles&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;Drone1&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;VehicleType&quot;</span>:<span class="string">&quot;SimpleFlight&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;X&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Y&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Z&quot;</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;Roll&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;Pitch&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;Yaw&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;Sensors&quot;</span>:</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;MyLidar1&quot;</span>:</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;SensorType&quot;</span>:<span class="number">6</span>,</span><br><span class="line">          <span class="attr">&quot;Enabled&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;NumberOfChannels&quot;</span>:<span class="number">16</span>, # 设置16线激光</span><br><span class="line">          <span class="attr">&quot;PointsPerSecond&quot;</span>:<span class="number">100000</span>, # 这里将点的个数增加了，因为环境变得更复杂了一点</span><br><span class="line">          <span class="attr">&quot;X&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Y&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;Z&quot;</span>:<span class="number">-0.5</span>,</span><br><span class="line">          <span class="attr">&quot;DrawDebugPoints&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;Roll&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;Pitch&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;Yaw&quot;</span> : <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;VerticalFOVUpper&quot;</span>: <span class="number">-15</span>,</span><br><span class="line">          <span class="attr">&quot;VerticalFOVLower&quot;</span>: <span class="number">25</span>, # 垂直设置40度范围</span><br><span class="line">          <span class="attr">&quot;HorizontalFOVStart&quot;</span>: <span class="number">-180</span>, </span><br><span class="line">          <span class="attr">&quot;HorizontalFOVEnd&quot;</span>: <span class="number">180</span>, # 水平设置360度</span><br><span class="line">          <span class="attr">&quot;DrawDebugPoints&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;DataFrame&quot;</span>: <span class="string">&quot;SensorLocalFrame&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试环境</strong>（16线的显示）</p>
<p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/7.png" alt></p>
<h3 id="3-2-PointCloud显示"><a href="#3-2-PointCloud显示" class="headerlink" title="3.2 PointCloud显示"></a>3.2 PointCloud显示</h3><blockquote>
<p>代码和2.3节的代码一样</p>
</blockquote>
<p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/8.png" alt></p>
<p>从上图中可以看出，由于channel修改为16，则会有圆圈产生，并且设置了垂直角度，因此，整个点云图看起来是3维的。</p>
<p><strong>（1）若将垂直角度还是设置为0，则其点云图将会是二维显示</strong></p>
<p>在json中，重新将垂直角度设为0，</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;VerticalFOVUpper&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&quot;VerticalFOVLower&quot;</span>: <span class="number">0</span>, # 重新设置为<span class="number">0</span>度</span><br></pre></td></tr></table></figure>
<p>则其点云图显示如下，则将会二维显示</p>
<p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/9.png" alt></p>
<p><strong>（2）若垂直角度还是40度，增大channel，如增大为32或64时，显示效果如下：</strong></p>
<p>设置为32线时，其环境中可视化的激光圈数明显增加</p>
<p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/10.png" alt></p>
<p>其rviz图为：</p>
<p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/11.png" alt></p>
<p>设置为64线时，环境中激光可视化</p>
<p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/12.png" alt></p>
<p>其rviz图：</p>
<p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/13.png" alt></p>
<p>从这个中可以看出，随着channel的增加，其环境中可视化的激光圈数明显增加，并且rviz里面的探测距离明显变得更远。</p>
<p><strong>（3）垂直角度40度，64channel，并设置50w个点</strong></p>
<p>尝试过设置100w个点，但是在启动sh文件时，UE4左上角会提示Lidar capping number of points to scan信息，感觉还是有些问题的，但是100w个点，仍然能显示。因此后面修改为50w个点，没有该信息提示</p>
<p>rviz显示图为：</p>
<p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/14.png" alt></p>
<p>和上一张图比较，增加更多的点，其扫描出的物体能够更精确。</p>
<p><strong>rviz显示PointCloud并上色</strong></p>
<p>在Color Transformer一栏，设置为AxisColor，则其效果见下图</p>
<p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/15.png" alt></p>
<h2 id="四、比较"><a href="#四、比较" class="headerlink" title="四、比较"></a>四、比较</h2><h3 id="4-1-单线，50w点，无垂直角度，水平角度范围180"><a href="#4-1-单线，50w点，无垂直角度，水平角度范围180" class="headerlink" title="4.1 单线，50w点，无垂直角度，水平角度范围180"></a>4.1 单线，50w点，无垂直角度，水平角度范围180</h3><p><strong>PointCloud显示</strong></p>
<p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/16.png" alt></p>
<p><strong>LaserScan显示</strong></p>
<p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/17.png" alt></p>
<p><strong>LaserScan和PointCloud同时显示</strong></p>
<p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/18.png" alt></p>
<h3 id="4-2-单线，50w点，垂直角度40度，水平角度范围180"><a href="#4-2-单线，50w点，垂直角度40度，水平角度范围180" class="headerlink" title="4.2 单线，50w点，垂直角度40度，水平角度范围180"></a>4.2 单线，50w点，垂直角度40度，水平角度范围180</h3><p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/19.png" alt></p>
<p>红色的LaserScan数据，白色的为PointCloud数据，看起来很接近，但是添加了垂直角度后，单线的激光检测就不对了</p>
<h3 id="4-3-多线（16），50w点，垂直角度40度，水平角度范围180"><a href="#4-3-多线（16），50w点，垂直角度40度，水平角度范围180" class="headerlink" title="4.3 多线（16），50w点，垂直角度40度，水平角度范围180"></a>4.3 多线（16），50w点，垂直角度40度，水平角度范围180</h3><p><img src="/2019/08/30/Airsim/%E5%88%9D%E8%AF%86Airsim%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8BLidar%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%B9%B6%E6%98%BE%E7%A4%BA/20.png" alt></p>
<p>红色的为LaserScan，其他颜色的为PointCloud。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>通过从比较中可以看出，</p>
<p>（1）单线激光雷达，不适合设置垂直角度，只适合二维。就连PointCloud在单线垂直角度下，都显示不对</p>
<p>（2）多线激光雷达，一般设置垂直角度，显示三维点云数据</p>
<p>我目前设置的LaserScan，是对数据进行了处理，但是目前只考虑了180度的范围，没有考虑360度，因为360度中角度会发生相应的变化，后面会在继续进行处理~</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p><a href="https://blog.csdn.net/yangziluomu/article/details/79576508">ros传感器消息及RVIZ可视化Laserscan和PointCloud（C++）</a></p>
</li>
<li><p><a href="http://www.wangdali.net/lidar/">浅谈激光雷达</a></p>
</li>
<li><p><a href="https://wiki.ros.org/rviz/DisplayTypes/PointCloud">PointCloud参数详解</a></p>
</li>
<li><p><a href="https://answers.ros.org/question/207071/how-to-fill-up-a-pointcloud-message-with-data-in-python/">ros发布LaserScan和PointCloud（Python）</a></p>
</li>
<li><p><a href="http://wiki.ros.org/laser_geometry">LaserScan转PointCloud2（Python）</a></p>
</li>
</ul>
<p>已经测试过的LaserScan转PointCloud2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor_msgs.point_cloud2 <span class="keyword">as</span> pc2</span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> sensor_msgs.msg <span class="keyword">import</span> PointCloud2, LaserScan</span><br><span class="line"><span class="keyword">import</span> laser_geometry.laser_geometry <span class="keyword">as</span> lg</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">rospy.init_node(<span class="string">&quot;laserscan_to_pointcloud&quot;</span>)</span><br><span class="line"></span><br><span class="line">lp = lg.LaserProjection()</span><br><span class="line">pc_pub = rospy.Publisher(<span class="string">&quot;test&quot;</span>, PointCloud2, queue_size=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan_cb</span>(<span class="params">msg</span>):</span></span><br><span class="line">	<span class="comment"># convert the message of type LaserScan to a PointCloud2</span></span><br><span class="line">	pc2_msg = lp.projectLaser(msg)</span><br><span class="line"></span><br><span class="line">	pc_pub.publish(pc2_msg)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># convert it to a generator of the individual points</span></span><br><span class="line">	point_generator = pc2.read_points(pc2_msg)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># we can access a generator in a loop</span></span><br><span class="line">	<span class="built_in">sum</span> = <span class="number">0.0</span></span><br><span class="line">	num = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> point <span class="keyword">in</span> point_generator:</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> math.isnan(point[<span class="number">2</span>]):</span><br><span class="line">			<span class="built_in">sum</span> += point[<span class="number">2</span>]</span><br><span class="line">			num += <span class="number">1</span></span><br><span class="line">	<span class="comment"># we can calculate the average z value for example</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">str</span>(<span class="built_in">sum</span>/num))</span><br><span class="line"></span><br><span class="line">	<span class="comment"># or a list of the individual points which is less efficient</span></span><br><span class="line">	point_list = pc2.read_points_list(pc2_msg)</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(point_list[<span class="built_in">len</span>(point_list)/<span class="number">2</span>].x)</span><br><span class="line"></span><br><span class="line">rospy.Subscriber(<span class="string">&quot;/scan&quot;</span>, LaserScan, scan_cb, queue_size=<span class="number">1</span>)</span><br><span class="line">rospy.spin()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Airsim</category>
      </categories>
      <tags>
        <tag>Airsim</tag>
        <tag>Lidar</tag>
      </tags>
  </entry>
  <entry>
    <title>gazebo配置</title>
    <url>/2019/05/24/ROS/gazebo%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>记录的是研究生阶段以来使用gazebo过程中遇到过的一些坑，以及一些相关的gazebo配置</p>
</blockquote>
<h2 id="1、gazebo模型文件说明"><a href="#1、gazebo模型文件说明" class="headerlink" title="1、gazebo模型文件说明"></a>1、gazebo模型文件说明</h2><blockquote>
<p>如果不是安装的gazebo8，如默认安装的ros kinetic版本对应的gazebo7和ros indigo版本对应的gazebo2的话，在终端输入gazebo的时候，会卡着，gazebo界面出不来。其原因是因为没有下载gazebo的模型，下载完后将模型拷贝到~/.gazebo/models/文件夹即可。</p>
<p>值得注意的是：~/.gazebo/models/文件夹下只需要有sun模型文件和ground_plane模型文件就能正常打开gazebo界面</p>
</blockquote>
<h2 id="2、gazebo-model-path配置"><a href="#2、gazebo-model-path配置" class="headerlink" title="2、gazebo_model_path配置"></a>2、gazebo_model_path配置</h2><blockquote>
<p>针对以往的总是要将gazebo model文件放在~/.gazebo/models文件，而不能存放在自己下载的ros程序包下的model文件夹下，主要是因为环境变量没有配置，配置好后就可以将所有的模型文件放在自己想放的位置。</p>
</blockquote>
<p>（1）首先在~/.bashrc最后一行添加gazebo_model_path路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">export GAZEBO_MODEL_PATH=<span class="string">&quot;/home/cugrobot/catkin_ws/src/ardrone_simulator_gazebo7/cvg_sim_gazebo/models&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/05/24/ROS/gazebo%E9%85%8D%E7%BD%AE/gazebo_model_path.png" alt></p>
<p>其对应的模型文件夹如下：</p>
<p><img src="/2019/05/24/ROS/gazebo%E9%85%8D%E7%BD%AE/gazebo_models.png" alt></p>
<p>（2）然后，在launch启动文件夹下，添加env代码，如下</p>
<p><img src="/2019/05/24/ROS/gazebo%E9%85%8D%E7%BD%AE/launch.png" alt></p>
<p>通过<code>env | grep GAZEBO_MODEL_PATH</code>命令可以查看其配置路径，同理可以应用于其他路径查看</p>
<h2 id="3、gazebo关闭client界面"><a href="#3、gazebo关闭client界面" class="headerlink" title="3、gazebo关闭client界面"></a>3、gazebo关闭client界面</h2><blockquote>
<p>在做强化学习训练时，打开gazebo界面可能会使训练比较耗时，因此关闭client界面也许是一种比较好的方法。</p>
</blockquote>
<p>gazebo平台第三视角关闭方法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ roscd gazebo_ros</span><br><span class="line">$ cd launch</span><br><span class="line">$ sudo gedit empty_world.launch</span><br></pre></td></tr></table></figure>
<p>在打开的界面中修改两处地方，第一处在第7行，将<arg name="gui" default="true">其中的true改为false；第二处在第41行，有一个  <!-- start gazebo client   -->的注释，将注释范围扩大，将42-44行全部注释掉，即该后面的整个group注释。</arg></p>
<blockquote>
<p>若上面方法还不能关闭界面，在launch启动文件里面，找到所有相关联的启动文件，将上面的修改方法在launch里面也执行一遍。</p>
</blockquote>
<h2 id="4、gazebo仿真世界中模型位置修改"><a href="#4、gazebo仿真世界中模型位置修改" class="headerlink" title="4、gazebo仿真世界中模型位置修改"></a>4、gazebo仿真世界中模型位置修改</h2><h3 id="4-1-通过os-system-函数实现rosservice服务"><a href="#4-1-通过os-system-函数实现rosservice服务" class="headerlink" title="4.1 通过os.system()函数实现rosservice服务"></a>4.1 通过os.system()函数实现rosservice服务</h3><blockquote>
<p>我们能在终端通过调用 /gazebo/set_model_state服务来重置pose和twist，这是最初始的时候的方法，但在测试过程中，重置位置容易出现在限定范围外，因此不好，关于修改模型位置方法可以参考<code>4.2节</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosservice call /gazebo/set_model_state &#x27;&#123;model_state: &#123; model_name: quadrotor, pose: &#123; position: &#123; x: 5, y: 0 ,z: 1 &#125;, orientation: &#123;x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 &#125; &#125;, twist: &#123; linear: &#123;x: 0.0 , y: 0 ,z: 0 &#125; , angular: &#123; x: 0.0 , y: 0 , z: 0.0 &#125; &#125; , reference_frame: world &#125; &#125;&#x27;</span><br></pre></td></tr></table></figure>
<p>其中，需要说明的是quadrotor是你要修改的模型名称</p>
<p>参考网址：<a href="http://wiki.ros.org/simulator_gazebo/Tutorials/Gazebo_ROS_API">http://wiki.ros.org/simulator_gazebo/Tutorials/Gazebo_ROS_API</a></p>
<blockquote>
<p>如果要在python程序中调用上面的重置命令，则需要使用os.system（）函数来实现</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os.system(&#x27;&#x27;&#x27;rosservice call /gazebo/set_model_state &quot;[quadrotor, [[5, 0, 0], [0.0, 0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], &#x27;&#x27;]&quot;&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>
<p>如果写成动态加载代码的话，可以如下图所示：</p>
<p><img src="/2019/05/24/ROS/gazebo%E9%85%8D%E7%BD%AE/reset_pose.png" alt></p>
<p>参考网址：<a href="https://blog.csdn.net/lordofrobots/article/details/78088517?utm_source=debugrun&amp;utm_medium=referral">https://blog.csdn.net/lordofrobots/article/details/78088517?utm_source=debugrun&amp;utm_medium=referral</a></p>
<h3 id="4-2-rospy-ServiceProxy-函数实现位置修改和获取模型位置"><a href="#4-2-rospy-ServiceProxy-函数实现位置修改和获取模型位置" class="headerlink" title="4.2 rospy.ServiceProxy()函数实现位置修改和获取模型位置"></a>4.2 rospy.ServiceProxy()函数实现位置修改和获取模型位置</h3><blockquote>
<p> 重置模型坐标位置主要是调用<code>/gazebo/set_model_state</code>服务，而获取模型坐标位置是调用<code>/gazebo/get_model_state</code>服务</p>
</blockquote>
<p>其中，如<code>/gazebo/set_model_state</code>的<code>type</code>类型可以通过<code>rosservice info /gazebo/set_model_state</code>命令来确定</p>
<p>具体代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> gazebo_msgs.srv <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置无人机坐标位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_model_pos</span>():</span></span><br><span class="line">    rospy.wait_for_service(<span class="string">&#x27;/gazebo/set_model_state&#x27;</span>)</span><br><span class="line">    set_state_service = rospy.ServiceProxy(<span class="string">&#x27;/gazebo/set_model_state&#x27;</span>,SetModelState)</span><br><span class="line">    objstate = SetModelStateRequest()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#set quadrotor pose</span></span><br><span class="line">    objstate.model_state.model_name = <span class="string">&#x27;quadrotor&#x27;</span></span><br><span class="line">    objstate.model_state.pose.position.x = <span class="number">5</span></span><br><span class="line">    objstate.model_state.pose.position.y = <span class="number">0</span></span><br><span class="line">    objstate.model_state.pose.position.z = <span class="number">0</span></span><br><span class="line">    objstate.model_state.pose.orientation.w = <span class="number">1</span></span><br><span class="line">    objstate.model_state.pose.orientation.x = <span class="number">0</span></span><br><span class="line">    objstate.model_state.pose.orientation.y = <span class="number">0</span></span><br><span class="line">    objstate.model_state.pose.orientation.z = <span class="number">0</span></span><br><span class="line">    objstate.model_state.twist.linear.x = <span class="number">0.0</span></span><br><span class="line">    objstate.model_state.twist.linear.y = <span class="number">0.0</span></span><br><span class="line">    objstate.model_state.twist.linear.z = <span class="number">0.0</span></span><br><span class="line">    objstate.model_state.twist.angular.x = <span class="number">0.0</span></span><br><span class="line">    objstate.model_state.twist.angular.y = <span class="number">0.0</span></span><br><span class="line">    objstate.model_state.twist.angular.z = <span class="number">0.0</span></span><br><span class="line">    objstate.model_state.reference_frame = <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line">    result = set_state_service(objstate)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 获取无人机坐标位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_model_pos</span>():</span></span><br><span class="line">    get_state_service = rospy.ServiceProxy(<span class="string">&#x27;/gazebo/get_model_state&#x27;</span>,GetModelState)</span><br><span class="line">    model = GetModelStateRequest()</span><br><span class="line">    model.model_name = <span class="string">&#x27;quadrotor&#x27;</span></span><br><span class="line">    objstate = get_state_service(model)</span><br><span class="line">    state = (objstate.pose.position.x,objstate.pose.position.y,objstate.pose.position.z)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;pos&#x27;</span>,state) </span><br></pre></td></tr></table></figure>
<p>该代码转载于<a href="https://blog.csdn.net/penge666/article/details/87900911">此处</a></p>
<h2 id="5、gazebo仿真时间加速"><a href="#5、gazebo仿真时间加速" class="headerlink" title="5、gazebo仿真时间加速"></a>5、gazebo仿真时间加速</h2><blockquote>
<p>主要遇到的问题是在进行DQN训练时，由于机器性能及每步飞行时间等原因，训练时长较久，因此能够在仿真中修改一些配置，使得仿真的时间比现实时间更快。</p>
</blockquote>
<p>主要是通过修改world文件里面的一些物理属性，来实现仿真时间加速的效果，若需要加速时，还是在重新测试比较好，我修改为如下代码后，较之前能有3倍左右的提升速度，并且没有使用rospy.sleep(2)函数，而是使用的rospy.Rate(0.46).sleep()来代替。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;physics name=&#x27;default_physics&#x27; default=&#x27;0&#x27; type=&#x27;ode&#x27;&gt;</span><br><span class="line">  &lt;real_time_update_rate&gt;0&lt;/real_time_update_rate&gt;</span><br><span class="line">  &lt;max_step_size&gt;0.002&lt;/max_step_size&gt;</span><br><span class="line">  &lt;real_time_factor&gt;1&lt;/real_time_factor&gt;</span><br><span class="line">&lt;/physics&gt;</span><br></pre></td></tr></table></figure>
<p>通过修改max_step_size的值能对gazebo进行加速，一般修改的时候real_time_update_rate设置为0。</p>
<p>Max_step_size:0.001（默认值）</p>
<p>Real_time_update_rate:1（默认值）</p>
<p>Real_time_update_rate:1000（默认值）</p>
<p><img src="/2019/05/24/ROS/gazebo%E9%85%8D%E7%BD%AE/gazebo_properties.png" alt></p>
<p>参考网址：<a href="http://gazebosim.org/tutorials?tut=modifying_world&amp;cat=build_world">http://gazebosim.org/tutorials?tut=modifying_world&amp;cat=build_world</a></p>
<h2 id="6、gazebo添加定制模型"><a href="#6、gazebo添加定制模型" class="headerlink" title="6、gazebo添加定制模型"></a>6、gazebo添加定制模型</h2><blockquote>
<p>以前都是自己制作的一些简单模型导入到gazebo仿真世界中，但想加载一些特定的模型时，不一定能自己制作出来，这时可以下载<a href="https://3dwarehouse.sketchup.com/">3D Warehouse</a>网站上做好的模型，导入到gazebo仿真直接中即可</p>
</blockquote>
<p>例如，这样的模型则不一定能自己制作出来</p>
<p><img src="/2019/05/24/ROS/gazebo%E9%85%8D%E7%BD%AE/gate.png" alt></p>
<p>因此，我们可以在<a href="https://3dwarehouse.sketchup.com/">3D Warehouse</a>上搜索关键词，然后找到想要的模型，点击进去后，以Collada File文件形式下载即可。</p>
<p><img src="/2019/05/24/ROS/gazebo%E9%85%8D%E7%BD%AE/collada.png" alt></p>
<p>（1）下载完后，解压，解压后更改dae的名字。然后在gazebo_model_path的文件夹目录下创建相对应的模型文件，主要包括model.config、model.sdf文件和mesh文件夹（文件夹下只有dae文件）</p>
<p><img src="/2019/05/24/ROS/gazebo%E9%85%8D%E7%BD%AE/model.png" alt></p>
<p>其中，model.sdf文件内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;sdf version=&quot;1.4&quot;&gt;</span><br><span class="line">  &lt;model name=&quot;Arc&quot;&gt;</span><br><span class="line">    &lt;pose&gt;0 5 0 0 0 0&lt;/pose&gt;</span><br><span class="line">    &lt;static&gt;true&lt;/static&gt;</span><br><span class="line">    &lt;link name=&quot;link&quot;&gt;</span><br><span class="line">      &lt;inertial&gt;</span><br><span class="line">        &lt;mass&gt;0.1&lt;/mass&gt;</span><br><span class="line">      &lt;/inertial&gt;</span><br><span class="line">      &lt;collision name=&quot;collision&quot;&gt;</span><br><span class="line">        &lt;geometry&gt;</span><br><span class="line">          &lt;box&gt;</span><br><span class="line">            &lt;size&gt;10 10 0.2&lt;/size&gt;</span><br><span class="line">          &lt;/box&gt;</span><br><span class="line">        &lt;/geometry&gt;</span><br><span class="line">      &lt;/collision&gt;</span><br><span class="line">   </span><br><span class="line">      &lt;visual name=&quot;visual&quot;&gt;</span><br><span class="line">        &lt;geometry&gt;</span><br><span class="line">          &lt;mesh&gt;</span><br><span class="line">            &lt;!--uri&gt;model://marker/meshes/artag_01.dae&lt;/uri--&gt;</span><br><span class="line">            &lt;uri&gt;model://arc/meshes/arc.dae&lt;/uri&gt;</span><br><span class="line">            &lt;!-- &lt;scale&gt; 0.01 0.01 0.01 &lt;/scale&gt;--&gt;</span><br><span class="line">          &lt;/mesh&gt;</span><br><span class="line">        &lt;/geometry&gt;</span><br><span class="line">      &lt;/visual&gt;</span><br><span class="line">    &lt;/link&gt;</span><br><span class="line">  &lt;/model&gt;</span><br><span class="line">&lt;/sdf&gt;</span><br></pre></td></tr></table></figure>
<p>（2）测试</p>
<p>创建arc.world文件，并将如下内容拷贝进去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;sdf version=&quot;1.4&quot;&gt;</span><br><span class="line">  &lt;world name=&quot;default&quot;&gt;</span><br><span class="line">    &lt;include&gt;</span><br><span class="line">      &lt;uri&gt;model://ground_plane&lt;/uri&gt;</span><br><span class="line">    &lt;/include&gt;</span><br><span class="line">    &lt;include&gt;</span><br><span class="line">      &lt;uri&gt;model://sun&lt;/uri&gt;</span><br><span class="line">    &lt;/include&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    &lt;model name=&quot;arc&quot;&gt;</span><br><span class="line">      &lt;pose&gt;0 0 0  0 0 0&lt;/pose&gt;</span><br><span class="line">      &lt;static&gt;true&lt;/static&gt;</span><br><span class="line">      &lt;link name=&quot;body&quot;&gt;</span><br><span class="line">        &lt;visual name=&quot;visual&quot;&gt;</span><br><span class="line">          &lt;geometry&gt;</span><br><span class="line">            &lt;mesh&gt;</span><br><span class="line">              &lt;uri&gt;file://arc.dae&lt;/uri&gt;</span><br><span class="line">              &lt;scale&gt; 0.03 0.03 0.03&lt;/scale&gt;</span><br><span class="line">            &lt;/mesh&gt;</span><br><span class="line"></span><br><span class="line">          &lt;/geometry&gt;</span><br><span class="line">        &lt;/visual&gt;</span><br><span class="line">      &lt;/link&gt;</span><br><span class="line">    &lt;/model&gt;</span><br><span class="line">--&gt;</span><br><span class="line">    &lt;model name=&#x27;arc&#x27;&gt;</span><br><span class="line">      &lt;static&gt;1&lt;/static&gt;</span><br><span class="line">      &lt;link name=&#x27;arc_link&#x27;&gt;</span><br><span class="line">        &lt;pose frame=&#x27;&#x27;&gt;0 0 0 0 -0 0&lt;/pose&gt;</span><br><span class="line">        &lt;collision name=&#x27;collision&#x27;&gt;</span><br><span class="line">          &lt;geometry&gt;</span><br><span class="line">            &lt;mesh&gt;</span><br><span class="line">              &lt;uri&gt;model://arc/meshes/arc.dae&lt;/uri&gt;</span><br><span class="line">              &lt;scale&gt;0.03 0.03 0.03&lt;/scale&gt;</span><br><span class="line">            &lt;/mesh&gt;</span><br><span class="line">          &lt;/geometry&gt;</span><br><span class="line">          </span><br><span class="line">        &lt;/collision&gt;</span><br><span class="line">        &lt;visual name=&#x27;visual&#x27;&gt;</span><br><span class="line">          &lt;geometry&gt;</span><br><span class="line">            &lt;mesh&gt;</span><br><span class="line">              &lt;uri&gt;model://arc/meshes/arc.dae&lt;/uri&gt;</span><br><span class="line">              &lt;scale&gt;0.03 0.03 0.03&lt;/scale&gt;</span><br><span class="line">            &lt;/mesh&gt;</span><br><span class="line">          &lt;/geometry&gt;</span><br><span class="line">        &lt;/visual&gt;</span><br><span class="line">        &lt;gravity&gt;1&lt;/gravity&gt;</span><br><span class="line">      &lt;/link&gt;</span><br><span class="line">      &lt;pose frame=&#x27;&#x27;&gt;0 0 0.05 0 0 0&lt;/pose&gt;</span><br><span class="line">    &lt;/model&gt;</span><br><span class="line">  &lt;/world&gt;</span><br><span class="line">&lt;/sdf&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：上面代码中注销掉的部分如 <uri>file://arc.dae</uri>是以文件形式导入，而后面<uri>model://arc/meshes/arc.dae</uri>是以sdf形式导入。</p>
<p>需要注意的是：需要使用<scale>0.03 0.03 0.03</scale>来对模型进行调节大小</p>
</blockquote>
<p>（3）显示</p>
<p>运行gazebo arc.world</p>
<p><img src="/2019/05/24/ROS/gazebo%E9%85%8D%E7%BD%AE/gazebo_show.png" alt></p>
<p>参考网址：<a href="http://gazebosim.org/tutorials?tut=import_mesh#PreparetheMesh">http://gazebosim.org/tutorials?tut=import_mesh#PreparetheMesh</a></p>
<p><a href="https://answers.ros.org/question/42529/how-to-import-collada-dae-files-into-gazebo-rosfuerte/">https://answers.ros.org/question/42529/how-to-import-collada-dae-files-into-gazebo-rosfuerte/</a></p>
<h2 id="7、Gazebo场景纹理图重置"><a href="#7、Gazebo场景纹理图重置" class="headerlink" title="7、Gazebo场景纹理图重置"></a>7、Gazebo场景纹理图重置</h2><blockquote>
<p>主要是我在做强化学习（DQN）训练的过程中，需要将纹理时常更换，因此在网上查找相关教程，最终实现了gazebo的场景重置</p>
</blockquote>
<p>先看代码，后面在进行解释，该代码是从训练的代码中截取的部分，需要的内容全部都在了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> Pose</span><br><span class="line"><span class="keyword">from</span> gazebo_msgs.srv <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> roslib;roslib.load_manifest(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DQN</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.pubModelStates = rospy.Subscriber(<span class="string">&#x27;gazebo/model_states&#x27;</span>,ModelStates,self.get_model_pos)</span><br><span class="line">        self.database_model_name = \</span><br><span class="line">        [<span class="string">&quot;asphalt1&quot;</span>,<span class="string">&quot;asphalt2&quot;</span>,<span class="string">&quot;asphalt3&quot;</span>,<span class="string">&quot;asphalt4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;brick1&quot;</span>,<span class="string">&quot;brick2&quot;</span>,<span class="string">&quot;brick3&quot;</span>,<span class="string">&quot;brick4&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#重置特定模型位置</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_model_pos</span>(<span class="params">self</span>):</span></span><br><span class="line">        rospy.wait_for_service(<span class="string">&#x27;/gazebo/set_model_state&#x27;</span>)</span><br><span class="line">        set_state_service = rospy.ServiceProxy(<span class="string">&#x27;/gazebo/set_model_state&#x27;</span>,SetModelState)</span><br><span class="line">        objstate = SetModelStateRequest()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#set quadrotor pose</span></span><br><span class="line">        objstate.model_state.model_name = <span class="string">&#x27;quadrotor&#x27;</span></span><br><span class="line">        objstate.model_state.pose.position.x = <span class="number">5</span></span><br><span class="line">        objstate.model_state.pose.position.y = <span class="number">0</span></span><br><span class="line">        objstate.model_state.pose.position.z = <span class="number">0</span></span><br><span class="line">        objstate.model_state.pose.orientation.w = <span class="number">1</span></span><br><span class="line">        objstate.model_state.pose.orientation.x = <span class="number">0</span></span><br><span class="line">        objstate.model_state.pose.orientation.y = <span class="number">0</span></span><br><span class="line">        objstate.model_state.pose.orientation.z = <span class="number">0</span></span><br><span class="line">        objstate.model_state.twist.linear.x = <span class="number">0.0</span></span><br><span class="line">        objstate.model_state.twist.linear.y = <span class="number">0.0</span></span><br><span class="line">        objstate.model_state.twist.linear.z = <span class="number">0.0</span></span><br><span class="line">        objstate.model_state.twist.angular.x = <span class="number">0.0</span></span><br><span class="line">        objstate.model_state.twist.angular.y = <span class="number">0.0</span></span><br><span class="line">        objstate.model_state.twist.angular.z = <span class="number">0.0</span></span><br><span class="line">        objstate.model_state.reference_frame = <span class="string">&quot;world&quot;</span></span><br><span class="line">        </span><br><span class="line">        result = set_state_service(objstate)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取特定模型位置</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_model_pos</span>(<span class="params">self</span>):</span></span><br><span class="line">        get_state_service = rospy.ServiceProxy(<span class="string">&#x27;/gazebo/get_model_state&#x27;</span>,GetModelState)</span><br><span class="line">        model = GetModelStateRequest()</span><br><span class="line">        model.model_name = <span class="string">&#x27;quadrotor&#x27;</span></span><br><span class="line">        objstate = get_state_service(model)</span><br><span class="line">        state = (objstate.pose.position.x,objstate.pose.position.y,objstate.pose.position.z)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;pos&#x27;</span>,state)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#删除模型文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_sdf_model</span>(<span class="params">self</span>):</span></span><br><span class="line">        rospy.wait_for_service(<span class="string">&#x27;gazebo/delete_model&#x27;</span>)</span><br><span class="line">        delete_model_service = rospy.ServiceProxy(<span class="string">&#x27;gazebo/delete_model&#x27;</span>,DeleteModel)</span><br><span class="line">        objstate = DeleteModelRequest()</span><br><span class="line">        objstate.model_name = <span class="string">&quot;grass7_plane&quot;</span></span><br><span class="line">        <span class="keyword">if</span> objstate.model_name <span class="keyword">in</span> self.database_model_name:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                delete_model_service(objstate)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;delete model success&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;delete model failed&quot;</span>)</span><br><span class="line"></span><br><span class="line">            self.spawn_sdf_model()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#重置模型文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spawn_sdf_model</span>(<span class="params">self</span>):</span></span><br><span class="line">        rospy.wait_for_service(<span class="string">&#x27;gazebo/spawn_sdf_model&#x27;</span>)</span><br><span class="line">        spawn_model_service = rospy.ServiceProxy(<span class="string">&#x27;gazebo/spawn_sdf_model&#x27;</span>,SpawnModel)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/home/cug/qlab_ws/src/qlab/qlab/qlab_gazebo/models/asphalt1/model.sdf&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            model_xml = f.read()</span><br><span class="line">        <span class="comment">#model_name model_xml robot_namespace initial_pose reference_frame</span></span><br><span class="line">        objstate = SpawnModelRequest()</span><br><span class="line">        objstate.model_name = <span class="string">&quot;asphalt1&quot;</span></span><br><span class="line">        objstate.model_xml = model_xml</span><br><span class="line">        objstate.robot_namespace = <span class="string">&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        pose = Pose()</span><br><span class="line">        pose.position.x = <span class="number">0.222657</span> </span><br><span class="line">        pose.position.y = -<span class="number">0.204052</span></span><br><span class="line">        pose.position.z =  <span class="number">0</span></span><br><span class="line">        objstate.initial_pose = pose</span><br><span class="line">        objstate.reference_frame = <span class="string">&quot;world&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#spawn_model_service(&quot;asphalt1_plane&quot;,model_xml,&quot;&quot;,pose,&quot;world&quot;)</span></span><br><span class="line">            spawn_model_service(objstate)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;spawn model success&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;spawn model failed&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    rospy.init_node(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">    dqn = DQN()</span><br><span class="line">    dqn.delete_sdf_model()</span><br><span class="line">    dqn.set_model_pos()</span><br><span class="line">    dqn.get_model_pos(</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：gazebo场景重置，主要用到两个rosservice，分别是<code>gazebo/delete_model</code>和<code>gazebo/spawn_sdf_model</code></p>
</blockquote>
<p>在重置的过程中，首先需要先删除模型，即调用<code>gazebo/delete_model</code>服务，然后在重新生成，这时需要找到想要生成的模型的sdf文件所在位置，然后读取并调用<code>gazebo/spawn_sdf_model</code>服务，即可实现gazebo场景纹理图的重置</p>
<p>主要需要查看的帮助信息是</p>
<p>（1）roservice list：查找相关service服务</p>
<p>（2）rosservice info [service_name]：查找对应服务的数据类型</p>
<p><img src="/2019/05/24/ROS/gazebo%E9%85%8D%E7%BD%AE/service_type.png" alt></p>
<p>对其中一个进行解释说明：如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">objstate = SpawnModelRequest()</span><br><span class="line">objstate.model_name = <span class="string">&quot;asphalt1&quot;</span></span><br><span class="line">objstate.model_xml = model_xml</span><br><span class="line">objstate.robot_namespace = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">pose = Pose()</span><br><span class="line">pose.position.x = <span class="number">0.222657</span> </span><br><span class="line">pose.position.y = -<span class="number">0.204052</span></span><br><span class="line">pose.position.z =  <span class="number">0</span></span><br><span class="line">objstate.initial_pose = pose</span><br><span class="line">objstate.reference_frame = <span class="string">&quot;world&quot;</span></span><br></pre></td></tr></table></figure>
<p>这里就和/gazebo/spawn_sdf_model里面的Args对应，分别是model_name、model_xml、robot_namespace、initial_pose、reference_frame</p>
<p>又如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#重置特定模型位置</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_model_pos</span>(<span class="params">self</span>):</span></span><br><span class="line">        rospy.wait_for_service(<span class="string">&#x27;/gazebo/set_model_state&#x27;</span>)</span><br><span class="line">        set_state_service = rospy.ServiceProxy(<span class="string">&#x27;/gazebo/set_model_state&#x27;</span>,SetModelState)</span><br><span class="line">        objstate = SetModelStateRequest()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#set quadrotor pose</span></span><br><span class="line">        objstate.model_state.model_name = <span class="string">&#x27;quadrotor&#x27;</span></span><br><span class="line">        objstate.model_state.pose.position.x = <span class="number">5</span></span><br><span class="line">        objstate.model_state.pose.position.y = <span class="number">0</span></span><br><span class="line">        objstate.model_state.pose.position.z = <span class="number">0</span></span><br><span class="line">        objstate.model_state.pose.orientation.w = <span class="number">1</span></span><br><span class="line">        objstate.model_state.pose.orientation.x = <span class="number">0</span></span><br><span class="line">        objstate.model_state.pose.orientation.y = <span class="number">0</span></span><br><span class="line">        objstate.model_state.pose.orientation.z = <span class="number">0</span></span><br><span class="line">        objstate.model_state.twist.linear.x = <span class="number">0.0</span></span><br><span class="line">        objstate.model_state.twist.linear.y = <span class="number">0.0</span></span><br><span class="line">        objstate.model_state.twist.linear.z = <span class="number">0.0</span></span><br><span class="line">        objstate.model_state.twist.angular.x = <span class="number">0.0</span></span><br><span class="line">        objstate.model_state.twist.angular.y = <span class="number">0.0</span></span><br><span class="line">        objstate.model_state.twist.angular.z = <span class="number">0.0</span></span><br><span class="line">        objstate.model_state.reference_frame = <span class="string">&quot;world&quot;</span></span><br></pre></td></tr></table></figure>
<p>这里需要设置很多position和orientation和twist是因为如下图所示包含的信息</p>
<p><img src="/2019/05/24/ROS/gazebo%E9%85%8D%E7%BD%AE/rosmsg_info.png" alt></p>
<p>参考网址：<a href="https://answers.ros.org/question/246419/gazebo-spawn_model-from-py-source-code/">网址1</a>、<a href="https://answers.ros.org/question/248630/calling-gazebospawn_sdf_model-service-from-rosjava/">网址2</a>、<a href="http://gazebosim.org/tutorials/?tut=ros_comm">网址3</a>、<a href="http://wiki.ros.org/cn/ROS/Tutorials/WritingServiceClient%28python%29">网址4</a></p>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>Gazebo</tag>
      </tags>
  </entry>
  <entry>
    <title>树的相关知识</title>
    <url>/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="1、为什么需要树？"><a href="#1、为什么需要树？" class="headerlink" title="1、为什么需要树？"></a>1、为什么需要树？</h2><blockquote>
<p>结合了两种数据结构的有点：（1）有序数组（2）链表</p>
<p>有序数组查找速度快，链表插入和删除速度快</p>
</blockquote>
<h2 id="2、有序数组中插入数据项为什么慢？"><a href="#2、有序数组中插入数据项为什么慢？" class="headerlink" title="2、有序数组中插入数据项为什么慢？"></a>2、有序数组中插入数据项为什么慢？</h2><blockquote>
<p>首先，要查找到新数据项待插入的位置</p>
<p>其次，比新数据项大的数据项全部后移，需要进行多次移动，导致很费时</p>
</blockquote>
<h3 id="2-1、有序数组的插入"><a href="#2-1、有序数组的插入" class="headerlink" title="2.1、有序数组的插入"></a>2.1、有序数组的插入</h3><blockquote>
<p>插入：平均要移动数组中一半的数据项（N/2次移动），删除数据项也需要多次移动，非常耗时</p>
</blockquote>
<h2 id="3、链表中查找太慢？"><a href="#3、链表中查找太慢？" class="headerlink" title="3、链表中查找太慢？"></a>3、链表中查找太慢？</h2><blockquote>
<p>链表的插入和删除都很快，因为只需要改变引用值就可以了，时间复杂度为O(1)</p>
<p>但查找，必须从头开始，依次访问链表中的每一个数据项，直到找到该数据为止。</p>
<p>查找：平均要访问N/2个数据项，把每个数据项的值和要查找的数据项作比较，这个很慢。</p>
</blockquote>
<h1 id="数据存储结构"><a href="#数据存储结构" class="headerlink" title="数据存储结构"></a>数据存储结构</h1><blockquote>
<p>常见的数据存储方式有两种：（1）顺序存储（数组）（2）非顺序存储（链表）</p>
</blockquote>
<h2 id="1、有序数组"><a href="#1、有序数组" class="headerlink" title="1、有序数组"></a>1、有序数组</h2><blockquote>
<p>当我们平常在一组相关类型的变量集合中进行查询搜索时，通常使用有序数组的存储方式，因为时间复杂度从O(n)降低为O(log n)，因此查询速度快</p>
<p>但是在进行相关的增删时，为了保证有序性，可能要进行大量的移动，因此比较耗时</p>
</blockquote>
<h2 id="2、链表"><a href="#2、链表" class="headerlink" title="2、链表"></a>2、链表</h2><blockquote>
<p>但我们的内存空间并不一定都是连续的，因此就有了另一种存储方式：<strong>链表存储</strong></p>
<p>利用链表存储，就能有效的将这些零散的碎片空间存储下来，因为链表中有一块区域是存储的指向下一个数据的指针，因此链表在插入和删除时，比较容易，只需要改变指针指向的位置即可。</p>
<p>但是在进行查询时，必须要从头一个个向后找，比较耗时。</p>
</blockquote>
<h2 id="3、二叉查找树（BST）"><a href="#3、二叉查找树（BST）" class="headerlink" title="3、二叉查找树（BST）"></a>3、二叉查找树（BST）</h2><blockquote>
<p>针对有序数组和链表的优点，又引出了一种树形存储结构（二叉查找树），结合了有序数组和链表的优点：</p>
<p>使得，在树中查找数据时，其速度和在有序数组中查找一样快；</p>
<p>在插入数据和删除数据时，和在链表中一样快</p>
<p>可点击<a href="https://www.cs.usfca.edu/~galles/visualization/">二叉查找树在线演示</a>，进行实战演示，在比较理想的情况下，二叉查找树可能如下图所示</p>
<p>从下图中也可以看出，二叉查找树的特点：左子树的节点值比父节点小，右子树的节点值比父节点大。</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/二叉树.png" alt="二叉树"></p>
<h2 id="4、平衡二叉树"><a href="#4、平衡二叉树" class="headerlink" title="4、平衡二叉树"></a>4、平衡二叉树</h2><blockquote>
<p>由于二叉查找树的特点，当我们输入的是一组有序序列时，二叉查找树又会退化成链表结构，其时间复杂度又变成O(n)。</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/二叉查找树缺点.png" alt></p>
<blockquote>
<p>为了解决这个问题，就引入了平衡二叉树的概念。</p>
<p>平衡二叉树(balanced binary tree)的定义：</p>
<ul>
<li>又称为AVL树（Adelson-Velskii and Labdis）</li>
<li>一颗平衡二叉树或者是空树，或者是具有下列性质的<strong>二叉排序树</strong>：</li>
</ul>
<p>（1）<strong>左</strong>子树与<strong>右</strong>子树的<strong>高度之差</strong>的绝对值<strong>小于等于1</strong></p>
<p>（2）<strong>左</strong>子树和<strong>右</strong>子树也是<strong>平衡</strong>二叉排序树</p>
<p>这样，在二叉查找树的插入过程中，通过左旋和右旋等操作就能解决二叉查找树的缺点。使得对于有n个节点的平衡树，其最坏的时间查找复杂度也为O(log n)</p>
<p>可点击<a href="https://www.cs.usfca.edu/~galles/visualization/AVLtree.html">平衡二叉树在线练习</a>，进行实战演示</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/平衡二叉树.png" alt></p>
<h3 id="4-1-如何判断二叉树是否为平衡二叉树？"><a href="#4-1-如何判断二叉树是否为平衡二叉树？" class="headerlink" title="4.1 如何判断二叉树是否为平衡二叉树？"></a>4.1 如何判断二叉树是否为平衡二叉树？</h3><blockquote>
<p>为了方便起见，给每个结点附加一个数字，给出<strong>该结点左子树与右子树的高度差</strong>，这个数字称为结点的<strong>平衡因子</strong>（BF）。</p>
<p>​                    <strong>平衡因子   =   结点左子树的高度  -  结点右子树的高度</strong></p>
<p>根据平衡二叉树的定义，平衡二叉树上所有结点的平衡因子只能是<strong>-1</strong>、<strong>0</strong>或者<strong>1</strong></p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516111516238.png" alt="image-20210516111516238"></p>
<h3 id="4-2-失衡二叉树"><a href="#4-2-失衡二叉树" class="headerlink" title="4.2 失衡二叉树"></a>4.2 失衡二叉树</h3><blockquote>
<p>在二叉查找树的插入和删除过程中，往往会导致二叉树的失衡，且可能存在多个失衡结点，此时：</p>
<p>​    当不止一个失衡结点时，失衡结点取最小失衡子树的根结点，如下图中的7和16都为失衡结点，但16的子树结点个数更少，因此选择16作为失衡结点。</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516112010679.png" alt="image-20210516112010679"></p>
<blockquote>
<p>失衡时，往往会出现如下四种情况，这四种情况也可以称为失衡二叉树</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516110218048.png" alt="image-20210516110218048"></p>
<h4 id="4-2-1-LL型的调整过程"><a href="#4-2-1-LL型的调整过程" class="headerlink" title="4.2.1 LL型的调整过程"></a>4.2.1 LL型的调整过程</h4><blockquote>
<p>以下图为例，<strong>C</strong>表示要插入的新结点，当插入<strong>C</strong>之后，可能会导致<strong>A</strong>失衡，此时<strong>A</strong>称为失衡结点。</p>
<p>根据二叉排序树的特性，左子树小于根节点小于右子树，可以得出如下信息：</p>
<p>调整前：<strong>C  &lt; B  &lt; A</strong>，但<strong>A</strong>为根结点（失衡结点）</p>
<p>调整后：<strong>C  &lt; B  &lt; A</strong>，<strong>B</strong>为根结点，才能保证该树平衡</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516113640195.png" alt="image-20210516113640195"></p>
<blockquote>
<p>调整过程：</p>
<p>调整前，下图所示，在<strong>α</strong>后面新增一个结点，满足LL型的插入</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516114242603.png" alt="image-20210516114242603"></p>
<blockquote>
<p>调整后，如图所示，手写一遍，就明白了，一定要手写，加强理解</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516114441662.png" alt="image-20210516114441662"></p>
<h4 id="4-2-2-RR型的调整过程"><a href="#4-2-2-RR型的调整过程" class="headerlink" title="4.2.2 RR型的调整过程"></a>4.2.2 RR型的调整过程</h4><blockquote>
<p>调整前：<strong>A  &lt; B  &lt; C</strong>，但<strong>A</strong>为根结点（失衡结点）</p>
<p>调整后：<strong>A  &lt; B  &lt; C</strong>，<strong>B</strong>为根结点，才能保证该树平衡</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516120619802.png" alt="image-20210516120619802"></p>
<blockquote>
<p>调整前：在<strong>β</strong>后面新加入一个结点，满足RR型</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516115052986.png" alt="image-20210516115052986"></p>
<blockquote>
<p>调整后：</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516115318556.png" alt="image-20210516115318556"></p>
<h4 id="4-2-3-LR型的调整过程"><a href="#4-2-3-LR型的调整过程" class="headerlink" title="4.2.3 LR型的调整过程"></a>4.2.3 LR型的调整过程</h4><blockquote>
<p>调整前：<strong>B  &lt; C  &lt; A</strong>，但<strong>A</strong>为根结点（失衡结点）</p>
<p>调整后：<strong>B  &lt; C  &lt; A</strong>，<strong>C</strong>为根结点，才能保证该树平衡</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516120721446.png" alt="image-20210516120721446"></p>
<blockquote>
<p>调整前：在<strong>β</strong>后面新增一个结点，导致<strong>A</strong>失衡。</p>
<p>假设<strong>γ</strong>和<strong>β</strong>的高度都为<strong>h</strong>，则<strong>α</strong>和<strong>C</strong>同高度，就都为<strong>h+1</strong>，因此<strong>δ</strong>的高度为<strong>h+1</strong>（因为A的平衡因子为1，左子树要比右子树的高度大1，而<strong>B</strong>的高度为<strong>h+2</strong>，所以<strong>δ</strong>的高度为<strong>h+1</strong>）</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516115609645.png" alt="image-20210516115609645"></p>
<blockquote>
<p>调整后：</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516120151405.png" alt="image-20210516120151405"></p>
<h4 id="4-2-4-RL型的调整过程"><a href="#4-2-4-RL型的调整过程" class="headerlink" title="4.2.4 RL型的调整过程"></a>4.2.4 RL型的调整过程</h4><blockquote>
<p>调整前：<strong>C  &lt; B  &lt; A</strong>，但<strong>A</strong>为根结点（失衡结点）</p>
<p>调整后：<strong>C  &lt; B  &lt; A</strong>，<strong>B</strong>为根结点，才能保证该树平衡</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516120850226.png" alt="image-20210516120850226"></p>
<blockquote>
<p>调整前：</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516120256825.png" alt="image-20210516120256825"></p>
<blockquote>
<p>调整后，可参考4.2.3小节来模拟（明白LR就可以明白RL了）</p>
</blockquote>
<h3 id="4-3-平衡二叉树的删除"><a href="#4-3-平衡二叉树的删除" class="headerlink" title="4.3 平衡二叉树的删除"></a>4.3 平衡二叉树的删除</h3><blockquote>
<p>后续在学习</p>
</blockquote>
<h2 id="5、2-3树"><a href="#5、2-3树" class="headerlink" title="5、2-3树"></a>5、2-3树</h2><blockquote>
<p>因为平衡二叉树要求每个节点的左子树和右子树的高度差不超过1，这个要求实在太严格，导致每次进行插入/删除节点的时候，几乎都会破坏平衡二叉树的第二个规则，因此总是需要左旋和右旋来调整，使之再次成为一颗符合要求的平衡树。</p>
<p>如果在那种插入、删除很频繁的场景中，平衡树需要频繁的进行调整，会使得平衡树的性能大打折扣；</p>
<p>那么有没有绝对平衡的一种树呢？没有高度差也不会有平衡因子，没有平衡因子也就不会调整旋转等操作。</p>
<p>为了解决这个问题，就有了2-3树。2-3树正是一种绝对平衡的树，任意结点到它所有叶子节点的深度都是相等的。</p>
</blockquote>
<h3 id="5-2-1-2-3树的性质"><a href="#5-2-1-2-3树的性质" class="headerlink" title="5.2.1 2-3树的性质"></a>5.2.1 2-3树的性质</h3><blockquote>
<p>2-3树是一种<strong>多路查找树</strong>，2和3的意思就是2-3树包含两种特点：</p>
<p>（1）<strong>2节点</strong>：包含一个元素（数据域）和两条链接（指针域）</p>
<p>​                <font color="red">2节点要么有两个孩子，要么没有孩子，不允许只有一个孩子</font></p>
<p>（2）<strong>3节点</strong>：包含一大一小两个元素（数据域）和三个链接（指针域）（两个元素按大小顺序排序好）</p>
<p>​                <font color="red">3节点要么有三个孩子，要么就没有孩子，不允许有一个或两个孩子</font></p>
<p>（3）2-3树所有叶子节点都在同一层次</p>
<p>（4）<strong>插入结点时不能将该节点插入到一个空节点上，新的结点只能通过分裂或者融合产生</strong></p>
<p>（5）当2-3树只有2节点的时候，其只能是一颗满二叉树（完美二叉树）</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516122522724.png" alt="image-20210516122522724"></p>
<h3 id="5-2-2-满二叉树介绍"><a href="#5-2-2-满二叉树介绍" class="headerlink" title="5.2.2 满二叉树介绍"></a>5.2.2 满二叉树介绍</h3><blockquote>
<p>一个二叉树，如果每一个层的节点数都达到最大值，则这个二叉树就是满二叉树</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516122943370.png" alt="image-20210516122943370"></p>
<h3 id="5-2-3-完全二叉树介绍"><a href="#5-2-3-完全二叉树介绍" class="headerlink" title="5.2.3 完全二叉树介绍"></a>5.2.3 完全二叉树介绍</h3><blockquote>
<p>假设二叉树的深度为h，除第h层外，其他各层（1~h-1）的结点数都达到最大个数，第h层所有的节点都连续集中在最左边，这就是完全二叉树。</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516123059585.png" alt="image-20210516123059585"></p>
<h3 id="5-2-4-2-3树的插入"><a href="#5-2-4-2-3树的插入" class="headerlink" title="5.2.4 2-3树的插入"></a>5.2.4 2-3树的插入</h3><p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516123320652.png" alt="image-20210516123320652"></p>
<blockquote>
<p>插入过程：</p>
<p>如上图所示，依次插入（1,2,3,4,5）五个元素</p>
<p>（1）插入元素1：创建一个<strong>2节点</strong>（元素为1）</p>
<p>（2）插入元素2：其1,2元素融合暂时形成一个<strong>3节点</strong>，</p>
<p>​        为什么2元素不能生成一个节点作为1元素所在节点的右孩子？</p>
<p>​        因为插入结点时不能将该节点插入到一个空节点上，新的结点只能通过分裂或者融合产生。</p>
<p>（3）插入元素3：其1,2,3元素暂时融合形成一个<strong>4节点</strong></p>
<p>​        开始分裂，因为这是一颗2-3树，不存在4节点，所以暂时形成的4节点要开始分裂，将中间的元素作为根节点，左右两个元素各位其左右孩子节点，形成一颗满二叉树</p>
<p>（4）插入元素4：根据元素大小，与元素3形成一个<strong>3节点</strong>（新节点不能插入到一个空节点）</p>
<p>（5）插入元素5：根据元素大小，插入到3,4所在的3节点上，暂时形成一个4<strong>节点</strong></p>
<p>​        开始分裂，3,4,5开始分裂为：4为根节点，3,5各自作为4的左右孩子</p>
<p>​        开始融合，根据2-3树的特点：所有叶子节点都在同一层或2-3树只有2节点时，只能是一颗满二叉树的性质，所以2-3树要向上融合满足2-3树的性质，因此将4元素向上融合，与元素2组成一个<strong>3节点</strong></p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516124602002.png" alt="image-20210516124602002"></p>
<blockquote>
<p>继续插入6,7元素，根据分裂和融合，可以形成最终的上图所在的满二叉树</p>
</blockquote>
<h2 id="6、红黑树"><a href="#6、红黑树" class="headerlink" title="6、红黑树"></a>6、红黑树</h2><blockquote>
<p>由于将2-3树这种直白的表述写成代码实现起来并不方便，因为需要处理的情况太多，需要维护两种不同类型的节点，将链接和其他信息从一个节点复制到另一个结点，将结点从一种类型转换为另一种类型等等。</p>
<p>因此，红黑树出现了，红黑树背后的逻辑就是2-3树的逻辑。</p>
</blockquote>
<h3 id="6-1-红黑树的定义"><a href="#6-1-红黑树的定义" class="headerlink" title="6.1 红黑树的定义"></a>6.1 红黑树的定义</h3><blockquote>
<p>（1）红黑树具备二分搜索树的所有性质</p>
<p>（2）红黑树的根节点是黑色的</p>
<p>（3）红黑树的每个节点是红色的，或者是黑色的</p>
<p>​            <strong>红色表示2-3树中的3节点中的左值</strong></p>
<p>（4）如果一个节点是红色的，那么它的孩子都是黑色的</p>
<p>（5）每个叶子节点（红黑树中叶子节点为最后的空节点）是黑色的</p>
<p>（6）从任意一个节点到叶子节点经过的黑色节点时一样的</p>
<p>红黑树的示意图如下，其叶子节点为NIL的节点，并非其中的10、50、140等等</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516131001619.png" alt="image-20210516131001619"></p>
<h3 id="6-2-左倾红黑树与2-3树的等价性"><a href="#6-2-左倾红黑树与2-3树的等价性" class="headerlink" title="6.2 左倾红黑树与2-3树的等价性"></a>6.2 左倾红黑树与2-3树的等价性</h3><blockquote>
<p>红黑树的另一种定义：</p>
<p>（1）<strong>红链接均为左链接</strong></p>
<p>​            <strong>红色表示2-3树中的3节点中的左值</strong></p>
<p>（2）没有任何一个节点同时和两条红链接相连</p>
<p>​            在2-3树中，不存在永久的4节点，4节点终究要分解，因此2-3树中没有任何一个节点能同时和两条红链接相连</p>
<p>（3）该树是完美黑色平衡的，即任意空链接到根节点的路径上的黑链接数量相同（和2-3树是等价的，任意节点到其叶子节点的高度是相同的）</p>
<p>​            2-3树是完美平衡的，将3节点转成二叉树只增加了左红链接，其他黑色链接没有什么变化，依然是黑色平衡的。</p>
<p>2-3树与红黑树的关系比较</p>
<p>（1）2-3树中的2节点<strong>[a]</strong>转换为红黑树的黑色结点<strong>[a]</strong></p>
<p>（2）2-3树中的3节点<strong>[b,c]</strong>可以转换为红黑色中的[<font color="red">b</font>,c]，其红黑树中，<strong>c</strong>为黑色节点，<font color="red">b</font>为红色节点。</p>
<p>​        因为  b &lt; c ,所以b作为c的左孩子下移，使用红色边表示b和c存在并列关系，表示在2-3树中b与c保存在一个3节点中；</p>
<p>​        在实际代码中，没有必要定义一个边的类，由于节点b和红色边是一一对应关系，<strong>所以可以将节点b标记为红色，表示节点与其唯一的父节点是并列关系。</strong></p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516172217423.png" alt="image-20210516172217423"></p>
<blockquote>
<p>如上图所示，把这种2-3树转换后，节点分为红黑节点的树称为红黑树。根绝红黑树的转换过程，可以知道<strong>红色节点都是左倾斜的</strong>，这不是推导出来的，而是定义出来的。</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516172926313.png" alt="image-20210516172926313"></p>
<h3 id="6-3-2-3树到红黑树的转换规则"><a href="#6-3-2-3树到红黑树的转换规则" class="headerlink" title="6.3 2-3树到红黑树的转换规则"></a>6.3 2-3树到红黑树的转换规则</h3><blockquote>
<p>2-3树有两类节点：2节点和3节点，还有一个临时的4节点</p>
<p>2节点：</p>
<p>（1）2-3树：生成一个2节点，存储元素1</p>
<p>（2）红黑树：<strong>对应于一个黑色节点</strong></p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516184432656.png" alt="image-20210516184432656"></p>
<blockquote>
<p>3节点：</p>
<p>（1）2-3树：生成一个3节点</p>
<p>（2）按照左倾红黑树与2-3树的等价性，且2&gt;1，因此2为黑色根节点，1为红色子节点</p>
<p>​            对应于红黑树黑色的父节点和红色的左孩子节点</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516184801321.png" alt="image-20210516184801321"></p>
<blockquote>
<p>临时4节点：</p>
<p>（1）2-3树：生成一个临时4节点，进行分裂</p>
<p>（2）对应于红黑树红色父节点和黑色的左右孩子节点</p>
<p>​            为什么父节点是红色而不是黑色？是为了符合红黑树中插入任何一个节点默认都是红色的实现方式</p>
<p>​            如果该父节点是根节点，那么它肯定需要变色这一点就不属于2-3树向红黑树得的变换规则了，而属于红黑树的性质</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516185544127.png" alt="image-20210516185544127"></p>
<h3 id="6-4-红黑树的旋转、变色和颜色反转"><a href="#6-4-红黑树的旋转、变色和颜色反转" class="headerlink" title="6.4 红黑树的旋转、变色和颜色反转"></a>6.4 红黑树的旋转、变色和颜色反转</h3><blockquote>
<p>分别向2-3树和红黑树中依次插入（1,2,3）三个元素来看旋转、变色和颜色反转的过程</p>
<p>红黑树的一个性质：<strong>根节点必须为黑色的</strong>。</p>
<p>一个实现红黑树的规则：<strong>新插入的节点永远为红色</strong></p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516182342435.png" alt="image-20210516182342435"></p>
<blockquote>
<p>如上图所示，插入元素1</p>
<p>2-3树就是一个2节点，不需要做任何改变</p>
<p>根据红黑树添加的规则：新插入的节点为红色，所以1元素的节点为红色。根据红黑树的性质：根节点必须为黑色，所以1元素的节点需要进行变色。</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516190634822.png" alt="image-20210516190634822"></p>
<blockquote>
<p>插入元素2：</p>
<p>（1）插入元素2，2-3树会形成一个3节点。</p>
<p>（2）根据2-3树向红黑树的转换规则，需要变为2元素所在的节点为黑色的父节点，1元素所在的节点为红色，并为2元素的左孩子节点。</p>
<p>​        左旋：根据二分搜索树的性质，插入的2元素会成为1元素的右孩子，这时需要我们对1元素进行左旋转，然后得到如上左旋转后的结果。</p>
<p>​        变色：再将2元素换为1元素的颜色，然后将1元素变为红色。</p>
<p>​        为什么这样变色？首先为向上兼容，该字数的根节点需要始终保持原来的颜色，即新的根节点2换成原来的根节点的颜色。其次，根据2-3树中3节点的左值均为红色，需要将1节点的颜色变为红色。</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516192307295.png" alt="image-20210516192307295"></p>
<blockquote>
<p>插入元素3：</p>
<p>（1）2-3树：生成临时4节点，进行分裂</p>
<p>（2）红黑树：新插入的节点都是红色的，所以，这时会形成一个根节点为2，左右孩子都是红色的节点</p>
<p>​        颜色反转：根据2-3树向红黑树变化的规则，并不满足。需要进行颜色反转，即将1,3元素变为黑色，2元素变为红色。</p>
<p>​            为什么这样进行颜色反转？因为在2-3树中，4节点分裂后要向上融合。</p>
<p>​        变色：这时2元素为根节点，根据红黑树的性质，需要进行变色即可。如果2元素不是根节点，需要向上融合，如6.3所示</p>
</blockquote>
<h4 id="6-4-1-旋转"><a href="#6-4-1-旋转" class="headerlink" title="6.4.1 旋转"></a>6.4.1 旋转</h4><blockquote>
<p>在插入或者删除操作中可能会出现右倾或者两条连续的红链接，在向上变换的过程中（恢复）都要调整为左倾。</p>
</blockquote>
<h5 id="6-4-1-1-左旋转"><a href="#6-4-1-1-左旋转" class="headerlink" title="6.4.1.1 左旋转"></a>6.4.1.1 左旋转</h5><blockquote>
<p>假设有一条红色的右链接需要转为左链接，如下图所示：</p>
<p>这个操作叫做左旋转，右链接变成左链接，意味着被红链接指向的节点会变成红色，根节点默认是黑色</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516192918917.png" alt="image-20210516192918917"></p>
<h5 id="6-4-1-2-右旋转"><a href="#6-4-1-2-右旋转" class="headerlink" title="6.4.1.2 右旋转"></a>6.4.1.2 右旋转</h5><blockquote>
<p>右旋转也一样，不过在左倾红黑树中，只有出现两条连续红色的左链接才会进行右旋转。</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516193647167.png" alt="image-20210516193647167"></p>
<h4 id="6-4-2-颜色变换"><a href="#6-4-2-颜色变换" class="headerlink" title="6.4.2 颜色变换"></a>6.4.2 颜色变换</h4><blockquote>
<p>颜色变化是用在临时4-节点上的，不管是向下变换还是向上变换。</p>
</blockquote>
<p><img src="/2021/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20210516193806961.png" alt="image-20210516193806961"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>通过上面依次插入（1,2,3）的过程，我们总结一个规律：</p>
<p>（1）右旋：当一个节点的左孩子节点和左孩子节点都是红色的时候，需要右旋</p>
<p>（2）左旋：当一个节点的右孩子是红色节点并且左孩子不是红色，需要左旋</p>
<p>（3）颜色反转：当一个节点的左右孩子节点都是红色的时候需要进行颜色反转</p>
</blockquote>
<h3 id="6-5-红黑树的删除"><a href="#6-5-红黑树的删除" class="headerlink" title="6.5 红黑树的删除"></a>6.5 红黑树的删除</h3><blockquote>
<p>后续待学习</p>
</blockquote>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="https://www.bilibili.com/video/av37955178">失衡二叉树</a></li>
<li><a href="https://www.jianshu.com/p/31f1708b7306">2-3树参考1</a></li>
<li><a href="https://www.cnblogs.com/hello-shf/p/11364565.html">2-3树参考2（重点参考）</a></li>
<li><a href="https://my.oschina.net/u/2862573/blog/3101893">2-3树参考3</a></li>
<li><a href="https://mp.weixin.qq.com/s/lm3WKiq2BvxRq8Ym03J-yw">2-3树参考4（重点参考）</a></li>
</ul>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>代码实现（一）之Nature DQN</title>
    <url>/2019/08/06/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BNature-DQN/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>主要参考莫烦大神的代码，对OpenAI gym的CartPole环境进行算法验证，所用算法为2015版本的Nature DQN。<a href="https://github.com/ldgcug/DeepReinforcementLearning-Tensorflow/tree/master/Nature%20DQN">全部代码</a></p>
</blockquote>
<h2 id="一、CartPole说明"><a href="#一、CartPole说明" class="headerlink" title="一、CartPole说明"></a>一、CartPole说明</h2><blockquote>
<p>下图中的动态图没有显示出来，详细信息，点击<a href="https://gym.openai.com/envs/CartPole-v0/">CartPole-V0</a></p>
</blockquote>
<p><img src="/2019/08/06/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BNature-DQN/1.png" alt></p>
<p>杆通过未致动的接头连接到推车，推车沿着无摩擦的轨道移动。通过向推车施加+1或-1的力来控制系统。钟摆开始直立，目标是防止它倒下。每个时间步长都会提供+1的奖励，以保持杆保持直立。当极点与垂直方向相差超过15度时，该episode结束，或者推车从中心移动超过2.4个单位。</p>
<p><strong>CartPole的详细说明：</strong><a href="https://github.com/openai/gym/wiki/CartPole-v0">wiki介绍</a></p>
<p><img src="/2019/08/06/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BNature-DQN/9.png" alt></p>
<h2 id="二、算法伪代码"><a href="#二、算法伪代码" class="headerlink" title="二、算法伪代码"></a>二、算法伪代码</h2><blockquote>
<p>图片主要来源于<a href="https://blog.csdn.net/u013236946/article/details/72871858">草帽B-O-Y</a>的博客</p>
</blockquote>
<p><strong>NIPS 2013版本</strong></p>
<p><img src="/2019/08/06/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BNature-DQN/2.png" alt></p>
<p><strong>Nature 2015</strong>：本篇笔记中使用的算法</p>
<p><img src="/2019/08/06/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BNature-DQN/3.png" alt></p>
<h2 id="三、代码介绍"><a href="#三、代码介绍" class="headerlink" title="三、代码介绍"></a>三、代码介绍</h2><h3 id="3-1-代码组成"><a href="#3-1-代码组成" class="headerlink" title="3.1 代码组成"></a>3.1 代码组成</h3><blockquote>
<p>主要由两部分组成：dqn.py和run_CartPole.py</p>
</blockquote>
<h3 id="3-2-DQN实现-dqn-py"><a href="#3-2-DQN实现-dqn-py" class="headerlink" title="3.2 DQN实现(dqn.py)"></a>3.2 DQN实现(dqn.py)</h3><blockquote>
<p>主要包含（1）建cnn基本网络和Target目标网络（2）经验回放池数据存储（3）e-greedy行为选择（4）cnn神经网络训练等四部分</p>
</blockquote>
<h4 id="3-2-1-程序框架"><a href="#3-2-1-程序框架" class="headerlink" title="3.2.1 程序框架"></a>3.2.1 程序框架</h4><blockquote>
<p>主要包含以下几个函数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf </span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DQN</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,</span></span></span><br><span class="line"><span class="params"><span class="function">		s_dim,</span></span></span><br><span class="line"><span class="params"><span class="function">		a_dim,</span></span></span><br><span class="line"><span class="params"><span class="function">		learning_rate = <span class="number">0.01</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">		reward_decay = <span class="number">0.9</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">		e_greedy = <span class="number">0.9</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">		replace_target_iter = <span class="number">300</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">		memory_size = <span class="number">500</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">		batch_size = <span class="number">32</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">		e_greedy_increment = <span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">		output_graph = <span class="literal">False</span></span>):</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 创建Q网络和目标网络</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">build_net</span>(<span class="params">self</span>):</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 存储一个transition </span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">store_transition</span>(<span class="params">self,s,a,r,s_,done</span>):</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 根据e-greedy进行行为选择</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_action</span>(<span class="params">self,state</span>):</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 训练cnn网络，并且隔一定步数进行target参数更新</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">learn</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将target参数更新单独的写成了一个函数</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">train_target</span>(<span class="params">self</span>):</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">#输出损失值</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">plot_cost</span>(<span class="params">self</span>):</span></span><br></pre></td></tr></table></figure>
<h4 id="3-2-2-初始化"><a href="#3-2-2-初始化" class="headerlink" title="3.2.2 初始化"></a>3.2.2 初始化</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,</span></span></span><br><span class="line"><span class="params"><span class="function">		s_dim,</span></span></span><br><span class="line"><span class="params"><span class="function">		a_dim,</span></span></span><br><span class="line"><span class="params"><span class="function">		learning_rate = <span class="number">0.01</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">		reward_decay = <span class="number">0.9</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">		e_greedy = <span class="number">0.9</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">		replace_target_iter = <span class="number">300</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">		memory_size = <span class="number">500</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">		batch_size = <span class="number">32</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">		e_greedy_increment = <span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">		output_graph = <span class="literal">False</span></span></span></span><br><span class="line"><span class="params"><span class="function">	</span>):</span></span><br><span class="line">		self.s_dim = s_dim	<span class="comment">#状态维度（4维）</span></span><br><span class="line">		self.a_dim = a_dim  <span class="comment">#行为维度（2维）</span></span><br><span class="line">		self.lr = learning_rate <span class="comment">#学习率</span></span><br><span class="line">		self.gamma = reward_decay <span class="comment">#折扣因子</span></span><br><span class="line">		self.epsilon_max = e_greedy <span class="comment"># e_greedy的上限</span></span><br><span class="line">		self.replace_target_iter = replace_target_iter <span class="comment"># 经历C步之后更新target参数</span></span><br><span class="line">		self.memory_size = memory_size  <span class="comment">#经验回放池大小</span></span><br><span class="line">		self.memory_count = <span class="number">0</span> <span class="comment"># 经验回放池中的个数</span></span><br><span class="line">		self.memory = deque() <span class="comment"># 创建经验回放池</span></span><br><span class="line">		self.batch_size = batch_size <span class="comment"># mini-batch</span></span><br><span class="line">		self.epsilon_increment = e_greedy_increment <span class="comment">#e_greedy的增长速度</span></span><br><span class="line">		self.epsilon = <span class="number">0</span> <span class="keyword">if</span> e_greedy_increment <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> self.epsilon_max</span><br><span class="line"></span><br><span class="line">		<span class="comment"># total learning step</span></span><br><span class="line">		self.learn_step_counter = <span class="number">0</span> <span class="comment">#总训练步长</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># consist of [target_net,evaluate_net]</span></span><br><span class="line">		self.build_net()  <span class="comment">#创建Q网络和Target Q网络</span></span><br><span class="line">		self.sess = tf.Session() <span class="comment">#开始会话</span></span><br><span class="line">		self.sess.run(tf.global_variables_initializer())</span><br><span class="line"></span><br><span class="line">		self.cost_his = [] <span class="comment">#记录损失函数值</span></span><br></pre></td></tr></table></figure>
<h4 id="3-2-3-创建Q网络和目标网络"><a href="#3-2-3-创建Q网络和目标网络" class="headerlink" title="3.2.3 创建Q网络和目标网络"></a>3.2.3 创建Q网络和目标网络</h4><blockquote>
<p>Q网络和Target Q网络最大的不同在于Q网络的输入是$s$，而Target Q网络的输入是$s’$，其他的网络结构和初始化参数全部相同，Q网络的输出用self.q_eval表示，Target Q网络的输出用self.q_next表示。中间层设置为20</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_net</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="comment"># ************************ build evaluate net *****************************</span></span><br><span class="line">		self.s = tf.placeholder(tf.float32,[<span class="literal">None</span>,self.s_dim],name=<span class="string">&#x27;s_dim&#x27;</span>) <span class="comment">#input</span></span><br><span class="line">		self.q_target = tf.placeholder(tf.float32,[<span class="literal">None</span>,self.a_dim],name=<span class="string">&#x27;q_target&#x27;</span>) <span class="comment">#for calculating loss</span></span><br><span class="line"></span><br><span class="line">		w_initializer = tf.random_normal_initializer(<span class="number">0.</span>,<span class="number">0.3</span>)</span><br><span class="line">		b_initializer = tf.constant_initializer(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;eval_net&#x27;</span>):</span><br><span class="line">			c_names = [<span class="string">&#x27;eval_net_params&#x27;</span>,tf.GraphKeys.GLOBAL_VARIABLES]</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;layer1&#x27;</span>):</span><br><span class="line">				w1 = tf.get_variable(<span class="string">&#x27;w1&#x27;</span>,[self.s_dim,<span class="number">20</span>],initializer=w_initializer,collections=c_names)</span><br><span class="line">				b1 = tf.get_variable(<span class="string">&#x27;b1&#x27;</span>,[<span class="number">20</span>],initializer=b_initializer,collections=c_names)</span><br><span class="line">				l1 = tf.nn.relu(tf.matmul(self.s,w1)+b1)</span><br><span class="line"></span><br><span class="line">			<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;layer2&#x27;</span>):</span><br><span class="line">				w2 = tf.get_variable(<span class="string">&#x27;w2&#x27;</span>,[<span class="number">20</span>,self.a_dim],initializer=w_initializer,collections=c_names)</span><br><span class="line">				b2 = tf.get_variable(<span class="string">&#x27;b2&#x27;</span>,[self.a_dim],initializer=b_initializer,collections=c_names)</span><br><span class="line">				self.q_eval = tf.matmul(l1,w2) + b2</span><br><span class="line"></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;loss&#x27;</span>):</span><br><span class="line">			self.loss = tf.reduce_mean(tf.squared_difference(self.q_target,self.q_eval))</span><br><span class="line"></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;train&#x27;</span>):</span><br><span class="line">			self.train_op = tf.train.RMSPropOptimizer(self.lr).minimize(self.loss)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># ************************ build target net *****************************</span></span><br><span class="line">		self.s_ = tf.placeholder(tf.float32,[<span class="literal">None</span>,self.s_dim],name=<span class="string">&#x27;s_&#x27;</span>) <span class="comment">#input</span></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;target_net&#x27;</span>):</span><br><span class="line">			c_names = [<span class="string">&#x27;target_net_params&#x27;</span>,tf.GraphKeys.GLOBAL_VARIABLES]</span><br><span class="line"></span><br><span class="line">			<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;layer1&#x27;</span>):</span><br><span class="line">				w1 = tf.get_variable(<span class="string">&#x27;w1&#x27;</span>,[self.s_dim,<span class="number">20</span>],initializer=w_initializer,collections=c_names)</span><br><span class="line">				b1 = tf.get_variable(<span class="string">&#x27;b1&#x27;</span>,[<span class="number">20</span>],initializer=b_initializer,collections=c_names)</span><br><span class="line">				l1 = tf.nn.relu(tf.matmul(self.s_,w1)+b1)</span><br><span class="line"></span><br><span class="line">			<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;layer2&#x27;</span>):</span><br><span class="line">				w2 = tf.get_variable(<span class="string">&#x27;w2&#x27;</span>,[<span class="number">20</span>,self.a_dim],initializer=w_initializer,collections=c_names)</span><br><span class="line">				b2 = tf.get_variable(<span class="string">&#x27;b2&#x27;</span>,[self.a_dim],initializer=b_initializer,collections=c_names)</span><br><span class="line">				self.q_next = tf.matmul(l1,w2) + b2</span><br></pre></td></tr></table></figure>
<h4 id="3-2-4-经验回放池的数据存储"><a href="#3-2-4-经验回放池的数据存储" class="headerlink" title="3.2.4 经验回放池的数据存储"></a>3.2.4 经验回放池的数据存储</h4><blockquote>
<p>这里的存储方式和莫烦的存储方式不太一样，当数量小于回放池的大小时，直接添加；若回放池已经存满，则删除掉最开始的第一个数据，在进行添加。</p>
<p>我看的网上的很多代码中都用了one_hot_action来表示行为，也不太清楚其功能，我这里没有用</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">store_transition</span>(<span class="params">self,s,a,r,s_,done</span>):</span></span><br><span class="line">	<span class="comment"># transition = np.hstack((s,[a,r],s_,done))</span></span><br><span class="line">	<span class="comment"># # replace the old memory with new memory</span></span><br><span class="line">	<span class="comment"># index = self.memory_count % self.memory_size</span></span><br><span class="line">	<span class="comment"># self.memory[index,:] = transition</span></span><br><span class="line">	<span class="comment"># one_hot_action = np.zeros(self.a_dim)</span></span><br><span class="line">	<span class="comment"># one_hot_action[a] = 1</span></span><br><span class="line">	transition = (s,a,r,s_,done)</span><br><span class="line">	<span class="keyword">if</span> self.memory_count &lt; self.memory_size:</span><br><span class="line">		self.memory.append(transition)</span><br><span class="line">		self.memory_count += <span class="number">1</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		self.memory.popleft()</span><br><span class="line">		self.memory.append(transition)</span><br></pre></td></tr></table></figure>
<h4 id="3-2-5-e-greedy行为选择"><a href="#3-2-5-e-greedy行为选择" class="headerlink" title="3.2.5 e-greedy行为选择"></a>3.2.5 e-greedy行为选择</h4><blockquote>
<p>以一定几率选择行为，随训练的进行，逐渐减小随机的可能性，选择最大的值</p>
<p>由于是采用的epsilon增加的方式，因此，当小于epsilon时，从Q网络中进行选取，否则，随机选取</p>
<p>这里添加了一个<code>.reshape(-1,self.s_dim)</code>，是因为在创建网络时，s_dim的维度已经用占位符更改，而这里接收到的state是直接从env环境中获取的，没有进行任何更改，如果不添加reshape，则会报维度不匹配的错误。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose_action</span>(<span class="params">self,state</span>):</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> np.random.uniform() &lt; self.epsilon:</span><br><span class="line">		<span class="keyword">return</span> np.argmax(self.sess.run(self.q_eval,feed_dict=&#123;self.s:state.reshape(-<span class="number">1</span>,self.s_dim)&#125;))</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> np.random.randint(<span class="number">0</span>,self.a_dim)</span><br></pre></td></tr></table></figure>
<h4 id="3-2-6-训练cnn网络"><a href="#3-2-6-训练cnn网络" class="headerlink" title="3.2.6 训练cnn网络"></a>3.2.6 训练cnn网络</h4><blockquote>
<p>首先，检查Target网络是否需要更新，若达到相应的步数了，则更新；</p>
<p>其次，在从回放池中获取数据时，要进行一下判断，判断当前的回放池数据n是否已经超多mini-batch，若没有，则直接随机采取n个数据，反之，则用mini-batch进行随机采样；</p>
<p>最后，通过mini-batch求期望获取Q值和Target Q值，并根据这两个值求Loss，并进行优化</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">learn</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="comment"># cheak ro replace target parameters</span></span><br><span class="line">		<span class="keyword">if</span> self.learn_step_counter % self.replace_target_iter == <span class="number">0</span>:</span><br><span class="line">			self.train_target()</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;\n target_params_replaces \n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># sample batch memory from all memory</span></span><br><span class="line">		<span class="keyword">if</span> self.memory_count &gt; self.batch_size:</span><br><span class="line">			mini_batch = random.sample(self.memory,self.batch_size)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			mini_batch = random.sample(self.memory,self.memory_count)</span><br><span class="line"></span><br><span class="line">		states = np.asarray([e[<span class="number">0</span>] <span class="keyword">for</span> e <span class="keyword">in</span> mini_batch])</span><br><span class="line">		actions = np.asarray([e[<span class="number">1</span>] <span class="keyword">for</span> e <span class="keyword">in</span> mini_batch])</span><br><span class="line">		rewards = np.asarray([e[<span class="number">2</span>] <span class="keyword">for</span> e <span class="keyword">in</span> mini_batch])</span><br><span class="line">		next_states = np.asarray([e[<span class="number">3</span>] <span class="keyword">for</span> e <span class="keyword">in</span> mini_batch])</span><br><span class="line">		dones = np.asarray([e[<span class="number">4</span>] <span class="keyword">for</span> e <span class="keyword">in</span> mini_batch])</span><br><span class="line"></span><br><span class="line">		q_next = self.sess.run(self.q_next,feed_dict=&#123;self.s_:next_states&#125;)</span><br><span class="line">		q_eval = self.sess.run(self.q_eval,feed_dict=&#123;self.s:states&#125;)</span><br><span class="line">		q_target = q_eval.copy()</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mini_batch)):</span><br><span class="line">			<span class="keyword">if</span> dones[k]:</span><br><span class="line">				q_target[k][actions[k]] = rewards[k]</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				q_target[k][actions[k]]	= rewards[k] + self.gamma * np.<span class="built_in">max</span>(q_next[k])</span><br><span class="line"></span><br><span class="line">		loss = self.sess.run(self.loss,feed_dict=&#123;self.s:states,self.q_target:q_target&#125;)</span><br><span class="line">		self.cost_his.append(loss)</span><br><span class="line">		self.sess.run(self.train_op,feed_dict=&#123;self.s:states,self.q_target:q_target&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 随着训练时间增加，到后面就更大概率选择最大的action</span></span><br><span class="line">		self.epsilon = self.epsilon + self.epsilon_increment <span class="keyword">if</span> self.epsilon &lt; self.epsilon_max <span class="keyword">else</span> self.epsilon_max</span><br><span class="line">		self.learn_step_counter += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="3-2-7-目标网络参数更新"><a href="#3-2-7-目标网络参数更新" class="headerlink" title="3.2.7 目标网络参数更新"></a>3.2.7 目标网络参数更新</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_target</span>(<span class="params">self</span>):</span></span><br><span class="line">	t_params = tf.get_collection(<span class="string">&#x27;target_net_params&#x27;</span>)</span><br><span class="line">	e_params = tf.get_collection(<span class="string">&#x27;eval_net_params&#x27;</span>)</span><br><span class="line">	self.sess.run([tf.assign(t,e) <span class="keyword">for</span> t,e <span class="keyword">in</span> <span class="built_in">zip</span>(t_params,e_params)])</span><br></pre></td></tr></table></figure>
<h3 id="3-3-主函数（run-CartPole-py）"><a href="#3-3-主函数（run-CartPole-py）" class="headerlink" title="3.3 主函数（run_CartPole.py）"></a>3.3 主函数（run_CartPole.py）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">from</span> dqn <span class="keyword">import</span> DQN  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">env = gym.make(<span class="string">&#x27;CartPole-v0&#x27;</span>) <span class="comment">#使用CartPole-v0环境</span></span><br><span class="line">env = env.unwrapped   <span class="comment">#最好是添加， 不做这个会有很多限制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(env.action_space) <span class="comment"># 查看这个环境中可用的 action 有多少个</span></span><br><span class="line"><span class="built_in">print</span>(env.observation_space) <span class="comment"># 查看这个环境中可用的 state 的 observation 有多少个</span></span><br><span class="line"><span class="built_in">print</span>(env.observation_space.high) <span class="comment"># 查看 observation 最高取值</span></span><br><span class="line"><span class="built_in">print</span>(env.observation_space.low) <span class="comment"># 查看 observation 最低取值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义使用DQN算法，设定缓冲区即epsilon增长速度值</span></span><br><span class="line">RL = DQN(s_dim = env.observation_space.shape[<span class="number">0</span>],</span><br><span class="line">		 a_dim = env.action_space.n,</span><br><span class="line">		 learning_rate = <span class="number">0.01</span>,</span><br><span class="line">		 e_greedy = <span class="number">0.9</span>,</span><br><span class="line">		 replace_target_iter = <span class="number">100</span>,</span><br><span class="line">		 memory_size = <span class="number">2000</span>,</span><br><span class="line">		 e_greedy_increment = <span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line">total_steps = <span class="number">0</span> <span class="comment">#记录步数</span></span><br><span class="line">total_reward = [] <span class="comment">#记录累计奖励</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i_episode <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>): <span class="comment">#迭代100次，200次，300次都可以</span></span><br><span class="line">	s = env.reset() <span class="comment"># 获取回合 i_episode 第一个 observation</span></span><br><span class="line">	ep_r = <span class="number">0</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		env.render() <span class="comment"># 刷新显示环境</span></span><br><span class="line"></span><br><span class="line">		a = RL.choose_action(s) <span class="comment"># 根据状态选行为</span></span><br><span class="line">		s_,r,done,info = env.step(a) <span class="comment"># 获取下一个 state</span></span><br><span class="line">		<span class="comment"># the smaller theta and closer to center the better</span></span><br><span class="line">		x, x_dot, theta, theta_dot = s_    <span class="comment"># 细分开, 为了修改原配的 reward</span></span><br><span class="line">        <span class="comment"># x 是车的水平位移, 所以 r1 是车越偏离中心, 分越少</span></span><br><span class="line">		r1 = (env.x_threshold - <span class="built_in">abs</span>(x))/env.x_threshold - <span class="number">0.8</span></span><br><span class="line">        <span class="comment"># theta 是棒子离垂直的角度, 角度越大, 越不垂直. 所以 r2 是棒越垂直, 分越高</span></span><br><span class="line">		r2 = (env.theta_threshold_radians - <span class="built_in">abs</span>(theta))/env.theta_threshold_radians - <span class="number">0.5</span></span><br><span class="line">		r = r1 + r2 <span class="comment"># 总 reward 是 r1 和 r2 的结合, 既考虑位置, 也考虑角度, 这样 DQN 学习更有效率</span></span><br><span class="line">		RL.store_transition(s,a,r,s_,done)  <span class="comment"># 保存这一组记忆</span></span><br><span class="line"></span><br><span class="line">		ep_r += r <span class="comment"># 统计当前episode的累计奖励</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> total_steps &gt; <span class="number">1000</span>:</span><br><span class="line">			RL.learn() <span class="comment">#学习训练</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> done:</span><br><span class="line">							<span class="built_in">print</span>(<span class="string">&#x27;episode:&#x27;</span>,i_episode,<span class="string">&#x27;ep_r:&#x27;</span>,<span class="built_in">round</span>(ep_r,<span class="number">2</span>),<span class="string">&#x27;epsilon&#x27;</span>,<span class="built_in">round</span>(RL.epsilon,<span class="number">2</span>),<span class="string">&#x27;buffer_size:&#x27;</span>,RL.memory_count,<span class="string">&#x27;steps:&#x27;</span>,total_steps)</span><br><span class="line">			total_reward.append(ep_r)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">		s = s_</span><br><span class="line">		total_steps += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">RL.plot_cost() <span class="comment">#输出cost曲线</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出reward曲线</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.plot(np.arange(<span class="built_in">len</span>(total_reward)),total_reward)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Total Reward&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Episode &#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h3 id="3-4-全部代码"><a href="#3-4-全部代码" class="headerlink" title="3.4 全部代码"></a>3.4 全部代码</h3><blockquote>
<p>直接查看<a href="https://github.com/ldgcug/DeepReinforcementLearning-Tensorflow/tree/master/Nature%20DQN">所有代码</a></p>
</blockquote>
<h2 id="四、结果显示"><a href="#四、结果显示" class="headerlink" title="四、结果显示"></a>四、结果显示</h2><p>100个episode（某一次）的cost</p>
<p><img src="/2019/08/06/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BNature-DQN/4.png" alt></p>
<p>100个episode（另一次）的cost和reward</p>
<p><img src="/2019/08/06/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BNature-DQN/5.png" alt></p>
<p><img src="/2019/08/06/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BNature-DQN/6.png" alt></p>
<p>200个episode（另一次）的cost和reward</p>
<p><img src="/2019/08/06/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BNature-DQN/7.png" alt></p>
<p><img src="/2019/08/06/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BNature-DQN/8.png" alt></p>
<h2 id="五、MountainCar例子"><a href="#五、MountainCar例子" class="headerlink" title="五、MountainCar例子"></a>五、MountainCar例子</h2><h3 id="5-1-MountainCar问题说明"><a href="#5-1-MountainCar问题说明" class="headerlink" title="5.1 MountainCar问题说明"></a>5.1 MountainCar问题说明</h3><blockquote>
<p><a href="https://gym.openai.com/envs/MountainCar-v0/">MountainCar</a></p>
</blockquote>
<p><img src="/2019/08/06/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BNature-DQN/10.png" alt></p>
<p>汽车位于一条轨道上，位于两个“山脉”之间。目标是在右边开山;然而，汽车的发动机强度不足以在一次通过中攀登山峰。因此，成功的唯一途径是来回驾驶以增强动力。</p>
<p><a href="https://github.com/openai/gym/wiki/MountainCar-v0">MountainCar环境介绍</a></p>
<p><img src="/2019/08/06/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BNature-DQN/11.png" alt></p>
<h3 id="5-2-代码部分"><a href="#5-2-代码部分" class="headerlink" title="5.2 代码部分"></a>5.2 代码部分</h3><blockquote>
<p>dqn的代码部分不变，变化的知识主函数的代码，和run_CartPole.py的代码很类似，但有点小区别</p>
<p><a href="https://github.com/ldgcug/DeepReinforcementLearning-Tensorflow/blob/master/Nature%20DQN/run_MountainCar.py">run_MountainCar.py</a></p>
</blockquote>
<p>下面说下run_MountainCar.py和run_CartPole.py的不同之处</p>
<p>（1）第一处不同（注释的为CartPole，没注释的为MountainCar）</p>
<p>首先，环境不同，因此状态维度和行为维度不相同，这个很正常。但是这里的<strong>学习率</strong>、<strong>目标网络更新步数</strong>、<strong>回放池大小</strong>、<strong>探索的增长速度值</strong>全部不相同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RL = DQN(s_dim = env.observation_space.shape[0],</span></span><br><span class="line"><span class="comment"># 		 a_dim = env.action_space.n,</span></span><br><span class="line"><span class="comment"># 		 learning_rate = 0.01,</span></span><br><span class="line"><span class="comment"># 		 e_greedy = 0.9,</span></span><br><span class="line"><span class="comment"># 		 replace_target_iter = 100,</span></span><br><span class="line"><span class="comment"># 		 memory_size = 2000,</span></span><br><span class="line"><span class="comment"># 		 e_greedy_increment = 0.001)</span></span><br><span class="line"></span><br><span class="line">RL = DQN(s_dim =  env.observation_space.shape[<span class="number">0</span>],</span><br><span class="line">		 a_dim =  env.action_space.n,</span><br><span class="line">		 learning_rate = <span class="number">0.001</span>,</span><br><span class="line">		 e_greedy = <span class="number">0.9</span>,</span><br><span class="line">		 replace_target_iter = <span class="number">300</span>,</span><br><span class="line">		 memory_size = <span class="number">3000</span>,</span><br><span class="line">		 e_greedy_increment = <span class="number">0.0002</span>)</span><br></pre></td></tr></table></figure>
<p>（2）第二处不同（奖励不同）</p>
<p>MountainCar的奖励设置为position，这里加减是为了限定在[0,1]范围内。和前面一样，不同的环境奖励也不相同，这个奖励一般也还好设置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r = abs(position - (-0.5)) # r in [0,1]</span><br></pre></td></tr></table></figure>
<h3 id="5-3-结果显示"><a href="#5-3-结果显示" class="headerlink" title="5.3 结果显示"></a>5.3 结果显示</h3><blockquote>
<p>我这里的cost的显示图和莫烦的cost的显示图不太一样，但其实在DRL算法中，看中的是累计奖励，即第二幅图和第四幅图。可以看出，累计奖励也是在慢慢的平缓，因为训练到后面，已经知道如何到达目标点，会比较快速的到达，而不用左右来回摇摆，因此是一个下降趋势。</p>
</blockquote>
<p>10个episode</p>
<p><img src="/2019/08/06/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BNature-DQN/12.png" alt></p>
<p><img src="/2019/08/06/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BNature-DQN/13.png" alt></p>
<p>20个episode</p>
<p><img src="/2019/08/06/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BNature-DQN/14.png" alt></p>
<p><img src="/2019/08/06/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BNature-DQN/15.png" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>到后面的时候，cost下降的还是较为明显，但仍然有波动，这可能是随机选择行为导致的结果，从模型中也可以看出有时候不太稳定，因此该算法还需要改进。在实际中，要看重累计奖励而不是损失函数。</p>
<p>从上面的两个不同例子中可以看出，不同的环境，在主函数中，<strong>学习率、回放池大小、探索的增长速度值、目标网络更新步数</strong>都会有所不同，甚至，在dqn.py中也会改变其<strong>网络结构</strong>，但是这些值又是如何试验找出一个比较合适的值的呢？这是一个问题</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/blob/master/contents/6_OpenAI_gym/RL_brain.py">莫烦</a></p>
</li>
<li><p><a href="https://github.com/openai/gym/blob/master/gym/envs/classic_control/cartpole.py">CartPole源代码</a></p>
</li>
<li><p><a href="https://github.com/openai/gym/wiki/CartPole-v0">CartPole详细介绍</a></p>
</li>
<li><p><a href="https://github.com/openai/gym/wiki/MountainCar-v0">MountainCar详细介绍</a></p>
</li>
<li><p><a href="https://github.com/openai/gym/blob/master/gym/envs/classic_control/mountain_car.py">MountainCar源代码</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>代码</category>
        <category>深度强化学习</category>
      </categories>
      <tags>
        <tag>DRL</tag>
        <tag>OpenAI gym</tag>
        <tag>DQN</tag>
      </tags>
  </entry>
  <entry>
    <title>代码实现（六）之Actor-Critic</title>
    <url>/2019/08/15/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8BActor-Critic/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>针对前面PG算法的高方差问题，本篇博客将基于AC算法进行实现。其理论部分请点击<a href="https://ldgyyf.cn/2019/07/30/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8BActor-Critic%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/">DRL（六）</a></p>
<p>主要在<a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/8_Actor_Critic_Advantage">莫烦代码</a>的基础之上，进行更改</p>
</blockquote>
<h2 id="一、实验环境"><a href="#一、实验环境" class="headerlink" title="一、实验环境"></a>一、实验环境</h2><blockquote>
<p>主要使用两个环境进行训练测试，分别是CartPole环境和Pendulum环境。其中CartPole应用于softmax策略函数的离散行为空间，Pendulum应用于高斯策略函数的连续行为空间。</p>
</blockquote>
<h2 id="二、Actor-Critic算法"><a href="#二、Actor-Critic算法" class="headerlink" title="二、Actor-Critic算法"></a>二、Actor-Critic算法</h2><blockquote>
<p>主要用$Q<em>w(s,a)$来代替PG算法中的$v_t$，用来估计行为价值函数$ Q^{\pi</em>\theta}(s,a)$，即$Q<em>w(s,a) \approx  Q^{\pi</em>\theta}(s,a)$，该网络称为Critic网络。</p>
</blockquote>
<ul>
<li>Critic：更新行为价值函数的参数$w$</li>
<li>Actor：更新策略的参数θ，更新过程会受到Critic的价值函数的引导</li>
</ul>
<h3 id="Actor-Critic-的评估"><a href="#Actor-Critic-的评估" class="headerlink" title="Actor-Critic 的评估"></a>Actor-Critic 的评估</h3><blockquote>
<p>Actor-Critic的评估一般有以下几种方法，主要变化的是$Q_w(s,a)$</p>
</blockquote>
<p>（1）<strong>基于状态价值：</strong>这和之前的蒙特卡洛策略梯度REINFORCE方法一样，这时Actor的策略函数参数更新的法公式为：</p>
<script type="math/tex; mode=display">
\theta = \theta + \alpha \nabla_\theta log \pi_\theta (s_t,a_t) V(s,w)</script><p>（2）<strong>基于动作价值：</strong>在DQN中，我们一般使用的都是动作价值函数Q来做价值评估，这时Actor的策略函数参数更新的法公式为：</p>
<script type="math/tex; mode=display">
\theta = \theta + \alpha \nabla_\theta log \pi_\theta (s_t,a_t) Q(s,a,w)</script><p>（3）<strong>基于TD($\lambda$)误差：</strong>一般都是基于后向TD($\lambda$)误差，是TD误差和效用迹E的乘积，这时Actor的策略函数参数更新的法公式是：</p>
<script type="math/tex; mode=display">
\theta = \theta + \alpha \delta(t)E(t)</script><p>其中，TD误差$\delta(t) = R<em>{t+1} + \gamma V(S</em>{t+1}) - V(s<em>t)$，$E(t) = \gamma \lambda E</em>{t-1} + \nabla<em>\theta log \pi</em>\theta (s_t,a_t)$</p>
<p>当$\lambda=0$时，就是普通TD方法，即$\theta = \theta + \alpha \nabla<em>\theta log \pi</em>\theta (s_t,a_t) \delta(t)$</p>
<p>（4）<strong>基于优势函数（基准函数Baseline）：</strong>和之前Dueling DQN中的优势函数一样，其优势函数A的定义为：$A(S,A,w,\beta) = Q(S,A,w,\alpha,\beta) - V(S,w,\alpha)$，即动作价值函数和状态价值函数的差值，这时Actor的策略函数参数更新的法公式为：</p>
<script type="math/tex; mode=display">
\theta = \theta + \alpha \nabla_\theta log \pi_\theta (s_t,a_t)A(S,A,w,\beta)</script><p><strong>本篇实验过程将基于第三种方法，基于TD($\lambda$)误差进行评估</strong></p>
<h2 id="三、代码部分"><a href="#三、代码部分" class="headerlink" title="三、代码部分"></a>三、代码部分</h2><blockquote>
<p>直接查看<a href="https://github.com/ldgcug/DeepReinforcementLearning-Tensorflow/tree/master/Actor-Critic">全部代码</a></p>
</blockquote>
<h3 id="3-1-代码组成"><a href="#3-1-代码组成" class="headerlink" title="3.1 代码组成"></a>3.1 代码组成</h3><blockquote>
<p>代码主要由四个py程序组成：其中，<strong>run_CartPole.py</strong>对应于<strong>actor_critic.py</strong>，表示对离散行为空间的训练；<strong>run_Pendulum.py</strong>对应于<strong>actor_critic_gaussian.py</strong>表示对连续行为空间的训练</p>
</blockquote>
<p><strong>程序架构：</strong>主要分为Actor和Critic两个类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Actor</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,s_dim,a_dim,sess,learning_rate=<span class="number">0.001</span></span>):</span></span><br><span class="line">        self.build_softmax_network()<span class="comment">#建立Actor神经网络</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_actor_network</span>(<span class="params">self</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_action</span>(<span class="params">self,state</span>):</span><span class="comment">#根据s选择行为</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn</span>(<span class="params">self,s,a,td</span>):</span></span><br><span class="line">      	<span class="comment"># s,a用于产生Gradient ascent的方向</span></span><br><span class="line">        <span class="comment"># td来自Critic，用于告诉Actor这个方向对不对</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Critic</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,s_dim,sess,learning_rate=<span class="number">0.01</span>,reward_decay=<span class="number">0.9</span></span>):</span></span><br><span class="line">        self.build_critic_network()<span class="comment">#建立Critic神经网络</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_critic_network</span>(<span class="params">self</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn</span>(<span class="params">self,s,r,s_</span>):</span></span><br><span class="line">        <span class="comment"># 学习状态的价值（state-value），不是行为的价值（action-value）</span></span><br><span class="line">        <span class="comment"># 计算TD-Error = (r+v_) - v</span></span><br><span class="line">        <span class="comment"># 用TD-Error评判这一步的行为有没有带来比平时更好的效果</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-softmax策略函数-离散行为空间"><a href="#3-2-softmax策略函数-离散行为空间" class="headerlink" title="3.2 softmax策略函数-离散行为空间"></a>3.2 softmax策略函数-离散行为空间</h3><h4 id="3-2-1-网络-actor-critic-py"><a href="#3-2-1-网络-actor-critic-py" class="headerlink" title="3.2.1 网络-actor-critic.py"></a>3.2.1 网络-actor-critic.py</h4><p><strong>Actor</strong></p>
<p>训练过程中的一些注意的地方</p>
<ul>
<li><strong>输入：</strong>因为Actor可以单次训练，所以输入只需要是一个状态，一个动作和一个TD-Error</li>
<li><strong>网络结构：</strong>和PG算法中的网络结构一样，使用一个双层的全连接神经网络</li>
<li><strong>损失函数：</strong>在PG中<strong>loss = -log(prob) * vt</strong>，在这里只是将vt换成了由Critic计算出的<strong>时间差分误差TD-Error</strong></li>
<li><strong>Actor训练：</strong>只需要将状态、动作以及时间差分值喂给网络就可以了</li>
<li><strong>选择动作：</strong>和PG一样，根据softmax值进行选择</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Actor</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,s_dim,a_dim,sess,learning_rate=<span class="number">0.001</span></span>):</span></span><br><span class="line">		self.s_dim = s_dim</span><br><span class="line">		self.a_dim = a_dim</span><br><span class="line">		self.lr = learning_rate</span><br><span class="line"></span><br><span class="line">		self.sess = sess</span><br><span class="line"></span><br><span class="line">		self.build_softmax_network()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">build_softmax_network</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="comment"># 因为是单步更新，输入的值是一维的，因此这里用[1,self.s_dim]</span></span><br><span class="line">        <span class="comment"># 如果是回合制更新，则很多个s一起输入进来，因此是用None</span></span><br><span class="line">		self.s = tf.placeholder(tf.float32,[<span class="number">1</span>,self.s_dim],name=<span class="string">&#x27;state&#x27;</span>) <span class="comment">#input</span></span><br><span class="line">		self.a = tf.placeholder(tf.int32,<span class="literal">None</span>,name=<span class="string">&quot;act&quot;</span>)</span><br><span class="line">		self.td_error = tf.placeholder(tf.float32,<span class="literal">None</span>,name=<span class="string">&quot;td_error&quot;</span>)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 网络参数</span></span><br><span class="line">		w_initializer = tf.random_normal_initializer(<span class="number">0.</span>,<span class="number">0.1</span>)</span><br><span class="line">		b_initializer = tf.constant_initializer(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">		c_names = [<span class="string">&#x27;actor_network&#x27;</span>,tf.GraphKeys.GLOBAL_VARIABLES]</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 隐藏层1 使用relu激活函数</span></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;fc1&#x27;</span>):</span><br><span class="line">			w1 = tf.get_variable(<span class="string">&#x27;w1&#x27;</span>,[self.s_dim,<span class="number">20</span>],initializer=w_initializer,collections=c_names)</span><br><span class="line">			b1 = tf.get_variable(<span class="string">&#x27;b1&#x27;</span>,[<span class="number">20</span>],initializer=b_initializer,collections=c_names)</span><br><span class="line">			fc1 = tf.nn.relu(tf.matmul(self.s,w1)+b1)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 隐藏层最后一层，输出是不需要激活函数的</span></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;all_act&#x27;</span>):</span><br><span class="line">			w2 = tf.get_variable(<span class="string">&#x27;w2&#x27;</span>,[<span class="number">20</span>,self.a_dim],initializer=w_initializer,collections=c_names)</span><br><span class="line">			b2 = tf.get_variable(<span class="string">&#x27;b2&#x27;</span>,[self.a_dim],initializer=b_initializer,collections=c_names)</span><br><span class="line">			all_act  = tf.matmul(fc1,w2) + b2</span><br><span class="line"></span><br><span class="line">		<span class="comment"># softmax 输出层，输出每个行为所对应的概率</span></span><br><span class="line">		self.all_act_prob = tf.nn.softmax(all_act,name=<span class="string">&#x27;act_prob&#x27;</span>) </span><br><span class="line"></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;exp_v&#x27;</span>):</span><br><span class="line">			<span class="comment">#neg_log_prob = tf.log(self.all_act_prob[0, self.a])</span></span><br><span class="line">            neg_log_prob = tf.reduce_sum(tf.log(self.all_act_prob)*tf.one_hot(self.a, self.a_dim))<span class="comment">#log动作概率</span></span><br><span class="line">			self.exp_v = tf.reduce_mean(neg_log_prob * self.td_error)<span class="comment">#log概率*TD方向</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;train&#x27;</span>):</span><br><span class="line">			self.train_op = tf.train.AdamOptimizer(self.lr).minimize(-self.exp_v)</span><br><span class="line">            <span class="comment"># 因为我们想不断增加这个exp_v（动作带来的额外价值）</span></span><br><span class="line">            <span class="comment"># 所以我们用过 minimize(-exp_v) 的方式达到maximize(exp_v) 的目的</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 根据softmax所输出的概率选择行为</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">choose_action</span>(<span class="params">self,state</span>):</span></span><br><span class="line">		probs = self.sess.run(self.all_act_prob,feed_dict=&#123;self.s:state.reshape(-<span class="number">1</span>,self.s_dim)&#125;)<span class="comment"># 所有 action 的概率</span></span><br><span class="line">		action = np.random.choice(<span class="built_in">range</span>(probs.shape[<span class="number">1</span>]),p=probs.ravel())<span class="comment"># 根据概率来选 action</span></span><br><span class="line">		<span class="keyword">return</span> action</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">learn</span>(<span class="params">self,s,a,td</span>):</span></span><br><span class="line">		s = s.reshape(-<span class="number">1</span>,self.s_dim)</span><br><span class="line">		_ = self.sess.run(self.train_op,feed_dict=&#123;self.s:s,self.a:a,self.td_error:td&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>Critic</strong></p>
<p>Critic要反馈给Actor一个时间差分值，来决定Actor选择动作的好坏，如果时间差分值大的话，说明当前Actor选择的这个动作的惊喜度较高，需要更多的出现来使得时间差分值减小。</p>
<p>时间差分计算：$\delta(t) = R<em>{t+1} + \gamma V(S</em>{t+1}) - V(s_t)$，$V(s_t)$表示将$s$状态输入到Critic网络中得到的Q值。因此Critic的输入也分三个，首先是当前状态，当前奖励，下一状态。<strong>为什么没有动作A？</strong>因为动作A是确定的，是由Actor选择的。</p>
<ul>
<li><strong>输入：</strong>当前状态，当前奖励，下一状态</li>
<li><strong>网络结构：</strong>和Actor一样，是一个双层网络，网络最后输出V值</li>
<li><strong>损失函数：</strong>$\delta(t) = R<em>{t+1} + \gamma V(S</em>{t+1}) - V(s_t)$</li>
<li><strong>Critic训练：</strong>将当前状态、当前奖励、下一状态喂给网络即可，并得到TD-Error的值，最后给Actor</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Critic</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,s_dim,sess,learning_rate=<span class="number">0.01</span>,reward_decay=<span class="number">0.9</span></span>):</span></span><br><span class="line">		self.s_dim = s_dim</span><br><span class="line">		self.lr = learning_rate</span><br><span class="line">		self.gamma = reward_decay</span><br><span class="line"></span><br><span class="line">		self.sess = sess </span><br><span class="line"></span><br><span class="line">		self.build_critic_network()</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">build_critic_network</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="comment"># 输入是当前状态、当前奖励、下一状态</span></span><br><span class="line">		self.s = tf.placeholder(tf.float32,[<span class="number">1</span>,self.s_dim],<span class="string">&quot;state&quot;</span>)</span><br><span class="line">		self.v_ = tf.placeholder(tf.float32,[<span class="number">1</span>,<span class="number">1</span>],<span class="string">&quot;v_next&quot;</span>)</span><br><span class="line">		self.r = tf.placeholder(tf.float32,<span class="literal">None</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line">		w_initializer = tf.random_normal_initializer(<span class="number">0.</span>,<span class="number">0.1</span>)</span><br><span class="line">		b_initializer = tf.constant_initializer(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">		c_names = [<span class="string">&#x27;critic_network&#x27;</span>,tf.GraphKeys.GLOBAL_VARIABLES]</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 隐藏层1 </span></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;critic&#x27;</span>):</span><br><span class="line">			w1 = tf.get_variable(<span class="string">&#x27;w1_c&#x27;</span>,[self.s_dim,<span class="number">20</span>],initializer=w_initializer,collections=c_names)</span><br><span class="line">			b1 = tf.get_variable(<span class="string">&#x27;b1_c&#x27;</span>,[<span class="number">20</span>],initializer=b_initializer,collections=c_names)</span><br><span class="line">			fc1 = tf.nn.relu(tf.matmul(self.s,w1)+b1)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 隐藏层最后一层，输出是不需要激活函数的</span></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;V&#x27;</span>):</span><br><span class="line">			w2 = tf.get_variable(<span class="string">&#x27;w2_c&#x27;</span>,[<span class="number">20</span>,<span class="number">1</span>],initializer=w_initializer,collections=c_names)</span><br><span class="line">			b2 = tf.get_variable(<span class="string">&#x27;b2_c&#x27;</span>,[<span class="number">1</span>],initializer=b_initializer,collections=c_names)</span><br><span class="line">			self.v  = tf.matmul(fc1,w2) + b2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;squard_TD_error&#x27;</span>):</span><br><span class="line">			self.td_error = self.r + self.gamma * self.v_ - self.v <span class="comment">#使用时间差分求TD-Error</span></span><br><span class="line">			self.loss = tf.square(self.td_error)<span class="comment"># 均方差求loss</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;train&#x27;</span>):</span><br><span class="line">			self.train_op = tf.train.AdamOptimizer(self.lr).minimize(self.loss)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">learn</span>(<span class="params">self,s,r,s_</span>):</span></span><br><span class="line">		s = s.reshape(-<span class="number">1</span>,self.s_dim)</span><br><span class="line">		s_ = s_.reshape(-<span class="number">1</span>,self.s_dim)</span><br><span class="line">		v_ = self.sess.run(self.v,feed_dict=&#123;self.s:s_&#125;)</span><br><span class="line"></span><br><span class="line">		td_error = self.sess.run(self.td_error,feed_dict=&#123;self.s:s,self.v_:v_,self.r:r&#125;)</span><br><span class="line">		_ = self.sess.run(self.train_op,feed_dict=&#123;self.s:s,self.v_:v_,self.r:r&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> td_error</span><br></pre></td></tr></table></figure>
<h4 id="3-2-2主函数-run-CartPole-py"><a href="#3-2-2主函数-run-CartPole-py" class="headerlink" title="3.2.2主函数-run_CartPole.py"></a>3.2.2主函数-run_CartPole.py</h4><blockquote>
<p>和之前不一样的是，里面是单步训练</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">env = gym.make(<span class="string">&#x27;CartPole-v0&#x27;</span>)</span><br><span class="line">env.seed(<span class="number">1</span>)     </span><br><span class="line">env = env.unwrapped</span><br><span class="line"></span><br><span class="line">N_S = env.observation_space.shape[<span class="number">0</span>]</span><br><span class="line">N_A = env.action_space.n </span><br><span class="line"></span><br><span class="line">DISPLAY_REWARD_THRESHOLD = <span class="number">400</span> <span class="comment">#奖励值阈值，用于判断是否显示界面</span></span><br><span class="line">RENDER = <span class="literal">False</span> <span class="comment"># 刚开始设置为False，不显示</span></span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line">actor = Actor(s_dim=N_S,a_dim=N_A,learning_rate=<span class="number">0.001</span>,sess=sess)</span><br><span class="line">critic = Critic(s_dim=N_S,learning_rate=<span class="number">0.01</span>,reward_decay=<span class="number">0.9</span>,sess=sess)</span><br><span class="line"></span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i_episode <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3000</span>):</span><br><span class="line"></span><br><span class="line">	s = env.reset()</span><br><span class="line">	t = <span class="number">0</span></span><br><span class="line">	track_r = [] <span class="comment">#每回合的所有奖励</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		<span class="keyword">if</span> RENDER:env.render()</span><br><span class="line"></span><br><span class="line">		a = actor.choose_action(s)</span><br><span class="line">		s_,r,done,info = env.step(a)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> done: r = -<span class="number">20</span> <span class="comment">#回合结束的惩罚</span></span><br><span class="line">		track_r.append(r)</span><br><span class="line"></span><br><span class="line">		td_error = critic.learn(s,r,s_)<span class="comment"># Critic学习，得到TD-Error</span></span><br><span class="line">		actor.learn(s,a,td_error) <span class="comment"># Actor学习，更新行为概率</span></span><br><span class="line"></span><br><span class="line">		s = s_</span><br><span class="line">		t += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> done <span class="keyword">or</span> t &gt;= <span class="number">1000</span>:</span><br><span class="line">			ep_rs_sum = <span class="built_in">sum</span>(track_r)<span class="comment">#回合结束，打印回合累积奖励</span></span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> <span class="string">&#x27;running_reward&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">globals</span>():</span><br><span class="line">				running_reward = ep_rs_sum</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				running_reward = running_reward * <span class="number">0.95</span> + ep_rs_sum*<span class="number">0.05</span></span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> running_reward &gt; DISPLAY_REWARD_THRESHOLD:RENDER=<span class="literal">True</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;episode:&#x27;</span>,i_episode,<span class="string">&#x27;reward:&#x27;</span>,<span class="built_in">int</span>(running_reward))</span><br><span class="line">			<span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong><br>（1）为什么加入这个才能学习？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> done: r = -<span class="number">20</span> <span class="comment">#回合结束的惩罚</span></span><br></pre></td></tr></table></figure>
<p>因为AC在每次更新时，只考虑前后两步，而环境里面的reward只有+1，所以为了体现前后两步的不同，在done的时候给一个-20的信号，让信号强度有所不同</p>
<p><img src="/2019/08/15/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8BActor-Critic/1.png" alt></p>
<p>（2）求解TD-Error时，是否需要考虑done的情况？</p>
<p><img src="/2019/08/15/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8BActor-Critic/2.png" alt></p>
<p>（3）log概率的代码？如果是下面被注释的那一行，则不太理解</p>
<p>和带有axis的值类似，若axis=0，则沿着纵轴进行操作；axis=1，沿横轴进行操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#neg_log_prob = tf.log(self.all_act_prob[0, self.a])</span></span><br><span class="line">neg_log_prob = tf.reduce_sum(tf.log(self.all_act_prob)*tf.one_hot(self.a,self.a_dim))<span class="comment">#log动作概率</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/08/15/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8BActor-Critic/3.png" alt></p>
<p>（4）AC收敛好像没有PG快？<br><img src="/2019/08/15/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8BActor-Critic/4.png" alt></p>
<h3 id="3-3-Gaussian策略函数-连续行为空间"><a href="#3-3-Gaussian策略函数-连续行为空间" class="headerlink" title="3.3 Gaussian策略函数-连续行为空间"></a>3.3 Gaussian策略函数-连续行为空间</h3><h4 id="3-3-1-网络-actor-critic-gaussian-py"><a href="#3-3-1-网络-actor-critic-gaussian-py" class="headerlink" title="3.3.1 网络-actor-critic-gaussian.py"></a>3.3.1 网络-actor-critic-gaussian.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Actor</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,s_dim,action_bound,sess,learning_rate=<span class="number">0.001</span></span>):</span></span><br><span class="line">		self.s_dim = s_dim</span><br><span class="line">		self.action_bound = action_bound <span class="comment">#对应连续行为，这里不再是维度，而是一个连续空间阈值</span></span><br><span class="line">		self.lr = learning_rate</span><br><span class="line">		self.sess = sess</span><br><span class="line">		self.build_gaussian_network()</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">build_gaussian_network</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="comment"># 输入和Softmax的一样，只是这边a为tf.float32，softmax中也可以设置为float32</span></span><br><span class="line">		self.s = tf.placeholder(tf.float32,[<span class="number">1</span>,self.s_dim],name=<span class="string">&#x27;state&#x27;</span>) <span class="comment">#input</span></span><br><span class="line">		self.a = tf.placeholder(tf.float32,<span class="literal">None</span>,name=<span class="string">&quot;act&quot;</span>)</span><br><span class="line">		self.td_error = tf.placeholder(tf.float32,<span class="literal">None</span>,name=<span class="string">&quot;td_error&quot;</span>)</span><br><span class="line"></span><br><span class="line">		w_initializer = tf.random_normal_initializer(<span class="number">0.</span>,<span class="number">0.1</span>)</span><br><span class="line">		b_initializer = tf.constant_initializer(<span class="number">0.1</span>)</span><br><span class="line">		c_names = [<span class="string">&#x27;actor_network&#x27;</span>,tf.GraphKeys.GLOBAL_VARIABLES]</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 隐藏层1</span></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;l1&#x27;</span>):</span><br><span class="line">			w1 = tf.get_variable(<span class="string">&#x27;w1&#x27;</span>,[self.s_dim,<span class="number">30</span>],initializer=w_initializer,collections=c_names)</span><br><span class="line">			b1 = tf.get_variable(<span class="string">&#x27;b1&#x27;</span>,[<span class="number">30</span>],initializer=b_initializer,collections=c_names)</span><br><span class="line">			l1 = tf.nn.relu(tf.matmul(self.s,w1)+b1)</span><br><span class="line"></span><br><span class="line">		<span class="comment">#求均值  隐藏层最后一层</span></span><br><span class="line">        <span class="comment">#和softmax有点区别，这里的输出维度是1维，softmax是n维(因为是离散的)，加了tanh激活函数</span></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;mu&#x27;</span>):</span><br><span class="line">			w2 = tf.get_variable(<span class="string">&#x27;w2&#x27;</span>,[<span class="number">30</span>,<span class="number">1</span>],initializer=w_initializer,collections=c_names)</span><br><span class="line">			b2 = tf.get_variable(<span class="string">&#x27;b2&#x27;</span>,[<span class="number">1</span>],initializer=b_initializer,collections=c_names)</span><br><span class="line">			mu = tf.nn.tanh(tf.matmul(l1,w2)+b2)</span><br><span class="line"></span><br><span class="line">		<span class="comment">#求方差  输出层 同样是1个维度，并且以了隐藏层的输出（l1）作为输入</span></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;sigma&#x27;</span>):</span><br><span class="line">			w3 = tf.get_variable(<span class="string">&#x27;w3&#x27;</span>,[<span class="number">30</span>,<span class="number">1</span>],initializer=w_initializer,collections=c_names)</span><br><span class="line">			b3 = tf.get_variable(<span class="string">&#x27;b3&#x27;</span>,[<span class="number">1</span>],initializer=b_initializer,collections=c_names)</span><br><span class="line">			sigma = tf.nn.softplus(tf.matmul(l1,w3)+b3)</span><br><span class="line"></span><br><span class="line">		global_step = tf.Variable(<span class="number">0</span>,trainable=<span class="literal">False</span>) <span class="comment">#初始化</span></span><br><span class="line">        <span class="comment"># self.e = epsilon = tf.train.exponential_decay(2., global_step, 1000, 0.9)</span></span><br><span class="line">		self.mu,self.sigma = tf.squeeze(mu*<span class="number">2</span>),tf.squeeze(sigma+<span class="number">0.1</span>)<span class="comment"># 均值控制在（-2,2）,因为这个环境的action_bound为2，所以这里直接写的2，方差控制在某个范围内</span></span><br><span class="line">        <span class="comment">#实际应该写为 tf.squeeze(mu*self.action_bound)</span></span><br><span class="line">		self.normal_dist = tf.distributions.Normal(self.mu,self.sigma)<span class="comment">#高斯分布</span></span><br><span class="line"></span><br><span class="line">		self.action = tf.clip_by_value(self.normal_dist.sample(<span class="number">1</span>),self.action_bound[<span class="number">0</span>],self.action_bound[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;exp_v&#x27;</span>):</span><br><span class="line">			log_prob = self.normal_dist.log_prob(self.a) <span class="comment"># loss without advantage</span></span><br><span class="line">			self.exp_v = log_prob * self.td_error <span class="comment"># advantage (TD_error) guided loss</span></span><br><span class="line">			self.exp_v += <span class="number">0.01</span> * self.normal_dist.entropy()<span class="comment"># Add cross entropy cost to encourage exploration</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;train&#x27;</span>):</span><br><span class="line">			self.train_op = tf.train.AdamOptimizer(self.lr).minimize(-self.exp_v,global_step)</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">choose_action</span>(<span class="params">self,state</span>):</span></span><br><span class="line">		<span class="keyword">return</span> self.sess.run(self.action,feed_dict=&#123;self.s:state.reshape(-<span class="number">1</span>,self.s_dim)&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">learn</span>(<span class="params">self,s,a,td</span>):</span></span><br><span class="line">		s = s.reshape(-<span class="number">1</span>,self.s_dim)</span><br><span class="line">		_ = self.sess.run(self.train_op,feed_dict=&#123;self.s:s,self.a:a,self.td_error:td&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Critic和softmax的critic一样，主要是Actor有所不同</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Critic</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,s_dim,sess,learning_rate=<span class="number">0.01</span>,reward_decay=<span class="number">0.9</span></span>):</span></span><br><span class="line">		self.s_dim = s_dim</span><br><span class="line">		self.lr = learning_rate</span><br><span class="line">		self.gamma = reward_decay</span><br><span class="line"></span><br><span class="line">		self.sess = sess </span><br><span class="line"></span><br><span class="line">		self.build_critic_network()</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">build_critic_network</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">		self.s = tf.placeholder(tf.float32,[<span class="number">1</span>,self.s_dim],<span class="string">&quot;state&quot;</span>)</span><br><span class="line">		self.v_ = tf.placeholder(tf.float32,[<span class="number">1</span>,<span class="number">1</span>],<span class="string">&quot;v_next&quot;</span>)</span><br><span class="line">		self.r = tf.placeholder(tf.float32,<span class="literal">None</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line">		w_initializer = tf.random_normal_initializer(<span class="number">0.</span>,<span class="number">0.1</span>)</span><br><span class="line">		b_initializer = tf.constant_initializer(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">		c_names = [<span class="string">&#x27;critic_network&#x27;</span>,tf.GraphKeys.GLOBAL_VARIABLES]</span><br><span class="line"></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;critic&#x27;</span>):</span><br><span class="line">			w1 = tf.get_variable(<span class="string">&#x27;w1_c&#x27;</span>,[self.s_dim,<span class="number">30</span>],initializer=w_initializer,collections=c_names)</span><br><span class="line">			b1 = tf.get_variable(<span class="string">&#x27;b1_c&#x27;</span>,[<span class="number">30</span>],initializer=b_initializer,collections=c_names)</span><br><span class="line">			l1 = tf.nn.relu(tf.matmul(self.s,w1)+b1)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;V&#x27;</span>):</span><br><span class="line">			w2 = tf.get_variable(<span class="string">&#x27;w2_c&#x27;</span>,[<span class="number">30</span>,<span class="number">1</span>],initializer=w_initializer,collections=c_names)</span><br><span class="line">			b2 = tf.get_variable(<span class="string">&#x27;b2_c&#x27;</span>,[<span class="number">1</span>],initializer=b_initializer,collections=c_names)</span><br><span class="line">			self.v  = tf.matmul(l1,w2) + b2</span><br><span class="line"></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;squard_TD_error&#x27;</span>):</span><br><span class="line">			self.td_error = self.r + self.gamma * self.v_ - self.v</span><br><span class="line">			self.loss = tf.square(self.td_error)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;train&#x27;</span>):</span><br><span class="line">			self.train_op = tf.train.AdamOptimizer(self.lr).minimize(self.loss)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">learn</span>(<span class="params">self,s,r,s_</span>):</span></span><br><span class="line">		s = s.reshape(-<span class="number">1</span>,self.s_dim)</span><br><span class="line">		s_ = s_.reshape(-<span class="number">1</span>,self.s_dim)</span><br><span class="line">		v_ = self.sess.run(self.v,feed_dict=&#123;self.s:s_&#125;)</span><br><span class="line"></span><br><span class="line">		td_error = self.sess.run(self.td_error,feed_dict=&#123;self.s:s,self.v_:v_,self.r:r&#125;)</span><br><span class="line">		_ = self.sess.run(self.train_op,feed_dict=&#123;self.s:s,self.v_:v_,self.r:r&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> td_error</span><br></pre></td></tr></table></figure>
<h4 id="3-3-2-主函数-run-Pendulum-py"><a href="#3-3-2-主函数-run-Pendulum-py" class="headerlink" title="3.3.2 主函数-run_Pendulum.py"></a>3.3.2 主函数-run_Pendulum.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">env = gym.make(<span class="string">&#x27;Pendulum-v0&#x27;</span>)</span><br><span class="line">env.seed(<span class="number">1</span>)     </span><br><span class="line">env = env.unwrapped</span><br><span class="line"></span><br><span class="line">N_S = env.observation_space.shape[<span class="number">0</span>]</span><br><span class="line">A_BOUND = env.action_space.high</span><br><span class="line"></span><br><span class="line">DISPLAY_REWARD_THRESHOLD = -<span class="number">100</span> <span class="comment"># renders environment if total episode reward is greater then this threshold</span></span><br><span class="line">RENDER = <span class="literal">False</span> <span class="comment"># rendering wastes time</span></span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line">actor = Actor(s_dim=N_S,action_bound=[-A_BOUND,A_BOUND],learning_rate=<span class="number">0.001</span>,sess=sess)</span><br><span class="line">critic = Critic(s_dim=N_S,learning_rate=<span class="number">0.01</span>,reward_decay=<span class="number">0.9</span>,sess=sess)</span><br><span class="line"></span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i_episode <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line"></span><br><span class="line">	s = env.reset()</span><br><span class="line">	t = <span class="number">0</span></span><br><span class="line">	ep_rs = []</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		<span class="keyword">if</span> RENDER:env.render()</span><br><span class="line"></span><br><span class="line">		a = actor.choose_action(s)</span><br><span class="line">		s_,r,done,info = env.step(a)</span><br><span class="line">		r /= <span class="number">10</span></span><br><span class="line"></span><br><span class="line">		td_error = critic.learn(s,r,s_)</span><br><span class="line">		actor.learn(s,a,td_error)</span><br><span class="line"></span><br><span class="line">		s = s_</span><br><span class="line">		t += <span class="number">1</span></span><br><span class="line">		ep_rs.append(r)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>  t &gt; <span class="number">200</span>:</span><br><span class="line">			ep_rs_sum = <span class="built_in">sum</span>(ep_rs)</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> <span class="string">&#x27;running_reward&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">globals</span>():</span><br><span class="line">				running_reward = ep_rs_sum</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				running_reward = running_reward * <span class="number">0.9</span> + ep_rs_sum*<span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> running_reward &gt; DISPLAY_REWARD_THRESHOLD:RENDER=<span class="literal">True</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;episode:&#x27;</span>,i_episode,<span class="string">&#x27;reward:&#x27;</span>,<span class="built_in">int</span>(running_reward))</span><br><span class="line">			<span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<p>（1）添加了global_step变量，不太清楚干啥？</p>
<p><img src="/2019/08/15/%E4%BB%A3%E7%A0%81/DRL/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8BActor-Critic/5.png" alt></p>
<p>（2）这个连续行为的训练效果好像并不太好？</p>
<p>​    关于连续行为空间的，还是主要看DDPG和A3C吧</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>Actor-Critic算法的思路很好，但是不太容易收敛，目前对AC算法进行改进，解决其难收敛的问题主要有DDPG和A3C算法，而且测试的AC在连续行为空间上的效果不太好</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/6-1-actor-critic/">莫烦AC算法介绍</a></li>
<li><p><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/8_Actor_Critic_Advantage">莫烦AC源代码</a></p>
</li>
<li><p><a href="https://cloud.tencent.com/developer/article/1092347">深度强化学习-Actor-Citic算法原理和实现</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>代码</category>
        <category>深度强化学习</category>
      </categories>
      <tags>
        <tag>DRL</tag>
        <tag>OpenAI gym</tag>
        <tag>Actor-Critic</tag>
      </tags>
  </entry>
  <entry>
    <title>uzh无人机竞速实验</title>
    <url>/2020/06/07/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>基于uzh的论文和其代码做的一些相关的无人机竞速实验</p>
</blockquote>
<h1 id="一、无人机环境配置"><a href="#一、无人机环境配置" class="headerlink" title="一、无人机环境配置"></a>一、无人机环境配置</h1><blockquote>
<p>主要在Linux系统下使用，其安装过程不在这里具体介绍，点击<a href="https://github.com/uzh-rpg/sim2real_drone_racing">这里</a>，下载代码</p>
</blockquote>
<ul>
<li><p><strong>系统版本：</strong>Ubuntu16.04</p>
</li>
<li><p><strong>仿真环境：</strong>Gazebo7.16</p>
<p>配置好环境后，要确保启动test_racing.launch不报错才行。</p>
</li>
</ul>
<h1 id="二、实验相关操作位置说明"><a href="#二、实验相关操作位置说明" class="headerlink" title="二、实验相关操作位置说明"></a>二、实验相关操作位置说明</h1><h2 id="2-1-训练数据收集测试"><a href="#2-1-训练数据收集测试" class="headerlink" title="2.1 训练数据收集测试"></a>2.1 训练数据收集测试</h2><blockquote>
<p>进入<code>sim2real_drone_racing/drone_racing/resources/scripts</code>目录下，运行<code>collect_data.py</code>代码，首先验证下能否收集数据，运行不报错，且可以在相关文件夹下生成图像数据和label数据即可，然后停止运行该python代码</p>
</blockquote>
<p>​        确保训练数据收集测试无误，再继续执行后面步骤</p>
<h2 id="2-2-网络模型保存位置修改"><a href="#2-2-网络模型保存位置修改" class="headerlink" title="2.2 网络模型保存位置修改"></a>2.2 网络模型保存位置修改</h2><blockquote>
<p><code>train_model.sh</code>文件，在<code>sim2real_drone_racing/learning/deep_drone_racing_learner/src/ddr_learner/</code>目录下</p>
<p>主要通过修改其中的<code>checkpoint_dir</code>的值来更换神经网络模型的保存位置，默认是存放在<code>/tmp/logs</code>文件夹下，因为该文件夹是Ubuntu系统的临时文件存放位置，因此可能在重启或其他的误操作后，该文件夹下的内容被清空，所以这里一定要进行修改</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">train_data=../../data/Training</span><br><span class="line">val_data=../../data/Training</span><br><span class="line"></span><br><span class="line">python2<span class="number">.7</span> train.py --checkpoint_dir=自定义路径  --f=<span class="number">0.5</span> --train_dir=$train_data --val_dir=$val_data --summary_freq=<span class="number">100</span> --batch_size=<span class="number">200</span> --max_epochs=迭代次数 --num_threads=<span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>​        模型保存位置修改后，运行<code>train_model.sh</code>文件，测试能否成功训练，操作无误后，继续执行后面步骤</p>
<h2 id="2-3-训练背景图修改"><a href="#2-3-训练背景图修改" class="headerlink" title="2.3 训练背景图修改"></a>2.3 训练背景图修改</h2><blockquote>
<p>因为我们训练的背景是根据当前的研究目标而设定的，因此，需要在仿真环境中更改为实际场景背景，该背景图片可以用手机拍摄，也可以通过其他方式来获取，修改过后的训练场景图如图所示</p>
</blockquote>
<p><img src="/2020/06/07/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C/01.png" alt="image-20200608134337180"></p>
<h3 id="2-3-1-图片尺寸大小更改"><a href="#2-3-1-图片尺寸大小更改" class="headerlink" title="2.3.1 图片尺寸大小更改"></a>2.3.1 图片尺寸大小更改</h3><blockquote>
<p>使用python代码，将图片大小全部修改为400*400像素</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">filename = os.listdir(<span class="string">&quot;/home/cug/Desktop/image/&quot;</span>)</span><br><span class="line">base_dir = <span class="string">&quot;/home/cug/Desktop/image/&quot;</span></span><br><span class="line">new_dir = <span class="string">&quot;/home/cug/Desktop/image/&quot;</span></span><br><span class="line"></span><br><span class="line">size_m = <span class="number">400</span></span><br><span class="line">size_n = <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> filename:</span><br><span class="line">    image = Image.<span class="built_in">open</span>(base_dir + img)</span><br><span class="line">    image_size = image.resize((size_m,size_n),Image.ANTIALIAS)</span><br><span class="line">    image_size.save(new_dir +img)</span><br></pre></td></tr></table></figure>
<p>更改过后的图片数据如下图：</p>
<p><img src="/2020/06/07/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C/02.png" alt="image-20200608135043365"></p>
<h3 id="2-3-2-训练背景替换"><a href="#2-3-2-训练背景替换" class="headerlink" title="2.3.2 训练背景替换"></a>2.3.2 训练背景替换</h3><blockquote>
<p>在uzh的代码中，主要通过读取特定文件夹下的图片来作为训练背景，因此，只需要找到其文件夹，并将其中的图片替换为自己的图片即可。</p>
</blockquote>
<p>​        其训练背景图主要存放在<code>sim2real_drone_racing/drone_racing/drone_racing/resources/race_track/iros_materials/materials/textures/train_bkgs</code>目录下，可以将整个<code>train_bkgs</code>文件夹拷贝一份，并将复制的文件夹重名为<code>train_bkgs_init</code>，保存其初始背景图，然后将<code>train_bkgs</code>中的图片数据清空删除，并将上面的<code>01-04.jpg</code>图片拷贝到<code>train_bkgs</code>文件夹即可。</p>
<p>​        最后可以重新运行<code>train_model.sh</code>文件，查看新收集的背景图是否修改来进行验证，也可以通过运行launch文件，并显示Gazebo界面来查看，如何显示Gazebo界面，会在后面进行介绍。</p>
<h2 id="2-4-地面纹理图修改"><a href="#2-4-地面纹理图修改" class="headerlink" title="2.4 地面纹理图修改"></a>2.4 地面纹理图修改</h2><blockquote>
<p>原实验是使用的小草图片作为地面纹理，也可根据自己需要修改成其他图片</p>
</blockquote>
<p>和2.3节一样，先运行python代码，将图片大小更改，然后进行数据替换。</p>
<p>将<code>sim2real_drone_racing/drone_racing/drone_racing/resources/race_track/iros_materials/materials/textures</code>目录和<code>sim2real_drone_racing/drone_racing/drone_racing/resources/race_track/iros_materials/materials/textures/test_floor_bkgs</code>目录下的<code>asphalt.jpg</code>(小草图片)删除，然后将想要使用的地面纹理图，各拷贝一份到上面的两个目录下，重命名为<code>asphalt.jpg</code></p>
<h2 id="2-5-Gazebo界面显示"><a href="#2-5-Gazebo界面显示" class="headerlink" title="2.5 Gazebo界面显示"></a>2.5 Gazebo界面显示</h2><blockquote>
<p>Gazebo界面默认是关闭的，但我们平常做一些相关的修改后，想要快速的查看效果，就可以用Gazebo进行界面显示了</p>
</blockquote>
<p>​        在<code>sim2real_drone_racing/drone_racing/drone_racing/launch</code>目录下，打开<code>simulation_no_quad_gui.launch</code>文件，将其中第14行的<code>value</code>属性值修改为<code>true</code>，即如下代码所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;gui&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>​        然后运行<code>test_racing.launch</code>命令，就会显示Gazebo界面了</p>
<h2 id="2-6-全局轨迹生成"><a href="#2-6-全局轨迹生成" class="headerlink" title="2.6 全局轨迹生成"></a>2.6 全局轨迹生成</h2><blockquote>
<p>全局轨迹对实验有着至关重要的作用，原代码默认有一个全局轨迹，但当我们修改了仿真平台中的某些数据后，也需要修改其轨迹。</p>
</blockquote>
<p>​        仿真环境主要由4部分组成：背景图（4个方向上的墙壁）、地面纹理、门框、门框纹理。</p>
<p>​        其中，背景图和地面纹理的修改已在2.3、2.4节介绍。</p>
<p>​        该节主要介绍门框坐标位置的修改。（修改时，门框的朝向不变）</p>
<h3 id="2-6-1-Gazebo环境中修改门框坐标"><a href="#2-6-1-Gazebo环境中修改门框坐标" class="headerlink" title="2.6.1 Gazebo环境中修改门框坐标"></a>2.6.1 Gazebo环境中修改门框坐标</h3><blockquote>
<p>主要通过修改<code>world</code>文件来实现</p>
<p><code>race_track.world</code>文件，存放在<code>sim2real_drone_racing/drone_racing/drone_racing/resources/worlds</code>目录下</p>
</blockquote>
<p><img src="/2020/06/07/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C/03.png" alt="image-20200608185046302"></p>
<p>​        总共有14个门框，每个门框都有其自定义的名称，通过修改其中的<code>pose</code>属性值，上图中的<code>18.2181,20.0025,2</code>表示门框的xyz坐标值，将上图中两处框出来的xyz坐标值都修改，最后的<code>-0.874979</code>为门框朝向值，这里不做修改。</p>
<p>​        修改后，可以启动<code>test_racing.launch</code>文件，在Gazebo界面中，查看门框的位置</p>
<h3 id="2-6-2-RVIZ界面中门框坐标修改"><a href="#2-6-2-RVIZ界面中门框坐标修改" class="headerlink" title="2.6.2 RVIZ界面中门框坐标修改"></a>2.6.2 RVIZ界面中门框坐标修改</h3><blockquote>
<p>在飞行过程中，是通过RVIZ显示无人机、门框以及全局路线的，因此，要在相应的文件中，将门框坐标值与world中的门框坐标值一一对应起来。</p>
<p><code>goals.yaml</code>文件，存放在<code>sim2real_drone_racing/drone_racing/drone_racing/parameters</code>目录下</p>
</blockquote>
<p>​        RVIZ界面显示如下：</p>
<p><img src="/2020/06/07/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C/04.png" alt="image-20200608185555917"></p>
<p><code>goals.yaml</code>中的代码如下：</p>
<p>​        其中，<code>goal_positions中</code>的<code>xyz</code>坐标值表示<code>RVIZ</code>界面中门框的<code>xyz</code>坐标值</p>
<p>​        <strong>注意：</strong></p>
<p>​            （1）<code>xyz</code>坐标要与<code>world</code>文件中的<code>xyz</code>坐标一致</p>
<p>​            （2）修改时，要注意空格，也要注意数字为实数，不是整数</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">goal_positions:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">x:</span> <span class="number">2.7</span>, <span class="attr">y:</span> <span class="number">6.7</span>, <span class="attr">z:</span> <span class="number">2.0</span>, <span class="attr">gate:</span> <span class="number">1.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">x:</span> <span class="number">10.6</span>, <span class="attr">y:</span> <span class="number">4.2</span>, <span class="attr">z:</span> <span class="number">2.0</span>, <span class="attr">gate:</span> <span class="number">1.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">x:</span> <span class="number">19.0</span>, <span class="attr">y:</span> <span class="number">10.0</span>, <span class="attr">z:</span> <span class="number">1.9</span>, <span class="attr">gate:</span> <span class="number">1.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">x:</span> <span class="number">26.6</span>, <span class="attr">y:</span> <span class="number">19.6</span>, <span class="attr">z:</span> <span class="number">2.0</span>, <span class="attr">gate:</span> <span class="number">1.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">x:</span> <span class="number">35.1</span>, <span class="attr">y:</span> <span class="number">26.5</span>, <span class="attr">z:</span> <span class="number">2.0</span>, <span class="attr">gate:</span> <span class="number">1.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">x:</span> <span class="number">45.0</span>, <span class="attr">y:</span> <span class="number">22.2</span>, <span class="attr">z:</span> <span class="number">1.9</span>, <span class="attr">gate:</span> <span class="number">1.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">x:</span> <span class="number">47.4</span>, <span class="attr">y:</span> <span class="number">13.6</span>, <span class="attr">z:</span> <span class="number">2.0</span>, <span class="attr">gate:</span> <span class="number">1.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">x:</span> <span class="number">42.4</span>, <span class="attr">y:</span> <span class="number">5.8</span>, <span class="attr">z:</span> <span class="number">2.0</span>, <span class="attr">gate:</span> <span class="number">1.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">x:</span> <span class="number">33.7</span>, <span class="attr">y:</span> <span class="number">4.7</span>, <span class="attr">z:</span> <span class="number">1.9</span>, <span class="attr">gate:</span> <span class="number">1.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">x:</span> <span class="number">26.0</span>, <span class="attr">y:</span> <span class="number">9.4</span>, <span class="attr">z:</span> <span class="number">2.0</span>, <span class="attr">gate:</span> <span class="number">1.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">x:</span> <span class="number">18.2</span>, <span class="attr">y:</span> <span class="number">20.0</span>, <span class="attr">z:</span> <span class="number">2.0</span>, <span class="attr">gate:</span> <span class="number">1.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">x:</span> <span class="number">10.2</span>, <span class="attr">y:</span> <span class="number">25.0</span>, <span class="attr">z:</span> <span class="number">2.0</span>, <span class="attr">gate:</span> <span class="number">1.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">x:</span> <span class="number">2.1</span>, <span class="attr">y:</span> <span class="number">22.0</span>, <span class="attr">z:</span> <span class="number">1.9</span>, <span class="attr">gate:</span> <span class="number">1.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">x:</span> <span class="number">-1.1</span>, <span class="attr">y:</span> <span class="number">13.2</span>, <span class="attr">z:</span> <span class="number">2.0</span>, <span class="attr">gate:</span> <span class="number">1.0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">goal_orientations:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">yaw:</span> <span class="number">-0.44</span>, <span class="attr">offset:</span> <span class="number">0.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">yaw:</span> <span class="number">0.0</span>, <span class="attr">offset:</span> <span class="number">0.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">yaw:</span> <span class="number">0.97</span>, <span class="attr">offset:</span> <span class="number">0.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">yaw:</span> <span class="number">-2.2</span>, <span class="attr">offset:</span> <span class="number">0.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">yaw:</span> <span class="number">3.5</span>, <span class="attr">offset:</span> <span class="number">0.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">yaw:</span> <span class="number">2.57</span>, <span class="attr">offset:</span> <span class="number">0.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">yaw:</span> <span class="number">1.57</span>, <span class="attr">offset:</span> <span class="number">0.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">yaw:</span> <span class="number">-2.6</span>, <span class="attr">offset:</span> <span class="number">0.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">yaw:</span> <span class="number">3.1</span>, <span class="attr">offset:</span> <span class="number">0.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">yaw:</span> <span class="number">-1.0</span>, <span class="attr">offset:</span> <span class="number">0.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">yaw:</span> <span class="number">-0.9</span>, <span class="attr">offset:</span> <span class="number">0.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">yaw:</span> <span class="number">-3.1</span>, <span class="attr">offset:</span> <span class="number">0.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">yaw:</span> <span class="number">0.8</span>, <span class="attr">offset:</span> <span class="number">0.0</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">yaw:</span> <span class="number">-1.5</span>, <span class="attr">offset:</span> <span class="number">0.0</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-6-3-全局轨迹生成"><a href="#2-6-3-全局轨迹生成" class="headerlink" title="2.6.3 全局轨迹生成"></a>2.6.3 全局轨迹生成</h3><blockquote>
<p>在<code>world</code>文件和<code>yaml</code>文件中，修改了门框坐标后，就可以利用代码生成全局轨迹了</p>
<p>可能有更好的方式生成，但我这里采用的是比较笨的方法</p>
</blockquote>
<p>（1）<strong><code>global_trajectory.cpp</code>文件</strong>，存放在<code>sim2real_drone_racing/drone_racing/drone_racing/src</code>目录下</p>
<p>​        全局轨迹生成主要是通过调用<code>global_trajectory.cpp</code>文件中的<code>generateGlobalTrajectory</code>函数来实现的。</p>
<p>​        主要代码贴出如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> maximal_des_thrust = <span class="number">18.0</span>;</span><br><span class="line"><span class="keyword">double</span> maximal_roll_pitch_rate = <span class="number">1.5</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>; <span class="comment">//添加的标签</span></span><br><span class="line"><span class="comment">//if(flag)&#123; //需要生成轨迹时，取消该注释，并将下一行的if判断注释</span></span><br><span class="line"><span class="keyword">if</span> (!load_existing_trajectory_) &#123;</span><br><span class="line">  ......<span class="comment">//此处代码省略</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (n); i++) &#123;</span><br><span class="line">    t = i % n * dt;</span><br><span class="line">    state = polynomial_trajectories::<span class="built_in">getPointFromTrajectory</span>(trajectory, ros::<span class="built_in">Duration</span>(t));</span><br><span class="line">    global_trajectory_sampled_.<span class="built_in">push_back</span>(state);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">saveGlobalTrajectory</span>();<span class="comment">//生成轨迹</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">loadGlobalTrajectory</span>();<span class="comment">//加载轨迹</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        主要是通过判断<code>load_existing_trajectory_</code>值是否为真，来生成轨迹或加载轨迹，但在实验过程中，发现代码无法进入到<code>if</code>函数体中，反而都是进入到<code>else</code>函数体中了，因此，在<code>if</code>上一行，手动添加了一个<code>flag</code>标签，并且在需要生成轨迹的时候，使用<code>if(flag)</code>进行判断，而不使用<code>if (!load_existing_trajectory_)</code>来判断，当重新生成轨迹后，在使用 <code>if (!load_existing_trajectory_)</code>来判断。</p>
<p>​        <strong>总结：</strong>在原代码基础上，添加两行代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>; <span class="comment">//添加的标签</span></span><br><span class="line"><span class="comment">//if(flag)&#123; //需要生成轨迹时，取消该注释，并将下一行的if判断注释</span></span><br></pre></td></tr></table></figure>
<p>​            （1）生成新全局轨迹，<code>if(flag)</code>判断，注释<code>if (!load_existing_trajectory_)</code></p>
<p>​            （2）加载全局轨迹，<code>if (!load_existing_trajectory_)</code>判断，注释<code>if(flag)</code></p>
<p>（2）<strong>编译</strong></p>
<blockquote>
<p>由于改动了<code>cpp</code>文件，因此要重新编译，否则改动无效</p>
<p>每次改动<code>cpp</code>文件后，都必须要重新编译</p>
</blockquote>
<p>​    在终端的<code>drone_racing_ws/catkin_ddr</code>目录下，执行如下命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">catkin build</span><br><span class="line">source devel/setup.bash </span><br></pre></td></tr></table></figure>
<p>（3）<strong>启动<code>test_racing.launch</code>文件</strong></p>
<blockquote>
<p>修改完坐标值，启动launch文件，就可以重新生成轨迹了    </p>
</blockquote>
<p>​        启动<code>launch</code>文件过程中，注意终端的输出，若终端有大量红色错误信息输出，可能需要重新启动文件测试</p>
<p>​        终端没有输出报错信息，则可以查看<code>global_trajectory.txt</code>文件内容，该文件存放在</p>
<p><code>sim2real_drone_racing/drone_racing/drone_racing/resources/global_trajectories</code>目录下，并且该文件存储的是轨迹点上的值，或者在启动<code>launch</code>文件之前，直接删除或拷贝一份<code>global_trajectory.txt</code>文件，删除的话，则会重新生成一个<code>txt</code>文件，若不做任何修改，还需要查看一下<code>txt</code>中的值，来判断是否修改成功。</p>
<h2 id="2-7-网络模型加载"><a href="#2-7-网络模型加载" class="headerlink" title="2.7 网络模型加载"></a>2.7 网络模型加载</h2><blockquote>
<p>训练了神经网络模型，我们则需要利用神经网络模型进行测试，或接着上次的模型继续训练，因此，需要对网络模型进行加载</p>
</blockquote>
<p>​        在原代码中，通过使用<code>tensorflow</code>的函数去调用最新训练的网络模型，但我对该函数用的比较少，因此将代码修改为指定的模型。</p>
<p>​        <strong>原代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">checkpoint = tf.train.latest_checkpoint(config.checkpoint_dir)</span><br><span class="line">self.saver.restore(sess, checkpoint)</span><br></pre></td></tr></table></figure>
<p>​        将<code>self.saver.restore(sess, checkpoint)</code>中的<code>checkpoint</code>修改为指定模型路径就可以了。</p>
<h3 id="2-7-1-接着上次的网络模型训练"><a href="#2-7-1-接着上次的网络模型训练" class="headerlink" title="2.7.1 接着上次的网络模型训练"></a>2.7.1 接着上次的网络模型训练</h3><blockquote>
<p><code>base_learner.py</code>文件，存放在<code>sim2real_drone_racing/learning/deep_drone_racing_learner/src/ddr_learner/models</code>目录下</p>
</blockquote>
<p>​        在<code>base_learner.py</code>的<code>train</code>函数中，<code>self.saver.restore()</code>方法则是接着之前的网络进行训练</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> sv.managed_session(config=gpu_config) <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Number of params: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(sess.run(parameter_count)))</span><br><span class="line">    <span class="keyword">if</span> config.resume_train:</span><br><span class="line">        ......</span><br><span class="line">        <span class="comment">#self.saver.restore(sess, checkpoint)</span></span><br><span class="line">        self.saver.restore(sess, <span class="string">&#x27;/home/cug/drone_racing_ws/catkin_ddr/src/sim2real_drone_racing/learning/deep_drone_racing_learner/src/ddr_learner/download_model_checkpoint/model-1812&#x27;</span>)<span class="comment">#这里将checkpoint修改为了特定路径</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/06/07/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C/05.png" alt="image-20200609154658757"></p>
<h3 id="2-7-2-使用训练过的神经网络模型测试"><a href="#2-7-2-使用训练过的神经网络模型测试" class="headerlink" title="2.7.2 使用训练过的神经网络模型测试"></a>2.7.2 使用训练过的神经网络模型测试</h3><blockquote>
<p><code>Networ.py</code>文件，存放在<code>sim2real_drone_racing/learning/deep_drone_racing_learning_node/src/Network</code>目录下</p>
</blockquote>
<p>​        在<code>Networ.py</code>的<code>callback_feedthrough</code>函数中，<code>self.saver.restore()</code>方法则是使用神经网络进行测试</p>
<p>​        这里也没有使用<code>tf.train.latest_checkpoint()</code>方法，而是指定神经网络模型路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">callback_feedthrough</span>(<span class="params">self, data</span>):</span></span><br><span class="line">     self.use_network_out = data.data</span><br><span class="line">     <span class="keyword">if</span> self.use_network_out:</span><br><span class="line">......</span><br><span class="line">         self.saver.restore(self.sess, <span class="string">&#x27;/home/cug/drone_racing_ws/catkin_ddr/src/sim2real_drone_racing/learning/deep_drone_racing_learner/src/ddr_learner/results/best_model/navigation_model/4-lab3/model1002/model-1002&#x27;</span>)<span class="comment">#指定模型路径</span></span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;Restored checkpoint file &#123;&#125;&quot;</span>.<span class="built_in">format</span>(checkpoint))</span><br></pre></td></tr></table></figure>
<h2 id="2-8-神经网络模型结构"><a href="#2-8-神经网络模型结构" class="headerlink" title="2.8 神经网络模型结构"></a>2.8 神经网络模型结构</h2><blockquote>
<p>论文中的神经网络模型结构选用的是<code>DroNet</code>，也可以使用其他的网络模型结构。</p>
<p><code>nets.py</code>文件，存放在<code>sim2real_drone_racing/learning/deep_drone_racing_learner/src/ddr_learner/models</code>目录下</p>
</blockquote>
<p>​            代码如下所示，论文使用的是resnet函数中的网络结构，如果要使用其他网络结构，如Vgg16，可以重写一个函数，并将函数方法名修改为resnet即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Vgg16网络结构</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resnet8</span>(<span class="params">img_input, output_dim, scope=<span class="string">&#x27;Prediction&#x27;</span>, reuse=<span class="literal">False</span>, f=<span class="number">0.25</span></span>):</span></span><br><span class="line">    x1 = Conv2D(<span class="built_in">int</span>(<span class="number">64</span>*f),(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">&#x27;same&#x27;</span>,activation=<span class="string">&#x27;relu&#x27;</span>)(img_input)</span><br><span class="line">    x1 = Conv2D(<span class="built_in">int</span>(<span class="number">64</span>*f),(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">&#x27;same&#x27;</span>,activation=<span class="string">&#x27;relu&#x27;</span>)(x1)</span><br><span class="line">    x1 = MaxPooling2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>),strides=(<span class="number">2</span>,<span class="number">2</span>),padding=<span class="string">&#x27;same&#x27;</span>)(x1)</span><br><span class="line"></span><br><span class="line">    x2 = Conv2D(<span class="built_in">int</span>(<span class="number">128</span>*f),(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">&#x27;same&#x27;</span>,activation=<span class="string">&#x27;relu&#x27;</span>)(x1)</span><br><span class="line">    x2 = Conv2D(<span class="built_in">int</span>(<span class="number">128</span>*f),(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">&#x27;same&#x27;</span>,activation=<span class="string">&#x27;relu&#x27;</span>)(x2)</span><br><span class="line">    x2 = MaxPooling2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>),strides=(<span class="number">2</span>,<span class="number">2</span>),padding=<span class="string">&#x27;same&#x27;</span>)(x2)</span><br><span class="line"></span><br><span class="line">    x3 = Conv2D(<span class="built_in">int</span>(<span class="number">256</span>*f),(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">&#x27;same&#x27;</span>,activation=<span class="string">&#x27;relu&#x27;</span>)(x2)</span><br><span class="line">    x3 = Conv2D(<span class="built_in">int</span>(<span class="number">256</span>*f),(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">&#x27;same&#x27;</span>,activation=<span class="string">&#x27;relu&#x27;</span>)(x3)</span><br><span class="line">    x3 = MaxPooling2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>),strides=(<span class="number">2</span>,<span class="number">2</span>),padding=<span class="string">&#x27;same&#x27;</span>)(x3)</span><br><span class="line"></span><br><span class="line">    x4 = Conv2D(<span class="built_in">int</span>(<span class="number">512</span>*f),(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">&#x27;same&#x27;</span>,activation=<span class="string">&#x27;relu&#x27;</span>)(x3)</span><br><span class="line">    x4 = Conv2D(<span class="built_in">int</span>(<span class="number">512</span>*f),(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">&#x27;same&#x27;</span>,activation=<span class="string">&#x27;relu&#x27;</span>)(x3)</span><br><span class="line">    x4 = Conv2D(<span class="built_in">int</span>(<span class="number">512</span>*f),(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">&#x27;same&#x27;</span>,activation=<span class="string">&#x27;relu&#x27;</span>)(x3)</span><br><span class="line">    x4 = MaxPooling2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>),strides=(<span class="number">2</span>,<span class="number">2</span>),padding=<span class="string">&#x27;same&#x27;</span>)(x4)</span><br><span class="line"></span><br><span class="line">    x5 = Conv2D(<span class="built_in">int</span>(<span class="number">512</span>*f),(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">&#x27;same&#x27;</span>,activation=<span class="string">&#x27;relu&#x27;</span>)(x4)</span><br><span class="line">    x5 = Conv2D(<span class="built_in">int</span>(<span class="number">512</span>*f),(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">&#x27;same&#x27;</span>,activation=<span class="string">&#x27;relu&#x27;</span>)(x5)</span><br><span class="line">    x5 = Conv2D(<span class="built_in">int</span>(<span class="number">512</span>*f),(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">&#x27;same&#x27;</span>,activation=<span class="string">&#x27;relu&#x27;</span>)(x5)</span><br><span class="line">    x5 = MaxPooling2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>),strides=(<span class="number">2</span>,<span class="number">2</span>),padding=<span class="string">&#x27;same&#x27;</span>)(x5)</span><br><span class="line"></span><br><span class="line">    x6 = Flatten()(x5)</span><br><span class="line"></span><br><span class="line">    x7 = Dense(<span class="number">4096</span>,activation=<span class="string">&#x27;relu&#x27;</span>)(x6)</span><br><span class="line">    x7 = Dropout(<span class="number">0.5</span>)(x7)</span><br><span class="line">    x7 = Dense(<span class="number">4096</span>,activation=<span class="string">&#x27;relu&#x27;</span>)(x7)</span><br><span class="line">    x7 = Dropout(<span class="number">0.5</span>)(x7)</span><br><span class="line"></span><br><span class="line">    x8 = Activation(<span class="string">&#x27;softmax&#x27;</span>)(x7)</span><br><span class="line">    logits = Dense(output_dim)(x8)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;======================&#x27;</span>)</span><br><span class="line">    <span class="comment">#logits = Dense(output_dim)(x)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;logits&#x27;</span>,logits)</span><br><span class="line">    <span class="keyword">return</span> logits</span><br><span class="line"></span><br><span class="line"><span class="comment"># resnet8  ，论文的原网络结构  ，名字已修改</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dronet_network</span>(<span class="params">img_input, output_dim, scope=<span class="string">&#x27;Prediction&#x27;</span>, reuse=<span class="literal">False</span>, f=<span class="number">0.25</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Define model architecture. The parameter &#x27;f&#x27; controls the network width.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    img_input = Input(tensor=img_input)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(scope, reuse=reuse):</span><br><span class="line">        x1 = Conv2D(<span class="built_in">int</span>(<span class="number">32</span>*f), (<span class="number">5</span>, <span class="number">5</span>), strides=[<span class="number">2</span>, <span class="number">2</span>], padding=<span class="string">&#x27;same&#x27;</span>)(img_input)</span><br><span class="line">        x1 = MaxPooling2D(pool_size=(<span class="number">3</span>, <span class="number">3</span>), strides=[<span class="number">2</span>, <span class="number">2</span>])(x1)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># First residual block</span></span><br><span class="line">        x2 = Activation(<span class="string">&#x27;relu&#x27;</span>)(x1)</span><br><span class="line">        x2 = Conv2D(<span class="built_in">int</span>(<span class="number">32</span>*f), (<span class="number">3</span>, <span class="number">3</span>), strides=[<span class="number">2</span>, <span class="number">2</span>], padding=<span class="string">&#x27;same&#x27;</span>,</span><br><span class="line">                    kernel_initializer=<span class="string">&quot;he_normal&quot;</span>,</span><br><span class="line">                    kernel_regularizer=regularizers.l2(<span class="number">1e-4</span>))(x2)</span><br><span class="line"></span><br><span class="line">        x2 = Activation(<span class="string">&#x27;relu&#x27;</span>)(x2)</span><br><span class="line">        x2 = Conv2D(<span class="built_in">int</span>(<span class="number">32</span>*f), (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>,</span><br><span class="line">                    kernel_initializer=<span class="string">&quot;he_normal&quot;</span>,</span><br><span class="line">                    kernel_regularizer=regularizers.l2(<span class="number">1e-4</span>))(x2)</span><br><span class="line"></span><br><span class="line">        x1 = Conv2D(<span class="built_in">int</span>(<span class="number">32</span>*f), (<span class="number">1</span>, <span class="number">1</span>), strides=[<span class="number">2</span>, <span class="number">2</span>], padding=<span class="string">&#x27;same&#x27;</span>)(x1)</span><br><span class="line">        x3 = add([x1, x2])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Second residual block</span></span><br><span class="line">        x4 = Activation(<span class="string">&#x27;relu&#x27;</span>)(x3)</span><br><span class="line">        x4 = Conv2D(<span class="built_in">int</span>(<span class="number">64</span>*f), (<span class="number">3</span>, <span class="number">3</span>), strides=[<span class="number">2</span>, <span class="number">2</span>], padding=<span class="string">&#x27;same&#x27;</span>,</span><br><span class="line">                    kernel_initializer=<span class="string">&quot;he_normal&quot;</span>,</span><br><span class="line">                    kernel_regularizer=regularizers.l2(<span class="number">1e-4</span>))(x4)</span><br><span class="line">        x4 = Activation(<span class="string">&#x27;relu&#x27;</span>)(x4)</span><br><span class="line">        x4 = Conv2D(<span class="built_in">int</span>(<span class="number">64</span>*f), (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>,</span><br><span class="line">                    kernel_initializer=<span class="string">&quot;he_normal&quot;</span>,</span><br><span class="line">                    kernel_regularizer=regularizers.l2(<span class="number">1e-4</span>))(x4)</span><br><span class="line"></span><br><span class="line">        x3 = Conv2D(<span class="built_in">int</span>(<span class="number">64</span>*f), (<span class="number">1</span>, <span class="number">1</span>), strides=[<span class="number">2</span>, <span class="number">2</span>], padding=<span class="string">&#x27;same&#x27;</span>)(x3)</span><br><span class="line">        x5 = add([x3, x4])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Third residual block</span></span><br><span class="line">        x6 = Activation(<span class="string">&#x27;relu&#x27;</span>)(x5)</span><br><span class="line">        x6 = Conv2D(<span class="built_in">int</span>(<span class="number">128</span>*f), (<span class="number">3</span>, <span class="number">3</span>), strides=[<span class="number">2</span>, <span class="number">2</span>], padding=<span class="string">&#x27;same&#x27;</span>,</span><br><span class="line">                    kernel_initializer=<span class="string">&quot;he_normal&quot;</span>,</span><br><span class="line">                    kernel_regularizer=regularizers.l2(<span class="number">1e-4</span>))(x6)</span><br><span class="line"></span><br><span class="line">        x6 = Activation(<span class="string">&#x27;relu&#x27;</span>)(x6)</span><br><span class="line">        x6 = Conv2D(<span class="built_in">int</span>(<span class="number">128</span>*f), (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>,</span><br><span class="line">                    kernel_initializer=<span class="string">&quot;he_normal&quot;</span>,</span><br><span class="line">                    kernel_regularizer=regularizers.l2(<span class="number">1e-4</span>))(x6)</span><br><span class="line"></span><br><span class="line">        x5 = Conv2D(<span class="built_in">int</span>(<span class="number">128</span>*f), (<span class="number">1</span>, <span class="number">1</span>), strides=[<span class="number">2</span>, <span class="number">2</span>], padding=<span class="string">&#x27;same&#x27;</span>)(x5)</span><br><span class="line">        x7 = add([x5, x6])</span><br><span class="line"></span><br><span class="line">        x = Flatten()(x7)</span><br><span class="line">        x = Activation(<span class="string">&#x27;relu&#x27;</span>)(x)</span><br><span class="line">        x = Dropout(<span class="number">0.5</span>)(x)</span><br><span class="line">        x = Dense(<span class="built_in">int</span>(<span class="number">256</span>*f))(x)</span><br><span class="line">        x = Activation(<span class="string">&#x27;relu&#x27;</span>)(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Output channel</span></span><br><span class="line">        logits = Dense(output_dim)(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> logits</span><br></pre></td></tr></table></figure>
<h2 id="2-9-动态门框设置"><a href="#2-9-动态门框设置" class="headerlink" title="2.9 动态门框设置"></a>2.9 动态门框设置</h2><blockquote>
<p>神经网络模型也在动态场景下进行了测试</p>
<p><code>main.yaml</code>文件，存放在<code>sim2real_drone_racing/drone_racing/drone_racing/parameters</code>目录下</p>
</blockquote>
<p>​        默认设置为<code>false</code>，如果需要移动门框，则设置为<code>true</code>，另外这里的<code>gates_dyn_amplitude</code>属性我也没怎么搞懂</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Moving the gates</span></span><br><span class="line"><span class="attr">moving_gates:</span> <span class="literal">false</span>                 <span class="comment"># triggers dynamically moving gates</span></span><br><span class="line"><span class="attr">gates_dyn_amplitude:</span> <span class="number">0.3</span>       <span class="comment"># max amplitude for moving at test time</span></span><br><span class="line"><span class="attr">speed_moving_gates:</span> <span class="number">1.8</span>          <span class="comment"># max speed moving gates</span></span><br><span class="line"><span class="attr">gates_static_amplitude:</span> <span class="number">0.0</span>         <span class="comment"># max amplitude for statically replacing the gates at new runs</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>整个代码真的太过复杂，到现在为止，对里面的很多细节还没弄清楚，如</p>
<p>（1）算法收集数据时，如何收集的，封装了topic，又是如何封装的？只知道执行py文件，就可以收集数据了</p>
<p>（2）控制到底是如何实现的？C++代码编写topic？我想要简单的控制无人机，如何给定合适的电机转速值？</p>
<p>（3）ROS与Gazebo的封装性太高了，确实只会用。</p>
<p>（4）除了sim2real_droneracing包，还有那么多的其他包都是干啥的？轨迹生成用到了其他包。</p>
</blockquote>
<p>​        下面是对我用到过的文件写个简单的功能介绍：</p>
<ol>
<li><p><strong>launch文件</strong>，<code>sim2real_drone_racing/drone_racing/drone_racing/launch</code>目录</p>
<p><code>simulation_no_quad_gui.launch</code>文件中，可以设置属性值，打开Gazebo界面或关闭Gazebo界面</p>
</li>
<li><p><strong>yaml文件，</strong><code>sim2real_drone_racing/drone_racing/drone_racing/parameters</code>目录</p>
<ul>
<li>goals.yaml文件，设置RVIZ界面中门框的坐标值，并图形显示</li>
<li>main.yaml文件，设置门框是否移动，默认为false，不移动</li>
</ul>
</li>
<li><p><strong>resources目录下</strong>，完整目录为<code>sim2real_drone_racing/drone_racing/drone_racing/resources</code></p>
<ul>
<li>global_trajectories文件夹，存放的是全局最优轨迹的txt文件</li>
<li><strong>race_track文件夹</strong>：超级重要的文件夹，仿真环境的所有背景及纹理基本都在该文件夹下，需要多看看</li>
<li>scripts文件夹，收集训练数据python代码</li>
<li>worlds文件夹，Gazebo<code>中的模型坐标设置文件</code></li>
</ul>
</li>
<li><p><strong>ddr_learner目录下</strong>，完整目录为<code>sim2real_drone_racing/learning/deep_drone_racing_learner/src/ddr_learner</code></p>
<ul>
<li>train_model.sh文件：训练神经网络，并设置最大迭代次数，以及保存模型文件位置</li>
<li>models目录下：<ul>
<li>base_learner.py：继续上次训练模型参数训练</li>
<li>nets.py：可以自己设置神经网络模型结构</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Network目录下</strong>，完整目录为<code>sim2real_drone_racing/learning/deep_drone_racing_learning_node/src/Network</code></p>
<ul>
<li>Network.py：使用神经网络进行测试，可以选择训练过的其他网络</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>代码</category>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>Drone Racing</tag>
      </tags>
  </entry>
  <entry>
    <title>uzh无人机竞速实验（二）</title>
    <url>/2020/06/10/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>在<a href="https://ldgcug.xyz/2020/06/07/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C/">上一篇</a>博客中，主要介绍了实验的一些操作方法，本篇博客将介绍具体的实验流程</p>
<p><strong>本文的所有实验的地面纹理都已修改为瓷砖背景</strong></p>
</blockquote>
<h1 id="一、实验一"><a href="#一、实验一" class="headerlink" title="一、实验一"></a>一、实验一</h1><blockquote>
<p><strong>室内背景，且门框形状固定，门框纹理固定，收集训练数据</strong></p>
</blockquote>
<p>（1）将背景修改为真实场景下的训练背景</p>
<p>（2）设置无人机飞行时间，将门框形状和门框纹理进行固定</p>
<blockquote>
<p>因为是在服务器上运行，服务器上的机器性能不够，测试发现，飞行40s，只能穿越前6个框，进行算法验证测试</p>
<p>不同的电脑飞行40s，穿越的框应该是不一样的，要根据机器性能实际考虑飞行时间</p>
</blockquote>
<p>​    <code>collect_data.py</code>，collect_data_in_fixed_env函数，设置飞行时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collect_data_in_fixed_env</span>(<span class="params">num_iterations</span>):</span></span><br><span class="line">    	......</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Collecting data...&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">40</span>)<span class="comment">#可以通过修改该值，来确定无人机收集数据过程中的飞行时间</span></span><br></pre></td></tr></table></figure>
<p>​    <code>collect_data.py</code>，mian函数，固定门框纹理、门框形状</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">#在相应文件夹下，添加了dimian.jpg，然后以该图片作为地面纹理</span></span><br><span class="line">    train_goal_fname = <span class="string">&#x27;../race_track/iros_materials/materials/textures/dimian.jpg&#x27;</span></span><br><span class="line">    num_loops = <span class="number">1</span> <span class="comment">#修改为1，表示对每张背景图，都只收集一次数据，总共4张背景图，收集4个数据</span></span><br><span class="line">	......</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_loops): <span class="comment">#控制循环次数</span></span><br><span class="line">        <span class="keyword">for</span> i, bkg_img_fname <span class="keyword">in</span> <span class="built_in">enumerate</span>(all_images):</span><br><span class="line">            <span class="comment"># Copy new background</span></span><br><span class="line">            os.system(<span class="string">&quot;cp &#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(bkg_img_fname, texture_goal_fname))</span><br><span class="line">            <span class="comment"># Copy new asphalt</span></span><br><span class="line">            <span class="comment"># os.system(&quot;cp &#123;&#125; &#123;&#125;&quot;.format(all_images[-(i+1)], asphalt_goal_fname))</span></span><br><span class="line">            os.system(<span class="string">&quot;cp &#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_goal_fname, asphalt_goal_fname))<span class="comment">#固定地面纹理，之前是随机替换的</span></span><br><span class="line">            <span class="comment"># Copy new gate background</span></span><br><span class="line">            <span class="comment">#os.system(&quot;cp &#123;&#125; &#123;&#125;&quot;.format(all_gates_materials[i%9], bkg_goal_fname)) # Use the first 9 for training and the last for testing</span></span><br><span class="line">             os.system(<span class="string">&quot;cp &#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(all_gates_materials[<span class="number">0</span>%<span class="number">9</span>], bkg_goal_fname)) <span class="comment">#总共10个门框纹理，设置为0，固定第一个门框纹理</span></span><br><span class="line">            <span class="comment"># Copy new gate shape</span></span><br><span class="line">            <span class="comment"># gate_number = np.random.choice(num_gates)</span></span><br><span class="line">            gate_number = <span class="number">0</span> <span class="comment">#总共6个门框形状，固定第一个门框形状</span></span><br><span class="line">            ......</span><br></pre></td></tr></table></figure>
<p>（3）运行py程序，收集数据</p>
<blockquote>
<p>在相应目录下，执行如下命令</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python collect_data.py</span><br></pre></td></tr></table></figure>
<p><img src="/2020/06/10/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89/01.png" alt="image-20200610100924343"></p>
<font color="red">注意：如果收集数据失败时，要重新收集数据，如Run_0001文件夹中图片只有300张，这是明显的失败数据，终端也会有相应提示的输出的，这个点要注意，后面的实验也是一样的，要注意数据收集失败的情况。</font>

<p>（4）修改模型保存位置，设定迭代次数</p>
<blockquote>
<p>根据自己的需要，设定相应的值</p>
</blockquote>
<p><code>train_model.sh</code>,第一次只有4组图片数据，根据机器性能，设置个不用太久就能出结果的次数，默认为100</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">......</span><br><span class="line">python2.7 train.py --checkpoint_dir=模型保存路径 --f=0.5 --train_dir=<span class="variable">$train_data</span> --val_dir=<span class="variable">$val_data</span> --summary_freq=100 --batch_size=200 --max_epochs=最大迭代次数 --num_threads=6</span><br></pre></td></tr></table></figure>
<p>（5）训练神经网络模型</p>
<blockquote>
<p>在相应目录下，执行如下命令</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">./train_model.sh</span><br></pre></td></tr></table></figure>
<p>（6）设置测试时的飞行背景图</p>
<blockquote>
<p>使用训练背景作为测试背景进行测试，因为目前只是属于算法验证，所以不采用未知背景进行测试</p>
</blockquote>
<p>从训练背景图中，随机选择一张图拷贝到test_bkgs文件夹中，并且最好重新命名，命名后的图片在该文件夹中最好属于第一张图片，若test_bkgs文件中有多张图片，则每张图片都会作为测试背景进行测试的。</p>
<p>test_bkgs的完整目录为：<code>sim2real_drone_racing/drone_racing/drone_racing/resources/race_track/iros_materials/materials/textures/test_bkgs</code></p>
<p>（7）设置最后一个checkpoint，作为测试时的网络模型（详情可见<a href="https://ldgcug.xyz/2020/06/07/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C/">上一篇</a>博客的2.7.2节）</p>
<p>（8）飞行测试</p>
<p>​        首先，启动net_controller的launch文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">roslaunch deep_drone_racing_learning  net_controller_launch.launch</span><br></pre></td></tr></table></figure>
<p>​        然后，启动test_launch的launch文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">roslaunch test_racing test_racing.launch</span><br></pre></td></tr></table></figure>
<p>（9）结果显示</p>
<blockquote>
<p>在RVIZ界面中，可以看到AI飞手能按照全局轨迹飞行，并且能完美穿越前6个框</p>
</blockquote>
<p><img src="/2020/06/10/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89/02.png" alt="image-20200610102818554"></p>
<h1 id="二、实验二"><a href="#二、实验二" class="headerlink" title="二、实验二"></a>二、实验二</h1><blockquote>
<p><strong>室内背景，门框形状和门框纹理不固定，收集训练数据</strong></p>
</blockquote>
<p>​        原代码中设置了6种门框形状和10种门框纹理，也可以自己重新定义门框形状和纹理</p>
<p><img src="/2020/06/10/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89/03.png" alt="image-20200610103209695"></p>
<p>​        <strong>门框形状</strong>：在gate_shapes文件夹下，每个门框形状主要由dae文件和stl文件组成</p>
<p>​            gate_shapes完整目录为：<code>sim2real_drone_racing/drone_racing/drone_racing/resources/race_track/real_world/gate/meshes/gate_shapes</code></p>
<p>​        <strong>门框纹理：</strong>在gate_bkgs文件夹下，其完整目录为：<code>sim2real_drone_racing/drone_racing/drone_racing/resources/race_track/iros_materials/materials/textures/gate_bkgs</code></p>
<p>（1）将背景修改为真实场景下的训练背景</p>
<p>（2）设置无人机飞行时间，随机选择门框形状和门框纹理</p>
<blockquote>
<p>经测试发现，飞行100s左右，无人机能完成一圈的飞行任务，根据机器性能考虑时间</p>
</blockquote>
<p>​    <code>collect_data.py</code>，collect_data_in_fixed_env函数中设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">time.sleep(<span class="number">100</span>)<span class="comment">#100s时间刚好飞完一圈</span></span><br></pre></td></tr></table></figure>
<p>​    <code>collect_data.py</code>，mian函数，随机门框纹理和形状，并设置每张背景图保存的组数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">#在相应文件夹下，添加了dimian.jpg，然后以该图片作为地面纹理</span></span><br><span class="line">    train_goal_fname = <span class="string">&#x27;../race_track/iros_materials/materials/textures/dimian.jpg&#x27;</span></span><br><span class="line">    num_loops = <span class="number">15</span> <span class="comment">#修改为15，每张背景，收集15组数据，总共收集60组数据</span></span><br><span class="line">	......</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_loops): <span class="comment">#控制循环次数</span></span><br><span class="line">        <span class="keyword">for</span> i, bkg_img_fname <span class="keyword">in</span> <span class="built_in">enumerate</span>(all_images):</span><br><span class="line">            <span class="comment"># Copy new background</span></span><br><span class="line">            os.system(<span class="string">&quot;cp &#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(bkg_img_fname, texture_goal_fname))</span><br><span class="line">            <span class="comment"># Copy new asphalt</span></span><br><span class="line">            <span class="comment"># os.system(&quot;cp &#123;&#125; &#123;&#125;&quot;.format(all_images[-(i+1)], asphalt_goal_fname))</span></span><br><span class="line">            os.system(<span class="string">&quot;cp &#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_goal_fname, asphalt_goal_fname))<span class="comment">#固定地面纹理，之前是随机替换的</span></span><br><span class="line">            <span class="comment"># Copy new gate background</span></span><br><span class="line">            os.system(<span class="string">&quot;cp &#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(all_gates_materials[i%<span class="number">9</span>], bkg_goal_fname)) <span class="comment"># 门框纹理，根据i确定</span></span><br><span class="line">            <span class="comment"># Copy new gate shape</span></span><br><span class="line">            gate_number = np.random.choice(num_gates)<span class="comment">#随机选择门框形状</span></span><br><span class="line">            ......</span><br></pre></td></tr></table></figure>
<p>​        在实际收集过程中，15*4=60组数据中，会有相当一部分数据是失败的，因此最好将num_loops的数值设大一点，这样即使某些数据失败，由于数据量较多，可以将后面的正确数据替换掉失败数据。总之，保证60组数据都是成功且正确的数据即可，并且保证每张背景图都有15组数据，这个要注意。</p>
<p>（3）运行py程序，收集数据</p>
<blockquote>
<p>总共收集了60组数据，每张背景，15组数据，其门框形状随机选择，纹理（只用到了前4个纹理），由i确定的</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python collect_data.py</span><br></pre></td></tr></table></figure>
<p><img src="/2020/06/10/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89/04.png" alt="image-20200612165431514"></p>
<p>（4）修改模型保存位置，设定迭代次数</p>
<p>（5）接着实验一的模型继续进行训练，参照<a href="https://ldgcug.xyz/2020/06/07/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C/#more">上一篇</a>博客的2.7.1节</p>
<p>（6）训练神经网络模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">./train_model.sh</span><br></pre></td></tr></table></figure>
<p>（7）设置测试时的飞行背景图</p>
<blockquote>
<p>可以进行4种测试：</p>
<ul>
<li>训练背景、训练门框</li>
<li>训练背景、测试门框</li>
<li>测试背景、训练门框</li>
<li>测试背景、测试门框</li>
</ul>
</blockquote>
<ul>
<li><p>训练背景、训练门框</p>
<blockquote>
<p>将训练背景（4张）中的任意一张拷贝到test_bkgs文件夹中</p>
</blockquote>
</li>
<li><p>训练背景、测试门框</p>
<blockquote>
<p>将训练背景（4张）中的任意一张拷贝到test_bkgs文件夹中，同时，要修改相关文件，使用测试门框进行测试</p>
</blockquote>
<p>在启动test.launch文件后，实际是通过读取meshs文件中的dae文件和stl文件，来决定使用哪一个门框形状，其完整目录为</p>
<p><code>sim2real_drone_racing/drone_racing/drone_racing/resources/race_track/real_world/gate/meshes</code></p>
<p><img src="/2020/06/10/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89/05.png" alt="image-20200612171437455"></p>
<p>因此，想要使用六边形门框（测试门框）作为测试时的门框形状，需要将gate_shapes文件夹下的polygon_gate.dae和polygon_gate.stl文件拷贝到meshs文件夹下，并将其重新命名为gate.dae和gate.stl文件，原先的文件可以删除。</p>
</li>
</ul>
<p><img src="/2020/06/10/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89/06.png" alt="image-20200612171715268"></p>
<ul>
<li><p>测试背景、训练门框</p>
<blockquote>
<p>将新的未知背景拷贝到test_bkgs文件夹中，并且重新命名，命名后的排序应该排在首位</p>
<p>同样的，重新从gate_shapes文件中拷贝其他的dae和stl文件至meshs文件夹下，并重新命名</p>
</blockquote>
</li>
<li><p>测试背景、测试门框</p>
<blockquote>
<p>将新的未知背景拷贝到test_bkgs文件夹中，并且重新命名，命名后的排序应该排在首位</p>
<p>同样的，重新从gate_shapes文件中拷贝polygon_gate的dae和stl文件至meshs文件夹下，并重新命名</p>
</blockquote>
</li>
</ul>
<p>（8）设置训练中的最后一个checkpoint，作为测试时的网络模型（详情可见<a href="https://ldgcug.xyz/2020/06/07/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C/">上一篇</a>博客的2.7.2节）</p>
<p>（9）飞行测试</p>
<p>​        首先，启动net_controller的launch文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">roslaunch deep_drone_racing_learning  net_controller_launch.launch</span><br></pre></td></tr></table></figure>
<p>​        然后，启动test_launch的launch文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">roslaunch test_racing test_racing.launch</span><br></pre></td></tr></table></figure>
<p>（10）结果显示</p>
<blockquote>
<p>在RVIZ界面中，可以看到AI飞手能按照全局轨迹飞行，并且能完美穿越一圈</p>
<p>因为测试背景，测试门框的效果不好，也就没有在这里显示</p>
</blockquote>
<p><img src="/2020/06/10/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89/07.png" alt="image-20200612174331651"></p>
<p><img src="/2020/06/10/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89/08.png" alt="image-20200612174359037"></p>
<p><img src="/2020/06/10/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89/09.png" alt="image-20200612174417544"></p>
<p>​    其定量分析如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>训练背景、训练门框</th>
<th>测试背景、训练门框</th>
<th>训练背景、测试门框</th>
<th>测试背景、测试门框</th>
</tr>
</thead>
<tbody>
<tr>
<td>成功率</td>
<td>100%</td>
<td>100%</td>
<td>80%</td>
<td>0%</td>
</tr>
<tr>
<td>Passed Gates</td>
<td>30 + 30+30+30+30</td>
<td>30+30 +30 +30+ 30</td>
<td>8+30 + 30 + 30+ 30</td>
<td>7+11+11+3+11</td>
</tr>
</tbody>
</table>
</div>
<h1 id="三、实验三"><a href="#三、实验三" class="headerlink" title="三、实验三"></a>三、实验三</h1><blockquote>
<p>室内背景，门框形状和纹理不固定，收集多组静态数据组成动态数据</p>
</blockquote>
<p>​        实验二提升了神经网络的鲁棒性，增加了门框形状和纹理的种类</p>
<p>​        实验三主要是为了实现动态（移动门框）情境下的穿越任务</p>
<p>（1）将背景修改为真实场景下的训练背景</p>
<p>（2）设置无人机飞行时间（100s），随机选择门框形状和门框纹理</p>
<p>（3）运行py程序，收集数据</p>
<p>​        实验二可以看做是一次静态数据，因此再添加两次静态数据即可。</p>
<ul>
<li><p>修改门框的x坐标，整体在初始值上向左平移1m（2.7-1 = 1.7m）</p>
<blockquote>
<p>（1）将每个门框的x坐标整体向左平移1m，其他坐标值及朝向不变（参考<a href="https://ldgcug.xyz/2020/06/07/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C/#more">上一篇</a>博客中的2.6节）</p>
<p>（2）重新生成全局轨迹</p>
<p>（3）运行代码，收集数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python collect_data.py</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>修改门框的x坐标，整体在初始值上向右平移1m（2.7+1=3.7m）</p>
<blockquote>
<p>（1）将每个门框的x坐标整体向右平移1m，其他坐标值及朝向不变（参考<a href="https://ldgcug.xyz/2020/06/07/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C/#more">上一篇</a>博客中的2.6节）</p>
<p>（2）重新生成全局轨迹</p>
<p>（3）运行代码，收集数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python collect_data.py</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<p>（4）修改模型保存位置，设定迭代次数</p>
<p>（5）接着实验二的模型继续进行训练，参照<a href="https://ldgcug.xyz/2020/06/07/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C/#more">上一篇</a>博客的2.7.1节</p>
<p>（6）训练神经网络模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">./train_model.sh</span><br></pre></td></tr></table></figure>
<p>（7）设置测试时的飞行背景图</p>
<blockquote>
<p>以训练背景作为测试背景，不考虑新背景下的测试</p>
</blockquote>
<p>（8）设置训练中的最后一个checkpoint，作为测试时的网络模型（详情可见<a href="https://ldgcug.xyz/2020/06/07/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C/">上一篇</a>博客的2.7.2节）</p>
<p>（9）修改设置，让门框进行移动（详情可见<a href="https://ldgcug.xyz/2020/06/07/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C/#more">上一篇</a>博客的2.9节）</p>
<blockquote>
<p>门框移动速度设置0.3，振幅设为1.5</p>
</blockquote>
<p>（10）飞行测试</p>
<p>​        首先，启动net_controller的launch文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">roslaunch deep_drone_racing_learning  net_controller_launch.launch</span><br></pre></td></tr></table></figure>
<p>​        然后，启动test_launch的launch文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">roslaunch test_racing test_racing.launch</span><br></pre></td></tr></table></figure>
<p>（11）结果显示</p>
<p><img src="/2020/06/10/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89/10.png" alt="image-20200612180129998"></p>
<p>定量分析如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>门框移动速度</th>
<th>gates_dyn_amplitude</th>
<th>动态场景飞行任务完成情况</th>
<th>成功率</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.0m/s</td>
<td>0.1m/s</td>
<td>14/14</td>
<td>100%</td>
</tr>
<tr>
<td>1.0m/s</td>
<td>0.2m/s</td>
<td>14/14</td>
<td>100%</td>
</tr>
<tr>
<td>1.0m/s</td>
<td>0.3m/s</td>
<td>14/14</td>
<td>100%</td>
</tr>
<tr>
<td>1.0m/s</td>
<td>0.4m/s</td>
<td>1/14</td>
<td>0%</td>
</tr>
<tr>
<td>0.1m/s</td>
<td>0.4m/s</td>
<td>1/14</td>
<td>0%</td>
</tr>
<tr>
<td>1.5m/s</td>
<td>0.3m/s</td>
<td>14/14</td>
<td>100%</td>
</tr>
<tr>
<td>1.8m/s</td>
<td>0.3m/s</td>
<td>14/14</td>
<td>80%</td>
</tr>
</tbody>
</table>
</div>
<h1 id="四、实验四"><a href="#四、实验四" class="headerlink" title="四、实验四"></a>四、实验四</h1><blockquote>
<p>和实验二基本一样，不同的是将室内背景修改为室外背景</p>
</blockquote>
<p>结果展示：</p>
<p><img src="/2020/06/10/%E4%BB%A3%E7%A0%81/Deep%20Learning/uzh%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%AB%9E%E9%80%9F%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89/11.png" alt="image-20200612180518826"></p>
<h1 id="五、定量分析"><a href="#五、定量分析" class="headerlink" title="五、定量分析"></a>五、定量分析</h1><blockquote>
<p>前面都是在定性说明，添加了一些定量分析</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>无人机初始位置</th>
<th>Passed Gates</th>
<th>成功率</th>
</tr>
</thead>
<tbody>
<tr>
<td>x=0</td>
<td>30+30+30+30+30</td>
<td>100%</td>
</tr>
<tr>
<td>x=0.5</td>
<td>30+30+30+30+30</td>
<td>100%</td>
</tr>
<tr>
<td>x=1.0</td>
<td>30+30+30+30+30</td>
<td>100%</td>
</tr>
<tr>
<td>x=1.5</td>
<td>1+1+1+1+1</td>
<td>0%</td>
</tr>
<tr>
<td>x=-0.5</td>
<td>30+20+21+30+30</td>
<td>100%</td>
</tr>
<tr>
<td>x=-1.0</td>
<td>30+30+30+30+30</td>
<td>100%</td>
</tr>
<tr>
<td>x=-1.5</td>
<td>30+30+30+30+30</td>
<td>100%</td>
</tr>
<tr>
<td>x=-2.0</td>
<td>30+30+30+30+30</td>
<td>100%</td>
</tr>
<tr>
<td>x=-2.5</td>
<td>30+30+30+30+30</td>
<td>100%</td>
</tr>
<tr>
<td>x=-3.0</td>
<td>30+30+30+30+30</td>
<td>100%</td>
</tr>
<tr>
<td>x=-3.5</td>
<td>30+20+30+30+30</td>
<td>100%</td>
</tr>
<tr>
<td>x=-4.0</td>
<td>30+20+30+30+30</td>
<td>100%</td>
</tr>
<tr>
<td>x=-4.5</td>
<td>7+30+30+30+30</td>
<td>80%</td>
</tr>
<tr>
<td>x=-5.0</td>
<td>30+30+30+7+30</td>
<td>80%</td>
</tr>
<tr>
<td>x=-5.5</td>
<td>30+30+7+30+21</td>
<td>80%</td>
</tr>
<tr>
<td>x=-6.0</td>
<td>30+30+30+30+30</td>
<td>80%</td>
</tr>
<tr>
<td>x=-6.5</td>
<td>1+1+1+1+1</td>
<td>0%</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>无人机初始角度</th>
<th>Passed Gates</th>
<th>成功率</th>
</tr>
</thead>
<tbody>
<tr>
<td>w=1.0</td>
<td>30+30+30+30+30</td>
<td>100%</td>
</tr>
<tr>
<td>w=0.707</td>
<td>30+30+30+30+30</td>
<td>100%</td>
</tr>
<tr>
<td>w=1.3</td>
<td>1+1+1+2+1</td>
<td>0%</td>
</tr>
<tr>
<td>w=1.2</td>
<td>30+30+30+30+30</td>
<td>100%</td>
</tr>
<tr>
<td>w=0.5</td>
<td>30+30+30+30+30</td>
<td>100%</td>
</tr>
<tr>
<td>w=0.3</td>
<td>30+30+30+30+30</td>
<td>100%</td>
</tr>
<tr>
<td>w=0.1前两个框没有穿过，从第三个框还是，第三次中间飞行漏掉了一个框</td>
<td>30+30+30+30+0</td>
<td>0%</td>
</tr>
</tbody>
</table>
</div>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>所做的实验基本就是这些，做的都是一些比较简单的实验，但由于训练的模型过于多，找不到合适的了，因此也就不再这里添加checkpoint，这篇博客，也只是大概记录下实验流程，如果还要了解的清楚一点的，还是得结合PPT去看。</p>
<p>其相关的checkpoint模型，点击<a href="https://github.com/ldgcug/drone_racing">这里</a>，进行下载，其模型不一定准确，因为训练过的模型确实太多，建议将其中的背景图和网络模型进行测试，看看效果，还是重新训练模型较好。</p>
<p>最后，说明一点，如果需要在一台机器上同时进行网络训练和数据收集操作，建议最好重新创建文件夹，在不同的文件夹下进行操作。</p>
</blockquote>
]]></content>
      <categories>
        <category>代码</category>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>Drone Racing</tag>
      </tags>
  </entry>
  <entry>
    <title>DRL论文阅读（八）之DDPG算法</title>
    <url>/2019/08/04/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BDDPG%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>DDPG （Deep Deterministic Policy Gradient）算法是一种model-free（无环境模型），off-policy（产生行为的策略和进行评估的策略不一样）的强化学习算法，且使用了深度神经网络用于函数近似。相比较于DQN（model-free、off-policy），DQN只能解决离散、低维的动作空间，而DDPG可以解决<strong>连续动作空间</strong>的问题。</p>
</blockquote>
<p><strong>背景：</strong></p>
<ul>
<li><strong>RL要解决的问题</strong>：让agent学习在一个环境中如何选择行为动作（action），从而获得最大的奖励值总和（total reward）。这个奖励值一般与agent定义的任务目标关联</li>
<li><strong>agent的主要学习内容</strong>：第一是行为策略（action policy），第二是规划（planning）。其中行为策略的学习目标是最优策略，也就是使用这样的策略，可以让agent在特定的环境中的行为获得最大的奖励值，从而实现其目标任务。</li>
<li><strong>行为（action）划分：</strong><ul>
<li>连续的：如赛车游戏中的方向盘角度、油门、刹车控制信号，机器人的关节伺服电机控制信号</li>
<li>离散的：如围棋，贪吃蛇游戏。Alpha Go就是一个典型的离散行为agent</li>
</ul>
</li>
</ul>
<p>DDPG是针对连续行为的策略学习方法</p>
<h2 id="一、论文题目"><a href="#一、论文题目" class="headerlink" title="一、论文题目"></a>一、论文题目</h2><blockquote>
<p><strong>CONTINUOUS CONTROL WITH DEEP REINFORCEMENT LEARNING</strong></p>
</blockquote>
<h2 id="二、研究目标"><a href="#二、研究目标" class="headerlink" title="二、研究目标"></a>二、研究目标</h2><blockquote>
<p>研究一种新算法，解决Actor-Critic算法中难收敛和DQN算法中难以解决连续高维空间的问题</p>
</blockquote>
<h2 id="三、问题定义"><a href="#三、问题定义" class="headerlink" title="三、问题定义"></a>三、问题定义</h2><ul>
<li><p><strong>DQN：</strong>只能处理离散的、低维的动作空间</p>
<blockquote>
<p>DQN不能直接处理连续动作空间的原因是因为它依赖于在每一次最优迭代中寻找动作-值函数的最大值（变现为在Q神经网络中输出每个动作的值函数），针对连续动作空间的DQN没有办法输出每个动作的动作-值函数</p>
</blockquote>
<p>如：一个具有6个关节的机械臂，每个关节的角度输出是连续值，假设范围是0~360度，归一化为（-1,1）。若把每个关节角取值范围离散化，比如精确到0.01，则一个关节有200个取值，那么6个关节共有$200^6$个取值，若进一步提升这个精度，取值的数量将成倍增加，而且动作的数量将随着自由度的增加成指数型增长。因此在连续的高维的控制问题中，无法用传统的DQN方法解决。</p>
</li>
<li><p><strong>Actor-Critic：</strong>DPG中的Actor-Critic算法相对较难以收敛</p>
</li>
</ul>
<h2 id="四、DDPG算法介绍"><a href="#四、DDPG算法介绍" class="headerlink" title="四、DDPG算法介绍"></a>四、DDPG算法介绍</h2><blockquote>
<p>DDPG组成：D（Deep） + D（Deterministic） + PG（Policy Gradient）</p>
<ul>
<li>Deep：更深层次的网络结构</li>
<li>PG：策略梯度算法，能够在连续的动作空间根据所学习到的策略（动作分布）随机筛选动作</li>
<li>Deterministic：它的作用就是用来帮助PG不让它随机选择，只输出一个动作值</li>
</ul>
</blockquote>
<h3 id="4-1-随机性策略和确定性策略"><a href="#4-1-随机性策略和确定性策略" class="headerlink" title="4.1 随机性策略和确定性策略"></a>4.1 随机性策略和确定性策略</h3><ul>
<li><strong>随机性策略</strong>：策略输出的是动作的概率，使用一个正态分布对动作进行采样选择，即每个动作都有概率被选到<ul>
<li>输出：动作的概率，$\pi_\theta(a|s) = P[a|s;\theta]$</li>
<li>优点：将策略探索和策略改进集中在一个策略中</li>
<li>缺点：需要大量的训练数据</li>
</ul>
</li>
<li>确定性策略：策略的输出是动作<ul>
<li>输出：确定的动作，$\pi_\theta(s) = a$</li>
<li>优点：需要采样的数据少</li>
<li>缺点：无法探索环境</li>
</ul>
</li>
</ul>
<p>在真实场景下机器人的操控任务中，在线收集并利用大量训练数据会产生十分昂贵的代价，并且动作连续的特性使得在线抽取批量轨迹的方式无法达到令人满意的覆盖面，这些问题会导致<strong>局部最优解</strong>的出现。</p>
<p>然后使用<strong>确定性策略无法探索环境</strong>，如何解决？</p>
<p>利用off-policy学习方法：off-policy是指采样的策略和改进的策略不是同一个策略。类似于DQN，使用随机策略产生样本存放到经验回放机制中，训练时抽取样本，改进的是当前的确定性策略。这个确定性策略的学习框架采用的是AC方法。</p>
<h3 id="4-2-基本概念"><a href="#4-2-基本概念" class="headerlink" title="4.2 基本概念"></a>4.2 基本概念</h3><ul>
<li><p>$s_t$：在t时刻，agent观察到的环境状态，如观察到的环境图像，或agent在环境中的位置、速度、机器人关节角度等</p>
</li>
<li><p>$a<em>t$：在t时刻，agent选择的行为（action），通过环境执行后，环境状态由$s_t$转换为$s</em>{t+1}$</p>
</li>
<li><p>$r(s_t,a_t)$函数（转移函数）：环境在$s_t$执行行为$a_t$后，返回的单步奖励值</p>
<p>上面的关系可以用一个状态转换图来表示：</p>
<p><img src="/2019/08/04/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BDDPG%E7%AE%97%E6%B3%95/1.png" alt></p>
</li>
<li><p>$R_t$：是从当前状态直到将来某个状态，期间所有行为所获得奖励值的加权总和，即discounted future reward</p>
<script type="math/tex; mode=display">
R_t = \sum_{i=t}^T \gamma^{i-t} r(s_i,a_i)</script><p>其中，$\gamma$是discounted rate，表示折扣因子，$\gamma \epsilon[0,1]$，通常取0.99</p>
</li>
<li><p>动作-值函数（Q值）：</p>
<script type="math/tex; mode=display">
Q^\pi(s_t,a_t) = E_{s\sim E,a\sim \pi}[R_t|s_t,a_t]</script><p>用贝尔曼公式表达为：</p>
<script type="math/tex; mode=display">
Q^\pi(s_t,a_t) = E_{r_t,s_{t+1}\sim E}[r(s_t,a_t) + \gamma E_{a_{t+1} \sim \pi}[Q^\pi(s_{t+1},a_{t+1})]]</script></li>
</ul>
<h3 id="4-3-策略梯度"><a href="#4-3-策略梯度" class="headerlink" title="4.3 策略梯度"></a>4.3 策略梯度</h3><h4 id="4-3-1-Policy-Gradient（随机策略梯度）"><a href="#4-3-1-Policy-Gradient（随机策略梯度）" class="headerlink" title="4.3.1 Policy Gradient（随机策略梯度）"></a>4.3.1 Policy Gradient（随机策略梯度）</h4><blockquote>
<p>通过一个概率分布函数$\pi<em>\theta(s_t|\theta^\pi)$，来表示每一步的最优策略，在每一步根据该概率分布进行action采样，获取当前的最佳action取值，即：$a_t \sim \pi</em>\theta(s_t|\theta^\pi)$</p>
</blockquote>
<p>生成action的过程，本质上是一个随机过程，最后学习到的策略，也是一个随机策略（Stochastic policy）</p>
<p><strong>随机策略梯度的梯度计算公式</strong>为：</p>
<script type="math/tex; mode=display">
\begin{split} \nabla_\theta J(\pi_\theta) &= \int_S \rho^\pi(s)\int_A\nabla_\theta\pi_\theta(a|s)Q^\pi(s,a)dads \\ &=E_{s\sim\rho^\pi,a\sim\pi_\theta}[\nabla_\theta log\pi_\theta(a|s)Q^\pi(s,a)] \end{split}</script><p>其中，$\rho^\pi$表示状态的采样空间，$\nabla<em>\theta log\pi</em>\theta(a|s)$是socre function，可以看出随机策略梯度需要在整个动作空间$\pi_\theta$进行采样</p>
<h4 id="4-3-2-DPG（确定性策略梯度）"><a href="#4-3-2-DPG（确定性策略梯度）" class="headerlink" title="4.3.2 DPG（确定性策略梯度）"></a>4.3.2 DPG（确定性策略梯度）</h4><blockquote>
<p>DPG每一步的行为通过函数$\mu$直接获得确定的值：$a_t = \mu(s_t|\theta^\mu)$</p>
</blockquote>
<p>这个函数$\mu$即最优行为策略，不在是一个需要采样的随机策略。</p>
<p>为何需要确定性策略？简单来说，PG方法有以下缺陷：</p>
<ol>
<li>即使通过PG学习到了随机策略之后，在每一步行为时，我们还需要对得到的最优策略概率分布进行采样，这样才能获得action的具体值；而action通常是高维的向量，比如25维、50维，在高维的action空间中频繁采样，无疑是很耗费计算能力</li>
<li>在PG的学习过程中，每一步计算policy gradient都需要在整个action 空间中进行积分：</li>
</ol>
<script type="math/tex; mode=display">
 \nabla_\theta J(\pi_\theta) = \int_S \rho^\pi(s)\int_A\nabla_\theta\pi_\theta(a|s)Q^\pi(s,a)dads</script><p>​        这个积分部分一般通过蒙特卡洛采样来进行估算，需要在高维的action空间进行采样，耗费计算能力</p>
<p>但如果采取简单的Greedy策略，即每一步求解$argmax_aQ(s,a)$也不可行，因为在连续的、高维度的action空间中，如果每一步都求全局最优解，太耗费计算性能。</p>
<p>在这之前，业界普遍认为，环境模型无关（model free）的确定性策略是不存在的，在DPG的论文中，被证明存在。然后将DPG算法融合进AC框架，结合Q-learning或Gradient Q-learning这些传统的Q函数学习方法，经过训练得到一个确定性的最优行为策略函数。</p>
<p><strong>确定性策略梯度的梯度计算公式（on-policy）</strong>为：</p>
<script type="math/tex; mode=display">
\begin{split} \nabla_\theta J(\mu_\theta) &= \int_S \rho^\mu(s)\nabla_\theta \mu_\theta(s) \nabla_aQ^\mu(s,a)|_{a= \mu_\theta(s)}ds \\ &= E_{s\sim\rho^\mu}[\nabla_\theta \mu_\theta(s)  \nabla_aQ^\mu(s,a)|_{a= \mu_\theta(s)}]  \\ &= E_{s\sim\rho^\mu}[\nabla_\theta Q^\mu(s, \mu_\theta(s))] 
\end{split}</script><p>跟随机策略梯度的式子相比，少了对动作的积分，多了回报Q函数对动作的导数</p>
<h3 id="4-4-DDPG"><a href="#4-4-DDPG" class="headerlink" title="4.4 DDPG"></a>4.4 DDPG</h3><blockquote>
<p>DDPG是将深度学习神经网络融合进DPG的策略学习方法。相对于DPG的核心改进是：采用卷积神经网络作为策略函数$\mu$和$Q$函数的模拟，即策略网络和$Q$网络；然后使用深度学习的方法来训练上述神经网络。</p>
<p>Q函数的实现和训练方法，采用了DQN方法</p>
</blockquote>
<h4 id="4-4-1-DDPG相关概念"><a href="#4-4-1-DDPG相关概念" class="headerlink" title="4.4.1 DDPG相关概念"></a>4.4.1 DDPG相关概念</h4><ul>
<li><p><strong>策略改善：</strong>用来更新策略，对应AC框架中的actor</p>
<ul>
<li><p>确定性行为策略$\mu$：定义一个函数，每一步的行为可以通过$a_t = \mu(s_t)$计算获得</p>
</li>
<li><p>策略网络：用一个卷积神经网络对$\mu$函数进行模拟，这个网络我们称为策略网络，其参数为$\theta^\mu$</p>
</li>
<li><p>behavior policy（行为策略）$\beta $：在RL训练过程中，我们要兼顾2个e：exploration和exploit；exploration的目的是探索潜在的更优策略，所以训练过程中，我们为action的决策机制引入随机噪声：</p>
<p>将action的决策从确定性过程变为一个随机过程，再从这个随机过程中采样得到action。下达给环境执行</p>
<p>过程如下如所示：</p>
<p><img src="/2019/08/04/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BDDPG%E7%AE%97%E6%B3%95/2.png" alt></p>
<p>以上这个策略叫做behavior策略，用$\beta$来表示，这时RL的训练方式叫做off-policy。</p>
<p>DDPG中，使用Uhlenbeck-Ornstein随机过程（简称UP过程），作为引入的随机噪声：UO过程在时序上具备很好的相关性，可以使agent很好的探索具备动量属性的环境。</p>
<p><strong>注意：</strong></p>
<ul>
<li>这个$\beta$不是我们想要得到的最优策略，仅仅是在训练过程中，生成下达给环境的action，从而获得我们想要的数据集，比如状态转换（transitions）、或者agent的行走路径等，然后利用这个数据集去训练策略$\mu$，以获得最优策略</li>
<li>在test和evaluation时，使用$\mu$而不会再使用$\beta$</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>策略评估：</strong>用来逼近动作-值函数，并提供梯度信息，对应AC框架中的critic</p>
<ul>
<li><p>动作-值函数（Q函数）：即action-value函数，定义在状态$s_t$下，采取动作$a_t$后，且如果继续执行策略$\mu$的情况下，所获得的$R_t$期望值，用贝尔曼等式来定义：</p>
<script type="math/tex; mode=display">
Q^\mu(s_t,a_t) = E[r(s_t,a_t) + \gamma Q^\mu(s_{t+1},\mu(s_{t+1}))]</script><p>该公式的期望只与环境有关，所以用off-policy来学习$Q^\mu$，即用一个不同的随机策略$\beta$来生成状态行为轨迹。</p>
</li>
<li><p>Q网络：DDPG中，我们用一个卷积神经网络对Q函数进行模拟，这个网络我们称为Q网络，其参数为$\theta^Q$，采用了DQN相同的方法</p>
</li>
<li><p>如何评估一个策略$\mu$的表现：用一个目标函数$J$来评估，我们叫做performance objective，针对off-policy学习的情况，目标函数定义如下：</p>
<script type="math/tex; mode=display">
\begin{split} J_\beta(\mu) &= \int_S \rho^\beta(s) Q^\mu(s,\mu(s))ds \\
&= E_{s \sim \rho^\beta}[Q^\mu(s,\mu(s))] \end{split}</script><p>其中：</p>
<ul>
<li>s是环境的状态，这些状态（或者说agent在环境中走过的状态路径）是基于agent的behavior策略产生的，它们的分布函数为$\rho^\beta$</li>
<li>$Q^\mu(s,\mu(s))$是在每个状态下，如果都按照$\mu$策略选择action时，能够产生的Q值，即$J_\beta(\mu)$是在$s$根据$\rho ^\beta$分布时，$Q^\mu(s,\mu(s))$的期望值</li>
</ul>
</li>
<li><p>训练的目标：最大化$J_\beta(\mu)$，同时最小化Q网络的Loss（后面给出）</p>
</li>
<li><p>最优行为策略$\mu$的定义：即最大化$J_\beta(\mu)$的策略：</p>
<script type="math/tex; mode=display">
\mu = argmax_\mu J(\mu)</script><p>训练$\mu$网络的过程，就是寻找$\mu$网络参数$\theta^\mu$的最优解的过程，我们使用SGA（stochastic gradient asent）的方法，即随机梯度上升方法。</p>
</li>
<li><p>最优Q网络定义：具备最小化的Q网络Loss；</p>
<p>训练Q网络的过程，就是寻找Q网络参数$\theta^Q$的最优解的过程，我们使用SGD的方法</p>
<p><strong>Q网络的Loss定义</strong>：参考Q-learning、DQN 的方法，使用类似于监督学习的方法，定义loss为MSE：mean squared error：</p>
<script type="math/tex; mode=display">
L = \frac{1}{N} \sum_i(y_i - Q(s_i,a_i|\theta^Q)^2)</script><p>其中，$y<em>i = r_i + \gamma Q’(s</em>{i+1},\mu’(s_{i+1}|\theta^{\mu’})|\theta^{Q’})$，$y_i$可以看做为标签</p>
<p>注意：</p>
<ul>
<li>$y_i$的计算，使用的是target的策略网络$\mu’$和target Q网络$Q’$，这样做是为了Q网络参数的学习过程更加稳定，易于收敛</li>
<li>这个标签本身依赖于我们正在学习的target策略，这是区别于监督学习的地方</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="4-4-2-DDPG实现框架和算法"><a href="#4-4-2-DDPG实现框架和算法" class="headerlink" title="4.4.2 DDPG实现框架和算法"></a>4.4.2 DDPG实现框架和算法</h4><p><strong>online和target网络</strong></p>
<p>以往的实践证明，如果只使用单个“Q神经网络”的算法，学习过程很不稳定，因为Q网络的参数在频繁gradient update的同时，又用于计算Q网络和策略网络的gradient。基于此，DDPG分别为策略网络、Q网络各创建两个神经网络拷贝，一个叫做online，一个叫做target：<br><img src="/2019/08/04/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BDDPG%E7%AE%97%E6%B3%95/3.png" alt></p>
<p>在训练完一个mini-batch的数据之后，通过SGA/SGD算法更新online网络的参数，然后再通过soft update算法更新target网络的参数，soft update是一种running average的算法：</p>
<p><img src="/2019/08/04/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BDDPG%E7%AE%97%E6%B3%95/4.png" alt></p>
<ul>
<li>优点：target网络参数变化小，用于在训练过程中计算online网络的gradient，比较稳定，训练易于收敛</li>
<li>缺点：参数变化小，学习过程慢</li>
</ul>
<p><strong>DDPG框架图：</strong></p>
<p><img src="/2019/08/04/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BDDPG%E7%AE%97%E6%B3%95/5.jpg" alt></p>
<p><strong>DDPG算法流程</strong></p>
<blockquote>
<p>初始化AC的online神经网络参数:$\theta^Q$，$\theta^\mu$</p>
<p>将online网络的参数拷贝给对应的target网络参数：$\theta^{Q’} \leftarrow \theta^Q $，$\theta^{\mu’} \leftarrow \theta^\mu$</p>
<p>初始化Replay menory buffer $R$：（后面简称buffer）</p>
<p>for each episode：</p>
<p>​    初始化UO随机过程；</p>
<p>​    for t = 1 , T：</p>
<p>​    下面额度步骤与上面图片（DDPG框架）中的步骤编号对应：</p>
<p>​        1、actor根据behavior策略选择一个$a_t$，下达给gym执行该$a_t$</p>
<script type="math/tex; mode=display">
a_t = \mu(s_t | \theta^\mu) + N_t</script><p>​            behavior策略是一个根据当前online策略$\mu$和随机UO噪声生成的随机过程，从这个随机过程中采样获            得$a_t$的值</p>
<p>​        2、gym执行$a<em>t$，返回reward $r_t$和新的状态$s</em>{t+1}$</p>
<p>​        3、actor将这个状态转换过程（transition）:$(s<em>t,a_t,r_t,s</em>{t+1})$存入buffer $R $中，作为训练online网络的                数据集</p>
<p>​        4、从buffer $R$中，随机</p>
<p>采样$N$个transition数据，作为online策略网络、online Q网络的一个mini-            batch训练数据，我们用$(s<em>i,a_i,r_i,s</em>{i+1})$表示mini-batch中的单个transition数据</p>
<p>​        5、计算online Q网络的梯度</p>
<p>​            Q网络的loss：</p>
<script type="math/tex; mode=display">
L = \frac{1}{N} \sum_i(y_i - Q(s_i,a_i|\theta^Q)^2)</script><p>​            其中，$y<em>i = r_i + \gamma Q’(s</em>{i+1},\mu’(s_{i+1}|\theta^{\mu’})|\theta^{Q’})$</p>
<p>​            基于反向传播，就可以求得$L $针对$\theta^Q$的梯度：$\nabla_{\theta^Q} L$</p>
<p>​        6、更新online Q网络：采用Adam optiminzer更新$\theta^Q$</p>
<p>​        7、计算策略网络的梯度</p>
<p>​            策略网络的梯度：</p>
<script type="math/tex; mode=display">
\nabla_{\theta^\mu} J_\beta(\mu) \approx E_{s \sim \rho^\beta} [\nabla _a Q(s,a|\theta^Q)|_{a=\mu(s)}  \cdot \nabla_{\theta^\mu}\mu(s|\theta^\mu)]</script><p>​            即policy gradient是在$s$根据$\rho^\beta$分布时，$\nabla<em>a Q \cdot \nabla</em>{\theta^\mu} \mu$的期望值。我们用蒙特卡洛方法来估算这个期望            值：</p>
<p>​                在buffer中存储的（transition）：$(s<em>i,a_i,r_i,s</em>{i+1})$是基于agent的behavior策略$\beta$产生的，它们的            分布函数为$\rho^\beta$，所以当我们从buffer随机采样获得mini-batch数据时，根据蒙特卡洛方法，使用mini-            batch数据代入上述policy gadient公式，可以作为上述期望值的一个无偏估计，所以policy gradient            可以改写为：</p>
<script type="math/tex; mode=display">
\nabla_{\theta^\mu} J_\beta(\mu) \approx \frac{1}{N} \sum_i(\nabla_aQ(s,a|\theta^Q)|_{s=s_i,a=\mu(s_i)} \cdot \nabla_{\theta^\mu}\mu(s|\theta^\mu)|_{s=s_i})</script><p>​        8、更新online 策略网络：采用Adam optimizer更新$\theta^\mu$</p>
<p>​        9、soft update target网络$\mu’$和$Q’$：</p>
<p>​            使用running average的方法，将online的参数，soft update给target网络的参数：</p>
<script type="math/tex; mode=display">
\theta^{Q'} \leftarrow \tau \theta^Q + (1-\tau)\theta^{Q'}</script><p>​            </p>
<script type="math/tex; mode=display">
\theta^{\mu'} \leftarrow \tau\theta^\mu + (1-\tau)\theta^{\mu'}</script><p>​            其中，$\tau$一般取值0.001</p>
<p>​    end for time step</p>
<p>end for episode </p>
</blockquote>
<p><strong>原文DDPG算法流程</strong></p>
<p><img src="/2019/08/04/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BDDPG%E7%AE%97%E6%B3%95/6.png" alt="DDPG"></p>
<p><strong>DDPG的输入输出图解</strong>：</p>
<p><img src="/2019/08/04/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8BDDPG%E7%AE%97%E6%B3%95/7.jpg" alt></p>
<h2 id="五、DDPG对于DPG的关键改进"><a href="#五、DDPG对于DPG的关键改进" class="headerlink" title="五、DDPG对于DPG的关键改进"></a>五、DDPG对于DPG的关键改进</h2><ul>
<li><p>使用卷积神经网络来模拟策略函数和Q函数，并用深度学习的方法来训练，证明了在RL方法中，非线性模拟函数的准确性和高性能、可收敛；</p>
<p>而DPG中，可以看成使用线性回归的机器学习方法：使用带参数的线性函数来模拟策略函数函数和Q函数，然后使用线性回归的方法进行训练</p>
</li>
<li><p>experience replay memory的使用：actor同环境交互时，产生的transition数据序列是在时间上高度关联的，如果这些数据直接用于训练，会导致神经网络的过拟合，不易收敛</p>
</li>
<li><p>target网络和online网络的使用，使学习过程更加稳定，收敛更有保障</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>DDPG结合DQN和DPG的算法，解决了DQN只能运用在离散行为空间上的局限，同时借鉴DQN的神经网络、经验回放和设置target网络使DPG中的Actor-Critic算法更容易收敛</p>
<p>并且DDPG在对target网络的更新时和DQN有所区别：DQN中，每隔一定的迭代次数后，将online网络的参数复制给target网络；而DDPG中target网络的参数每次迭代都以微小量逼近online的参数</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote>
<p>主要参考了下面链接中的第一二条链接</p>
</blockquote>
<ul>
<li><p><a href="https://blog.csdn.net/kenneth_yu/article/details/78478356">Deep Reinforcement Learning-1.DDPG原理和算法</a></p>
</li>
<li><p><a href="https://blog.csdn.net/u013236946/article/details/73243310">深度强化学习—连续动作控制DDPG、NAF</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/26754280">DDPG论文笔记</a></p>
</li>
<li><a href="https://blog.csdn.net/qq_30615903/article/details/80776715">强化学习-DDPG算法详解</a></li>
</ul>
]]></content>
      <categories>
        <category>论文</category>
        <category>深度强化学习</category>
      </categories>
      <tags>
        <tag>DRL</tag>
        <tag>DDPG</tag>
      </tags>
  </entry>
  <entry>
    <title>DRL（六）之Actor-Critic算法介绍</title>
    <url>/2019/07/30/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8BActor-Critic%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在上一节中，讲到了基于Policy Based的强化学习方法，最后也涉及到了模特卡洛策略梯度reinforce算法，但是在计算之前，需要提前知道完整的状态序列，同时还需要单独对策略函数进行迭代更新，不太容易收敛，并且方差较大。</p>
<p>因此本篇笔记将讨论策略（Policy Based）和价值（Value Based）相结合的方法：Actor-Critic算法</p>
</blockquote>
<h2 id="一、Policy-Gradient回顾"><a href="#一、Policy-Gradient回顾" class="headerlink" title="一、Policy Gradient回顾"></a>一、Policy Gradient回顾</h2><blockquote>
<p>基于策略梯度的强化学习方法的基本思路是直接更新策略，即直接将参数策略化，并对策略进行近似表示。用公式表示为$\pi_\theta (s,a)= P(a|s,\theta)\approx \pi(a|s)$。利用参数化的线性、非线性函数表示策略，寻找最优策略，而这个最优策略的搜索即是要将某个目标函数最大化</p>
</blockquote>
<h3 id="1-1-策略目标函数"><a href="#1-1-策略目标函数" class="headerlink" title="1.1 策略目标函数"></a>1.1 策略目标函数</h3><blockquote>
<p>策略梯度的目标函数主要有以下三种方式</p>
</blockquote>
<p>（1）Start Value：在能够产生完整episode的环境下，即agent可以达到某个终止状态时，可以用start value来衡量策略的优劣，就是初始状态s1的累计奖励：</p>
<script type="math/tex; mode=display">
J_1(\theta) = V_{\pi \theta}(s1) = E_{\pi \theta}[v1]</script><p>（2）Average Value：有的问题没有明确的初始状态，我们可以使用个状态的价值函数平均值：</p>
<script type="math/tex; mode=display">
J_{av} V(\theta) = \sum_s d^{\pi \theta}(s) V^{\pi\theta}(s)</script><p>（3）Average Reward per Time-Step：使用每一时间步长下的平均奖励：</p>
<script type="math/tex; mode=display">
J_{av}R(\theta) = \sum_s d^{\pi \theta}(s) \sum_a\pi_\theta(s,a) R^a_s</script><p>其中，$d^{\pi \theta}(s)$是关于策略$\pi\theta$生成的马尔科夫链关于状态的静态分布</p>
<p><strong>似然比（Likelihood Ratios）</strong>：假设策略$\pi_\theta$是可导的且不等于0 ，则似然比为：</p>
<script type="math/tex; mode=display">
 \nabla_\theta \pi_\theta(s,a) = \pi_\theta(s,a) * \frac{\nabla_\theta \pi_\theta(s,a)}  {\pi_\theta(s,a)} = \pi_\theta(s,a) *  \nabla_\theta log \pi_\theta(s,a)</script><p>为了改进策略，我们希望能够按照$J(\theta)$ 的正梯度方向对$\pi_\theta$函数进行更新，因此无论是上面的哪一种目标函数，其<strong>策略梯度</strong>都可以被表示为</p>
<script type="math/tex; mode=display">
\nabla_\theta J(\theta) = E_{\pi\theta}[\nabla_\theta log\pi_\theta (s,a)Q_\pi(s,a)]</script><p>其中，$\nabla<em>\theta log\pi</em>\theta(s,a)$叫做Score Function</p>
<h3 id="1-2-策略函数"><a href="#1-2-策略函数" class="headerlink" title="1.2 策略函数"></a>1.2 策略函数</h3><blockquote>
<p>对于不同的情况，策略函数的选取也有所不同，对于<strong>离散动作</strong>，采用<strong>Softmax Policy</strong>，对于<strong>连续动作</strong>，采用<strong>Gaussian Policy（高斯策略）</strong>。</p>
</blockquote>
<p>（1）<strong>Softmax Policy：</strong>用于离散动作：</p>
<p>​    </p>
<script type="math/tex; mode=display">
\pi_\theta(s,a) = \frac{e^{\phi(s,a)^T \theta}}{ \sum_{b} e^{\phi(s,b)^T \theta}}</script><script type="math/tex; mode=display">
\nabla_\theta log\pi_\theta(s,a) = \phi(s,a) - E_{\pi\theta}[\phi(s,\cdot)]</script><p>（2）<strong>Gaussian Policy（高斯策略）</strong>：用于连续动作：</p>
<p>​    均值为$\mu(s) = \phi(s) ^T \theta$，方差可以固定为$\sigma^2$，也可以参数化</p>
<script type="math/tex; mode=display">
a \sim N(\mu(s),\sigma^2)</script><script type="math/tex; mode=display">
\nabla_\theta log \pi_\theta(s,a) = \frac{(a-\mu(s)) \phi(s)}{\sigma^2}</script><h3 id="1-3-策略梯度定理"><a href="#1-3-策略梯度定理" class="headerlink" title="1.3 策略梯度定理"></a>1.3 策略梯度定理</h3><p>（1）<strong>单步（one-step）MDP</strong>：初始状态$s\sim d(s)$，只经历一步得到一个即时奖励 $r = R_{s,a}$就终止，由于是单步MDP，所以三种目标函数都是一样的，使用似然比 来计算策略梯度：</p>
<script type="math/tex; mode=display">
J(\theta) = E_{\pi \theta}[r] = \sum_{s \epsilon S}d(s) \sum_{a \epsilon A}\pi_\theta(s,a) R_{s,a}</script><script type="math/tex; mode=display">
\nabla_\theta J(\theta) = \sum_{s\epsilon S}d(s) \sum_{a \epsilon A } \pi_\theta(s,a)  \nabla_\theta log \pi_\theta(s,a)  R_{s,a} = E_{\pi \theta} [\nabla_\theta log \pi_\theta(s,a) r]</script><p>（2）<strong>多步（multistep）MDP：</strong>如果是多步MDP，我们要用长时价值$Q^\pi(s,a)$来代替即时奖励r，并且有如下定理：对于$ J = J<em>1 ,J</em>{av}R,\frac{1}{1-\gamma} J_{av}V$ ，策略梯度都有</p>
<script type="math/tex; mode=display">
\nabla_\theta J(\theta) = E_{\pi\theta}[\nabla_\theta log\pi_\theta (s,a)Q_\pi(s,a)]</script><p>这样有了期望公式，我们就可以用蒙特卡洛采样的方法求出近似期望，用$v_t$ 作为$Q^\pi(s,a)$的无偏采样样本，则传统REINFORCE算法为：</p>
<p><img src="/2019/07/30/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8BActor-Critic%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/1.png" alt></p>
<p><strong>算法描述：</strong>先随机初始化策略函数的参数$\theta$，对当前策略下的一个Episode：</p>
<script type="math/tex; mode=display">
{(s_1,a_1,r_2,...,s_{T-1},a_{T-1},r_T) \sim \pi_\theta}</script><p>从 t = 1 到 t =T-1的每一时刻，计算个体获得的奖励v(t)，然后更新参数$\theta$。如此重复每一个Episode，直到结束。</p>
<p>其中的策略梯度可以表示为：</p>
<script type="math/tex; mode=display">
\Delta \theta_t = \alpha \nabla_\theta log \pi_\theta (s_t,a_t) v_t</script><p>参数使用梯度上升法更新：</p>
<script type="math/tex; mode=display">
\theta_{t+1} = \theta +\alpha \nabla_\theta log \pi_\theta (s_t,a_t) v_t</script><h2 id="二、Actor-Critic"><a href="#二、Actor-Critic" class="headerlink" title="二、Actor-Critic"></a>二、Actor-Critic</h2><blockquote>
<p>蒙特卡洛策略梯度方法有着很高的方差，所以用一个Critic来估计行为价值函数</p>
<p>$Q<em>w(s,a) \approx Q^{\pi</em>\theta}(s,a)$。所以Actor_Critic算法包含两种参数：</p>
<ul>
<li>Critic：更新行为价值函数的参数w</li>
<li>Actor：更新策略的参数$\theta$，更新过程会受到Critic的价值函数的引导</li>
</ul>
<p>加入了Actor-critic后的策略梯度公式则变为：</p>
<script type="math/tex; mode=display">
\nabla_\theta J(\theta) \approx E_{\pi\theta}[\nabla_\theta log\pi_\theta (s,a)Q_w(s,a)]</script><script type="math/tex; mode=display">
\Delta \theta = \alpha \nabla_\theta log \pi_\theta (s_t,a_t) Q_w(s,a)</script></blockquote>
<h3 id="2-1-简单描述Actor-Critic"><a href="#2-1-简单描述Actor-Critic" class="headerlink" title="2.1 简单描述Actor-Critic"></a>2.1 简单描述Actor-Critic</h3><ul>
<li>actor：行动者，对应policy</li>
<li>critic：评论者，对应value function函数</li>
</ul>
<h3 id="2-2-为何引入Actor-Critic"><a href="#2-2-为何引入Actor-Critic" class="headerlink" title="2.2 为何引入Actor-Critic"></a>2.2 为何引入Actor-Critic</h3><ul>
<li><p>actor-only：将policy参数化，可以在算法过程中直接优化，因此action可以是连续的。优化方法通常为policy gradient方法，<font color="red">该方法的缺点是在估计梯度的是将会产生较大的方差</font>，因为其更新的方式是回合制更新，因此导致学习速度较慢。</p>
</li>
<li><p>critic-only：使用temporal difference（时间差分法）学习方法，估计过程中<font color="red">方差小</font>。通常用greedy（贪心算法）或者$\varepsilon-greedy$（$\varepsilon$贪心算法）。$\varepsilon-greedy$可以有效的平衡exploration-exploitation的关系，即能探索新的action又能利用原有的经验生成最优的action，但通过greedy算法搜索最优action的计算量非常大，尤其是在action是连续的情况下，因此，critic-only通过将连续的action进行离散化，将优化问题变成一个枚举问题。</p>
</li>
<li>actor-critic：整合了上诉两个方法的有点。<font color="red">低方差，连续action </font>。critic对当前的state以及cation的表现进行估计，得到value function，用来给actor更新梯度。<font color="red">低方差的代价实在学习开始时，由于critic的估计不够准确而使算法具有较大的偏差 </font>。policy-gradient占了该算法的绝大部分，其中可以分为两种standard gradient以及natural gradient，另一部分更新actor。</li>
</ul>
<h3 id="2-3-Actor-Critic策略梯度"><a href="#2-3-Actor-Critic策略梯度" class="headerlink" title="2.3 Actor Critic策略梯度"></a>2.3 Actor Critic策略梯度</h3><blockquote>
<p>因为蒙特卡洛策略梯度方法有着很高的方差，因此用一个Critic来估计行为价值函数$Q<em>w(s,a) \approx Q^{\pi</em>\theta}(s,a)$</p>
</blockquote>
<p>Critic要做的事情其实我们已经见过：策略评估，他要告诉个体，在由参数$\theta$确定的策略$\pi _\theta$到底表现的怎么样。所以Actor_Critic算法包含两种参数：</p>
<ul>
<li>Critic：更新行为价值函数的参数w</li>
<li>Actor：更新策略的参数$\theta$，更新过程会受到Critic的价值函数的引导</li>
</ul>
<p>（1）一个简单的actor-critic算法可以使用基于行为价值的critic，它使用一个<strong>线性价值函数</strong>来近似状态行为价值函数：</p>
<p>​        $Q_w(s,a) = \phi(s,a)^Tw$</p>
<p>​        这里的$\phi(s,a)$是描述状态和行为的特征（L维向量），个人理解：一般可以看作为输入（即图像），然后进行矩阵转置，乘以参数$w$就表示为线性价值函数了。其中Critic通过线性近似的TD（0）更新$w$，Actor通过策略梯度更新$\theta$。</p>
<p>算法流程如下：</p>
<p><img src="/2019/07/30/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8BActor-Critic%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/5.png" alt></p>
<p>注：该算法仅是基于线性价值函数的近似的Actor-Critic算法。这是一个在线实时算法，针对每一步进行更新，不需要等到Episode结束。</p>
<p>用特征的线性组合来近似$Q_w(s,a)$进而求解策略梯度的方法引入了偏倚，一个偏倚的价值下得到的策略梯度不一定能最后找到较好的解决方案，例如当近似价值函数的$Q_w(s,a)$ 使用可能会引起状态重名的特征时，就不一定能解决问题了。不过幸运的是，如果我们小心设计近似的 $Q_w(s,a)$函数，是可以避免引入偏倚的，这样我们相当于遵循了准确的策略梯度。</p>
<p>（2） <strong>兼容近似函数Compatible Function Approximation</strong></p>
<p>那怎么样才算是小心设计的$Q_w(s,a)$呢？需要满足下面两个条件：</p>
<ul>
<li><p>近似价值函数的梯度完全等同于策略函数对数的梯度，即不存在重名（兼容）情况:</p>
<script type="math/tex; mode=display">
\nabla_wQ_w(s,a) = \nabla_\theta log \pi_\theta(s,a)</script></li>
<li><p>价值函数参数$w$使得均方差最小        </p>
<script type="math/tex; mode=display">
\varepsilon = E_{\pi \theta} [(Q^{\pi_\theta}(s,a) - Q_w(s,a))^2]</script><p>符合这两个条件，则认为策略梯度是准确的，此时：</p>
<script type="math/tex; mode=display">
\nabla_\theta J(\theta) \approx E_{\pi\theta}[\nabla_\theta log\pi_\theta (s,a)Q_w(s,a)]</script><p><strong>证明过程</strong>：</p>
<p>​    由于要估计Critic，即需要最小化均方差，如果要用参数$w$来使得均方差最小，则$w$一定为0 ，因此：</p>
<script type="math/tex; mode=display">
\nabla_w \varepsilon = 0</script><p>​    </p>
<script type="math/tex; mode=display">
\therefore \nabla_w \varepsilon = \nabla_w E_{\pi \theta}(s,a) [(Q^{\pi_\theta} - Q_w(s,a))^2] = E_{\pi \theta} [(Q^{\pi_\theta}(s,a) - Q_w(s,a))\nabla_wQ_w(s,a)] = 0</script><p>​    </p>
<script type="math/tex; mode=display">
此时，如果  \nabla_wQ_w(s,a) = \nabla_\theta log \pi_\theta(s,a)</script><p>​    </p>
<script type="math/tex; mode=display">
\therefore E_{\pi \theta} [(Q^{\pi_\theta}(s,a) - Q_w(s,a))\nabla_\theta log \pi_\theta(s,a)] = 0</script><script type="math/tex; mode=display">
\therefore E_{\pi \theta}[Q^{\pi_\theta}(s,a) \nabla_\theta log \pi_\theta(s,a)] = E_{\pi \theta}[Q_w(s,a) \nabla_\theta log \pi_\theta(s,a)]</script><p>因此，就会认为策略梯度是准确的。但是如果两个条件都满足的话，整个算法相当于不需要使用critic，也就变成了传统的REINFORCE算法。所以在实践中，一般放宽条件2，更有利于通过时间差分学习到更有效的评估函数。所以策略评估通常使用蒙特卡洛策略评估、TD学习以及TD$(\lambda) $等，当然也可以使用最小方差法。具体见2.5节。</p>
</li>
</ul>
<p>（3）<strong>总结</strong></p>
<p>加了Actor Critic的策略梯度公式变为</p>
<script type="math/tex; mode=display">
\nabla_\theta J(\theta) \approx E_{\pi\theta}[\nabla_\theta log\pi_\theta (s,a)Q_w(s,a)]</script><p>梯度更新公式为：</p>
<script type="math/tex; mode=display">
\theta = \theta + \alpha \nabla_\theta log \pi_\theta (s_t,a_t) Q_w(s,a)</script><p>Actor Critic相比于之前的蒙特卡洛策略梯度REINFORCE方法，这里的$\nabla<em>\theta log \pi</em>\theta (s_t,a_t)$是我们的socre function，不变。变化的是原来的$v_t$不在是由蒙特卡洛方法采样得到，而是由Critic得到。</p>
<p>而对于Critic来说，这块知识是新的，不过我们可以参考之前DQN的做法，即用一个Q网络来作为critic，这个Q网络的输入可以是状态，输出是每个动作的价值或者最优动作的价值。</p>
<p><strong>总的来说，就是Critic通过Q网络计算状态的最优价值$v_t$，而Actor利用$v_t$这个最优价值迭代更新策略函数的参数$\theta$，进而选择动作，并得到反馈和新的状态，Critic使用反馈和新的状态更新Q网络参数w。</strong></p>
<h3 id="2-4-Actor-Critic要点概括"><a href="#2-4-Actor-Critic要点概括" class="headerlink" title="2.4 Actor-Critic要点概括"></a>2.4 Actor-Critic要点概括</h3><p><strong>一句话概括Actor Critic方法</strong></p>
<blockquote>
<p>结合了Policy Gradient（Actor）和Function Approximation（Critic）的方法。Actor基于概率选行为，Critic基于Actor的行为评判行为的得分，Actor根据Critic的评分修改选行为的概率。</p>
</blockquote>
<ul>
<li><strong>Actor Critic方法优势：</strong>可以进行单步更新，比传统的Policy Gradient要快</li>
<li><strong>Actor Critic方法劣势：</strong>取决于Critic的价值判断，但是Critic难收敛，在加上Actor的更新，就更难收敛。为了解决收敛问题，Google Deepmind提出了 Actor Critic升级版 Deep Deterministic Policy Gradient。后者融合了DQN的优势，解决了收敛难的问题。</li>
</ul>
<h3 id="2-5-Actor-Critic-的评估"><a href="#2-5-Actor-Critic-的评估" class="headerlink" title="2.5 Actor-Critic 的评估"></a>2.5 Actor-Critic 的评估</h3><blockquote>
<p>Actor-Critic的评估一般有以下几种方法，主要变化的是$Q_w  (s,a)$</p>
</blockquote>
<p>（1）基于状态价值：这和之前的蒙特卡洛策略梯度REINFORCE方法一样，这时Actor的策略函数参数更新的法公式为：</p>
<script type="math/tex; mode=display">
\theta = \theta + \alpha \nabla_\theta log \pi_\theta (s_t,a_t) V(s,w)</script><p>（2）基于动作价值：在DQN中，我们一般使用的都是动作价值函数Q来做价值评估，这时Actor的策略函数参数更新的法公式为：</p>
<script type="math/tex; mode=display">
\theta = \theta + \alpha \nabla_\theta log \pi_\theta (s_t,a_t) Q(s,a,w)</script><p>（3）基于TD（时序差分法）误差：这时Actor的策略函数参数更新的法公式为：</p>
<script type="math/tex; mode=display">
\theta = \theta + \alpha \nabla_\theta log \pi_\theta (s_t,a_t) \delta(t)</script><p>​    其中，$\delta(t) = R<em>{t+1} + \gamma V(S</em>{t+1}) - V(s<em>t)$ 或者$\delta(t) = R</em>{t+1} + \gamma Q(S<em>{t+1} ,A</em>{t+1})-Q(S_t,A_t)$</p>
<p>（4）基于优势函数：和之前Dueling DQN中的优势函数一样，其优势函数A的定义为：$A(S,A,w,\beta) = Q(S,A,w,\alpha,\beta) - V(S,w,\alpha)$，即动作价值函数和状态价值函数的差值，这时Actor的策略函数参数更新的法公式为：</p>
<script type="math/tex; mode=display">
\theta = \theta + \alpha \nabla_\theta log \pi_\theta (s_t,a_t)A(S,A,w,\beta)</script><p>（5）基于TD($\lambda$)误差：一般都是基于后向TD($\lambda $)误差，是TD误差和效用迹E的乘积，这时Actor的策略函数参数更新</p>
<p>的法公式是：</p>
<script type="math/tex; mode=display">
\theta = \theta + \alpha \delta(t)E(t)</script><p>​        其中，$\delta(t) = R<em>{t+1} + \gamma V(S</em>{t+1}) - V(s<em>t)$，$E(t) = \gamma \lambda E</em>{t-1} + \nabla<em>\theta log \pi</em>\theta (s_t,a_t)$</p>
<p>​        当$\lambda = 0$时，就是第（2）步的普通TD方法</p>
<p>对于Critic本身的模型参数w，一般都是使用均方误差损失函数来做迭代更新，类似于之前DQN中所讲到的迭代方法。如果我们使用的是最简单的线性Q函数，比如$Q(s,a,w) = \phi(s,a)^T w$，则Critic本身的模型参数w的更新公式可以表示为：</p>
<script type="math/tex; mode=display">
\delta(t) = R_{t+1} + \gamma Q(S_{t+1} ,A_{t+1})-Q(S_t,A_t)</script><script type="math/tex; mode=display">
w = w + \beta \delta\phi(s,a)</script><p>通过对均方误差损失函数求导可以很容易的得到上式，当然实际应用中，一般不使用线性Q函数，而使用神经网络表示状态和Q值的关系。</p>
<p><img src="/2019/07/30/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8BActor-Critic%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/2.png" alt></p>
<h3 id="2-6-Actor-Critic算法流程"><a href="#2-6-Actor-Critic算法流程" class="headerlink" title="2.6 Actor-Critic算法流程"></a>2.6 Actor-Critic算法流程</h3><blockquote>
<p>在网上找的关于Actor-Critic的算法流程</p>
</blockquote>
<p><img src="/2019/07/30/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8BActor-Critic%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/3.png" alt></p>
<p>而这个是刘建平博客里的算法流程介绍：</p>
<p><img src="/2019/07/30/%E8%AE%BA%E6%96%87/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DRL%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8BActor-Critic%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/4.png" alt></p>
<p>算法流程这一块，暂时也不好理解，也确实没有搜到到底哪一个才是真正的算法流程，后面再看代码去加深理解吧</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>首先，在网上找的关于Actor-Critic的论文阅读，阅读过程一脸懵逼，没办法，后来又在网上找了很多的博客，通过浏览别人的博客进行理解。</p>
<p>阅读的原论文题目是：<strong>Actor-Critic Algorithms</strong> ，然后网上又有好多的论文笔记是关于这一篇的：<strong>Soft Actor-Critic: Off-Policy Maximum Entropy Deep Reinforcement Learning with a Stochastic Actor</strong> 具体的，我也不知道是看哪一篇，只知道前一篇Actor-Critic Algorithms的引用次数多。因此阅读的前一篇，后面的一篇soft的暂时还没有阅读。</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote>
<p>主要参考了刘建平的博客笔记和Fisher’s Blog，还有一些其他人的博客笔记，感谢他们的笔记</p>
</blockquote>
<ul>
<li><p><a href="https://bluefisher.github.io/2018/05/10/%E7%AD%96%E7%95%A5%E6%A2%AF%E5%BA%A6-Policy-Gradient/">策略梯度 Policy Gradient</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/pinard/p/10272023.html">强化学习（十四）Actor-Critic</a></p>
</li>
<li><p><a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/6-1-actor-critic/">Actor Critic（Tensorflow）-莫烦</a></p>
</li>
<li><p><a href="https://blog.csdn.net/zkq_1986/article/details/80328264">强化学习actor-critic算法</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_30615903/article/details/80774384">强化学习 Actor-Critic算法详解</a></p>
</li>
<li><p><a href="http://www0.cs.ucl.ac.uk/staff/d.silver/web/Teaching_files/pg.pdf">UCL的强化学习第7讲</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/28348110">强化学习第七讲策略梯度</a></p>
</li>
</ul>
<p>相关笔记：</p>
<ul>
<li><p><a href="https://www.jianshu.com/p/c2920d207275">演员-评论家方法（Actor-Critic）</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/29486661">Actor-Critic算法小结</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/36494307">强化学习—策略梯度与Actor-Critic算法</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>论文</category>
        <category>深度强化学习</category>
      </categories>
      <tags>
        <tag>DRL</tag>
        <tag>Actor-Critic</tag>
      </tags>
  </entry>
  <entry>
    <title>Python UDP编程</title>
    <url>/2019/07/29/%E8%AF%AD%E8%A8%80/Python/Python-UDP%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在机器人的运动控制过程中，关于多机通信控制，除了用ros外，还可以进行网络编程，这里就用的是UDP编程实现两台电脑间的通信</p>
</blockquote>
<h2 id="两台电脑信息"><a href="#两台电脑信息" class="headerlink" title="两台电脑信息"></a>两台电脑信息</h2><blockquote>
<p>A电脑用于服务端，B电脑用于客户端</p>
</blockquote>
<ul>
<li>A电脑：10.10.100.56</li>
<li>B电脑：10.10.100.54</li>
</ul>
<p><strong>注：两台电脑必须在同一个局域网内</strong></p>
<h2 id="一、UDP简单样例"><a href="#一、UDP简单样例" class="headerlink" title="一、UDP简单样例"></a>一、UDP简单样例</h2><h3 id="1-1-本地测试（服务端单向接收客户端数据）"><a href="#1-1-本地测试（服务端单向接收客户端数据）" class="headerlink" title="1.1 本地测试（服务端单向接收客户端数据）"></a>1.1 本地测试（服务端单向接收客户端数据）</h3><ul>
<li><p>server.py</p>
<blockquote>
<p>服务端，用于接收客户端传来的数据</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">udp_server = socket(AF_INET, SOCK_DGRAM) <span class="comment"># 创建UDP套接字(SOCK_DGRAM为UDP)</span></span><br><span class="line">local_addr = (<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>) <span class="comment">#由于是本地，ip可以设置为127.0.0.1，并且自定义设置端口</span></span><br><span class="line">udp_server.bind(local_addr)	<span class="comment"># 绑定ip和端口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	client_data,addr = udp_server.recvfrom(<span class="number">1024</span>) <span class="comment">#1024表示本次接收的最大字节数</span></span><br><span class="line">	client_data = client_data.decode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment">#对client传过来的数据进行解码</span></span><br><span class="line">	<span class="built_in">print</span>(client_data) <span class="comment">#client_data 为client传过来的数据信息</span></span><br><span class="line">	<span class="built_in">print</span>(addr) <span class="comment">#addr为client的ip和端口</span></span><br><span class="line">    </span><br><span class="line">	<span class="keyword">if</span> client_data == <span class="string">&quot;stop&quot;</span>:</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">udp_server.close() <span class="comment">#关闭套接字</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>client.py</p>
<blockquote>
<p>客户端，用于发送数据给服务端</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">udp_client = socket(AF_INET, SOCK_DGRAM) <span class="comment"># 创建udp套接字(SOCK_DGRAM为UDP)</span></span><br><span class="line"><span class="comment">#设置服务端的IP地址和端口</span></span><br><span class="line">dest_addr = (<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>)  <span class="comment"># 注意 是元组，ip是字符串，端口是数字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	send_data = <span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;&quot;</span>) <span class="comment">#待发送的数据，从键盘获取</span></span><br><span class="line">	udp_client.sendto(send_data.encode(<span class="string">&#x27;utf-8&#x27;</span>), dest_addr) <span class="comment"># 发送数据到指定的电脑上的指定程序中</span></span><br><span class="line">	<span class="keyword">if</span> send_data == <span class="string">&quot;stop&quot;</span>: </span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">udp_client.close() <span class="comment">#关闭套接字</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="1-2-两台电脑间通信（同时发送与接收）"><a href="#1-2-两台电脑间通信（同时发送与接收）" class="headerlink" title="1.2 两台电脑间通信（同时发送与接收）"></a>1.2 两台电脑间通信（同时发送与接收）</h3><ul>
<li><p>server.py</p>
<blockquote>
<p>使用A电脑作为服务端，服务端ip为10.10.100.56</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">udp_server = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line">local_addr = (<span class="string">&#x27;10.10.100.56&#x27;</span>, <span class="number">7996</span>)</span><br><span class="line">udp_server.bind(local_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	client_data,addr = udp_server.recvfrom(<span class="number">1024</span>) <span class="comment">#接收来自client的数据</span></span><br><span class="line">	client_data = client_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">	<span class="built_in">print</span>(client_data)</span><br><span class="line">	<span class="built_in">print</span>(addr) </span><br><span class="line">    </span><br><span class="line">    udp_server.sendto(client_data,addr) <span class="comment">#数据原样返回给客户端</span></span><br><span class="line">	<span class="keyword">if</span> recv_result == <span class="string">&quot;stop&quot;</span>:</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">udp_server.close()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>client.py</p>
<blockquote>
<p>B电脑作为客户端，客户端ip地址为10.10.100.54</p>
</blockquote>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">udp_client = socket(AF_INET, SOCK_DGRAM) </span><br><span class="line">dest_addr = (<span class="string">&#x27;10.10.100.56&#x27;</span>, <span class="number">7996</span>)  <span class="comment">#这里的ip和端口要保持和server一致</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	send_data = <span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;&quot;</span>) </span><br><span class="line">	udp_client.sendto(send_data.encode(<span class="string">&#x27;utf-8&#x27;</span>), dest_addr) <span class="comment">#发送数据到服务端</span></span><br><span class="line">    server_data,addr = udp_client.recvfrom(<span class="number">1024</span>)<span class="comment"># 接收服务端数据</span></span><br><span class="line">    server_data = server_data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;server data&#x27;</span>,server_data)</span><br><span class="line">	<span class="keyword">if</span> send_data == <span class="string">&quot;stop&quot;</span>: </span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">udp_client.close() </span><br></pre></td></tr></table></figure>
<ul>
<li><p>运行结果显示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;state</span><br><span class="line">server data state</span><br><span class="line">&gt;&gt;takeoff</span><br><span class="line">server data takeoff</span><br><span class="line">&gt;&gt;move</span><br><span class="line">server data move</span><br><span class="line">&gt;&gt;state</span><br><span class="line">server data state</span><br><span class="line">&gt;&gt;land</span><br><span class="line">server data land</span><br><span class="line">&gt;&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="二、UDP发送列表数据（json）"><a href="#二、UDP发送列表数据（json）" class="headerlink" title="二、UDP发送列表数据（json）"></a>二、UDP发送列表数据（json）</h2><blockquote>
<p>在第一步的样例中，UDP发送和接收的都是一串字符串数据，而有时候服务端返回的数据是一个列表信息，如坐标（x,y,z），此时用字符串信息返回就比较麻烦，需要在客户端和服务端都做一些相应的转化。因此，为了解决该问题，可以使用python的json库</p>
</blockquote>
<h3 id="2-1-python对象转换为json字符串（json-dumps函数）"><a href="#2-1-python对象转换为json字符串（json-dumps函数）" class="headerlink" title="2.1 python对象转换为json字符串（json.dumps函数）"></a>2.1 python对象转换为json字符串（json.dumps函数）</h3><blockquote>
<p>下面的是自己的电脑与B电脑进行通信测试的，不是A与B之间的通信</p>
</blockquote>
<p>将B电脑作为服务端：10.10.100.54，进行测试</p>
<ul>
<li>server.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">udp_server = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line">local_addr = (<span class="string">&#x27;10.10.100.54&#x27;</span>, <span class="number">7996</span>) </span><br><span class="line">udp_server.bind(local_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	client_data,addr = udp_server.recvfrom(<span class="number">1024</span>) </span><br><span class="line">	client_data = client_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">	<span class="built_in">print</span>(client_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># json样例测试</span></span><br><span class="line">	mylist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">	json_string = json.dumps(mylist)</span><br><span class="line">	udp_server.sendto(json_string,addr)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> recv_result == <span class="string">&quot;stop&quot;</span>:</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">udp_socket.close()</span><br></pre></td></tr></table></figure>
<ul>
<li>client.py不变</li>
</ul>
<p>结果显示</p>
<p><img src="/2019/07/29/%E8%AF%AD%E8%A8%80/Python/Python-UDP%E7%BC%96%E7%A8%8B/1.png" alt></p>
<h3 id="2-2-json字符串转换为python对象（json-loads函数）"><a href="#2-2-json字符串转换为python对象（json-loads函数）" class="headerlink" title="2.2 json字符串转换为python对象（json.loads函数）"></a>2.2 json字符串转换为python对象（json.loads函数）</h3><blockquote>
<p>这里将只给出核心部分</p>
<p>为什么要做json字符串转python对象？因为有时候从客户端发送过去的数据也是一个列表信息，如发送xyz的速度控制，要根据xyz值的不同进行相应的操作，此时就最好是传输python对象比较好</p>
</blockquote>
<ul>
<li><p>server.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	client_data,addr = udp_server.recvfrom(<span class="number">1024</span>) </span><br><span class="line">	client_data = client_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    client_data = json.loads(client_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;client_message&#x27;</span>,client_data)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> client_data[<span class="number">0</span>] == <span class="string">&#x27;state&#x27;</span>:</span><br><span class="line">        quad_pos = ...</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;quad_pos&#x27;</span>,quad_pos)</span><br><span class="line">    	json_string = json.dumps(quad_pos) <span class="comment">#python对象转json字符串</span></span><br><span class="line">        udp_server.sendto(json_string,addr)</span><br><span class="line">    <span class="keyword">elif</span> client_data[<span class="number">0</span>] == <span class="string">&#x27;takeoff&#x27;</span>:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">elif</span> client_data[<span class="number">0</span>] == <span class="string">&#x27;move&#x27;</span> <span class="keyword">and</span> <span class="built_in">len</span>(client_data) == <span class="number">5</span>:</span><br><span class="line">        vx,vy,vz,t = <span class="built_in">int</span>(client_data[<span class="number">1</span>]),<span class="built_in">int</span>(client_data[<span class="number">2</span>]),<span class="built_in">int</span>(client_data[<span class="number">3</span>]),<span class="built_in">int</span>(client_data[<span class="number">4</span>])</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>
</li>
<li><p>client.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	send_data = <span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">	msg = send_data.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;msg&#x27;</span>,msg)</span><br><span class="line">	json_string = json.dumps(msg) <span class="comment">#转换成json字符串</span></span><br><span class="line">	udp_client.sendto(json_string, dest_addr)</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">if</span> send_data == <span class="string">&#x27;state&#x27;</span>:</span><br><span class="line">		server_data,addr = udp_client.recvfrom(<span class="number">1024</span>)</span><br><span class="line">		server_data = server_data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;server data&#x27;</span>,server_data)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> send_data == <span class="string">&quot;stop&quot;</span>:</span><br><span class="line">		<span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>结果显示：</p>
<ul>
<li><p>客户端的输入输出显示</p>
<p><img src="/2019/07/29/%E8%AF%AD%E8%A8%80/Python/Python-UDP%E7%BC%96%E7%A8%8B/2.png" alt></p>
</li>
<li><p>服务端的输出显示</p>
<p><img src="/2019/07/29/%E8%AF%AD%E8%A8%80/Python/Python-UDP%E7%BC%96%E7%A8%8B/3.png" alt></p>
</li>
</ul>
</li>
</ul>
<h2 id="三、UDP传输图像"><a href="#三、UDP传输图像" class="headerlink" title="三、UDP传输图像"></a>三、UDP传输图像</h2><blockquote>
<p>用opencv来读取和显示，因此需要先安装opencv</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo proxychains4 pip install opencv-python</span><br></pre></td></tr></table></figure>
<h3 id="3-1-Python获取本地摄像头并显示"><a href="#3-1-Python获取本地摄像头并显示" class="headerlink" title="3.1 Python获取本地摄像头并显示"></a>3.1 Python获取本地摄像头并显示</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">	<span class="keyword">if</span> cap.isOpened():</span><br><span class="line">	    <span class="comment"># get a frame</span></span><br><span class="line">	    ret, frame = cap.read()</span><br><span class="line">	    <span class="comment"># show a frame</span></span><br><span class="line">	    cv2.imshow(<span class="string">&quot;capture&quot;</span>, frame)</span><br><span class="line">	    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">	        <span class="keyword">break</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows() </span><br></pre></td></tr></table></figure>
<h3 id="3-2-UDP传输图片并显示（小尺寸图片）"><a href="#3-2-UDP传输图片并显示（小尺寸图片）" class="headerlink" title="3.2 UDP传输图片并显示（小尺寸图片）"></a>3.2 UDP传输图片并显示（小尺寸图片）</h3><blockquote>
<p>如果图片太大，则下面的代码将会报错</p>
</blockquote>
<ul>
<li><p>server.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定端口:</span></span><br><span class="line">s.bind((<span class="string">&#x27;10.10.100.54&#x27;</span>, <span class="number">9999</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Bind UDP on 9999...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 接收数据:</span></span><br><span class="line">    data, addr = s.recvfrom(<span class="number">400000</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Received from %s:%s.&#x27;</span> % addr)</span><br><span class="line">    <span class="comment">#解码</span></span><br><span class="line">    nparr = np.fromstring(data, np.uint8)</span><br><span class="line">    <span class="comment">#解码成图片numpy</span></span><br><span class="line">    img_decode = cv2.imdecode(nparr, cv2.IMREAD_COLOR)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;result&#x27;</span>,img_decode)</span><br><span class="line">    cv2.waitKey()</span><br><span class="line">    reply = <span class="string">&quot;get message!!!&quot;</span></span><br><span class="line">    s.sendto(reply.encode(<span class="string">&#x27;utf-8&#x27;</span>), addr)</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
</li>
<li><p>client.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;view.jpg&#x27;</span>)</span><br><span class="line">img_encode = cv2.imencode(<span class="string">&#x27;.jpg&#x27;</span>, img)[<span class="number">1</span>]</span><br><span class="line">data_encode = np.array(img_encode)</span><br><span class="line">data = data_encode.tostring()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送数据:</span></span><br><span class="line">s.sendto(data, (<span class="string">&#x27;10.10.100.54&#x27;</span>, <span class="number">9999</span>))</span><br><span class="line"><span class="comment"># 接收数据:</span></span><br><span class="line"><span class="built_in">print</span>(s.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-3-UDP传输视频流信息"><a href="#3-3-UDP传输视频流信息" class="headerlink" title="3.3 UDP传输视频流信息"></a>3.3 UDP传输视频流信息</h3><ul>
<li><p>server.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">HOST=<span class="string">&#x27;10.10.100.54&#x27;</span></span><br><span class="line">PORT=<span class="number">9999</span></span><br><span class="line">buffSize=<span class="number">65535</span></span><br><span class="line"></span><br><span class="line">server=socket.socket(socket.AF_INET,socket.SOCK_DGRAM) <span class="comment">#创建socket对象</span></span><br><span class="line">server.bind((HOST,PORT))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;now waiting for frames...&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data,address=server.recvfrom(buffSize) <span class="comment">#先接收的是字节长度</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data)==<span class="number">1</span> <span class="keyword">and</span> data[<span class="number">0</span>]==<span class="number">1</span>: <span class="comment">#如果收到关闭消息则停止程序</span></span><br><span class="line">        server.close()</span><br><span class="line">        cv2.destroyAllWindows()</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data)!=<span class="number">4</span>: <span class="comment">#进行简单的校验，长度值是int类型，占四个字节</span></span><br><span class="line">        length=<span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        length=struct.unpack(<span class="string">&#x27;i&#x27;</span>,data)[<span class="number">0</span>] <span class="comment">#长度值</span></span><br><span class="line">    data,address=server.recvfrom(buffSize) <span class="comment">#接收编码图像数据</span></span><br><span class="line">    <span class="keyword">if</span> length!=<span class="built_in">len</span>(data): <span class="comment">#进行简单的校验</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    data=numpy.array(<span class="built_in">bytearray</span>(data)) <span class="comment">#格式转换</span></span><br><span class="line">    imgdecode=cv2.imdecode(data,<span class="number">1</span>) <span class="comment">#解码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;have received one frame&#x27;</span>)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;frames&#x27;</span>,imgdecode) <span class="comment">#窗口显示</span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>)==<span class="number">27</span>: <span class="comment">#按下“ESC”退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">server.close()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
</li>
<li><p>client.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">HOST=<span class="string">&#x27;10.10.100.54&#x27;</span></span><br><span class="line">PORT=<span class="number">9999</span></span><br><span class="line"></span><br><span class="line">server=socket.socket(socket.AF_INET,socket.SOCK_DGRAM) <span class="comment">#socket对象</span></span><br><span class="line">server.connect((HOST,PORT))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;now starting to send frames...&#x27;</span>)</span><br><span class="line">capture=cv2.VideoCapture(<span class="number">0</span>) <span class="comment">#VideoCapture对象，可获取摄像头设备的数据</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		<span class="keyword">if</span> capture.isOpened():</span><br><span class="line">			success,frame=capture.read()</span><br><span class="line">            <span class="comment">#frame = cv2.imread(&#x27;normal.jpg) 以图片形式发送</span></span><br><span class="line">			result,imgencode=cv2.imencode(<span class="string">&#x27;.jpg&#x27;</span>,frame,[cv2.IMWRITE_JPEG_QUALITY,<span class="number">50</span>])  <span class="comment">#编码</span></span><br><span class="line">			server.sendall(struct.pack(<span class="string">&#x27;i&#x27;</span>,imgencode.shape[<span class="number">0</span>])) <span class="comment">#发送编码后的字节长度，这个值不是固定的</span></span><br><span class="line">			server.sendall(imgencode) <span class="comment">#发送视频帧数据</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;have sent one frame&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">	<span class="built_in">print</span>(e)</span><br><span class="line">	server.sendall(struct.pack(<span class="string">&#x27;c&#x27;</span>,<span class="number">1</span>)) <span class="comment">#发送关闭消息</span></span><br><span class="line">	capture.release()</span><br><span class="line">	server.close()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="四、Arisim的UDP通信代码实例"><a href="#四、Arisim的UDP通信代码实例" class="headerlink" title="四、Arisim的UDP通信代码实例"></a>四、Arisim的UDP通信代码实例</h2><h3 id="4-1-服务端"><a href="#4-1-服务端" class="headerlink" title="4.1 服务端"></a>4.1 服务端</h3><ul>
<li><p>connect_simulator.py</p>
<blockquote>
<p>用于连接Airsim</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> airsim</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connect</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">		self.client = airsim.MultirotorClient()</span><br><span class="line">		self.client.confirmConnection()</span><br><span class="line">		self.client.enableApiControl(<span class="literal">True</span>)</span><br><span class="line">		self.client.armDisarm(<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>msg_server.py</p>
<blockquote>
<p>接收client传来的特定的消息，并根据适当的消息返回姿态数据和图像数据</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python library</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># airsim</span></span><br><span class="line"><span class="keyword">from</span> connect_simulator <span class="keyword">import</span> Connect </span><br><span class="line"><span class="keyword">import</span> airsim</span><br><span class="line"></span><br><span class="line"><span class="comment"># udp</span></span><br><span class="line">dest_ip = <span class="string">&#x27;10.10.100.56&#x27;</span></span><br><span class="line">msg_port = <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># connect the airsim simulator</span></span><br><span class="line">client = Connect().client</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># image transform</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform_input</span>(<span class="params">responses, img_height, img_width</span>):</span></span><br><span class="line">	img1d = np.array(responses[<span class="number">0</span>].image_data_float, dtype=np.<span class="built_in">float</span>)</span><br><span class="line">	img1d = np.array(np.clip(<span class="number">255</span> * <span class="number">3</span> * img1d, <span class="number">0</span>, <span class="number">255</span>), dtype=np.uint8)</span><br><span class="line">	img2d = np.reshape(img1d, (responses[<span class="number">0</span>].height, responses[<span class="number">0</span>].width))</span><br><span class="line">	image = Image.fromarray(img2d)</span><br><span class="line">	image = np.array(image.resize((img_width, img_height)).convert(<span class="string">&#x27;L&#x27;</span>))</span><br><span class="line">	<span class="comment">#cv2.imwrite(&#x27;b.png&#x27;, image)</span></span><br><span class="line">	<span class="comment"># image = np.float32(image.reshape(1, img_height, img_width, 1))</span></span><br><span class="line">	<span class="comment"># image /= 255.0</span></span><br><span class="line">	<span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">receive_msg</span>(<span class="params">recv_msg</span>):</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		client_data,addr = recv_msg.recvfrom(<span class="number">1024</span>)</span><br><span class="line">		client_data = client_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">		client_data = json.loads(client_data)</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;client_message&#x27;</span>,client_data)</span><br><span class="line">		<span class="keyword">if</span> client_data[<span class="number">0</span>] == <span class="string">&#x27;state&#x27;</span>:</span><br><span class="line">			quad_pos = client.getMultirotorState().kinematics_estimated.position</span><br><span class="line">			quad_pos = [quad_pos.x_val,quad_pos.y_val,quad_pos.z_val]</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;quad_pos&#x27;</span>,quad_pos)</span><br><span class="line">			json_string = json.dumps(quad_pos)</span><br><span class="line">			recv_msg.sendto(json_string,addr)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">elif</span> client_data[<span class="number">0</span>] == <span class="string">&#x27;takeoff&#x27;</span>:</span><br><span class="line">			client.takeoffAsync().join()</span><br><span class="line"></span><br><span class="line">		<span class="keyword">elif</span> client_data[<span class="number">0</span>] == <span class="string">&#x27;land&#x27;</span>:</span><br><span class="line">			client.landAsync().join()</span><br><span class="line"></span><br><span class="line">		<span class="keyword">elif</span> client_data[<span class="number">0</span>] == <span class="string">&#x27;move&#x27;</span> <span class="keyword">and</span> <span class="built_in">len</span>(client_data) == <span class="number">5</span>:</span><br><span class="line">			vx,vy,vz,t = <span class="built_in">int</span>(client_data[<span class="number">1</span>]),<span class="built_in">int</span>(client_data[<span class="number">2</span>]),<span class="built_in">int</span>(client_data[<span class="number">3</span>]),<span class="built_in">int</span>(client_data[<span class="number">4</span>])</span><br><span class="line">			<span class="comment">#client.moveByVelocityAsync(1,0,0,1).join()</span></span><br><span class="line">			client.moveByVelocityAsync(vx,vy,vz,t).join()</span><br><span class="line">			client.moveByVelocityAsync(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>).join()</span><br><span class="line"></span><br><span class="line">		<span class="keyword">elif</span> client_data[<span class="number">0</span>] == <span class="string">&#x27;image&#x27;</span>:</span><br><span class="line">			responses = client.simGetImages([airsim.ImageRequest(<span class="number">1</span>,airsim.ImageType.DepthVis,<span class="literal">True</span>)]) <span class="comment">#image</span></span><br><span class="line">			observation = transform_input(responses,<span class="number">144</span>,<span class="number">256</span>)</span><br><span class="line">			img = observation</span><br><span class="line">			img_encode = cv2.imencode(<span class="string">&#x27;.jpg&#x27;</span>, img)[<span class="number">1</span>]</span><br><span class="line">			data_encode = np.array(img_encode)</span><br><span class="line">			data = data_encode.tostring()</span><br><span class="line">			recv_msg.sendto(data,addr)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">elif</span> client_data[<span class="number">0</span>] == <span class="string">&#x27;stop&#x27;</span>:</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">	recv_msg.close()	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">	recv_msg = socket(AF_INET,SOCK_DGRAM)</span><br><span class="line">	recv_msg.bind((dest_ip,msg_port))</span><br><span class="line">	receive_msg(recv_msg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	main()</span><br></pre></td></tr></table></figure>
</li>
<li><p>img_server.py</p>
<blockquote>
<p>启动这个py，在客户端启动相应的py，则可以观看Airsim的图像流信息</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python library</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># airsim</span></span><br><span class="line"><span class="keyword">from</span> connect_simulator <span class="keyword">import</span> Connect </span><br><span class="line"><span class="keyword">import</span> airsim</span><br><span class="line"></span><br><span class="line"><span class="comment"># udp</span></span><br><span class="line">dest_ip = <span class="string">&#x27;10.10.100.56&#x27;</span></span><br><span class="line">img_port = <span class="number">7996</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># connect the airsim simulator</span></span><br><span class="line">client = Connect().client</span><br><span class="line"></span><br><span class="line"><span class="comment"># image transform</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform_input</span>(<span class="params">responses, img_height, img_width</span>):</span></span><br><span class="line">	img1d = np.array(responses[<span class="number">0</span>].image_data_float, dtype=np.<span class="built_in">float</span>)</span><br><span class="line">	img1d = np.array(np.clip(<span class="number">255</span> * <span class="number">3</span> * img1d, <span class="number">0</span>, <span class="number">255</span>), dtype=np.uint8)</span><br><span class="line">	img2d = np.reshape(img1d, (responses[<span class="number">0</span>].height, responses[<span class="number">0</span>].width))</span><br><span class="line">	image = Image.fromarray(img2d)</span><br><span class="line">	image = np.array(image.resize((img_width, img_height)).convert(<span class="string">&#x27;L&#x27;</span>))</span><br><span class="line">	<span class="comment">#cv2.imwrite(&#x27;b.png&#x27;, image)</span></span><br><span class="line">	<span class="comment"># image = np.float32(image.reshape(1, img_height, img_width, 1))</span></span><br><span class="line">	<span class="comment"># image /= 255.0</span></span><br><span class="line">	<span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_img</span>(<span class="params">recv_img</span>):</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		client_data,addr = recv_img.recvfrom(<span class="number">1024</span>)</span><br><span class="line">		client_data = client_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">		responses = client.simGetImages([airsim.ImageRequest(<span class="number">1</span>,airsim.ImageType.DepthVis,<span class="literal">True</span>)]) <span class="comment">#image</span></span><br><span class="line">		observation = transform_input(responses,<span class="number">144</span>,<span class="number">256</span>)</span><br><span class="line">		img = observation</span><br><span class="line">		img_encode = cv2.imencode(<span class="string">&#x27;.jpg&#x27;</span>, img)[<span class="number">1</span>]</span><br><span class="line">		data_encode = np.array(img_encode)</span><br><span class="line">		data = data_encode.tostring()</span><br><span class="line">		recv_img.sendto(data,addr)</span><br><span class="line">	recv_img.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">	recv_img = socket(AF_INET,SOCK_DGRAM)</span><br><span class="line">	recv_img.bind((dest_ip,img_port))</span><br><span class="line">	send_img(recv_img)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	main()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-2-客户端"><a href="#4-2-客户端" class="headerlink" title="4.2 客户端"></a>4.2 客户端</h3><ul>
<li><p>client.py</p>
<blockquote>
<p>在这个py程序中，输入相应的指令，然后服务端相应，目前是手动的，后面会改成自动的</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> recv_img <span class="keyword">import</span> Img</span><br><span class="line"></span><br><span class="line">udp_client = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">dest_addr = (<span class="string">&#x27;10.10.100.56&#x27;</span>, <span class="number">9999</span>)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	send_data = raw_input(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">	msg = send_data.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;msg&#x27;</span>,msg)</span><br><span class="line">	json_string = json.dumps(msg)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#udp_client.sendto(send_data.encode(&#x27;utf-8&#x27;), dest_addr)</span></span><br><span class="line">	udp_client.sendto(json_string, dest_addr)</span><br><span class="line">	<span class="keyword">if</span> send_data == <span class="string">&#x27;state&#x27;</span>:</span><br><span class="line">		server_data,addr = udp_client.recvfrom(<span class="number">1024</span>)</span><br><span class="line">		server_data = server_data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;server data&#x27;</span>,server_data)</span><br><span class="line">	<span class="keyword">if</span> send_data == <span class="string">&#x27;image&#x27;</span>:</span><br><span class="line">		data, addr = udp_client.recvfrom(<span class="number">400000</span>)</span><br><span class="line">		<span class="comment">#解码</span></span><br><span class="line">		nparr = np.fromstring(data, np.uint8)</span><br><span class="line">		<span class="comment">#解码成图片numpy</span></span><br><span class="line">		img_decode = cv2.imdecode(nparr, cv2.IMREAD_COLOR)</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;img&#x27;</span>,img_decode)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> send_data == <span class="string">&quot;stop&quot;</span>:</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">udp_client.close()</span><br></pre></td></tr></table></figure>
</li>
<li><p>recv_img.py</p>
<blockquote>
<p>启动该py程序，并在服务端启动了对应的py程序后，则能看到窗口</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">udp_client = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">dest_addr = (<span class="string">&#x27;10.10.100.56&#x27;</span>, <span class="number">7996</span>) </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Img</span>():</span></span><br><span class="line">    img = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    img = Img().img</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        udp_client.sendto(<span class="string">&#x27;image&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>), dest_addr)</span><br><span class="line">        data, addr = udp_client.recvfrom(<span class="number">400000</span>)</span><br><span class="line">        <span class="comment">#解码</span></span><br><span class="line">        nparr = np.fromstring(data, np.uint8)</span><br><span class="line">        <span class="comment">#解码成图片numpy</span></span><br><span class="line">        img_decode = cv2.imdecode(nparr, cv2.IMREAD_COLOR)</span><br><span class="line">        img = img_decode</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;img&#x27;</span>,img)</span><br><span class="line">        img_decode = cv2.resize(img_decode,(<span class="number">640</span>,<span class="number">480</span>),interpolation=cv2.INTER_CUBIC)</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;result&#x27;</span>,img_decode)</span><br><span class="line">        cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#cv2.destroyAllWindows()</span></span><br><span class="line"></span><br><span class="line">    udp_client.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-3-结果显示"><a href="#4-3-结果显示" class="headerlink" title="4.3 结果显示"></a>4.3 结果显示</h3><p><img src="/2019/07/29/%E8%AF%AD%E8%A8%80/Python/Python-UDP%E7%BC%96%E7%A8%8B/4.png" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>基于UDP传输的基本样例，并且用到的暂时只有这么多，在机器人控制中，服务端主要返回机器人的图像信息和姿态信息，而客户端要发送的主要是机器人的控制信息，如何控制等等，但是我在测试的过程中，如果要在客户端时刻显示机器人的相机信息，则需要新建一个server.py程序，设置一个端口，然后在客户端也新建一个client.py信息，通过这个client来时刻显示视频。当然，如果不需要显示画面的话，则不需要新建</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p>python对象转换为json字符串：<a href="https://zhidao.baidu.com/question/1047863020856370819.html">python socket编程传输列表数据</a></p>
</li>
<li><p>json字符串转换为python对象：<a href="https://blog.csdn.net/tterminator/article/details/63289400">python对象和json互相转换</a></p>
</li>
<li><a href="https://blog.csdn.net/qq_36852276/article/details/90761122">UDP传输图片并显示</a></li>
<li><a href="https://www.twblogs.net/a/5b805dee2b71772165a73660/zh-cn">UDP传输视频流信息</a></li>
</ul>
]]></content>
      <categories>
        <category>语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>大学生落户</title>
    <url>/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/</url>
    <content><![CDATA[<h2 id="大学生落户准备资料"><a href="#大学生落户准备资料" class="headerlink" title="大学生落户准备资料"></a>大学生落户准备资料</h2><ul>
<li>身份证原件</li>
<li>户口本原件（户口本首页（地址页）、户口本本人页）</li>
<li>毕业证原件</li>
<li>租房合同（申请人签名）</li>
</ul>
<h2 id="一、武汉大学生落户"><a href="#一、武汉大学生落户" class="headerlink" title="一、武汉大学生落户"></a>一、武汉大学生落户</h2><blockquote>
<p>先在网上提交资料，进行申请，等申请通过后（工作日内一般第二天就会有回复），在拿着申请资料到相关地址办理落户</p>
</blockquote>
<h3 id="1、需要哪些申请材料？"><a href="#1、需要哪些申请材料？" class="headerlink" title="1、需要哪些申请材料？"></a>1、需要哪些申请材料？</h3><blockquote>
<p>1、登录<a href="https://wsgaj.chutianyun.gov.cn//#/">湖北公安政务服务平台</a>，没有注册过，可先进行注册。我是在手机上下载了一个<strong>鄂汇办</strong>APP，然后扫码登录，更方便。</p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210517232431119.png" alt="image-20210517232431119"></p>
<blockquote>
<p>2、登录成功后，在首页点击<strong>办事中心</strong>，然后在搜索栏中搜索<strong>落户</strong>，即会弹出<strong>【武汉】大学毕业生落户</strong>信息</p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210517232745645.png" alt="image-20210517232745645"></p>
<blockquote>
<p>3、选择<strong>网上申报</strong>，在弹出框中选择<code>受理公安机关</code>、填写<code>申请人信息</code>，查看所需的申请材料</p>
<p>（1）<strong>受理公安机关</strong></p>
<p>​        以落户武汉<strong>洪山区</strong>为例，可选择<code>武汉市公安局</code>-&gt;<code>洪山区分局</code>-&gt;<code>洪山区政务服务中心公安窗口</code></p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210517233319919.png" alt="image-20210517233319919"></p>
<blockquote>
<p>（2）<strong>申请人信息</strong></p>
<p>​        按实际信息进行填写</p>
<p>（3）<strong>附件材料上传</strong></p>
<p>​        下图就是申请落户所需的附件材料准备了</p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210517233448018.png" alt="image-20210517233448018"></p>
<h3 id="2、材料准备"><a href="#2、材料准备" class="headerlink" title="2、材料准备"></a>2、材料准备</h3><h4 id="2-1-《申报户口登记表》（学生落户登记类）"><a href="#2-1-《申报户口登记表》（学生落户登记类）" class="headerlink" title="2.1 《申报户口登记表》（学生落户登记类）"></a>2.1 《申报户口登记表》（学生落户登记类）</h4><blockquote>
<p>点击<strong>样表下载</strong>，下载<strong>申报户口登记表</strong></p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210517234011149.png" alt="image-20210517234011149"></p>
<blockquote>
<p>建议，下载下来后，直接打印，全手写，总共也没多少可填写的地方，我当初就是电脑上填写，导致最后的<strong>受理人签名</strong>那一行到第二页去了，所以建议全手写，即使真的不想手写，最后的申请人签名一定得手写，<strong>签名必须手写</strong></p>
<p>（1）<strong>申请落户类别</strong></p>
<ul>
<li>[x] 【武汉】大学毕业落户</li>
</ul>
<p>（2）<strong>申请人员基本情况</strong></p>
<p>​            <strong>实际居住地址</strong>：按实际情况填写</p>
<p>​            <strong>所属派出所（实际居住地址栏）</strong>：关山派出所（以关山派出所为例）</p>
<p>​            <strong>拟落户地址</strong>：**小区社区公共户</p>
<ul>
<li>[x] 社区公共户</li>
</ul>
<p>​            <strong>拟落户地派出所</strong>：关山派出所</p>
<p>（3）<strong>随迁人员情况</strong>：根据实际情况填写，我没有随迁人员，因此该栏空着</p>
<p>（4）<strong>申请理由</strong>：随便写，如在武汉长期工作，想把户口迁往武汉</p>
<p>（5）<strong>申请人签名及日期</strong>：<strong>一定要手写</strong></p>
</blockquote>
<h4 id="2-2-《居民户口本》首页及本人页"><a href="#2-2-《居民户口本》首页及本人页" class="headerlink" title="2.2 《居民户口本》首页及本人页"></a>2.2 《居民户口本》首页及本人页</h4><blockquote>
<p>本人页就不多说，首页要有地址栏的那页</p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210517235058843.png" alt="image-20210517235058843"></p>
<h4 id="2-3、学历证明"><a href="#2-3、学历证明" class="headerlink" title="2.3、学历证明"></a>2.3、学历证明</h4><blockquote>
<p>登录<a href="https://www.chsi.com.cn/">学信网</a>，下载学历证明</p>
<p>（1）登录后，在<code>首页</code>-&gt;<code>高等教育信息</code>中，点击<code>学历</code></p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210517235426277.png" alt="image-20210517235426277"></p>
<blockquote>
<p>（2）若有多个学历，选择最高学历，下载，点击<code>查看该学历的电子注册备案表</code></p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210517235553118.png" alt="image-20210517235553118"></p>
<blockquote>
<p>（3）在最高学历中，点击查看，若失效，可进行<strong>延长验证有效期</strong></p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210517235711114.png" alt="image-20210517235711114"></p>
<blockquote>
<p>（4）在弹出框，点击<strong>下载</strong>，下载<strong>PDF</strong>报告</p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210517235856502.png" alt="image-20210517235856502"></p>
<h4 id="2-4-、毕业证原件"><a href="#2-4-、毕业证原件" class="headerlink" title="2.4 、毕业证原件"></a>2.4 、毕业证原件</h4><blockquote>
<p>还不把积灰已久的毕业证赶紧找出来，拍个照</p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210518000031264.png" alt="image-20210518000031264"></p>
<h4 id="2-5-、居住凭证"><a href="#2-5-、居住凭证" class="headerlink" title="2.5 、居住凭证"></a>2.5 、居住凭证</h4><blockquote>
<p>只用房屋租赁合同书就可以了（不需要其他的太多信息）</p>
<p>承租方一定得是申请人，我当时就填写的不是本人名字，结果导致第一次被拒</p>
<p>没有居住凭证怎么办？照着这个格式，打印一份，然后找个同学帮忙填写一些信息，就完成了，这个不那么重要，重要的是身份证、户口本、学历证明、毕业证原件的好吧。</p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210518000113120.png" alt="image-20210518000113120"></p>
<h4 id="2-6-、配偶及子女随迁的关系凭证"><a href="#2-6-、配偶及子女随迁的关系凭证" class="headerlink" title="2.6 、配偶及子女随迁的关系凭证"></a>2.6 、配偶及子女随迁的关系凭证</h4><blockquote>
<p>视情况而定咯，我没有提交该信息</p>
</blockquote>
<h4 id="2-7-、业务主体人照片"><a href="#2-7-、业务主体人照片" class="headerlink" title="2.7 、业务主体人照片"></a>2.7 、业务主体人照片</h4><blockquote>
<p>需要申请人本人手持申报户口登记表的自拍照片，拍上半身就可以了</p>
</blockquote>
<h3 id="3、网上材料提交"><a href="#3、网上材料提交" class="headerlink" title="3、网上材料提交"></a>3、网上材料提交</h3><blockquote>
<p>将前期准备的材料网上提交就可以了，工作日内提交，一般第二天就会收到反馈结果了</p>
<p>提交的所有信息，全部以png或者jpg形式上传就可以了，比如登记表是word文档、学历证明是PDF，<strong>截图</strong>就可以了，不需要真的上传word文档或pdf文件，说不定后台系统识别还会乱码（我还就真乱码，反馈告诉我乱码）</p>
<p>当进行资料提交，下一步，下一步后，发现只能选择窗口办理，说好的线上办理呢？又被忽悠了呀，只有这一个选择，没办法，只能这样选咯。要注意其中的说明，<strong>网上预审通过后，还需要前往办理窗口提交材料进行办件的办理</strong>。</p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210518000951886.png" alt="image-20210518000951886"></p>
<h3 id="4、等待审批"><a href="#4、等待审批" class="headerlink" title="4、等待审批"></a>4、等待审批</h3><blockquote>
<p>我第一次提交，没太看仔细，结果导致审批未通过</p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210518000706173.png" alt="image-20210518000706173"></p>
<blockquote>
<p>可以失败一次，老失败就不行咯，最后审批通过的结果如下图</p>
<p>里面的提示：<strong>关山街派出所</strong>非常重要，所以文字还是要看仔细，特别是不熟悉的资料时。</p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210518000755006.png" alt="image-20210518000755006"></p>
<h3 id="5、线下落户"><a href="#5、线下落户" class="headerlink" title="5、线下落户"></a>5、线下落户</h3><blockquote>
<p>那么问题来了，网上提交时，选择的受理机关是<strong>洪山区政务服务中心公安窗口</strong>，那是要到这个位置去办理落户手续吗？</p>
<p>答案明显不是啦！</p>
<p>审批意见中已经说得清清楚楚了，请携带资料前往<strong>关山街派出所</strong>办理相关落户手续</p>
<p>当时忙着上班，请假去办理落户手续，根本没来得及看，结果先跑到洪山区政务服务中心公安窗口去咨询，然后这边告诉我要去关山街派出所办理，当时的心，哇凉哇凉。</p>
<p>最后，携带网上提交的<strong>材料原件及复印件（包括身份证、户口本、学籍证明、居住凭证、毕业证等）</strong>，去拟落户派出所办理落户手续就可以了。</p>
<p><strong>落户完成后，就可以得到这样一张登记表了，这就算完成大学生落户了</strong></p>
<p>当时准备办个武汉身份证，结果指纹系统出现故障，指纹录不进去，身份证又耽搁了一周，唉，啥事都遇到了。</p>
<p><strong>关山派出所周六也上班哦。</strong></p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210518001753511.png" alt="image-20210518001753511"></p>
<h2 id="二、武汉落户买房？"><a href="#二、武汉落户买房？" class="headerlink" title="二、武汉落户买房？"></a>二、武汉落户买房？</h2><h3 id="1、购房资格"><a href="#1、购房资格" class="headerlink" title="1、购房资格"></a>1、购房资格</h3><blockquote>
<p>一般在武汉连续缴纳2年社保或以大学生身份落户武汉就拥有了购房资格了，如果用学历落户，但还不是武汉户口的话，按照前面的大学生落户说明，先去办理落户手续，一般3个工作日内就可以全部完成的。武汉对学历落户还是非常非常重视的。</p>
</blockquote>
<h3 id="2、房查"><a href="#2、房查" class="headerlink" title="2、房查"></a>2、房查</h3><blockquote>
<p>手机微信上关注<strong>武汉住保房管</strong>公众号，进入公众号后，点击右下角的<strong>武房服务</strong>，然后选择<strong>个人房产信息查询</strong>，填写相关信息，等待结果（一般第二天就可以出结果）</p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210518002948556.png" alt="image-20210518002948556"></p>
<blockquote>
<p>房查结果</p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210518003226753.png" alt="image-20210518003226753"></p>
<h3 id="3、房票"><a href="#3、房票" class="headerlink" title="3、房票"></a>3、房票</h3><blockquote>
<p>等武汉户口下来（一张登记表）后，就可以进行房票查询了</p>
<p>进入<strong>武汉住保房管</strong>公众号，选择<code>武房服务</code>-&gt;<code>购房资格核查服务</code>-&gt;<code>网上申报</code>-&gt;<code>本市户籍购房家庭</code>（本市户籍：<strong>是</strong>，其他按实际情况填写）-&gt;<code>下一步</code>-&gt;<code>上传影像资料</code>（身份证正反面可使用原户籍地身份证，户籍资料选择落户手续完成后发放的一张登记表），其他信息按实际情况填写即可。</p>
<p>房票结果（一般工作日内第二天出结果）</p>
</blockquote>
<p><img src="/2021/05/18/%E9%9A%8F%E7%AC%94/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%90%BD%E6%88%B7/image-20210518004018519.png" alt="image-20210518004018519"></p>
<h3 id="4、收入证明"><a href="#4、收入证明" class="headerlink" title="4、收入证明"></a>4、收入证明</h3><blockquote>
<p>在公司办理收入证明，找公司相关行政即可</p>
<p>注意事项：</p>
<p>（1）一定要有公司盖章</p>
<p>（2）月均收入要在房贷的2倍及以上</p>
</blockquote>
<h3 id="5、贷款银行资金流水"><a href="#5、贷款银行资金流水" class="headerlink" title="5、贷款银行资金流水"></a>5、贷款银行资金流水</h3><blockquote>
<p><strong>工作日内</strong>，本人持身份证，去贷款银行机器上打印资金流水即可（一般半年内），不是ATM机</p>
</blockquote>
<h3 id="6、个人征信"><a href="#6、个人征信" class="headerlink" title="6、个人征信"></a>6、个人征信</h3><blockquote>
<p><strong>非工作日</strong>（最好提前打电话咨询），去近处可以打印个人征信的机器上，本人持身份证在银行机器上打印个人征信即可，打印纸张越少，说明信用卡、贷款等越少。</p>
</blockquote>
<h3 id="7、首付"><a href="#7、首付" class="headerlink" title="7、首付"></a>7、首付</h3><blockquote>
<p>能凑够首付，就可以去准备前6项资料了。</p>
</blockquote>
<h2 id="三、武汉房价？"><a href="#三、武汉房价？" class="headerlink" title="三、武汉房价？"></a>三、武汉房价？</h2><blockquote>
<p>2021年，主要经过了2016年的暴涨后，再也不是能随随便便就买的起的房了</p>
<p>2021年5月份光谷东的新房房价均价2.2w-2.3w，目前新希望是光谷东的最南方最便宜的一个位置了，均价1.7w左右，也非常难买。</p>
<p>其他位置，比如江夏文化大道、黄家湖地铁小镇、花山等区域都是1.2w-1.5w的价格了，难！！！</p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>房</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（一）之创建型模式</title>
    <url>/2021/05/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、OOP七大原则"><a href="#一、OOP七大原则" class="headerlink" title="一、OOP七大原则"></a>一、OOP七大原则</h1><h2 id="1、开闭原则"><a href="#1、开闭原则" class="headerlink" title="1、开闭原则"></a>1、开闭原则</h2><blockquote>
<p><strong>对扩展开放，对修改关闭</strong></p>
<p>​    当应用需求发生改变时，尽量不修改原来代码功能块，可以在上面进行扩展</p>
</blockquote>
<h2 id="2、里氏替换原则"><a href="#2、里氏替换原则" class="headerlink" title="2、里氏替换原则"></a>2、里氏替换原则</h2><blockquote>
<p><strong>继承</strong>必须确保<strong>超类</strong>所拥有的性质在<strong>子类</strong>中仍然成立</p>
<p>​    子类可以扩展父类功能，尽量不要修改原有父类的功能</p>
</blockquote>
<h2 id="3、依赖倒置原则"><a href="#3、依赖倒置原则" class="headerlink" title="3、依赖倒置原则"></a>3、依赖倒置原则</h2><blockquote>
<p>要面向<strong>接口编程</strong>，不要面向<strong>实现编程</strong></p>
<p>​    抽象不依赖细节，细节依赖于抽象</p>
</blockquote>
<h2 id="4、单一职责原则"><a href="#4、单一职责原则" class="headerlink" title="4、单一职责原则"></a>4、单一职责原则</h2><blockquote>
<p><strong>控制类的粒度大小、将对象解耦、提高其内聚性</strong></p>
<p>​    一个方法尽量做一个事情</p>
</blockquote>
<h2 id="5、接口隔离原则"><a href="#5、接口隔离原则" class="headerlink" title="5、接口隔离原则"></a>5、接口隔离原则</h2><blockquote>
<p>要为各个类建立它们需要的专用接口</p>
</blockquote>
<h2 id="6、迪米特法则"><a href="#6、迪米特法则" class="headerlink" title="6、迪米特法则"></a>6、迪米特法则</h2><blockquote>
<p>只与你的直接朋友交谈，不跟“陌生人”说话</p>
<p>​    A与B相关，B与C相关，A尽量不与C直接交流</p>
</blockquote>
<h2 id="7、合成复用原则"><a href="#7、合成复用原则" class="headerlink" title="7、合成复用原则"></a>7、合成复用原则</h2><blockquote>
<p>尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现</p>
</blockquote>
<h1 id="二、设计模型"><a href="#二、设计模型" class="headerlink" title="二、设计模型"></a>二、设计模型</h1><blockquote>
<p>设计模式又称为GoF 23，是一种思维、一种态度、一种进步</p>
<p>设计模式主要分为三大类，每一类又分为多个小类</p>
<p>（1）创建型模式</p>
<p>​        单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式</p>
<p>（2）结构型模式</p>
<p>​        适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式</p>
<p>（3）行为型模式</p>
<p>​        模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式</p>
</blockquote>
<h1 id="三、创建型模式"><a href="#三、创建型模式" class="headerlink" title="三、创建型模式"></a>三、创建型模式</h1><h2 id="1、单例模式"><a href="#1、单例模式" class="headerlink" title="1、单例模式"></a>1、单例模式</h2><blockquote>
<p>单例模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。</p>
<p>注意：</p>
<p>（1）单例类只能有一个实例</p>
<p>（2）单例类必须自己创建自己的唯一实例</p>
<p>（3）单例类必须给所有其他对象提供这一实例</p>
</blockquote>
<h3 id="1-1-饿汉式"><a href="#1-1-饿汉式" class="headerlink" title="1.1 饿汉式"></a>1.1 饿汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hungry</span> </span>&#123;</span><br><span class="line">    <span class="comment">//构造器私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Hungry</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//final 修饰对象，对象内容可变，引用地址不可变</span></span><br><span class="line">    <span class="comment">//static 修饰变量，又属于静态变量，可以通过类名访问，无需创建对象访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Hungry HUNGRY = <span class="keyword">new</span> Hungry();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Hungry <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HUNGRY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>缺点</strong>：在类加载时就初始化，<font size="5">浪费内存</font></p>
</blockquote>
<h3 id="1-2-懒汉式"><a href="#1-2-懒汉式" class="headerlink" title="1.2 懒汉式"></a>1.2 懒汉式</h3><h4 id="1-2-1-线程不安全"><a href="#1-2-1-线程不安全" class="headerlink" title="1.2.1 线程不安全"></a>1.2.1 线程不安全</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="comment">//构造器私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lazyMan == <span class="keyword">null</span>)&#123;</span><br><span class="line">            lazyMan = <span class="keyword">new</span> LazyMan();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>缺点：<font size="5">线程不安全</font>，不支持多线程操作</p>
<p>修改上述代码，然后进行测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:ok!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lazyMan == <span class="keyword">null</span>)&#123;</span><br><span class="line">            lazyMan = <span class="keyword">new</span> LazyMan();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//多线程并发</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span> ;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                LazyMan.getInstance();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果1</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread-<span class="number">0</span>:ok!</span><br><span class="line">Thread-<span class="number">2</span>:ok!</span><br><span class="line">Thread-<span class="number">1</span>:ok!</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果2</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread-<span class="number">0</span>:ok!</span><br><span class="line">Thread-<span class="number">3</span>:ok!</span><br><span class="line">Thread-<span class="number">2</span>:ok!</span><br><span class="line">Thread-<span class="number">1</span>:ok!</span><br><span class="line">Thread-<span class="number">4</span>:ok!</span><br></pre></td></tr></table></figure>
<blockquote>
<p>分析：</p>
<p>​        从运行结果来看，每次运行时，输出结果都不一致，而实际想要的应该只输出一个线程名才对。因为在加载时，构造器私有应该只被执行一次才对，所以，该单例模式在多线程下是不安全的。</p>
</blockquote>
<h4 id="1-2-2-线程安全（synchronized锁方法）"><a href="#1-2-2-线程安全（synchronized锁方法）" class="headerlink" title="1.2.2 线程安全（synchronized锁方法）"></a>1.2.2 线程安全（synchronized锁方法）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:ok!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//synchronized锁方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lazyMan == <span class="keyword">null</span>)&#123;</span><br><span class="line">            lazyMan = <span class="keyword">new</span> LazyMan();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//多线程并发</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span> ;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                LazyMan.getInstance();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果（多次运行）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread-<span class="number">0</span>:ok!</span><br></pre></td></tr></table></figure>
<p>缺点：当getInstance()的方法使用比较频繁时，添加synchronized锁会严重影响性能</p>
</blockquote>
<h4 id="1-2-3-线程安全（双重检验锁，DCL：Double-Checked-locking）"><a href="#1-2-3-线程安全（双重检验锁，DCL：Double-Checked-locking）" class="headerlink" title="1.2.3 线程安全（双重检验锁，DCL：Double-Checked locking）"></a>1.2.3 线程安全（双重检验锁，DCL：Double-Checked locking）</h4><blockquote>
<p>（1）常规的加synchronized锁，仍然存在多线程下的不安全性</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不完整的双重检验锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:ok!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 双重检测锁 的懒汉式单例 DCL </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lazyMan == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(lazyMan == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    lazyMan = <span class="keyword">new</span> LazyMan();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//多线程并发</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span> ;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                LazyMan.getInstance();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果（多次运行），但是仍然是不安全的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread-<span class="number">0</span>:ok!</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<p>​        synchronized使用的是类锁，类的对象实例可以有多个，但是每一个类只有一个class对象。但类锁只是一个概念上的东西，并不是真实存在的。</p>
<p>（2）加volatile锁，禁止指令重排，保证多线程下的安全性</p>
<p>分析：</p>
<p>​        上述代码存在什么问题？</p>
<pre><code>     主要是该代码，在多线程下存在问题：
</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lazyMan = <span class="keyword">new</span> LazyMan();<span class="comment">//不是一个原子性操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  1、分配内存空间</span></span><br><span class="line"><span class="comment">  2、执行构造方法，初始化对象</span></span><br><span class="line"><span class="comment">  3、把这个对象指向这个空间</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>​        当一个线程new一个对象过程时，我们希望该线程按照123的步骤执行，但是在CPU内部，不影响单线程的结果的情况下，是会发生指令重排的事情，因此CPU的内部结果执行顺序很有可能是132。</p>
<p>​        即线程A的执行步骤可能是132，但在线程A还未完成构造（2）时，线程B执行getInstance()操作，发现该对象已经指向某一个空间，线程B会返回lazyMan对象，但lazyMan还没有完成构造。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:ok!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//volatile关键字 禁止指令重排</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 双重检测锁 的懒汉式单例 DCL</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lazyMan == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(lazyMan == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    lazyMan = <span class="keyword">new</span> LazyMan();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//多线程并发</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span> ;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                LazyMan.getInstance();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-2-4-静态内部类"><a href="#1-2-4-静态内部类" class="headerlink" title="1.2.4 静态内部类"></a>1.2.4 静态内部类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span></span>&#123;</span><br><span class="line">    <span class="comment">//构造器私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Holder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> statuic Holder <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.HOLDER;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Holder HOLDER = <span class="keyword">new</span> Holder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-3-反射破坏单例模式"><a href="#1-3-反射破坏单例模式" class="headerlink" title="1.3 反射破坏单例模式"></a>1.3 反射破坏单例模式</h3><h4 id="1-3-1-反射破坏单例"><a href="#1-3-1-反射破坏单例" class="headerlink" title="1.3.1 反射破坏单例"></a>1.3.1 反射破坏单例</h4><blockquote>
<p>（1）反射破坏单例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Lazy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:ok!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//有参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">(Integer hello)</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+hello+<span class="string">&quot;:hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//volatile关键字 禁止指令重排</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 双重检测锁 的懒汉式单例 DCL</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lazyMan == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(lazyMan == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    lazyMan = <span class="keyword">new</span> LazyMan();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射破坏单例模式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        LazyMan instance = LazyMan.getInstance();<span class="comment">//创建一个类对象</span></span><br><span class="line">		<span class="comment">//获取LazyMan的无参构造函数-----（1）获取无参构造器</span></span><br><span class="line">        Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;declaredConstructor构造器签名:&quot;</span>+declaredConstructor.toString());</span><br><span class="line">        <span class="comment">//获取LazyMan的有参构造函数（这里要传的是类名）</span></span><br><span class="line">        Constructor&lt;LazyMan&gt; declaredConstructor1 = LazyMan.class.getDeclaredConstructor(Integer.class);</span><br><span class="line">        <span class="comment">//修改访问权限-----（2）修改构造方法的访问权限</span></span><br><span class="line">        declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">     	<span class="comment">//调用构造方法-----（3）调用构造方法，创建LazyMan的对象实例</span></span><br><span class="line">        LazyMan instance2 = declaredConstructor.newInstance();</span><br><span class="line">        LazyMan instance3 = declaredConstructor1.newInstance(<span class="number">2</span>);</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line">        System.out.println(instance3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 输出结果:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">main:ok!</span><br><span class="line">declaredConstructor构造器签名:<span class="keyword">private</span> com.ldg.GoF23.single.LazyMan()</span><br><span class="line">main:ok!</span><br><span class="line">main2:hello!</span><br><span class="line">com.ldg.GoF23.single.LazyMan@2a84aee7</span><br><span class="line">com.ldg.GoF23.single.LazyMan<span class="meta">@a09ee92</span></span><br><span class="line">com.ldg.GoF23.single.LazyMan@30f39991</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<p>​        （1）LazyMan.class.getDeclaredConstructor需要抛出异常，所以添加了throws Exception</p>
<p>​        （2）LazyMan.class.getDeclaredConstructor存在有参和无参的情况，有参函数的需要用装箱表示，如Integer；在使用构造进行传参时，要传Integer.class；</p>
<p>​        （3）三个instance的输出不一致，就表示单例模式被破坏</p>
</blockquote>
<h4 id="1-3-2-单例防止反射破坏"><a href="#1-3-2-单例防止反射破坏" class="headerlink" title="1.3.2 单例防止反射破坏"></a>1.3.2 单例防止反射破坏</h4><blockquote>
<p>对私有构造器添加synchronized类锁，防止反射破坏单例</p>
<p>双重检验锁升级为了三重检测锁</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 添加synchronized锁，防止反射破坏单例</span></span><br><span class="line">        <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">            <span class="keyword">if</span>(lazyMan != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;不要试图使用反射破坏异常！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">(Integer hello)</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+hello+<span class="string">&quot;:hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//volatile关键字 禁止指令重排</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 双重检测锁 的懒汉式单例 DCL</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lazyMan == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(lazyMan == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    lazyMan = <span class="keyword">new</span> LazyMan();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射破坏单例模式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        LazyMan instance = LazyMan.getInstance();<span class="comment">//创建一个类对象</span></span><br><span class="line">        <span class="comment">//获取LazyMan的无参构造函数-----（1）获取无参构造器</span></span><br><span class="line">        Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;declaredConstructor构造器签名:&quot;</span>+declaredConstructor.toString());</span><br><span class="line">        <span class="comment">//获取LazyMan的有参构造函数（这里要传的是类名）</span></span><br><span class="line">        Constructor&lt;LazyMan&gt; declaredConstructor1 = LazyMan.class.getDeclaredConstructor(Integer.class);</span><br><span class="line">        <span class="comment">//修改访问权限-----（2）修改构造方法的访问权限</span></span><br><span class="line">        declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//调用构造方法-----（3）调用构造方法，创建LazyMan的对象实例</span></span><br><span class="line">        LazyMan instance2 = declaredConstructor.newInstance();</span><br><span class="line">        LazyMan instance3 = declaredConstructor1.newInstance(<span class="number">2</span>);</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line">        System.out.println(instance3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：</p>
<p><img src="/2021/05/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20210531231607722.png" alt="image-20210531231607722"></p>
<p>分析：</p>
<p>​        三重检验锁的第一个instance实例是通过类的getInstance()获取的，若完全不用类进行获取，三重检验锁是否仍然可以防止反射破坏呢？</p>
</blockquote>
<h4 id="1-3-3-反射创建对象破坏三重检验锁单例"><a href="#1-3-3-反射创建对象破坏三重检验锁单例" class="headerlink" title="1.3.3 反射创建对象破坏三重检验锁单例"></a>1.3.3 反射创建对象破坏三重检验锁单例</h4><blockquote>
<p>不通过 LazyMan.getInstance()获取实例，而直接用反射获取实例，结果又不一致</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 添加synchronized锁，防止反射破坏单例</span></span><br><span class="line">        <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">            <span class="keyword">if</span>(lazyMan != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;不要试图使用反射破坏异常！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">(Integer hello)</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+hello+<span class="string">&quot;:hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//volatile关键字 禁止指令重排</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 双重检测锁 的懒汉式单例 DCL</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lazyMan == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(lazyMan == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    lazyMan = <span class="keyword">new</span> LazyMan();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射破坏单例模式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//LazyMan instance = LazyMan.getInstance();//创建一个类对象</span></span><br><span class="line">        <span class="comment">//获取LazyMan的无参构造函数-----（1）获取无参构造器</span></span><br><span class="line">        Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;declaredConstructor构造器签名:&quot;</span>+declaredConstructor.toString());</span><br><span class="line">        <span class="comment">//获取LazyMan的有参构造函数（这里要传的是类名）</span></span><br><span class="line">        Constructor&lt;LazyMan&gt; declaredConstructor1 = LazyMan.class.getDeclaredConstructor(Integer.class);</span><br><span class="line">        <span class="comment">//修改访问权限-----（2）修改构造方法的访问权限</span></span><br><span class="line">        declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//调用构造方法-----（3）调用构造方法，创建LazyMan的对象实例</span></span><br><span class="line">        LazyMan instance = declaredConstructor.newInstance();</span><br><span class="line">        LazyMan instance2 = declaredConstructor.newInstance();</span><br><span class="line">        LazyMan instance3 = declaredConstructor1.newInstance(<span class="number">2</span>);</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line">        System.out.println(instance3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">declaredConstructor构造器签名:<span class="keyword">private</span> single.LazyMan()</span><br><span class="line">main2:hello!</span><br><span class="line">single.LazyMan@1b6d3586</span><br><span class="line">single.LazyMan@4554617c</span><br><span class="line">single.LazyMan@74a14482	</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="1-3-4-红绿灯方法防止反射对象破坏单例"><a href="#1-3-4-红绿灯方法防止反射对象破坏单例" class="headerlink" title="1.3.4 红绿灯方法防止反射对象破坏单例"></a>1.3.4 红绿灯方法防止反射对象破坏单例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> ldg = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//构造器私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 添加synchronized锁，防止反射破坏单例</span></span><br><span class="line">        <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ldg == <span class="keyword">false</span>)&#123;</span><br><span class="line">                ldg = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;不要试图使用反射破坏异常！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">(Integer hello)</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+hello+<span class="string">&quot;:hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//volatile关键字 禁止指令重排</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 双重检测锁 的懒汉式单例 DCL</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lazyMan == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(lazyMan == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    lazyMan = <span class="keyword">new</span> LazyMan();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射破坏单例模式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//LazyMan instance = LazyMan.getInstance();//创建一个类对象</span></span><br><span class="line">        <span class="comment">//获取LazyMan的无参构造函数-----（1）获取无参构造器</span></span><br><span class="line">        Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;declaredConstructor构造器签名:&quot;</span>+declaredConstructor.toString());</span><br><span class="line">        <span class="comment">//获取LazyMan的有参构造函数（这里要传的是类名）</span></span><br><span class="line">        Constructor&lt;LazyMan&gt; declaredConstructor1 = LazyMan.class.getDeclaredConstructor(Integer.class);</span><br><span class="line">        <span class="comment">//修改访问权限-----（2）修改构造方法的访问权限</span></span><br><span class="line">        declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//调用构造方法-----（3）调用构造方法，创建LazyMan的对象实例</span></span><br><span class="line">        LazyMan instance = declaredConstructor.newInstance();</span><br><span class="line">        LazyMan instance2 = declaredConstructor.newInstance();</span><br><span class="line">        LazyMan instance3 = declaredConstructor1.newInstance(<span class="number">2</span>);</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line">        System.out.println(instance3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：如下图所示，即使使用构造类创建的对象，通过这种红绿灯方式，也可以避免其破坏单例</p>
<p><img src="/2021/05/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20210531234405245.png" alt="image-20210531234405245"></p>
</blockquote>
<h4 id="1-3-5-反编译破解红绿灯方法，破坏单例"><a href="#1-3-5-反编译破解红绿灯方法，破坏单例" class="headerlink" title="1.3.5 反编译破解红绿灯方法，破坏单例"></a>1.3.5 反编译破解红绿灯方法，破坏单例</h4><blockquote>
<p>假设代码被反编译，能找到其中的属性值：ldg，并对其进行破坏，是否仍然可以破坏单例呢？</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> ldg = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//构造器私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 添加synchronized锁，防止反射破坏单例</span></span><br><span class="line">        <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ldg == <span class="keyword">false</span>)&#123;</span><br><span class="line">                ldg = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;不要试图使用反射破坏异常！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">(Integer hello)</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+hello+<span class="string">&quot;:hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//volatile关键字 禁止指令重排</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 双重检测锁 的懒汉式单例 DCL</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lazyMan == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(lazyMan == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    lazyMan = <span class="keyword">new</span> LazyMan();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射破坏单例模式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//LazyMan instance = LazyMan.getInstance();//创建一个类对象</span></span><br><span class="line"></span><br><span class="line">        Field ldg = LazyMan.class.getDeclaredField(<span class="string">&quot;ldg&quot;</span>);<span class="comment">//假设已知ldg的字段名</span></span><br><span class="line">        ldg.setAccessible(<span class="keyword">true</span>);<span class="comment">//破坏其私有权限</span></span><br><span class="line">        <span class="comment">//获取LazyMan的无参构造函数-----（1）获取无参构造器</span></span><br><span class="line">        Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;declaredConstructor构造器签名:&quot;</span>+declaredConstructor.toString());</span><br><span class="line">        <span class="comment">//获取LazyMan的有参构造函数（这里要传的是类名）</span></span><br><span class="line">        Constructor&lt;LazyMan&gt; declaredConstructor1 = LazyMan.class.getDeclaredConstructor(Integer.class);</span><br><span class="line">        <span class="comment">//修改访问权限-----（2）修改构造方法的访问权限</span></span><br><span class="line">        declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//调用构造方法-----（3）调用构造方法，创建LazyMan的对象实例</span></span><br><span class="line">        LazyMan instance = declaredConstructor.newInstance();</span><br><span class="line"></span><br><span class="line">        ldg.set(instance,<span class="keyword">false</span>);<span class="comment">//将第一个对象的值改为false</span></span><br><span class="line">        LazyMan instance2 = declaredConstructor.newInstance();</span><br><span class="line">        LazyMan instance3 = declaredConstructor1.newInstance(<span class="number">2</span>);</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line">        System.out.println(instance3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：如下所示，单例又被破坏</p>
<pre><code>    declaredConstructor构造器签名:private single.LazyMan()
    main2:hello!
    single.LazyMan@4554617c
    single.LazyMan@74a14482
    single.LazyMan@1540e19d
</code></pre></blockquote>
<h4 id="1-3-6-源码分析"><a href="#1-3-6-源码分析" class="headerlink" title="1.3.6 源码分析"></a>1.3.6 源码分析</h4><blockquote>
<p>通过对newInstance()的源码分析，发现反射不能破坏枚举类型</p>
</blockquote>
<p><img src="/2021/05/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20210531235452051.png" alt="image-20210531235452051"></p>
<blockquote>
<p>（1）在IDEA工具中，查看class源码，发现枚举类的构造函数是无参构造</p>
<p><img src="/2021/05/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20210604222914414.png" alt="image-20210604222914414"></p>
<p>（2）先获取一个枚举类，然后用反射实例化一个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// enum 是什么？本身也是一个Class类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">EnumSingle</span> </span>&#123;</span><br><span class="line">    INSATNCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EnumSingle <span class="title">getInsatnce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSATNCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        EnumSingle instance = EnumSingle.INSATNCE;</span><br><span class="line">        <span class="comment">//使用无参构造函数</span></span><br><span class="line">        Constructor&lt;EnumSingle&gt; declaredConstructor = EnumSingle.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        EnumSingle instance2 = declaredConstructor.newInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p>​        如下所示，异常说明，类中没有该构造器方法，但Idea中的class类显示为无参构造，且报错信息与源码中的破坏信息不一致，因此需要进一步深究其原因。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.NoSuchMethodException: single.EnumSingle.&lt;init&gt;()</span><br><span class="line">at java.lang.Class.getConstructor0(Class.java:<span class="number">3082</span>)</span><br><span class="line">at java.lang.Class.getDeclaredConstructor(Class.java:<span class="number">2178</span>)</span><br><span class="line">at single.Test.main(EnumSingle.java:<span class="number">28</span>)</span><br></pre></td></tr></table></figure>
<p>（3）打开build后的class类源文件所在位置，并在该目录下，打开cmd窗口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javap -p EnumSingle.class</span><br></pre></td></tr></table></figure>
<p>从EnumSingle的源码中，可以看到，枚举是一个class类，继承一个类，且其构造参数也是无参构造参数，但是程序的结果却和我们想要的结果：<strong>Cannot reflectively create enum objects</strong> 不一致，因此需要使用专有的反编译工具</p>
<p><img src="/2021/05/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20210604224341255.png" alt="image-20210604224341255"></p>
<p>（4）使用jad反编译工具，反编译类（<a href="http://www.javadecompilers.com/jad">jad下载</a>）</p>
<p>​        将下载好的jad.exe和class文件放在同一层级，并使用如下代码反编译类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jad -sjava EnumSingle.class</span><br></pre></td></tr></table></figure>
<p><img src="/2021/05/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20210604225217110.png" alt="image-20210604225217110"></p>
<p>​    查看反编译后的java文件，发现其参数是有参构造函数</p>
<p><img src="/2021/05/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20210604225349433.png" alt="image-20210604225349433"></p>
<p>（5）修改反射代码中的无参为有参</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">EnumSingle</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EnumSingle <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        EnumSingle instance = EnumSingle.INSTANCE;</span><br><span class="line">        Constructor&lt;EnumSingle&gt; declaredConstructor = EnumSingle.class.getDeclaredConstructor(String.class,<span class="keyword">int</span>.class);<span class="comment">//有参构造函数</span></span><br><span class="line">        declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        EnumSingle instance2 = declaredConstructor.newInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p>​        该结果才与最初始的源码错误保持一致，且证明了反射不能破坏枚举的单例类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.IllegalArgumentException: Cannot reflectively create <span class="class"><span class="keyword">enum</span> <span class="title">objects</span></span></span><br><span class="line"><span class="class">	<span class="title">at</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">reflect</span>.<span class="title">Constructor</span>.<span class="title">newInstance</span>(<span class="title">Constructor</span>.<span class="title">java</span>:417)</span></span><br><span class="line"><span class="class">	<span class="title">at</span> <span class="title">com</span>.<span class="title">ldg</span>.<span class="title">GoF23</span>.<span class="title">single</span>.<span class="title">Test</span>.<span class="title">main</span>(<span class="title">EnumSingle</span>.<span class="title">java</span>:18)</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.runoob.com/design-pattern/singleton-pattern.html">菜鸟教程单例模式</a></p>
]]></content>
      <tags>
        <tag>设计模型</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（三）之创建型模式-建造者模式&amp;原型模式</title>
    <url>/2021/06/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、建造者模式"><a href="#一、建造者模式" class="headerlink" title="一、建造者模式"></a>一、建造者模式</h1><blockquote>
<p>定义：将一个复杂对象的<strong>构建</strong>与它的<strong>表示</strong>分离，使得同样的构建过程可以创建不同的表示</p>
<p>主要作用：在用户不知道对象的建造过程和细节的情况下，就可以直接创建复杂的对象</p>
</blockquote>
<h2 id="1、简单例子说明"><a href="#1、简单例子说明" class="headerlink" title="1、简单例子说明"></a>1、简单例子说明</h2><blockquote>
<p>1、工厂（建造者模式）：负责制造汽车（组装过程和细节在工厂内）</p>
<p>2、汽车购买者（用户）：用户只需要说出需要的型号（对象的类型和内容），然后直接购买就可以使用（不需要知道汽车是怎么组装的（车轮、车门、发动机、方向盘等等））</p>
<p>以造房为例：</p>
<p>​    假设造房简化为如下步骤：</p>
<p>​        1、地基</p>
<p>​        2、钢筋工程</p>
<p>​        3、铺电线</p>
<p>​        4、粉刷</p>
<p>​    则其流程基本可以概括为：建筑公司或工程承包商（<strong>指挥者</strong>）—&gt;指挥工人（<strong>具体建造者</strong>）—&gt;造房子（<strong>产品</strong>），最后验收</p>
</blockquote>
<h2 id="2、建筑者模式流程图"><a href="#2、建筑者模式流程图" class="headerlink" title="2、建筑者模式流程图"></a>2、建筑者模式流程图</h2><blockquote>
<p>如下图所示，主要由<strong>指挥者</strong>指挥<strong>建造者</strong>来生产<strong>产品</strong></p>
<p>假设下图中抽象的Builder为楼：则具体的Builder（工人）可以建造不同的产品，比如平房、别墅等等。</p>
<p>这也就对应了前面所说的：<strong>同样的构建过程可以创建不同的表示</strong></p>
</blockquote>
<p><img src="/2021/06/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/截图.png" alt="img"></p>
<h2 id="3、代码实例（一）"><a href="#3、代码实例（一）" class="headerlink" title="3、代码实例（一）"></a>3、代码实例（一）</h2><h3 id="3-1-Product类：产品类"><a href="#3-1-Product类：产品类" class="headerlink" title="3.1 Product类：产品类"></a>3.1 Product类：产品类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//产品：房子</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String buildA;<span class="comment">//地基</span></span><br><span class="line">    <span class="keyword">private</span> String buildB;<span class="comment">//钢筋工程</span></span><br><span class="line">    <span class="keyword">private</span> String buildC;<span class="comment">//铺电线</span></span><br><span class="line">    <span class="keyword">private</span> String buildD;<span class="comment">//粉刷</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBuildA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buildA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBuildA</span><span class="params">(String buildA)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.buildA = buildA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBuildB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buildB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBuildB</span><span class="params">(String buildB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.buildB = buildB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBuildC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buildC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBuildC</span><span class="params">(String buildC)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.buildC = buildC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBuildD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buildD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBuildD</span><span class="params">(String buildD)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.buildD = buildD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Product&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;buildA=&#x27;&quot;</span> + buildA + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, buildB=&#x27;&quot;</span> + buildB + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, buildC=&#x27;&quot;</span> + buildC + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, buildD=&#x27;&quot;</span> + buildD + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-Builder类：抽象类"><a href="#3-2-Builder类：抽象类" class="headerlink" title="3.2 Builder类：抽象类"></a>3.2 Builder类：抽象类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象的建造者:方法</span></span><br><span class="line"><span class="comment">//abstract：该关键字用来表达抽象，抽象类不能被实例化，无法确定为一个具体的对象，</span></span><br><span class="line"><span class="comment">//abstract类不能使用final关键字修饰，因为final修饰的类无法被继承，而抽象类通过继承实现抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildA</span><span class="params">()</span></span>;<span class="comment">//地基</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildB</span><span class="params">()</span></span>;<span class="comment">//钢筋工程</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildC</span><span class="params">()</span></span>;<span class="comment">//铺电线0</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildD</span><span class="params">()</span></span>;<span class="comment">//粉刷</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//完工：得到产品</span></span><br><span class="line">    <span class="comment">//抽象方法：没有自己的主体，不能用private修饰，因为抽象方法必须被子类实现，而private权限对于子类是无法访问的</span></span><br><span class="line">    <span class="comment">//也不能用static修饰，static修饰的方法可以通过类名调用，而抽象方法没有主体，没有任何业务逻辑，调用也就毫无意义</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Product <span class="title">getProduct</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>分析：</p>
<p>​        <strong>为什么要使用抽象类？</strong></p>
<p>​        楼房是千差万别的，楼房的外形、层数、内部房间的数量等等，但对于建造者来说，抽象出来的建筑流程是确定的，而每个流程实现的具体细节则是经常变化的</p>
</blockquote>
<h3 id="3-3-Worker类：工人类"><a href="#3-3-Worker类：工人类" class="headerlink" title="3.3 Worker类：工人类"></a>3.3 Worker类：工人类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体的建造者：工人</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Product product;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Worker</span><span class="params">()</span></span>&#123;</span><br><span class="line">        product = <span class="keyword">new</span> Product();<span class="comment">//由工人来生产产品</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setBuildA(<span class="string">&quot;地基&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;地基&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setBuildB(<span class="string">&quot;钢筋工程&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;钢筋工程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setBuildC(<span class="string">&quot;铺电线&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;铺电线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setBuildD(<span class="string">&quot;粉刷&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;粉刷&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Product <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-Director类：指挥类"><a href="#3-4-Director类：指挥类" class="headerlink" title="3.4 Director类：指挥类"></a>3.4 Director类：指挥类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指挥：核心。负责指挥构建一个工程，工程如何构建，由它决定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="comment">//指挥工人按照顺序构建房子</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">build</span><span class="params">(Builder builder)</span></span>&#123;</span><br><span class="line">        builder.buildA();</span><br><span class="line">        builder.buildB();</span><br><span class="line">        builder.buildC();</span><br><span class="line">        builder.buildD();</span><br><span class="line">        <span class="keyword">return</span> builder.getProduct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-5-Test类：测试类"><a href="#3-5-Test类：测试类" class="headerlink" title="3.5 Test类：测试类"></a>3.5 Test类：测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//指挥</span></span><br><span class="line">        Director director = <span class="keyword">new</span> Director();</span><br><span class="line">        <span class="comment">//指挥 具体的工人完成产品</span></span><br><span class="line">        Product build = director.build(<span class="keyword">new</span> Worker());</span><br><span class="line">        System.out.println(build.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">地基</span><br><span class="line">钢筋工程</span><br><span class="line">铺电线</span><br><span class="line">粉刷</span><br><span class="line">Product&#123;buildA=<span class="string">&#x27;地基&#x27;</span>, buildB=<span class="string">&#x27;钢筋工程&#x27;</span>, buildC=<span class="string">&#x27;铺电线&#x27;</span>, buildD=<span class="string">&#x27;粉刷&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<p>​    在指挥类中，按照不同的顺序构建房子，则最终的输出结果不一样，因此能将一个复杂对象的<strong>构建</strong>与它的<strong>表示</strong>分离</p>
<p>​    在测试类中，通过不同的工人，可以创造不同的房子，但其流程不变，也就是：<strong>使得同样的构建过程可以创建不同的表示</strong>。</p>
</blockquote>
<h2 id="4、代码实例（二）"><a href="#4、代码实例（二）" class="headerlink" title="4、代码实例（二）"></a>4、代码实例（二）</h2><blockquote>
<p>代码实例（一）是建造者模式的常规用法，指挥类（Director）在建造者模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用者返回完整的产品类，但有些情况下需要简化系统结构，可以把Director和抽象建造者进行结合。</p>
<p>比如：麦当劳的套餐，服务员（具体建造者）可以随意搭配任意几种产品（零件）组成一款套餐（产品），然后出售给客户。比第一种方式少了指挥者，主要是因为第二种方式把指挥者交给用户来操作，使得产品的创建更加简单灵活。</p>
</blockquote>
<h3 id="4-1-Product类：产品类"><a href="#4-1-Product类：产品类" class="headerlink" title="4.1 Product类：产品类"></a>4.1 Product类：产品类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//产品：套餐</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String BuildA = <span class="string">&quot;汉堡&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String BuildB = <span class="string">&quot;可乐&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String BuildC = <span class="string">&quot;薯条&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String BuildD = <span class="string">&quot;甜点&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBuildA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BuildA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBuildA</span><span class="params">(String buildA)</span> </span>&#123;</span><br><span class="line">        BuildA = buildA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBuildB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BuildB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBuildB</span><span class="params">(String buildB)</span> </span>&#123;</span><br><span class="line">        BuildB = buildB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBuildC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BuildC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBuildC</span><span class="params">(String buildC)</span> </span>&#123;</span><br><span class="line">        BuildC = buildC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBuildD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BuildD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBuildD</span><span class="params">(String buildD)</span> </span>&#123;</span><br><span class="line">        BuildD = buildD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Product&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;BuildA=&#x27;&quot;</span> + BuildA + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, BuildB=&#x27;&quot;</span> + BuildB + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, BuildC=&#x27;&quot;</span> + BuildC + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, BuildD=&#x27;&quot;</span> + BuildD + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-Builder类：抽象类"><a href="#4-2-Builder类：抽象类" class="headerlink" title="4.2 Builder类：抽象类"></a>4.2 Builder类：抽象类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//建造者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span>  Builder <span class="title">buildA</span><span class="params">(String msg)</span></span>;<span class="comment">//汉堡</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span>  Builder <span class="title">buildB</span><span class="params">(String msg)</span></span>;<span class="comment">//可乐</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span>  Builder <span class="title">buildC</span><span class="params">(String msg)</span></span>;<span class="comment">//薯条</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span>  Builder <span class="title">buildD</span><span class="params">(String msg)</span></span>;<span class="comment">//甜点</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Product <span class="title">getProduct</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-Worker类：建造类"><a href="#4-3-Worker类：建造类" class="headerlink" title="4.3 Worker类：建造类"></a>4.3 Worker类：建造类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体的建造者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Product product;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">()</span></span>&#123;</span><br><span class="line">        product = <span class="keyword">new</span> Product();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Builder <span class="title">buildA</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        product.setBuildA(msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Builder <span class="title">buildB</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        product.setBuildB(msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Builder <span class="title">buildC</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        product.setBuildC(msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Builder <span class="title">buildD</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        product.setBuildD(msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Product <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-4-Test类：测试类"><a href="#4-4-Test类：测试类" class="headerlink" title="4.4 Test类：测试类"></a>4.4 Test类：测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//服务员</span></span><br><span class="line">        Worker worker = <span class="keyword">new</span> Worker();</span><br><span class="line">        <span class="comment">//链式编程：在原来的基础上，可以自由组合，如果不组合，也有默认套餐</span></span><br><span class="line">        Product product = worker.buildA(<span class="string">&quot;全家桶&quot;</span>).buildB(<span class="string">&quot;雪碧&quot;</span>)</span><br><span class="line">                .getProduct();</span><br><span class="line"></span><br><span class="line">        System.out.println(product.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Product&#123;BuildA=<span class="string">&#x27;全家桶&#x27;</span>, BuildB=<span class="string">&#x27;雪碧&#x27;</span>, BuildC=<span class="string">&#x27;薯条&#x27;</span>, BuildD=<span class="string">&#x27;甜点&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="建造者模式优缺点"><a href="#建造者模式优缺点" class="headerlink" title="建造者模式优缺点"></a>建造者模式优缺点</h2><blockquote>
<p>优点：</p>
<p>​        1、产品的建造和表示分离，实现了解耦。使用建造者模式可以使客户端不必知道产品内部组成的细节。</p>
<p>​        2、将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰。    </p>
<p>​        3、具体的建造者之间是相互独立的，这有利于系统的扩展。增加新的具体建造者无需修改原有类库的代码，符合“开闭原则”。</p>
<p>缺点：</p>
<p>​        1、建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</p>
<p>​        2、如果产品的内部变化复杂，可能会导致需要定义很多具体建造者来实现这种变化，导致系统变得很庞大。</p>
</blockquote>
<h2 id="建造者模式VS抽象工厂模式"><a href="#建造者模式VS抽象工厂模式" class="headerlink" title="建造者模式VS抽象工厂模式"></a>建造者模式VS抽象工厂模式</h2><blockquote>
<p>1、与抽象工厂模式相比，建造者模式返回一个组装好的完整产品。而抽象工程模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品簇。</p>
<p>2、在抽象工厂模式中，客户端<strong>实例化工厂类</strong>，然后调用工厂方法获取所需产品对象。而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，报告对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。</p>
<p>3、如果将抽象工厂模式看成汽车配件生产工厂，生产一个产品簇的产品。那么建造者模式就是一个汽车组装工厂，通过对不同的组件可以返回一辆完整的汽车。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>产品类：一般是一个较为复杂的对象，也就是说创建对象的过程比较复杂，一般会有比较多的代码量。</p>
<p>抽象建造者：引入抽象建造者的目的，是为了将建造的具体过程交与它的子类来实现。这样更容易扩展。一般至少会有两个抽象方法，一个用来建造产品，一个用来返回产品。</p>
<p>建造者：实现抽象类的所有未实现的方法，具体来说一般是两项任务：组件产品，返回组建好的产品。</p>
<p>指挥类：负责调用适当的建造者来组建产品，指挥类一般不与产品类发生依赖关系，与指挥类交互的是建造者类。一般来说，指挥类被用来封装程序中易变的部分。</p>
</blockquote>
<h1 id="二、原型模式"><a href="#二、原型模式" class="headerlink" title="二、原型模式"></a>二、原型模式</h1><blockquote>
<p>原型模式用于创建重复的对象，同时又能保证性能。</p>
</blockquote>
<h2 id="1、代码实例"><a href="#1、代码实例" class="headerlink" title="1、代码实例"></a>1、代码实例</h2><h3 id="1-1-浅克隆"><a href="#1-1-浅克隆" class="headerlink" title="1.1 浅克隆"></a>1.1 浅克隆</h3><h4 id="1-1-1-Video类—原型类"><a href="#1-1-1-Video类—原型类" class="headerlink" title="1.1.1 Video类—原型类"></a>1.1.1 Video类—原型类</h4><blockquote>
<p>主要：</p>
<p>​    1、实现一个接口：Cloneable</p>
<p>​    2、重写一个方法：clone()</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  1、实现一个接口 Cloneable</span></span><br><span class="line"><span class="comment">  2、重写一个方法 clone()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Date createDateTime;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//调用clone()方法时，需要抛出CloneNotSupportedException异常</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Video</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Video</span><span class="params">(String name,Date createDateTime)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.createDateTime = createDateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createDateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateDateTime</span><span class="params">(Date createDateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createDateTime = createDateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Video&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, createDateTime=&quot;</span> + createDateTime +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="1-1-2-Bilibili类"><a href="#1-1-2-Bilibili类" class="headerlink" title="1.1.2  Bilibili类"></a>1.1.2  Bilibili类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bilibili</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="comment">//原型对象 v1</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        Video v1 = <span class="keyword">new</span> Video(<span class="string">&quot;狂神说Java&quot;</span>,date);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1=&gt;&quot;</span>+v1);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1=&gt;hash:&quot;</span>+v1.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// v1 克隆v2</span></span><br><span class="line">        <span class="comment">//克隆出来的对象和原来是一模一样的</span></span><br><span class="line">        Video v2 = (Video) v1.clone();</span><br><span class="line">        System.out.println(<span class="string">&quot;v2=&gt;&quot;</span>+v2);</span><br><span class="line">        System.out.println(<span class="string">&quot;v2=&gt;hash:&quot;</span>+v2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">v1=&gt;Video&#123;name=<span class="string">&#x27;狂神说Java&#x27;</span>, createDateTime=Sat Jun <span class="number">19</span> <span class="number">12</span>:<span class="number">34</span>:<span class="number">10</span> CST <span class="number">2021</span>&#125;</span><br><span class="line">v1=&gt;hash:<span class="number">1735600054</span></span><br><span class="line">v2=&gt;Video&#123;name=<span class="string">&#x27;狂神说Java&#x27;</span>, createDateTime=Sat Jun <span class="number">19</span> <span class="number">12</span>:<span class="number">34</span>:<span class="number">10</span> CST <span class="number">2021</span>&#125;</span><br><span class="line">v2=&gt;hash:<span class="number">21685669</span></span><br></pre></td></tr></table></figure>
<p>但这种初始简单克隆模式存在一个问题，即该模式是一个浅克隆。</p>
<p>浅克隆：新对象的基础类型的变量值与原对象相同，而特殊对象，即非八大基本类型的对象与原对象指向同一内存空间，不管新老对象谁对这段内存空间进行操作都会影响到另一个。</p>
</blockquote>
<p><img src="/2021/06/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20210619124330093.png" alt="image-20210619124330093"></p>
<blockquote>
<p>如果将上诉的Bilibili类进行修改，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bilibili</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="comment">//原型对象 v1</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        Video v1 = <span class="keyword">new</span> Video(<span class="string">&quot;狂神说Java&quot;</span>,date);</span><br><span class="line">        <span class="comment">//调用clone方法需要抛出异常CloneNotSupportedException</span></span><br><span class="line">        Video v2 = (Video) v1.clone(); <span class="comment">// v1 克隆v2</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;v1=&gt;&quot;</span>+v1);</span><br><span class="line">        System.out.println(<span class="string">&quot;v2=&gt;&quot;</span>+v2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">        date.setTime(<span class="number">123465645</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1=&gt;&quot;</span>+v1);</span><br><span class="line">        System.out.println(<span class="string">&quot;v2=&gt;&quot;</span>+v2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">v1=&gt;Video&#123;name=<span class="string">&#x27;狂神说Java&#x27;</span>, createDateTime=Sat Jun <span class="number">19</span> <span class="number">12</span>:<span class="number">47</span>:<span class="number">32</span> CST <span class="number">2021</span>&#125;</span><br><span class="line">v2=&gt;Video&#123;name=<span class="string">&#x27;狂神说Java&#x27;</span>, createDateTime=Sat Jun <span class="number">19</span> <span class="number">12</span>:<span class="number">47</span>:<span class="number">32</span> CST <span class="number">2021</span>&#125;</span><br><span class="line">=====================</span><br><span class="line">v1=&gt;Video&#123;name=<span class="string">&#x27;狂神说Java&#x27;</span>, createDateTime=Fri Jan <span class="number">02</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">45</span> CST <span class="number">1970</span>&#125;</span><br><span class="line">v1=&gt;Video&#123;name=<span class="string">&#x27;狂神说Java&#x27;</span>, createDateTime=Fri Jan <span class="number">02</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">45</span> CST <span class="number">1970</span>&#125;</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<p>​        修改date的值后，发现v1和v2的date值全部改变，这与我们所期望的不符，即一个修改，不影响另一个值</p>
</blockquote>
<h3 id="1-2-深克隆"><a href="#1-2-深克隆" class="headerlink" title="1.2  深克隆"></a>1.2  深克隆</h3><blockquote>
<p>深克隆：新对象除了与老对象的八大基本类型的赋值一致以外，其类类型的对象在保证赋值一致的基础上，指向的是一段新的内存空间。</p>
</blockquote>
<p><img src="/2021/06/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20210619220352293.png" alt="image-20210619220352293"></p>
<blockquote>
<p>通过修改clone方法的模式，实现深克隆</p>
</blockquote>
<h4 id="1-2-1-Video类—原型类"><a href="#1-2-1-Video类—原型类" class="headerlink" title="1.2.1 Video类—原型类"></a>1.2.1 Video类—原型类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  1、实现一个接口 Cloneable</span></span><br><span class="line"><span class="comment">  2、重写一个方法 clone()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Date createDateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">super</span>.clone();</span><br><span class="line">        <span class="comment">//通过对子对象或子成员变量clone来实现深克隆~   还可以通过序列化、反序列化实现深克隆</span></span><br><span class="line">        Video v = (Video) obj;</span><br><span class="line">        v.createDateTime = (Date) <span class="keyword">this</span>.createDateTime.clone();<span class="comment">//将这个对象的属性也进行克隆</span></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Video</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Video</span><span class="params">(String name, Date createDateTime)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.createDateTime = createDateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createDateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateDateTime</span><span class="params">(Date createDateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createDateTime = createDateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Video&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, createDateTime=&quot;</span> + createDateTime +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-2-2-Bilibili类"><a href="#1-2-2-Bilibili类" class="headerlink" title="1.2.2 Bilibili类"></a>1.2.2 Bilibili类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bilibili</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="comment">//原型对象 v1</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        Video v1 = <span class="keyword">new</span> Video(<span class="string">&quot;狂神说Java&quot;</span>,date);</span><br><span class="line">        Video v2 = (Video) v1.clone(); <span class="comment">// v1 克隆v2</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;v1=&gt;&quot;</span>+v1);</span><br><span class="line">        System.out.println(<span class="string">&quot;v2=&gt;&quot;</span>+v2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">        date.setTime(<span class="number">465478789</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1=&gt;&quot;</span>+v1);</span><br><span class="line">        System.out.println(<span class="string">&quot;v2=&gt;&quot;</span>+v2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">v1=&gt;Video&#123;name=<span class="string">&#x27;狂神说Java&#x27;</span>, createDateTime=Sat Jun <span class="number">19</span> <span class="number">23</span>:<span class="number">15</span>:<span class="number">04</span> CST <span class="number">2021</span>&#125;</span><br><span class="line">v2=&gt;Video&#123;name=<span class="string">&#x27;狂神说Java&#x27;</span>, createDateTime=Sat Jun <span class="number">19</span> <span class="number">23</span>:<span class="number">15</span>:<span class="number">04</span> CST <span class="number">2021</span>&#125;</span><br><span class="line">=====================</span><br><span class="line">v1=&gt;Video&#123;name=<span class="string">&#x27;狂神说Java&#x27;</span>, createDateTime=Tue Jan <span class="number">06</span> <span class="number">17</span>:<span class="number">17</span>:<span class="number">58</span> CST <span class="number">1970</span>&#125;</span><br><span class="line">v2=&gt;Video&#123;name=<span class="string">&#x27;狂神说Java&#x27;</span>, createDateTime=Sat Jun <span class="number">19</span> <span class="number">23</span>:<span class="number">15</span>:<span class="number">04</span> CST <span class="number">2021</span>&#125;</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<p>​        从结果中，就可以看出v1和v2的时间不同，因此，实现了原型的深克隆</p>
</blockquote>
<h3 id="序列化-amp-反序列化"><a href="#序列化-amp-反序列化" class="headerlink" title="序列化&amp;反序列化"></a>序列化&amp;反序列化</h3><blockquote>
<p>概念：</p>
<ul>
<li>序列化：把Java对象转换为字节序列的过程</li>
<li>反序列化：把字节序列恢复为Java对象的过程</li>
</ul>
<p>序列化用途：</p>
<ul>
<li>把对象得到的字节序列永久地保存到硬盘上，通常存放在一个文件中（持久化对象）</li>
<li>在网络上传送对象的字节序列（网络传输对象）</li>
</ul>
<p>序列化使用：必须实现<strong>Serializable</strong>接口</p>
</blockquote>
<h3 id="1-3-序列化实现深克隆"><a href="#1-3-序列化实现深克隆" class="headerlink" title="1.3 序列化实现深克隆"></a>1.3 序列化实现深克隆</h3><h4 id="1-3-1-Video类—原型类"><a href="#1-3-1-Video类—原型类" class="headerlink" title="1.3.1 Video类—原型类"></a>1.3.1 Video类—原型类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Date createDateTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Video</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Video</span><span class="params">(String name,Date createDateTime)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.createDateTime = createDateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//深克隆：通过对象的序列化实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        Video v = <span class="keyword">new</span> Video(); <span class="comment">//要克隆的对象</span></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos); <span class="comment">//需要抛出IO异常</span></span><br><span class="line">        oos.writeObject(<span class="keyword">this</span>);<span class="comment">//将当前这个对象以对象流的方式输出</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">        Video v1 = (Video)ois.readObject();<span class="comment">//需要抛出ClassNotFoundException异常</span></span><br><span class="line">        <span class="keyword">return</span> v1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createDateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateDateTime</span><span class="params">(Date createDateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createDateTime = createDateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Video&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, createDateTime=&quot;</span> + createDateTime +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="1-3-2-Bilibili类"><a href="#1-3-2-Bilibili类" class="headerlink" title="1.3.2 Bilibili类"></a>1.3.2 Bilibili类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bilibili</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//原型对象 v1</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">        Video v1 = <span class="keyword">new</span> Video(<span class="string">&quot;ldg原型&quot;</span>,date);</span><br><span class="line">        Video v2 = (Video)v1.deepClone(); <span class="comment">//需要抛出IOException, ClassNotFoundException异常</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;v1=&gt;&quot;</span>+v1);</span><br><span class="line">        System.out.println(<span class="string">&quot;v2=&gt;&quot;</span>+v2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======================&quot;</span>);</span><br><span class="line">        date.setTime(<span class="number">45547456</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1=&gt;&quot;</span>+v1);</span><br><span class="line">        System.out.println(<span class="string">&quot;v2=&gt;&quot;</span>+v2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">v1=&gt;Video&#123;name=<span class="string">&#x27;ldg原型&#x27;</span>, createDateTime=Tue Jun <span class="number">22</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">27</span> CST <span class="number">2021</span>&#125;</span><br><span class="line">v2=&gt;Video&#123;name=<span class="string">&#x27;ldg原型&#x27;</span>, createDateTime=Tue Jun <span class="number">22</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">27</span> CST <span class="number">2021</span>&#125;</span><br><span class="line">======================</span><br><span class="line">v1=&gt;Video&#123;name=<span class="string">&#x27;ldg原型&#x27;</span>, createDateTime=Thu Jan <span class="number">01</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">07</span> CST <span class="number">1970</span>&#125;</span><br><span class="line">v2=&gt;Video&#123;name=<span class="string">&#x27;ldg原型&#x27;</span>, createDateTime=Tue Jun <span class="number">22</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">27</span> CST <span class="number">2021</span>&#125;</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<p>​    通过序列化与反序列化的方式，也可以实现深克隆</p>
</blockquote>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>浅克隆：克隆对象的值相同，且克隆对象指向的内存空间也相同</p>
<blockquote>
<p>可通过实现Cloneable接口和重写clone方法实现</p>
</blockquote>
</li>
<li><p>深克隆：克隆对象的值相同，且克隆对象指向的内存空间不相同</p>
<blockquote>
<ol>
<li><p>实现Cloneable接口和重写clone方法实现</p>
<p>在重写clone方法时，对子对象也需要克隆。比如A1包含A2，要想真正实现A1的深克隆，则还需要克隆A2</p>
</li>
<li><p>通过序列化和反序列化的方式实现克隆</p>
<p>需要实现Serializable接口</p>
<ul>
<li>序列化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//序列化</span></span><br><span class="line">      ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">      ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos); <span class="comment">//需要抛出IO异常</span></span><br><span class="line">      oos.writeObject(<span class="keyword">this</span>);<span class="comment">//将当前这个对象以对象流的方式输出</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">       ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">       ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">       Video v1 = (Video)ois.readObject();<span class="comment">//需要抛出ClassNotFoundException异常</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
</blockquote>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><h4 id="Java中的序列化与反序列化"><a href="#Java中的序列化与反序列化" class="headerlink" title="Java中的序列化与反序列化"></a><a href="https://www.zhihu.com/question/47794528/answer/672095170">Java中的序列化与反序列化</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>建造者模式</tag>
        <tag>原型模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（二）之创建型模式--工厂模式</title>
    <url>/2021/06/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><blockquote>
<p>作用：实现了创建者和调用者的分离</p>
<p>核心本质：</p>
<p>​        1、实例化对象不使用new，用工厂方法代替</p>
<p>​        2、将选择实现类，创建对象统一管理和控制。从而将调用者和实现类解耦</p>
<p>详细分类：</p>
<p>​        1、简单工厂模式</p>
<p>​        2、工厂方法模式</p>
<p>​        3、抽象工厂模式</p>
<p>需满足的OOP七大原则：</p>
<p>​        1、开闭原则：对扩展开放，对修改关闭</p>
<p>​        2、依赖倒转原则：接口编程，非实现编程</p>
<p>​        3、迪米特原则：只与你直接的朋友通信，而避免与陌生人通信</p>
</blockquote>
<h2 id="一、简单工厂模式"><a href="#一、简单工厂模式" class="headerlink" title="一、简单工厂模式"></a>一、简单工厂模式</h2><h3 id="1、代码实例"><a href="#1、代码实例" class="headerlink" title="1、代码实例"></a>1、代码实例</h3><blockquote>
<p>以生产车为实例，进行代码程度理解</p>
</blockquote>
<h4 id="1-1-初始new方式实例化对象"><a href="#1-1-初始new方式实例化对象" class="headerlink" title="1.1 初始new方式实例化对象"></a>1.1 初始new方式实例化对象</h4><blockquote>
<p>总结：</p>
<p>​        开发层面：<strong>接口—&gt;实现—&gt;调用者</strong></p>
</blockquote>
<p><img src="/2021/06/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/image-20210615221046047.png" alt="image-20210615221046047"></p>
<h5 id="1-1-1-接口类：Car类"><a href="#1-1-1-接口类：Car类" class="headerlink" title="1.1.1 接口类：Car类"></a>1.1.1 接口类：Car类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="1-1-2-实现类"><a href="#1-1-2-实现类" class="headerlink" title="1.1.2 实现类"></a>1.1.2 实现类</h5><blockquote>
<p>（1）<strong>实现类：五菱宏光</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WuLing</span> <span class="keyword">implements</span>  <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//重写接口类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;五菱宏光！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）<strong>实现类：特斯拉</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tesla</span> <span class="keyword">implements</span>  <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//重写接口类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;特斯拉！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="1-1-3-调用者—Consumer"><a href="#1-1-3-调用者—Consumer" class="headerlink" title="1.1.3 调用者—Consumer"></a>1.1.3 调用者—Consumer</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         <span class="comment">//方法一：接口，需要了解所有的实现类</span></span><br><span class="line">        Car car = <span class="keyword">new</span> WuLing();</span><br><span class="line">        Car car1 = <span class="keyword">new</span> Tesla();</span><br><span class="line"></span><br><span class="line">        car.name();</span><br><span class="line">        car1.name();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">五菱宏光！</span><br><span class="line">特斯拉！</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<p>​    new方法的接口，需要了解所有的实现类</p>
<p>​    <strong><font size="5px">缺点：需要了解实现类的所有细节</font></strong></p>
</blockquote>
<h4 id="1-2-factory方法实例化对象"><a href="#1-2-factory方法实例化对象" class="headerlink" title="1.2 factory方法实例化对象"></a>1.2 factory方法实例化对象</h4><blockquote>
<p>在<strong>1.1</strong>的基础之上进行一定程度的修改</p>
<p>总结：</p>
<p>​        开发层面：<strong>接口—&gt;实现—&gt;工厂类—&gt;调用者</strong></p>
</blockquote>
<p><img src="/2021/06/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/image-20210615221112255.png" alt="image-20210615221112255"></p>
<blockquote>
<p>（1<strong>）添加工厂类：CarFactory</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(String car)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(car.equals(<span class="string">&quot;五菱&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> WuLing();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(car.equals(<span class="string">&quot;特斯拉&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Tesla();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）修改Consumer类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//方法二：使用工厂创建</span></span><br><span class="line">        Car car = CarFactory.getCar(<span class="string">&quot;五菱&quot;</span>);</span><br><span class="line">        Car car1 = CarFactory.getCar(<span class="string">&quot;特斯拉&quot;</span>);</span><br><span class="line"></span><br><span class="line">        car.name();</span><br><span class="line">        car1.name();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">五菱宏光！</span><br><span class="line">特斯拉！</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<p>​        <strong>使用工厂类方法获取实例，调用者无需关心其具体的实现细节</strong></p>
<p>​        相比较于new方式：在实现类的基础之上继续封装，通过创建工厂来完成其封装，在工厂类中实现new的方式，而调用者在调用过程中，直接跟工厂说明具体的品牌即可，而无需去关心其创建的细节</p>
<p>​        <strong><font size="5px">缺点：若想新增一个实现类，则需要在CarFactory类（工厂类）中继续添加一个else if，其不满足OOP七大原则中的开闭原则</font></strong></p>
<p>​                比如：新增大众品牌</p>
<p>​                （1）大众实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dazhong</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大众！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​                （2）修改工厂CarFactory类：违反了开闭原则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">carFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(String car)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(car.equals(<span class="string">&quot;五菱&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Wuling();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(car.equals(<span class="string">&quot;特斯拉&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Tesla();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(car.equals(<span class="string">&quot;大众&quot;</span>))&#123;<span class="comment">//需要在代码中添加一个逻辑判断</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Dazhong();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​                （3）进一步修改工厂CarFactory类，满足开闭原则</p>
<p>​                        上一步（2）的方式对方法进行了修改，违反开闭原则，因此，我们可以采取另外一种方式，使其满足开闭原则，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">carFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(String car)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(car.equals(<span class="string">&quot;五菱&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Wuling();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(car.equals(<span class="string">&quot;特斯拉&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Tesla();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(car.equals(<span class="string">&quot;大众&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Dazhong();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法二</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getWuling</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Wuling();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getTesla</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tesla();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​                        可以将方法一修改为方法二，这样在每次新增一个品牌时，只用新增一个方法功能即可。<strong>但我们希望在扩展时，该CarFactory类完全不改变。</strong>因此，该方式也不满足于我们的需求。<strong>该模式也可以称为静态工厂模式（简单工厂模式），其弊端为：增加一个新的产品，不可能不修改代码。</strong></p>
</blockquote>
<h2 id="二、工厂方法模式"><a href="#二、工厂方法模式" class="headerlink" title="二、工厂方法模式"></a>二、工厂方法模式</h2><h3 id="1、代码实例-1"><a href="#1、代码实例-1" class="headerlink" title="1、代码实例"></a>1、代码实例</h3><blockquote>
<p>以生产车为实例，进行代码程度理解</p>
<p>在接口类（Car）、实现类（Wuling、Tesla）的基础之上进行进一步的研究</p>
<p>总结：</p>
<p>​        开发层面：<strong>接口—&gt;实现—&gt;工厂接口—&gt;工厂实现—&gt;调用者</strong></p>
</blockquote>
<p><img src="/2021/06/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/image-20210615221130141.png" alt="image-20210615221130141"></p>
<h4 id="1-1-接口类：Car类"><a href="#1-1-接口类：Car类" class="headerlink" title="1.1 接口类：Car类"></a>1.1 接口类：Car类</h4><blockquote>
<p>代码同简单工厂模式中的接口类一致</p>
</blockquote>
<h4 id="1-2-实现类"><a href="#1-2-实现类" class="headerlink" title="1.2 实现类"></a>1.2 实现类</h4><blockquote>
<p>（1）<strong>实现类：五菱宏光</strong></p>
<p>（2）<strong>实现类：特斯拉</strong></p>
<p>代码同简单工厂模式中对应的实现类一致</p>
</blockquote>
<h4 id="1-3-接口类：工厂接口类：carFactory类"><a href="#1-3-接口类：工厂接口类：carFactory类" class="headerlink" title="1.3 接口类：工厂接口类：carFactory类"></a>1.3 接口类：工厂接口类：carFactory类</h4><blockquote>
<p>创建一个汽车的工厂接口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">carFactory</span> </span>&#123;</span><br><span class="line">   <span class="function">Car <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="1-4-实现类：工厂接口的实现类"><a href="#1-4-实现类：工厂接口的实现类" class="headerlink" title="1.4 实现类：工厂接口的实现类"></a>1.4 实现类：工厂接口的实现类</h4><blockquote>
<p>（1）<strong>WulingFactory类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WulingFactory</span> <span class="keyword">implements</span> <span class="title">carFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Wuling();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）<strong>TeslaFactory类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeslaFactory</span> <span class="keyword">implements</span> <span class="title">carFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tesla();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="1-5-调用者—Consumer"><a href="#1-5-调用者—Consumer" class="headerlink" title="1.5 调用者—Consumer"></a>1.5 调用者—Consumer</h4><blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//需要注意这里的new方法与new实例化对象的区别</span></span><br><span class="line">        Car car = <span class="keyword">new</span>  WulingFactory().getCar();</span><br><span class="line">        Car car1 = <span class="keyword">new</span> TeslaFactory().getCar();</span><br><span class="line"></span><br><span class="line">        car.name();</span><br><span class="line">        car1.name();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<p>​        Car car = new  WulingFactory().getCar(); 也用到了new方式，为什么不直接使用new创建？</p>
<p>理由：</p>
<p>​        假设汽车是由发动机、轮胎和底盘组成，则直接使用new方式实例化对象时， 需要实例化发动机、轮胎和底盘，而这些汽车的组件是与调用者并无直接关系的，这就严重违反了迪米特法则，其耦合度太高，且非常不利于扩展。</p>
<p>​        使用工厂方法模式。其调用者的耦合度大大降低，这对于工厂来说，是可以扩展的，如果以后想组装其他的汽车，只需要新增加一个Car接口类的实现类和一个工厂接口类的实现类即可，无需对直接的代码做任何的更改。</p>
</blockquote>
<h2 id="简单工厂模式VS工厂方法模式"><a href="#简单工厂模式VS工厂方法模式" class="headerlink" title="简单工厂模式VS工厂方法模式"></a>简单工厂模式VS工厂方法模式</h2><blockquote>
<p>（1）结构复杂度：<strong>简单工厂模式最佳</strong></p>
<p>（2）代码复杂度：<strong>简单工厂模式最佳</strong></p>
<p>（3）编程复杂度：<strong>简单工厂模式最佳</strong></p>
<p>（4）管理复杂度：<strong>简单工厂模式最佳</strong></p>
<p>（5）根据实际原则：采用工厂方法模式</p>
<p>（6）根据实际业务：采用简单工厂模式</p>
</blockquote>
<h2 id="三、抽象工厂模式"><a href="#三、抽象工厂模式" class="headerlink" title="三、抽象工厂模式"></a>三、抽象工厂模式</h2><blockquote>
<p>定义：抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需指定他们的类。</p>
<p>适用场景：</p>
<p>​        1、客户端（应用层）不依赖于产品类实例如何被创建、实现等细节</p>
<p>​        2、强调一系列相关的产品对象（属于同一产品簇），一起使用创建对象需要大量的重复代码</p>
<p>​        3、提供一个产品类的库，所有的产品以同样的接口出现，从而使得客户极端不依赖于具体的实现</p>
</blockquote>
<h3 id="1、应用实例"><a href="#1、应用实例" class="headerlink" title="1、应用实例"></a>1、应用实例</h3><blockquote>
<p>以手机和路由器为实例</p>
<p>产品等级结构：小米手机和华为手机，都是手机的产品制造商，因此，可以称为同一个产品等级结构</p>
<p>产品簇：小米手机和小米路由器，都由小米公司来制造，因此属于同一个产品簇</p>
<p>总结：<strong>所有同一个产品簇中的产品都是由同一个工厂来生产的，但却属于不同的产品等级结构。</strong></p>
</blockquote>
<p><img src="/2021/06/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/image-20210613124146486.png" alt="image-20210613124146486"></p>
<h3 id="2、代码实例"><a href="#2、代码实例" class="headerlink" title="2、代码实例"></a>2、代码实例</h3><h4 id="2-1-产品接口类"><a href="#2-1-产品接口类" class="headerlink" title="2.1 产品接口类"></a>2.1 产品接口类</h4><h5 id="2-1-1-手机产品接口类—IphoneProduct"><a href="#2-1-1-手机产品接口类—IphoneProduct" class="headerlink" title="2.1.1 手机产品接口类—IphoneProduct"></a>2.1.1 手机产品接口类—IphoneProduct</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手机产品接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IphoneProduct</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;<span class="comment">//开机</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;<span class="comment">//关机</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callup</span><span class="params">()</span></span>;<span class="comment">//打电话</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>;<span class="comment">//发短信</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-1-2-路由器产品接口类—-IRouterProduct"><a href="#2-1-2-路由器产品接口类—-IRouterProduct" class="headerlink" title="2.1.2 路由器产品接口类— IRouterProduct"></a>2.1.2 路由器产品接口类— IRouterProduct</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//路由器产品接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IRouterProduct</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;<span class="comment">//开机</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;<span class="comment">//关机</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">openwifi</span><span class="params">()</span></span>;<span class="comment">//打开wifi</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setting</span><span class="params">()</span></span>;<span class="comment">//设置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-产品接口类的实现"><a href="#2-2-产品接口类的实现" class="headerlink" title="2.2 产品接口类的实现"></a>2.2 产品接口类的实现</h4><h5 id="2-2-1-手机接口实现—小米手机—Xiaomi"><a href="#2-2-1-手机接口实现—小米手机—Xiaomi" class="headerlink" title="2.2.1 手机接口实现—小米手机—Xiaomi"></a>2.2.1 手机接口实现—小米手机—Xiaomi</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//小米手机</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaomiPhone</span> <span class="keyword">implements</span>  <span class="title">IphoneProduct</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开启小米手机！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭小米手机！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米打电话！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米发短信！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-2-2-手机接口实现—华为手机—Huawei"><a href="#2-2-2-手机接口实现—华为手机—Huawei" class="headerlink" title="2.2.2 手机接口实现—华为手机—Huawei"></a>2.2.2 手机接口实现—华为手机—Huawei</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//华为手机</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaweiPhone</span> <span class="keyword">implements</span>  <span class="title">IphoneProduct</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开启华为手机！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭华为手机！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为打电话！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为发短信！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-2-3-路由器接口实现—小米路由器—Xiaomi"><a href="#2-2-3-路由器接口实现—小米路由器—Xiaomi" class="headerlink" title="2.2.3 路由器接口实现—小米路由器—Xiaomi"></a>2.2.3 路由器接口实现—小米路由器—Xiaomi</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//小米路由器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaomiRouter</span> <span class="keyword">implements</span> <span class="title">IRouterProduct</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;启动小米路由器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭小米路由器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openwifi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打开小米wifi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米设置&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-2-4-路由器接口实现—华为路由器—Huawei"><a href="#2-2-4-路由器接口实现—华为路由器—Huawei" class="headerlink" title="2.2.4 路由器接口实现—华为路由器—Huawei"></a>2.2.4 路由器接口实现—华为路由器—Huawei</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//华为路由器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaweiRouter</span> <span class="keyword">implements</span>  <span class="title">IRouterProduct</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;启动华为路由器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭华为路由器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openwifi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打开华为wifi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为设置&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-3-工厂的接口类—产品接口的接口—IProductFactory"><a href="#2-3-工厂的接口类—产品接口的接口—IProductFactory" class="headerlink" title="2.3 工厂的接口类—产品接口的接口—IProductFactory"></a>2.3 工厂的接口类—产品接口的接口—IProductFactory</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProductFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//生产手机</span></span><br><span class="line">    <span class="function">IphoneProduct <span class="title">iphoneProduct</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产路由器</span></span><br><span class="line">    <span class="function">IRouterProduct <span class="title">routerProduct</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-4-工厂接口类的实现"><a href="#2-4-工厂接口类的实现" class="headerlink" title="2.4 工厂接口类的实现"></a>2.4 工厂接口类的实现</h4><h5 id="2-4-1-小米工厂类—XiaomiFactory"><a href="#2-4-1-小米工厂类—XiaomiFactory" class="headerlink" title="2.4.1 小米工厂类—XiaomiFactory"></a>2.4.1 小米工厂类—XiaomiFactory</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaomiFactory</span> <span class="keyword">implements</span>  <span class="title">IProductFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IphoneProduct <span class="title">iphoneProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XiaomiPhone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRouterProduct <span class="title">routerProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XiaomiRouter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-4-2-华为工厂类—HuaweiFactory"><a href="#2-4-2-华为工厂类—HuaweiFactory" class="headerlink" title="2.4.2 华为工厂类—HuaweiFactory"></a>2.4.2 华为工厂类—HuaweiFactory</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaweiFactory</span> <span class="keyword">implements</span>  <span class="title">IProductFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IphoneProduct <span class="title">iphoneProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HuaweiPhone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRouterProduct <span class="title">routerProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HuaweiRouter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-5-客户端调用—client类"><a href="#2-5-客户端调用—client类" class="headerlink" title="2.5 客户端调用—client类"></a>2.5 客户端调用—client类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==============小米系列产品===============&quot;</span>);</span><br><span class="line">        <span class="comment">//小米工厂</span></span><br><span class="line">        XiaomiFactory xiaomiFactory = <span class="keyword">new</span> XiaomiFactory();</span><br><span class="line">        IphoneProduct iphoneProduct = xiaomiFactory.iphoneProduct();</span><br><span class="line">        iphoneProduct.callup();</span><br><span class="line">        iphoneProduct.sendSms();</span><br><span class="line"></span><br><span class="line">        IRouterProduct iRouterProduct = xiaomiFactory.routerProduct();</span><br><span class="line">        iRouterProduct.openwifi();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==============华为系列产品===============&quot;</span>);</span><br><span class="line">        HuaweiFactory  huaweiFactory= <span class="keyword">new</span> HuaweiFactory();</span><br><span class="line">        iphoneProduct = huaweiFactory.iphoneProduct();</span><br><span class="line">        iphoneProduct.start();</span><br><span class="line">        iphoneProduct.callup();</span><br><span class="line"></span><br><span class="line">        iRouterProduct = huaweiFactory.routerProduct();</span><br><span class="line">        iRouterProduct.setting();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<p>==============小米系列产品===============</p>
<p>小米打电话！</p>
<p>小米发短信！</p>
<p>打开小米wifi</p>
<p>==============华为系列产品===============</p>
<p>开启华为手机！</p>
<p>华为打电话！</p>
<p>华为设置</p>
</blockquote>
<h2 id="四、三者区别"><a href="#四、三者区别" class="headerlink" title="四、三者区别"></a>四、三者区别</h2><blockquote>
<p>简单工厂：用来生产同一等级结构中的任意产品（对于增加新的产品，无能为力）</p>
<p>工厂方法：用来生产同一登记结构中的固定产品（支持增加任意产品）</p>
<p>抽象工厂：用来生产不同产品簇的全部产品（对于增加新的产品，无能为力；支持增加产品簇）</p>
</blockquote>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（四）之结构型模式--适配器模式&amp;桥接模式</title>
    <url>/2021/06/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><blockquote>
<p>作用：从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题</p>
<p>分类：</p>
<ul>
<li>适配器模式</li>
<li>代理模式</li>
<li>桥接模式</li>
<li>装饰模式</li>
<li>组合模式</li>
<li>外观模式</li>
<li>享元模式</li>
</ul>
</blockquote>
<h1 id="一、适配器模式"><a href="#一、适配器模式" class="headerlink" title="一、适配器模式"></a>一、适配器模式</h1><blockquote>
<p>适配器模式是作为两个不兼容的接口之前的桥梁，它结合了两个独立接口的功能。</p>
<p>以USB网线转换器为例，如下图：</p>
<p>​    笔记本不能直接接网线，需要使用一个USB网线转换器（一面接网线，一面接笔记本USB接口），从而使笔记本通过网线上网</p>
</blockquote>
<p><img src="/2021/06/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/image-20210622231252326.png" alt="image-20210622231252326"></p>
<h2 id="1-1-代码实例—继承（类适配器：单继承）"><a href="#1-1-代码实例—继承（类适配器：单继承）" class="headerlink" title="1.1 代码实例—继承（类适配器：单继承）"></a>1.1 代码实例—继承（类适配器：单继承）</h2><h3 id="1-1-1-Adaptee类"><a href="#1-1-1-Adaptee类" class="headerlink" title="1.1.1 Adaptee类"></a>1.1.1 Adaptee类</h3><blockquote>
<p>要被适配的类：网线</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//要被适配的类：网线</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接网线上网&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-1-2-NetToUsb接口"><a href="#1-1-2-NetToUsb接口" class="headerlink" title="1.1.2 NetToUsb接口"></a>1.1.2 NetToUsb接口</h3><blockquote>
<p>接口转换器的抽象实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口转换器的抽象实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NetToUsb</span> </span>&#123;</span><br><span class="line">    <span class="comment">//作用：处理请求，网线=&gt;usb</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-1-3-Adapter类"><a href="#1-1-3-Adapter类" class="headerlink" title="1.1.3 Adapter类"></a>1.1.3 Adapter类</h3><blockquote>
<p>真正的适配器：实现NetToUsb接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真正的适配器，需要连接USB，连接网线</span></span><br><span class="line"><span class="comment">//extends Adaptee，使用继承，可以直接调用父类的request方法实现上网</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span>  <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">NetToUsb</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="1-1-4-Computer类"><a href="#1-1-4-Computer类" class="headerlink" title="1.1.4 Computer类"></a>1.1.4 Computer类</h3><blockquote>
<p>客户端类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端类：想上网，插不上网线</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//我们的电脑需要连接上转接器才可以上网</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">net</span><span class="params">(NetToUsb adapter)</span></span>&#123;</span><br><span class="line">        <span class="comment">//上网的具体实现，找一个转接头</span></span><br><span class="line">        adapter.handleRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//电脑，适配器，网线</span></span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer();<span class="comment">//电脑</span></span><br><span class="line">        Adaptee adaptee = <span class="keyword">new</span> Adaptee();<span class="comment">//网线</span></span><br><span class="line">        Adapter adapter = <span class="keyword">new</span> Adapter();<span class="comment">//转接器</span></span><br><span class="line">        computer.net(adapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">连接网线上网</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<p>​    Computer类中的Adaptee adaptee = new Adaptee();好像并没有什么作用？</p>
<p>​    因为Adapter类中继承了adaptee 父类，因此，adapter类自带上网功能，所以也就无需使用adaptee类。</p>
<p>​    但该网线只能适用于自己电脑，并不适合其他类型的电脑，因此可以使用<strong>组合</strong>代替继承来匹配其他类型的电脑。</p>
</blockquote>
<h2 id="1-2-代码实例—对象适配器（常用）"><a href="#1-2-代码实例—对象适配器（常用）" class="headerlink" title="1.2 代码实例—对象适配器（常用）"></a>1.2 代码实例—对象适配器（常用）</h2><h3 id="1-2-1-Adaptee类"><a href="#1-2-1-Adaptee类" class="headerlink" title="1.2.1 Adaptee类"></a>1.2.1 Adaptee类</h3><blockquote>
<p>要被适配的类：网线</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//要被适配的类：网线</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接网线上网&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-2-2-NetToUsb接口"><a href="#1-2-2-NetToUsb接口" class="headerlink" title="1.2.2 NetToUsb接口"></a>1.2.2 NetToUsb接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口转换器的抽象实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NetToUsb</span> </span>&#123;</span><br><span class="line">    <span class="comment">//作用：处理请求，网线=&gt;usb</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-2-3-Adapter类"><a href="#1-2-3-Adapter类" class="headerlink" title="1.2.3 Adapter类"></a>1.2.3 Adapter类</h3><blockquote>
<p>真正的适配器</p>
<p><strong>区别：将之前的继承修改为组合</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真正的适配器，需要连接usb，连接网线</span></span><br><span class="line"><span class="comment">//组合：对象适配器，常用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">NetToUsb</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee;<span class="comment">//使用组合方式</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(Adaptee adaptee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adaptee = adaptee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        adaptee.request();<span class="comment">//可以上网了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-2-4-Computer类"><a href="#1-2-4-Computer类" class="headerlink" title="1.2.4 Computer类"></a>1.2.4 Computer类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端类：想上网，插不上网线</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们的电脑需要连接上转接器才可以上网</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">net</span><span class="params">(NetToUsb adapter)</span></span>&#123;</span><br><span class="line">        <span class="comment">//上网的具体实现，找一个转接头</span></span><br><span class="line">        adapter.handleRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//电脑，适配器，网线</span></span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer();<span class="comment">//电脑</span></span><br><span class="line">        Adaptee adaptee = <span class="keyword">new</span> Adaptee();<span class="comment">//网线</span></span><br><span class="line">        Adapter adapter = <span class="keyword">new</span> Adapter(adaptee);<span class="comment">//适配器</span></span><br><span class="line">        computer.net(adapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">连接网线上网</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<p>​    和继承相比，组合的优势在哪?</p>
<ul>
<li>​    使用继承时，只能对某一个网线类（被继承的类）产生作用。而只用组合，可以对多个网线类都产生作用。</li>
</ul>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="适配器模式定义"><a href="#适配器模式定义" class="headerlink" title="适配器模式定义"></a>适配器模式定义</h3><blockquote>
<p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作！</p>
</blockquote>
<h3 id="角色分析"><a href="#角色分析" class="headerlink" title="角色分析"></a>角色分析</h3><blockquote>
<ol>
<li><strong>目标接口：</strong>客户所期待的接口，目标可以是具体的或抽象的类，也可以是接口。对应代码中的<strong>USB接口</strong></li>
<li><strong>需要适配的类：</strong>需要适配的类或者适配者类。对应代码中的<strong>网线接口</strong></li>
<li><strong>适配器：</strong>通过包装一个需要适配的对象，把原接口转换成目标对象。对应代码中的<strong>USB转换器</strong></li>
</ol>
</blockquote>
<h3 id="图形化理解"><a href="#图形化理解" class="headerlink" title="图形化理解"></a>图形化理解</h3><p><img src="/2021/06/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/截图.png" alt="img"></p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><blockquote>
<p>对象适配器优点：</p>
<ul>
<li>一个对象适配器可以把多个不同的适配者适配到同一目标</li>
<li>可以适配一个适配者的子类，由于适配器和适配者之间是关联关系，根据<strong>里氏替换原则</strong>（<strong>继承</strong>必须确保<strong>超类</strong>所拥有的性质在<strong>子类</strong>中仍然成立），适配者的子类也可以通过该适配器适配</li>
</ul>
<p>类适配器缺点：</p>
<ul>
<li>对于Java、C#等不支持多重类继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者。</li>
<li>在Java、C#等语言中，类适配器模式中的目标抽象类只能为接口，不能为类，其使用有一定的局限性（因此推荐使用组合方式）</li>
</ul>
</blockquote>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><blockquote>
<ul>
<li>系统需要使用一些现有的类，而这些类的接口（如方法名）不太符合系统的需要，甚至都没有这些类的源代码</li>
<li>想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的类，包括一些可能在将来引进的类（<strong>待了解</strong>）<ul>
<li>InputStreamReader(InputStream)，转换流</li>
<li>SpringMVC  DISPatchHandler</li>
<li>GUI 编程</li>
<li>springboot</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="二、桥接模式"><a href="#二、桥接模式" class="headerlink" title="二、桥接模式"></a>二、桥接模式</h1><blockquote>
<p>桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化。又称为柄体模式或接口模式</p>
</blockquote>
<h2 id="1、简单例子说明"><a href="#1、简单例子说明" class="headerlink" title="1、简单例子说明"></a>1、简单例子说明</h2><blockquote>
<p>如下图所示：</p>
<p>​        电脑分为：台式电脑、笔记本电脑、平板电脑</p>
<p>​        台式电脑又分为：联想台式、苹果台式、戴尔台式等</p>
<p>以这种结构进行架构设计时，若想新增一个手表电脑，则在手表电脑下面需要新增三个类，特别繁琐。</p>
<p>且每一个类都违反了<strong>单一职责原则</strong>（一个方法尽量做一个事情），一个类负责了两个功能：品牌和类型。</p>
</blockquote>
<p><img src="/2021/06/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/image-20210624224411770.png" alt="image-20210624224411770"></p>
<blockquote>
<p>因此，可以将上述的场景进行分离，分析发现，该场景有两个变化的维度：品牌，类型。</p>
<p>然后将品牌和类型通过一个连接点连接起来即可。</p>
</blockquote>
<p><img src="/2021/06/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/image-20210624232818462.png" alt="image-20210624232818462"></p>
<h2 id="2、代码实例"><a href="#2、代码实例" class="headerlink" title="2、代码实例"></a>2、代码实例</h2><h3 id="2-1-Brand类：接口类"><a href="#2-1-Brand类：接口类" class="headerlink" title="2.1 Brand类：接口类"></a>2.1 Brand类：接口类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//品牌</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-接口实现类"><a href="#2-2-接口实现类" class="headerlink" title="2.2 接口实现类"></a>2.2 接口实现类</h3><blockquote>
<p>接口实现类也可以在接口类中写</p>
</blockquote>
<h4 id="2-2-1-Lenovo类"><a href="#2-2-1-Lenovo类" class="headerlink" title="2.2.1 Lenovo类"></a>2.2.1 Lenovo类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//联想品牌</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lenovo</span> <span class="keyword">implements</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;联想&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-2-Apple类"><a href="#2-2-2-Apple类" class="headerlink" title="2.2.2 Apple类"></a>2.2.2 Apple类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//苹果品牌</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-Computer-java"><a href="#2-3-Computer-java" class="headerlink" title="2.3 Computer.java"></a>2.3 Computer.java</h3><blockquote>
<p>在同一个类中写，2.2小节中的代码也可以写在2.1里面</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象的电脑类型，可以加abstract，也可以不加</span></span><br><span class="line"><span class="comment">//使用类，而不是接口，是因为，品牌是电脑的一个属性，可以使用组合</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组合，品牌~桥</span></span><br><span class="line">    <span class="comment">//protected 可以让子类访问，如果设置为私有，只能类本身访问</span></span><br><span class="line">    <span class="keyword">protected</span> Brand brand;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">        brand.info();<span class="comment">//自带品牌</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Desktop</span> <span class="keyword">extends</span>  <span class="title">Computer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Desktop</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.info();</span><br><span class="line">        System.out.print(<span class="string">&quot;台式机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Laptop</span> <span class="keyword">extends</span>  <span class="title">Computer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Laptop</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.info();</span><br><span class="line">        System.out.print(<span class="string">&quot;笔记本&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-Test类"><a href="#2-4-Test类" class="headerlink" title="2.4 Test类"></a>2.4 Test类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//苹果笔记本</span></span><br><span class="line">        Computer computer = <span class="keyword">new</span> Laptop(<span class="keyword">new</span> Apple());</span><br><span class="line">        computer.info();</span><br><span class="line">        <span class="comment">//联想台式机</span></span><br><span class="line">        computer = <span class="keyword">new</span> Desktop(<span class="keyword">new</span> Lenovo());</span><br><span class="line">        computer.info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">苹果笔记本联想台式机</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<p>​    若想新增加一个品牌，则只需新增一个接口实现类，如Dell即可</p>
<p>​    若想新增加一个类型，则只需新增一个类继承Computer即可。不需要修改原来的任何代码</p>
</blockquote>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><h3 id="图形化理解-1"><a href="#图形化理解-1" class="headerlink" title="图形化理解"></a>图形化理解</h3><p><img src="/2021/06/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/截图-1624549400443.png" alt="img"></p>
<blockquote>
<p>分析：</p>
<p>​    从上图中，可以看出，该场景有两个维度，并且可以将每一个维度抽离出来，分为Brand和电脑</p>
<p>​    其Brand（品牌）是一个接口，Lenovo、Apple都可以各自实现该接口，并且方便扩展。比如新增Dell品牌，只需实现Brand接口即可。</p>
<p>​    电脑是一个类，且使用组合方式，自带Brand，且台式和笔记本都可以继承该类。在扩展时，只需要继承电脑类即可。比如，新增一个手表，也只是需要继承电脑，会自带Brand属性。</p>
<p>电脑和Brand如何建立连接？</p>
<ul>
<li>可以通过桥接模式，在电脑类中通过组合方式，将Brand接口组合在电脑类中，进行桥接，这样每一个电脑都会自带品牌，并且可以随意组装。</li>
</ul>
</blockquote>
<h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><blockquote>
<p>优点：</p>
<ul>
<li>桥接模式偶尔类似于多继承方案，但是多继承方案违背了类的<strong>单一职责原则</strong>（一个方法只做一件事情），复用性比较差，类的个数也非常多。桥接模式是比多继承方案更好的解决方法，极大地减少了子类的个数，从而降低管理和维护的成本。</li>
<li>桥接模式提高了系统的可扩展性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。符合<strong>开闭原则</strong>（对修改关闭，对扩展开放），就像一座桥，可以把两个变化的维度连接起来。</li>
</ul>
<p>缺点：</p>
<ul>
<li>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者对抽象进行设计与编程。</li>
<li>桥接模式要求正确识别出系统中<strong>两个独立变化的维度</strong>，因此其使用范围具有一定的局限性。</li>
</ul>
</blockquote>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><blockquote>
<ul>
<li>如果一个系统需要在构建的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响，在程序运行时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合。</li>
<li>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展</li>
<li>虽然在系统中使用继承时没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</li>
</ul>
</blockquote>
<h3 id="场景（待学习）"><a href="#场景（待学习）" class="headerlink" title="场景（待学习）"></a>场景（待学习）</h3><blockquote>
<ol>
<li><p>Java语言通过Java虚拟机实现了平台的无关性。</p>
<p><img src="/2021/06/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/截图-1624550142642.png" alt="img"></p>
</li>
<li><p>AWT中的Peer架构</p>
</li>
<li><p>JDBC驱动程序也是桥接模式的应用之一</p>
</li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>适配器模式</tag>
        <tag>桥接模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（五）之结构型模式-代理模式</title>
    <url>/2021/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、代理模式"><a href="#一、代理模式" class="headerlink" title="一、代理模式"></a>一、代理模式</h1><blockquote>
<p>为什么要学习代理模式？ </p>
<ul>
<li>因为这就是SpringAOP的底层！【SpringAOP 和SpringMVC】</li>
</ul>
<p>分类：</p>
<ul>
<li>静态代理</li>
<li>动态代理</li>
</ul>
</blockquote>
<p><img src="/2021/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/image-20210628225450082.png" alt="image-20210628225450082"></p>
<h2 id="1、静态代理"><a href="#1、静态代理" class="headerlink" title="1、静态代理"></a>1、静态代理</h2><blockquote>
<p>角色分析：</p>
<ul>
<li>抽象角色：一般会使用接口或者抽象类来解决—<strong>租房</strong></li>
<li>真实角色：被代理的角色—<strong>房东</strong></li>
<li>代理角色：代理真实角色，代理真实角色后，我们一般会做一些附属操作。—<strong>中介</strong></li>
<li>客户：访问代理对象的人—<strong>租客</strong></li>
</ul>
</blockquote>
<h3 id="1-1-房东直租"><a href="#1-1-房东直租" class="headerlink" title="1.1 房东直租"></a>1.1 房东直租</h3><h4 id="1-1-1-Rent接口"><a href="#1-1-1-Rent接口" class="headerlink" title="1.1.1 Rent接口"></a>1.1.1 Rent接口</h4><blockquote>
<p>抽象角色：租房接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-1-2-Landlord类"><a href="#1-1-2-Landlord类" class="headerlink" title="1.1.2 Landlord类"></a>1.1.2 Landlord类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Landlord</span>  <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东要出租房子！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-1-3-Client类"><a href="#1-1-3-Client类" class="headerlink" title="1.1.3 Client类"></a>1.1.3 Client类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//租客</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Landlord landlord = <span class="keyword">new</span> Landlord();</span><br><span class="line">        landlord.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">房东要出租房子！！！</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<ul>
<li>实际情况，我们一般无法直接找到房东，需要通过中介，才能找到房东，因此上面需要修改。</li>
</ul>
</blockquote>
<h3 id="1-2-通过中介租房"><a href="#1-2-通过中介租房" class="headerlink" title="1.2 通过中介租房"></a>1.2 通过中介租房</h3><h4 id="1-2-1-Rent接口"><a href="#1-2-1-Rent接口" class="headerlink" title="1.2.1 Rent接口"></a>1.2.1 Rent接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-2-2-Landlord类"><a href="#1-2-2-Landlord类" class="headerlink" title="1.2.2 Landlord类"></a>1.2.2 Landlord类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Landlord</span>  <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东要出租房子！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-2-3-Proxy类"><a href="#1-2-3-Proxy类" class="headerlink" title="1.2.3 Proxy类"></a>1.2.3 Proxy类</h4><blockquote>
<p>新增代理类</p>
<p>下列代码优先使用了组合，而非继承</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Landlord landlord;</span><br></pre></td></tr></table></figure>
<p>因为代理中介，也需要租房，所以实现了Rent接口</p>
<p>最后，代理也添加了一些附属操作，比如看房、签合同、收中介费</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//中介，代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span>  <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Landlord landlord;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Landlord landlord)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.landlord = landlord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        landlord.rent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看房</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带你看房！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//签合同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hetong</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签租赁合同！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//收中介费</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-2-4-Client类"><a href="#1-2-4-Client类" class="headerlink" title="1.2.4 Client类"></a>1.2.4 Client类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//租客</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//房东要出租房子</span></span><br><span class="line">        Landlord landlord = <span class="keyword">new</span> Landlord();</span><br><span class="line">        <span class="comment">//代理，中介帮房东租房子，但是呢？代理角色一般会有一些附属操作</span></span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy(landlord);</span><br><span class="line">        <span class="comment">//租客不用面对房东，直接找中介租房即可</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">房东要出租房子！！！</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="代码步骤"><a href="#代码步骤" class="headerlink" title="代码步骤"></a>代码步骤</h2><blockquote>
<ol>
<li>接口</li>
<li>真实角色</li>
<li>代理角色</li>
<li>客户端访问代理角色</li>
</ol>
</blockquote>
<h2 id="2、加深理解"><a href="#2、加深理解" class="headerlink" title="2、加深理解"></a>2、加深理解</h2><blockquote>
<p>以常见的用户的增删改查为例</p>
</blockquote>
<h3 id="2-1-UserService接口"><a href="#2-1-UserService接口" class="headerlink" title="2.1 UserService接口"></a>2.1 UserService接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-UserServiceImpl类"><a href="#2-2-UserServiceImpl类" class="headerlink" title="2.2 UserServiceImpl类"></a>2.2 UserServiceImpl类</h3><blockquote>
<p>实现UserService接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真实对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了一个用户！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-Client类"><a href="#2-3-Client类" class="headerlink" title="2.3 Client类"></a>2.3 Client类</h3><blockquote>
<p>客户端调用类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">增加了一个用户！</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<ul>
<li><p>若想在每一个方法上面，都增加一个日志，则上述UserServiceImpl会代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真实对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用了add方法&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用了delete方法&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用了update方法&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了一个用户！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用了query方法&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">使用了add方法</span><br><span class="line">增加了一个用户！</span><br></pre></td></tr></table></figure>
<p>若有多个实现类，则需要在每一个实现类中都要添加log日志，特别的繁琐，且违背了开闭原则，对修改关闭</p>
<p>因此，可以通过添加代理类来实现该功能，且遵循开闭原则。</p>
</li>
</ul>
</blockquote>
<h3 id="使用代理类"><a href="#使用代理类" class="headerlink" title="使用代理类"></a>使用代理类</h3><h4 id="2-4-1-UserService接口"><a href="#2-4-1-UserService接口" class="headerlink" title="2.4.1 UserService接口"></a>2.4.1 UserService接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-4-2-UserServiceImpl类"><a href="#2-4-2-UserServiceImpl类" class="headerlink" title="2.4.2 UserServiceImpl类"></a>2.4.2 UserServiceImpl类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真实对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了一个用户！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-4-3-UserServiceProxy类"><a href="#2-4-3-UserServiceProxy类" class="headerlink" title="2.4.3 UserServiceProxy类"></a>2.4.3 UserServiceProxy类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过set方式实现注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserServiceImpl userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">        userService.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">        userService.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">        userService.query();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【Debug】使用了&quot;</span>+msg+<span class="string">&quot;方法！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-4-4-Client类"><a href="#2-4-4-Client类" class="headerlink" title="2.4.4 Client类"></a>2.4.4 Client类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">        UserServiceProxy proxy = <span class="keyword">new</span> UserServiceProxy();</span><br><span class="line">        proxy.setUserService(userService);</span><br><span class="line">        proxy.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">【Debug】使用了add方法！</span><br><span class="line">增加了一个用户！</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<p>​    通过添加代理类的方式，使用组合，通过spring的bean注入，将想要添加的日志信息在代理类中进行编写，原先的Impl实现类不需要做任何的修改，符合开闭原则。</p>
<ul>
<li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务。</li>
<li>公共业务就交给了代理角色！实现了业务的分工</li>
<li>公共业务发生扩展的时候，方便集中管理！</li>
</ul>
<p>缺点：</p>
<ul>
<li>一个真实角色就会产生一个代理角色；代码量会翻倍，开发效率会变低~</li>
</ul>
</blockquote>
<h2 id="代理图解"><a href="#代理图解" class="headerlink" title="代理图解"></a>代理图解</h2><p><img src="/2021/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/image-20210630232703981.png" alt="image-20210630232703981"></p>
<h2 id="2、动态代理"><a href="#2、动态代理" class="headerlink" title="2、动态代理"></a>2、动态代理</h2><blockquote>
<ul>
<li>动态代理和静态代理角色一样</li>
<li>动态代理的代理类是动态生成的，不是我们直接写好的</li>
<li>动态代理分为两大类：1）基于接口的动态代理；2）基于类的动态代理<ul>
<li>基于接口—JDK动态代理</li>
<li>基于类：cglib</li>
<li>java字节码实现：基于Javassist，应用于JBoss应用服务器， </li>
</ul>
</li>
</ul>
<p>需要了解两个类：Proxy：代理、InvocationHandler：调用处理程序</p>
</blockquote>
<h3 id="2-1-动态代理所需类的介绍"><a href="#2-1-动态代理所需类的介绍" class="headerlink" title="2.1 动态代理所需类的介绍"></a>2.1 动态代理所需类的介绍</h3><h4 id="2-1-1-InvocationHandler"><a href="#2-1-1-InvocationHandler" class="headerlink" title="2.1.1 InvocationHandler"></a>2.1.1 InvocationHandler</h4><blockquote>
<p>结合JDK1.8文档来查看</p>
</blockquote>
<p><img src="/2021/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/image-20210702235912599.png" alt="image-20210702235912599"></p>
<h4 id="2-1-2-Proxy类"><a href="#2-1-2-Proxy类" class="headerlink" title="2.1.2 Proxy类"></a>2.1.2 Proxy类</h4><p><img src="/2021/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/image-20210705232047719.png" alt="image-20210705232047719"></p>
<h3 id="2-2-基本动态代理实例讲解"><a href="#2-2-基本动态代理实例讲解" class="headerlink" title="2.2 基本动态代理实例讲解"></a>2.2 基本动态代理实例讲解</h3><h4 id="2-2-1-Rent接口"><a href="#2-2-1-Rent接口" class="headerlink" title="2.2.1 Rent接口"></a>2.2.1 Rent接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-2-Landlord类"><a href="#2-2-2-Landlord类" class="headerlink" title="2.2.2 Landlord类"></a>2.2.2 Landlord类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Landlord</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东要出租房子！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-3-ProxyInvocationHandler类"><a href="#2-2-3-ProxyInvocationHandler类" class="headerlink" title="2.2.3 ProxyInvocationHandler类"></a>2.2.3 ProxyInvocationHandler类</h4><blockquote>
<p>分析：</p>
<p>​    （1）创建一个类，实现InvocationHandler接口</p>
<p>​    （2）从JDK1.8的文档中，可以看出，InvocationHandler接口只有一个方法</p>
<p>​            <img src="/2021/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/image-20210705224903331.png" alt="image-20210705224903331"></p>
<p>​                该方法的主要作用是处理代理实例，并返回结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理代理实例，并返回结果</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>​    （3）使用Proxy类，来返回指定接口的代理类的实例</p>
<p><img src="/2021/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/image-20210705225112917.png" alt="image-20210705225112917"></p>
<p><img src="/2021/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/image-20210705225348482.png" alt="image-20210705225348482" style="zoom:67%;"></p>
<p>​        参照上面的简单例子，可以写出下面的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//后续需要在客户端进行赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),rent.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>​    （4）利用反射，来实现动态代理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理代理实例，并返回结果</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">       <span class="comment">//动态代理的本质，就是试用反射机制实现！</span></span><br><span class="line">       Object result = method.invoke(rent,args);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等会我们会用这个类，自动生成代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),rent.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例，并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//动态代理的本质，就是试用反射机制实现！</span></span><br><span class="line">        Object result = method.invoke(rent,args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-4-Client类"><a href="#2-2-4-Client类" class="headerlink" title="2.2.4 Client类"></a>2.2.4 Client类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        Landlord landlord = <span class="keyword">new</span> Landlord();</span><br><span class="line">        <span class="comment">//代理角色：现在还没有</span></span><br><span class="line">        ProxyInvocationHandler pih = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">        <span class="comment">//InvocationHandler是由代理实例的调用处理程序实现的接口 。 </span></span><br><span class="line">		<span class="comment">//每个代理实例都有一个关联的调用处理程序。 当在代理实例上调用方法时，方法调用将被编码并分派到其调用处理程序的invoke方法。</span></span><br><span class="line">        <span class="comment">//通过调用程序处理角色，来处理我们要调用的接口对象</span></span><br><span class="line">        pih.setRent(landlord);</span><br><span class="line"></span><br><span class="line">        Rent proxy = (Rent)pih.getProxy();<span class="comment">//这里的proxy就是动态生成的，我们并没有写~</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">房东要出租房子！！！</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="2-2-5-修改ProxyInvocationHandler类"><a href="#2-2-5-修改ProxyInvocationHandler类" class="headerlink" title="2.2.5 修改ProxyInvocationHandler类"></a>2.2.5 修改ProxyInvocationHandler类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等会我们会用这个类，自动生成代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),rent.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例，并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        seeHouse();</span><br><span class="line">        <span class="comment">//动态代理的本质，就是试用反射机制实现！</span></span><br><span class="line">        Object result = method.invoke(rent,args);</span><br><span class="line">        fare();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带看房子！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果（客户端不变）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">中介带看房子！</span><br><span class="line">房东要出租房子！！！</span><br><span class="line">收中介费！</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="2-3-通用代理实例讲解"><a href="#2-3-通用代理实例讲解" class="headerlink" title="2.3 通用代理实例讲解"></a>2.3 通用代理实例讲解</h3><blockquote>
<p>以之前某一个设计模式介绍的增删改查为例</p>
</blockquote>
<h4 id="2-3-1-ProxyInvocationHandler类"><a href="#2-3-1-ProxyInvocationHandler类" class="headerlink" title="2.3.1 ProxyInvocationHandler类"></a>2.3.1 ProxyInvocationHandler类</h4><blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等会我们会用这个类，自动生成代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),target.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例，并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//动态代理的本质，就是试用反射机制实现！</span></span><br><span class="line">        Object result = method.invoke(target,args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="2-3-2-Client类"><a href="#2-3-2-Client类" class="headerlink" title="2.3.2 Client类"></a>2.3.2 Client类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ldg.GoF23.proxy.demo02.UserService;</span><br><span class="line"><span class="keyword">import</span> com.ldg.GoF23.proxy.demo02.UserServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理角色：不存在</span></span><br><span class="line">        ProxyInvocationHandler pih = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line"></span><br><span class="line">        pih.setTarget(userService);<span class="comment">//设置要代理的对象</span></span><br><span class="line">        UserService proxy = (UserService) pih.getProxy();<span class="comment">//动态生成代理类</span></span><br><span class="line"></span><br><span class="line">        proxy.add();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">增加了一个用户！</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="2-3-3-增加日志—ProxyInvocationHandler类"><a href="#2-3-3-增加日志—ProxyInvocationHandler类" class="headerlink" title="2.3.3 增加日志—ProxyInvocationHandler类"></a>2.3.3 增加日志—ProxyInvocationHandler类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等会我们会用这个类，自动生成代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),target.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例，并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        log(method.getName());</span><br><span class="line">        <span class="comment">//动态代理的本质，就是试用反射机制实现！</span></span><br><span class="line">        Object result = method.invoke(target,args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span>+msg+<span class="string">&quot;方法！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="2-3-4-增加日志类的Client"><a href="#2-3-4-增加日志类的Client" class="headerlink" title="2.3.4  增加日志类的Client"></a>2.3.4  增加日志类的Client</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ldg.GoF23.proxy.demo02.UserService;</span><br><span class="line"><span class="keyword">import</span> com.ldg.GoF23.proxy.demo02.UserServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理角色：不存在</span></span><br><span class="line">        ProxyInvocationHandler pih = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line"></span><br><span class="line">        pih.setTarget(userService);<span class="comment">//设置要代理的对象</span></span><br><span class="line">        UserService proxy = (UserService) pih.getProxy();<span class="comment">//动态生成代理类</span></span><br><span class="line"></span><br><span class="line">        proxy.add();</span><br><span class="line">        proxy.query();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">执行了add方法！</span><br><span class="line">增加了一个用户！</span><br><span class="line">执行了query方法！</span><br><span class="line">查询了一个用户！</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="动态代理的好处"><a href="#动态代理的好处" class="headerlink" title="动态代理的好处"></a>动态代理的好处</h2><blockquote>
<ul>
<li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li>
<li>公共业务就交给代理角色！实现了业务的分工！</li>
<li>公共业务发生扩展的时候，方便集中管理！</li>
<li>一个动态代理类代理的是一个接口，一般就是对应的一类业务！</li>
<li>一个动态代理类可以代理多个类，只要实现了同一个接口即可。</li>
</ul>
</blockquote>
<h2 id="Spring注入方式（待总结）"><a href="#Spring注入方式（待总结）" class="headerlink" title="Spring注入方式（待总结）"></a>Spring注入方式（待总结）</h2>]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>代理模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（六）之结构型模式--装饰者模式</title>
    <url>/2021/07/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、装饰者模式"><a href="#一、装饰者模式" class="headerlink" title="一、装饰者模式"></a>一、装饰者模式</h1><h2 id="1-1-案例分析"><a href="#1-1-案例分析" class="headerlink" title="1.1 案例分析"></a>1.1 案例分析</h2><blockquote>
<p>描述：</p>
<p>​        星巴克咖啡订单项目（咖啡馆）：</p>
<ol>
<li>咖啡种类/单品咖啡：Espresso（意大利浓咖啡）、ShortBlack、LongBlack（美式咖啡）、Decaf（无音咖啡）</li>
<li>调料：Milk、Soy（豆浆）、Chocolate</li>
</ol>
<p>要求：</p>
<p>​    在扩<strong>展新的咖啡种类</strong>时，具有良好的扩展性、改动方便、维护方便</p>
<p>费用：</p>
<p>​    在计算不同种类咖啡的<strong>费用</strong>：客户可以点<strong>单品咖啡</strong>，也可以<strong>单品咖啡+调料组合</strong>。</p>
</blockquote>
<h3 id="1-1-1-解析—方案1"><a href="#1-1-1-解析—方案1" class="headerlink" title="1.1.1 解析—方案1"></a>1.1.1 解析—方案1</h3><blockquote>
<p>方案1如下图所示：</p>
<p>（1）将咖啡抽象为一个类：Drink</p>
<p>（2）使用单品咖啡继承该抽象类</p>
<p>（3）使用单品咖啡+调料来组合继承该抽象类</p>
</blockquote>
<p><img src="/2021/07/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/image-20210706223036942.png" alt="image-20210706223036942"></p>
<h4 id="1-1-1-1-方案1问题分析"><a href="#1-1-1-1-方案1问题分析" class="headerlink" title="1.1.1.1 方案1问题分析"></a>1.1.1.1 方案1问题分析</h4><blockquote>
<ol>
<li>Drink是一个抽象类，表示饮料</li>
<li>description就是对咖啡的描述，比如咖啡的名字</li>
<li>cost()方法就是计算费用，Drink类中做成一个抽象方法</li>
<li>Decaf就是单品咖啡，继承Drink，并实现cost</li>
<li>Espress&amp;&amp;Milk就是单品咖啡+调料，这个组合很多</li>
</ol>
<p>问题：</p>
<ul>
<li>这样设计，会有很多类，当我们增加一个单品咖啡，或者一个新的调料，类的数量就会暴增，就会出现<strong>类爆炸</strong>。</li>
</ul>
</blockquote>
<h3 id="1-1-2-解析—方案2"><a href="#1-1-2-解析—方案2" class="headerlink" title="1.1.2 解析—方案2"></a>1.1.2 解析—方案2</h3><blockquote>
<p>方案1因为<strong>单品咖啡+调料</strong>组合会造成类的倍增。因此可以做改进，将调料内置到Drink类，这样就不会造成<strong>类数量过多</strong>。</p>
<p>方案2如下图所示：</p>
<p>（1）将调料写在抽象类中，避免类过多</p>
<p>（2）实现has方法，来确定是否存在某些调料，set方法时，可用Boolean型，表示是否要添加相应的调料</p>
<p>（3）当某些调料有多份时，可以用int型</p>
</blockquote>
<p><img src="/2021/07/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/image-20210706225407778.png" alt="image-20210706225407778"></p>
<h4 id="1-1-2-方案2问题分析"><a href="#1-1-2-方案2问题分析" class="headerlink" title="1.1.2 方案2问题分析"></a>1.1.2 方案2问题分析</h4><blockquote>
<ol>
<li>方案2可以控制类的数量，不至于造成很多的类</li>
<li>在增加或者删除调料种类时，<strong>代码的维护量很大</strong></li>
<li>考虑到用户可以添加多份调料时，可以将hasMilk返回一个对应int</li>
<li>考虑使用<strong>装饰者模式</strong></li>
</ol>
</blockquote>
<h2 id="1-2-装饰者模式定义"><a href="#1-2-装饰者模式定义" class="headerlink" title="1.2 装饰者模式定义"></a>1.2 装饰者模式定义</h2><blockquote>
<p>装饰者模式：<strong>动态的</strong>将新功能<strong>附加到对象</strong>上。</p>
<p>在对象功能扩展方面，它比继承更有弹性，装饰者模式也体现了<strong>开闭原则</strong>。</p>
</blockquote>
<h2 id="1-3-装饰者模式（Decorator）原理"><a href="#1-3-装饰者模式（Decorator）原理" class="headerlink" title="1.3 装饰者模式（Decorator）原理"></a>1.3 装饰者模式（Decorator）原理</h2><p><img src="/2021/07/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/image-20210706231849737.png" alt="image-20210706231849737"></p>
<blockquote>
<ul>
<li><strong>Component</strong>：主体，类似于前面的Drink</li>
<li><strong>ConcreteComponent：</strong>具体的主体，比如前面的各个单品咖啡</li>
<li><strong>Decorator：</strong>装饰者，比如各调料</li>
</ul>
</blockquote>
<h2 id="1-4-装饰者模式解决咖啡订单问题"><a href="#1-4-装饰者模式解决咖啡订单问题" class="headerlink" title="1.4  装饰者模式解决咖啡订单问题"></a>1.4  装饰者模式解决咖啡订单问题</h2><p><img src="/2021/07/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/image-20210706232402844.png" alt></p>
<blockquote>
<ul>
<li>Drink类就是前面说的抽象类，也就是<strong>Component</strong></li>
<li>ShortBlack就是单品咖啡</li>
<li>Decorator是一个装饰类，含有一个被装饰的对象（Drink obj）</li>
<li>Decorator的cost方法 进行一个费用的叠加计算，递归的计算价格</li>
</ul>
</blockquote>
<h2 id="1-5-装饰者模式图解"><a href="#1-5-装饰者模式图解" class="headerlink" title="1.5 装饰者模式图解"></a>1.5 装饰者模式图解</h2><p><img src="/2021/07/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/截图.png" alt="img"></p>
<blockquote>
<ul>
<li>LongBlack是一个被装饰对象</li>
<li>Milk包含了LongBlack，用来装饰LongBlack</li>
<li>将Mink &amp; LongBlack看着一个被装饰对象</li>
<li>Chocolate包含了Mink &amp; LongBlack，用来装饰Mink &amp; LongBlack</li>
</ul>
</blockquote>
<h2 id="1-6-代码实例"><a href="#1-6-代码实例" class="headerlink" title="1.6 代码实例"></a>1.6 代码实例</h2><h3 id="1-6-1-Drink抽象类"><a href="#1-6-1-Drink抽象类" class="headerlink" title="1.6.1 Drink抽象类"></a>1.6.1 Drink抽象类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String des;<span class="comment">//描述</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> price = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> des;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDes</span><span class="params">(String des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.des = des;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算费用的抽象方法</span></span><br><span class="line">    <span class="comment">//子类来实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-6-2-Coffee类：继承Drink"><a href="#1-6-2-Coffee类：继承Drink" class="headerlink" title="1.6.2 Coffee类：继承Drink"></a>1.6.2 Coffee类：继承Drink</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-6-3-Espresso类：继承Coffee"><a href="#1-6-3-Espresso类：继承Coffee" class="headerlink" title="1.6.3 Espresso类：继承Coffee"></a>1.6.3 Espresso类：继承Coffee</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Espresso</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setDes(<span class="string">&quot;意大利咖啡&quot;</span>);</span><br><span class="line">        setPrice(<span class="number">2.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-6-4-LongBlack类：继承Coffee"><a href="#1-6-4-LongBlack类：继承Coffee" class="headerlink" title="1.6.4 LongBlack类：继承Coffee"></a>1.6.4 LongBlack类：继承Coffee</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongBlack</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LongBlack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setDes(<span class="string">&quot;LongBlack&quot;</span>);</span><br><span class="line">        setPrice(<span class="number">6.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-6-5-ShortBlack类：继承Coffee"><a href="#1-6-5-ShortBlack类：继承Coffee" class="headerlink" title="1.6.5 ShortBlack类：继承Coffee"></a>1.6.5 ShortBlack类：继承Coffee</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShortBlack</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShortBlack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setDes(<span class="string">&quot;ShortBlack&quot;</span>);</span><br><span class="line">        setPrice(<span class="number">4.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-6-6-Deorator类：装饰类：继承Drink，并且组合Drink"><a href="#1-6-6-Deorator类：装饰类：继承Drink，并且组合Drink" class="headerlink" title="1.6.6 Deorator类：装饰类：继承Drink，并且组合Drink"></a>1.6.6 Deorator类：装饰类：继承Drink，并且组合Drink</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Drink obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Drink obj)</span> </span>&#123;<span class="comment">//组合</span></span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//getPrice:自己价格</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice() + obj.cost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//obj.getDes() 被装饰者的信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.des + <span class="string">&quot; &quot;</span> + <span class="keyword">super</span>.getPrice() + <span class="string">&quot;&amp;&amp;&quot;</span> + obj.getDes();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-6-7-Chocolate类：继承Decorator"><a href="#1-6-7-Chocolate类：继承Decorator" class="headerlink" title="1.6.7 Chocolate类：继承Decorator"></a>1.6.7 Chocolate类：继承Decorator</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体的Decorator，这里就是调味品</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chocolate</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chocolate</span><span class="params">(Drink obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(obj);</span><br><span class="line">        setDes(<span class="string">&quot; 巧克力 &quot;</span>);</span><br><span class="line">        setPrice(<span class="number">3.0f</span>);<span class="comment">//调味品的价格</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-6-8-Milk类：继承Decorator"><a href="#1-6-8-Milk类：继承Decorator" class="headerlink" title="1.6.8 Milk类：继承Decorator"></a>1.6.8 Milk类：继承Decorator</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Milk</span><span class="params">(Drink obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(obj);</span><br><span class="line">        setDes(<span class="string">&quot;牛奶&quot;</span>);</span><br><span class="line">        setPrice(<span class="number">2.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-6-9-Soy类：继承Decorator"><a href="#1-6-9-Soy类：继承Decorator" class="headerlink" title="1.6.9 Soy类：继承Decorator"></a>1.6.9 Soy类：继承Decorator</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Soy</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Soy</span><span class="params">(Drink obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(obj);</span><br><span class="line">        setDes(<span class="string">&quot; 豆浆 &quot;</span>);</span><br><span class="line">        setPrice(<span class="number">1.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-6-10-CoffeeBar类：客户端类"><a href="#1-6-10-CoffeeBar类：客户端类" class="headerlink" title="1.6.10 CoffeeBar类：客户端类"></a>1.6.10 CoffeeBar类：客户端类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeBar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//装饰者模式下的订单：2份巧克力+一份牛奶的LongBlack</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.点一份LongBlack</span></span><br><span class="line">        Drink order = <span class="keyword">new</span> LongBlack();</span><br><span class="line">        System.out.println(<span class="string">&quot;费用1=&quot;</span>+order.cost());</span><br><span class="line">        System.out.println(<span class="string">&quot;描述=&quot;</span>+order.getDes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.order 加入一份牛奶</span></span><br><span class="line">        order = <span class="keyword">new</span> Milk(order);</span><br><span class="line">        System.out.println(<span class="string">&quot;order 加入一份牛奶 费用= &quot;</span>+order.cost());</span><br><span class="line">        System.out.println(<span class="string">&quot;order 加入一份牛奶 描述=&quot;</span>+order.getDes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.order 加入一份巧克力</span></span><br><span class="line">        order = <span class="keyword">new</span> Chocolate(order);</span><br><span class="line">        System.out.println(<span class="string">&quot;order 加入一份牛奶 加入一份巧克力 费用= &quot;</span>+order.cost());</span><br><span class="line">        System.out.println(<span class="string">&quot;order 加入一份牛奶 加入一份巧克力 描述=&quot;</span>+order.getDes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.order 加入一份巧克力</span></span><br><span class="line">        order = <span class="keyword">new</span> Chocolate(order);</span><br><span class="line">        System.out.println(<span class="string">&quot;order 加入一份牛奶 加入2份巧克力 费用= &quot;</span>+order.cost());</span><br><span class="line">        System.out.println(<span class="string">&quot;order 加入一份牛奶 加入2份巧克力 描述=&quot;</span>+order.getDes());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">费用<span class="number">1</span>=<span class="number">6.0</span></span><br><span class="line">描述=LongBlack</span><br><span class="line">order 加入一份牛奶 费用= <span class="number">8.0</span></span><br><span class="line">order 加入一份牛奶 描述=牛奶 <span class="number">2.0</span>&amp;&amp;LongBlack</span><br><span class="line">order 加入一份牛奶 加入一份巧克力 费用= <span class="number">11.0</span></span><br><span class="line">order 加入一份牛奶 加入一份巧克力 描述= 巧克力  <span class="number">3.0</span>&amp;&amp;牛奶 <span class="number">2.0</span>&amp;&amp;LongBlack</span><br><span class="line">order 加入一份牛奶 加入<span class="number">2</span>份巧克力 费用= <span class="number">14.0</span></span><br><span class="line">order 加入一份牛奶 加入<span class="number">2</span>份巧克力 描述= 巧克力  <span class="number">3.0</span>&amp;&amp; 巧克力  <span class="number">3.0</span>&amp;&amp;牛奶 <span class="number">2.0</span>&amp;&amp;LongBlack</span><br></pre></td></tr></table></figure>
<p>分析：使用装饰者模式的好处？</p>
<ul>
<li>比如想加入一个Decaf</li>
</ul>
</blockquote>
<h4 id="1-6-11-Decaf类：继承Coffee"><a href="#1-6-11-Decaf类：继承Coffee" class="headerlink" title="1.6.11 Decaf类：继承Coffee"></a>1.6.11 Decaf类：继承Coffee</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decaf</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decaf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setDes(<span class="string">&quot;Decaf&quot;</span>);</span><br><span class="line">        setPrice(<span class="number">1.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-6-12-CoffeeBar类：客户端类"><a href="#1-6-12-CoffeeBar类：客户端类" class="headerlink" title="1.6.12 CoffeeBar类：客户端类"></a>1.6.12 CoffeeBar类：客户端类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeBar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//装饰者模式下的订单：2份巧克力+一份牛奶的LongBlack</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.点一份LongBlack</span></span><br><span class="line">        Drink order = <span class="keyword">new</span> LongBlack();</span><br><span class="line">        System.out.println(<span class="string">&quot;费用1=&quot;</span>+order.cost());</span><br><span class="line">        System.out.println(<span class="string">&quot;描述=&quot;</span>+order.getDes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.order 加入一份牛奶</span></span><br><span class="line">        order = <span class="keyword">new</span> Milk(order);</span><br><span class="line">        System.out.println(<span class="string">&quot;order 加入一份牛奶 费用= &quot;</span>+order.cost());</span><br><span class="line">        System.out.println(<span class="string">&quot;order 加入一份牛奶 描述=&quot;</span>+order.getDes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.order 加入一份巧克力</span></span><br><span class="line">        order = <span class="keyword">new</span> Chocolate(order);</span><br><span class="line">        System.out.println(<span class="string">&quot;order 加入一份牛奶 加入一份巧克力 费用= &quot;</span>+order.cost());</span><br><span class="line">        System.out.println(<span class="string">&quot;order 加入一份牛奶 加入一份巧克力 描述=&quot;</span>+order.getDes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.order 加入一份巧克力</span></span><br><span class="line">        order = <span class="keyword">new</span> Chocolate(order);</span><br><span class="line">        System.out.println(<span class="string">&quot;order 加入一份牛奶 加入2份巧克力 费用= &quot;</span>+order.cost());</span><br><span class="line">        System.out.println(<span class="string">&quot;order 加入一份牛奶 加入2份巧克力 描述=&quot;</span>+order.getDes());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line">        Drink order2 = <span class="keyword">new</span> Decaf();</span><br><span class="line">        System.out.println(<span class="string">&quot;费用1=&quot;</span>+order2.cost());</span><br><span class="line">        System.out.println(<span class="string">&quot;描述=&quot;</span>+order2.getDes());</span><br><span class="line"></span><br><span class="line">        order = <span class="keyword">new</span> Chocolate(order2);</span><br><span class="line">        System.out.println(<span class="string">&quot;order 加入一份牛奶  费用= &quot;</span>+order.cost());</span><br><span class="line">        System.out.println(<span class="string">&quot;order 加入一份牛奶  描述=&quot;</span>+order.getDes());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">费用<span class="number">1</span>=<span class="number">6.0</span></span><br><span class="line">描述=LongBlack</span><br><span class="line">order 加入一份牛奶 费用= <span class="number">8.0</span></span><br><span class="line">order 加入一份牛奶 描述=牛奶 <span class="number">2.0</span>&amp;&amp;LongBlack</span><br><span class="line">order 加入一份牛奶 加入一份巧克力 费用= <span class="number">11.0</span></span><br><span class="line">order 加入一份牛奶 加入一份巧克力 描述= 巧克力  <span class="number">3.0</span>&amp;&amp;牛奶 <span class="number">2.0</span>&amp;&amp;LongBlack</span><br><span class="line">order 加入一份牛奶 加入<span class="number">2</span>份巧克力 费用= <span class="number">14.0</span></span><br><span class="line">order 加入一份牛奶 加入<span class="number">2</span>份巧克力 描述= 巧克力  <span class="number">3.0</span>&amp;&amp; 巧克力  <span class="number">3.0</span>&amp;&amp;牛奶 <span class="number">2.0</span>&amp;&amp;LongBlack</span><br><span class="line">===================================</span><br><span class="line">费用<span class="number">1</span>=<span class="number">1.0</span></span><br><span class="line">描述=Decaf</span><br><span class="line">order 加入一份牛奶  费用= <span class="number">4.0</span></span><br><span class="line">order 加入一份牛奶  描述= 巧克力  <span class="number">3.0</span>&amp;&amp;Decaf</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="1-7-装饰者模式在JDK应用的源码分析"><a href="#1-7-装饰者模式在JDK应用的源码分析" class="headerlink" title="1.7 装饰者模式在JDK应用的源码分析"></a>1.7 装饰者模式在JDK应用的源码分析</h2><blockquote>
<p>以java.io流为例进行分析，在看InputStream的实现类时，主要看其中的IO包下的类</p>
</blockquote>
<p><img src="/2021/07/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/image-20210712225543454.png" alt="image-20210712225543454"></p>
<h3 id="1-7-1-源码客户端"><a href="#1-7-1-源码客户端" class="headerlink" title="1.7.1 源码客户端"></a>1.7.1 源码客户端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">yuanma</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\abc.txt&quot;</span>));</span><br><span class="line">        System.out.println(dis.read());</span><br><span class="line">        dis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-7-2-InputStream类：抽象类"><a href="#1-7-2-InputStream类：抽象类" class="headerlink" title="1.7.2 InputStream类：抽象类"></a>1.7.2 InputStream类：抽象类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStream</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MAX_SKIP_BUFFER_SIZE is used to determine the maximum buffer size to</span></span><br><span class="line">    <span class="comment">// use when skipping.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SKIP_BUFFER_SIZE = <span class="number">2048</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-7-3-FileInputStream源码：继承InputStream"><a href="#1-7-3-FileInputStream源码：继承InputStream" class="headerlink" title="1.7.3 FileInputStream源码：继承InputStream"></a>1.7.3 FileInputStream源码：继承InputStream</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/* File Descriptor - handle to the open file */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FileDescriptor fd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The path of the referenced file</span></span><br><span class="line"><span class="comment">     * (null if the stream is created with a file descriptor)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String path;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FileChannel channel = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object closeLock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> closed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    FileNotFoundException &#123;</span><br><span class="line">        <span class="keyword">this</span>(name != <span class="keyword">null</span> ? <span class="keyword">new</span> File(name) : <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-7-4-FilterInputStream类：继承InputStream，并且组合InputStream"><a href="#1-7-4-FilterInputStream类：继承InputStream，并且组合InputStream" class="headerlink" title="1.7.4 FilterInputStream类：继承InputStream，并且组合InputStream"></a>1.7.4 FilterInputStream类：继承InputStream，并且组合InputStream</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The input stream to be filtered.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">volatile</span> InputStream in;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &lt;code&gt;FilterInputStream&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * by assigning the  argument &lt;code&gt;in&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * to the field &lt;code&gt;this.in&lt;/code&gt; so as</span></span><br><span class="line"><span class="comment">     * to remember it for later use.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   in   the underlying input stream, or &lt;code&gt;null&lt;/code&gt; if</span></span><br><span class="line"><span class="comment">     *          this instance is to be created without an underlying stream.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">FilterInputStream</span><span class="params">(InputStream in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.in = in;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-7-5-DataInputStream源码：继承FilterInputStream"><a href="#1-7-5-DataInputStream源码：继承FilterInputStream" class="headerlink" title="1.7.5 DataInputStream源码：继承FilterInputStream"></a>1.7.5 DataInputStream源码：继承FilterInputStream</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> <span class="keyword">extends</span> <span class="title">FilterInputStream</span> <span class="keyword">implements</span> <span class="title">DataInput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a DataInputStream that uses the specified</span></span><br><span class="line"><span class="comment">     * underlying InputStream.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  in   the specified input stream</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataInputStream</span><span class="params">(InputStream in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * working arrays initialized on demand by readUTF</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span> bytearr[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">80</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> chararr[] = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">80</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结合源码分析：</p>
<ol>
<li>InputStream是抽象类，类似于我们前面的Drink</li>
<li>FileInputStream是InputStream子类，类似于我们前面的Decaf、LongBlack</li>
<li>FilterInputStream是InputStream子类，类似于我们前面的Decorator修饰者，含有 protected volatile InputStream in; </li>
<li>DataInputStrea是FilterInputStream子类，具体的修饰者，类似前面的Milk，Soy等</li>
<li>分析得出，在jdk的io体系中，就是使用的装饰者模式</li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>装饰者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（七）之结构型模式-组合模式</title>
    <url>/2021/07/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、组合模式"><a href="#一、组合模式" class="headerlink" title="一、组合模式"></a>一、组合模式</h1><h2 id="1、案例分析"><a href="#1、案例分析" class="headerlink" title="1、案例分析"></a>1、案例分析</h2><blockquote>
<p><strong>学校院系展示需求：</strong></p>
<p>​        编写程序展示一个学校院系结构：需求如下：要在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系。如下图：</p>
<p><img src="/2021/07/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/image-20210714000320952.png" alt="image-20210714000320952"></p>
</blockquote>
<h3 id="1-1-1-传统方案"><a href="#1-1-1-传统方案" class="headerlink" title="1.1.1 传统方案"></a>1.1.1 传统方案</h3><blockquote>
<p>传统方案：学校由学院组成，学院由系组成</p>
</blockquote>
<p><img src="/2021/07/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/image-20210712232905597.png" alt="image-20210712232905597"></p>
<h3 id="1-1-2-传统方案存在问题"><a href="#1-1-2-传统方案存在问题" class="headerlink" title="1.1.2 传统方案存在问题"></a>1.1.2 传统方案存在问题</h3><blockquote>
<ul>
<li>将学院看做是学校的子类，系是学院的子类，这样实际上是站在组织大小来进行分层次的。</li>
<li>实际上我们的要求：在一个页面中展示出学校的院系组成，一个学校有多个院，一个学院又多个系，因此这种方法，不能很好的实现管理操作，比如对学院、系的添加、删除、遍历等等（继承关系不方便进行管理）</li>
<li>解决方案：把学校、院、系都看做是组织结构，他们之间没有继承的关系，而是一个树形结构，可以更好的实现管理操作</li>
</ul>
</blockquote>
<h2 id="2、组合模式"><a href="#2、组合模式" class="headerlink" title="2、组合模式"></a>2、组合模式</h2><blockquote>
<ul>
<li><strong>定义：</strong>组合模式（Composite Pattern），又叫部分整体模式，它创建了对象组的树形结构，将对象组合成树状结构以表示”整体-部分”的层次关系。</li>
<li>组合模式依据属性结构来组合对象，用来表示部分以及整体层次</li>
<li>组合模式使得用户对单个对象和组合对象的访问具有一致性，即：组合能让客户以一致的方式处理个别对象以及组合对象。</li>
</ul>
</blockquote>
<h3 id="2-1-组合模式原理类图"><a href="#2-1-组合模式原理类图" class="headerlink" title="2.1 组合模式原理类图"></a>2.1 组合模式原理类图</h3><p><img src="/2021/07/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/image-20210713230011720.png" alt="image-20210713230011720"></p>
<blockquote>
<ul>
<li>Component：这是组合中对象声明接口，在适当情况下，实现所有类共有的接口默认行为，用于访问和管理Component子部件，Component可以是抽象类或者接口</li>
<li>Leaf：在组合中表示叶子节点，叶子节点没有子节点</li>
<li>Composite：非叶子节点，用于存储子部件，在Component接口中实现子部件的相关操作，比如增加（add）、删除。</li>
</ul>
</blockquote>
<h3 id="2-2-组合模式解决的问题"><a href="#2-2-组合模式解决的问题" class="headerlink" title="2.2 组合模式解决的问题"></a>2.2 组合模式解决的问题</h3><blockquote>
<p>组合模式解决这样的问题：当我们要处理的对象可以生成一颗树形结构，而我们要对树上的节点和叶子进行操作时，它能够提供一致的方式，而不用考虑它是节点还是叶子</p>
</blockquote>
<h2 id="3、代码实例"><a href="#3、代码实例" class="headerlink" title="3、代码实例"></a>3、代码实例</h2><blockquote>
<p>将前面的案例，使用组合模式，则如下图所示：</p>
<ol>
<li>OrganizationComponent是一个抽象类</li>
<li>University继承OrganizationComponent，内聚了OrganizationComponent对象，属于Composite</li>
<li>College继承OrganizationComponent，内聚了OrganizationComponent对象，属于Composite</li>
<li>Department继承OrganizationComponent，只使用了print方法。属于Leaf</li>
</ol>
</blockquote>
<p><img src="/2021/07/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/image-20210714001353553.png" alt="image-20210714001353553"></p>
<h3 id="3-1-OrganizationComponent类"><a href="#3-1-OrganizationComponent类" class="headerlink" title="3.1 OrganizationComponent类"></a>3.1 OrganizationComponent类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OrganizationComponent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> String des;<span class="comment">//说明</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrganizationComponent</span><span class="params">(String name, String des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.des = des;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(OrganizationComponent organizationComponent)</span></span>&#123;</span><br><span class="line">        <span class="comment">//默认实现</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(OrganizationComponent organizationComponent)</span></span>&#123;</span><br><span class="line">        <span class="comment">//默认实现</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> des;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDes</span><span class="params">(String des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.des = des;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法print，做成抽象的，子类都需要实现</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-University类"><a href="#3-2-University类" class="headerlink" title="3.2 University类"></a>3.2 University类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//University 就是Composite，可以管理college</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">University</span> <span class="keyword">extends</span> <span class="title">OrganizationComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;OrganizationComponent&gt; organizationComponents = <span class="keyword">new</span> ArrayList&lt;OrganizationComponent&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">University</span><span class="params">(String name, String des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, des);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写add</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span><br><span class="line">        organizationComponents.add(organizationComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写remove</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span><br><span class="line">        organizationComponents.remove(organizationComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getDes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//print方法，就是输出university包含的学院</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>+getName()+<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历organizationComponents</span></span><br><span class="line">        <span class="keyword">for</span> (OrganizationComponent organizationComponent:organizationComponents)&#123;</span><br><span class="line">            organizationComponent.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-College类"><a href="#3-3-College类" class="headerlink" title="3.3 College类"></a>3.3 College类</h3><blockquote>
<p>其实College和University在代码本质上是差不多的，为什么不在抽象一个类，而又重新写一遍？</p>
<ul>
<li>因为将来实际业务中，college的add和university中的add不一定完全一样</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">College</span> <span class="keyword">extends</span> <span class="title">OrganizationComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list中存放的是department</span></span><br><span class="line">    List&lt;OrganizationComponent&gt; organizationComponents = <span class="keyword">new</span> ArrayList&lt;OrganizationComponent&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">College</span><span class="params">(String name, String des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, des);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写add</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将来实际业务中，college的add和university中的add不一定完全一样</span></span><br><span class="line">        organizationComponents.add(organizationComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写remove</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span><br><span class="line">        organizationComponentssss.remove(organizationComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getDes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//print方法，就是输出college包含的系</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>+getName()+<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历organizationComponents</span></span><br><span class="line">        <span class="keyword">for</span> (OrganizationComponent organizationComponent:organizationComponents)&#123;</span><br><span class="line">            organizationComponent.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-Department类"><a href="#3-4-Department类" class="headerlink" title="3.4 Department类"></a>3.4 Department类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> <span class="keyword">extends</span> <span class="title">OrganizationComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">(String name, String des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, des);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getDes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//add,remove就不用写了，因为他是叶子节点</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-5-Client类"><a href="#3-5-Client类" class="headerlink" title="3.5 Client类"></a>3.5 Client类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从大到小创建对象</span></span><br><span class="line">        OrganizationComponent university = <span class="keyword">new</span> University(<span class="string">&quot;清华大学&quot;</span>,<span class="string">&quot;中国顶级大学&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学院</span></span><br><span class="line">        OrganizationComponent computerCollege = <span class="keyword">new</span> College(<span class="string">&quot;计算机学院&quot;</span>, <span class="string">&quot;计算机学院&quot;</span>);</span><br><span class="line">        OrganizationComponent infoEngineerCollege = <span class="keyword">new</span> College(<span class="string">&quot;信息工程学院&quot;</span>, <span class="string">&quot;信息工程学院&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建各个学院下面的系（专业）</span></span><br><span class="line">        computerCollege.add(<span class="keyword">new</span> Department(<span class="string">&quot;软件工程&quot;</span>,<span class="string">&quot;软件工程不错&quot;</span>));</span><br><span class="line">        computerCollege.add(<span class="keyword">new</span> Department(<span class="string">&quot;网络工程&quot;</span>,<span class="string">&quot;网络工程不错&quot;</span>));</span><br><span class="line">        computerCollege.add(<span class="keyword">new</span> Department(<span class="string">&quot;计算机科学与技术&quot;</span>,<span class="string">&quot;计算机科学与技术是老牌的专业&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//信息工程学院添加专业</span></span><br><span class="line">        infoEngineerCollege.add(<span class="keyword">new</span> Department(<span class="string">&quot;通信工程&quot;</span>,<span class="string">&quot;通信工程不好学&quot;</span>));</span><br><span class="line">        infoEngineerCollege.add(<span class="keyword">new</span> Department(<span class="string">&quot;信息工程&quot;</span>,<span class="string">&quot;信息工程好学&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将学院加入到学校</span></span><br><span class="line">        university.add(computerCollege);</span><br><span class="line">        university.add(infoEngineerCollege);</span><br><span class="line"></span><br><span class="line">        university.print();<span class="comment">//输出学校</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">        computerCollege.print();<span class="comment">//输出某个学院</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">----------------------清华大学-----------------------</span><br><span class="line">----------------------计算机学院-----------------------</span><br><span class="line">软件工程</span><br><span class="line">网络工程</span><br><span class="line">计算机科学与技术</span><br><span class="line">----------------------信息工程学院-----------------------</span><br><span class="line">通信工程</span><br><span class="line">信息工程</span><br><span class="line">====================================</span><br><span class="line">----------------------计算机学院-----------------------</span><br><span class="line">软件工程</span><br><span class="line">网络工程</span><br><span class="line">计算机科学与技术</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<ul>
<li>通过组合模式，我们就可以很好的输出学校和学院的组合结构了。</li>
</ul>
</blockquote>
<h2 id="4、组合模式在JDK集合中的源码分析—HashMap"><a href="#4、组合模式在JDK集合中的源码分析—HashMap" class="headerlink" title="4、组合模式在JDK集合中的源码分析—HashMap"></a>4、组合模式在JDK集合中的源码分析—HashMap</h2><h3 id="4-1-简单代码示例"><a href="#4-1-简单代码示例" class="headerlink" title="4.1 简单代码示例"></a>4.1 简单代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Composite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">//1.Map就是一个抽象的构建（类似我们的Component）</span></span><br><span class="line">        <span class="comment">//2.HashMap是一个中间的构建（Composite），实现/继承了相关方法 put\putAll</span></span><br><span class="line">        <span class="comment">//3. Node是HashMap的静态内部类，类似Leaf叶子节点，这里就没有put\putAll</span></span><br><span class="line">        Map&lt;Integer,String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;Integer,String&gt;();</span><br><span class="line">        hashMap.put(<span class="number">0</span>,<span class="string">&quot;东游记&quot;</span>);<span class="comment">//直接存放叶子节点</span></span><br><span class="line">        Map&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;Integer,String&gt;();</span><br><span class="line">        map.put(<span class="number">1</span>,<span class="string">&quot;西游记&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>,<span class="string">&quot;红楼梦&quot;</span>);</span><br><span class="line">        hashMap.putAll(map);</span><br><span class="line">        System.out.println(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">0</span>=东游记, <span class="number">1</span>=西游记, <span class="number">2</span>=红楼梦&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="4-2-源码分析"><a href="#4-2-源码分析" class="headerlink" title="4.2 源码分析"></a>4.2 源码分析</h3><blockquote>
<ol>
<li><p>Map就相当于组合模式中的Component，打开Map的接口发现，Map是一个接口，并且有put和putAll两个方法；</p>
<p><img src="/2021/07/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/image-20210714223637027.png" alt="image-20210714223637027"></p>
</li>
<li><p>Map的子类有：AbstractMap（抽象类）</p>
<p><img src="/2021/07/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/image-20210714223845657.png" alt="image-20210714223845657"></p>
<p>AbstractMap类中的put方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法是一个默认方法，<strong>需要由其子类来实现</strong></p>
</li>
<li><p>AbstractMap的子类有：HashMap</p>
<p><img src="/2021/07/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/image-20210714224251190.png" alt="image-20210714224251190"></p>
<p>HashMap：具体的Composite</p>
<p>AbstractMap和Map就可以看做是Component，抽象层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>HashMap中有个Node类，相当于组合模式中的Leaf（叶子节点）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>HashMap的put方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>put方法中的putVal详情如下：也会用一个Node节点来存放key和value</p>
<p><img src="/2021/07/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/image-20210714225031093.png" alt="image-20210714225031093"></p>
</li>
</ol>
</blockquote>
<h3 id="4-3-源码的类图"><a href="#4-3-源码的类图" class="headerlink" title="4.3 源码的类图"></a>4.3 源码的类图</h3><p><img src="/2021/07/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/image-20210714225725422.png" alt="image-20210714225725422"></p>
<h2 id="5、组合模式的注意事项和细节"><a href="#5、组合模式的注意事项和细节" class="headerlink" title="5、组合模式的注意事项和细节"></a>5、组合模式的注意事项和细节</h2><blockquote>
<ol>
<li>简化客户端操作。客户端只需要面对一致的对象而不用考虑整体部分或者叶子节点的问题。</li>
<li>具有较强的扩展性。当我们要更改组合对象时，我们只需要调整内部的层次关系，客户端不用做出任何改动。</li>
<li>方便创建出复杂的层次结构。客户端不用理会组合里面的组成细节，容易添加节点或者叶子从而创建出复杂的属性结构。</li>
<li>需要遍历组织结构，或者处理的对象具有树形结构时，非常适合使用组合模式</li>
<li>要求较高的抽象性，如果节点和叶子有很多的差异性的话，比如很多方法和属性都不一样，不适合使用组合模式（前面的系、学院、学校都有名称和描述，因此其方法和属性都是很接近，可以使用组合模式）</li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>组合模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（八）之结构型模式-外观模式</title>
    <url>/2021/07/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、外观模式"><a href="#一、外观模式" class="headerlink" title="一、外观模式"></a>一、外观模式</h1><h2 id="1、案例分析—影院管理项目"><a href="#1、案例分析—影院管理项目" class="headerlink" title="1、案例分析—影院管理项目"></a>1、案例分析—影院管理项目</h2><blockquote>
<p><strong>要求组建一个家庭影院</strong></p>
<p>​    DVD播放器、投影仪、自动屏幕、环绕立体声、爆米花机，要求完成使用家庭影院的功能，其过程为：</p>
<ol>
<li>直接用遥控器：统筹各设备开关</li>
<li>开爆米花机</li>
<li>放下屏幕</li>
<li>开投影仪</li>
<li>开音响</li>
<li>开DVD，选DVD</li>
<li>去拿爆米花</li>
<li>调暗灯光</li>
<li>播放</li>
<li>观影结束后，关闭各种设备</li>
</ol>
</blockquote>
<h3 id="1-1-传统方案解决影院管理"><a href="#1-1-传统方案解决影院管理" class="headerlink" title="1.1 传统方案解决影院管理"></a>1.1 传统方案解决影院管理</h3><blockquote>
<p>CLientTest类中直接使用各自系统，如爆米花机、屏幕、投影仪等等</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClientTest&#123;</span><br><span class="line">    <span class="function">publicstatic <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.创建相关的对象</span></span><br><span class="line">        <span class="comment">//2.调用创建的各个对象的一系列方法</span></span><br><span class="line">        <span class="comment">//3.调用DVDPlayer，对象的play方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-2-传统方案分析"><a href="#1-2-传统方案分析" class="headerlink" title="1.2 传统方案分析"></a>1.2 传统方案分析</h3><blockquote>
<ol>
<li>在ClientTest的main方法中，创建各个子系统的对象，并直接去调用子系统（对象）的相关方法，会造成调用过程混乱，没有清晰的过程</li>
<li>不利于在ClientTest中，去维护对子系统的操作。比如一个子系统发生改变，ClientTest都要做不小的改动。</li>
</ol>
</blockquote>
<h3 id="1-3-解决思路"><a href="#1-3-解决思路" class="headerlink" title="1.3 解决思路"></a>1.3 解决思路</h3><blockquote>
<ol>
<li>定义一个高层接口，给子系统中的一组接口提供一个<strong>一致的界面</strong>（<strong>比如在高层接口中提供四个方法ready、play、pause、end</strong>），用来访问子系统中的一群接口</li>
<li>即通过定义一个一致的接口（界面类），用以屏蔽内部子系统的细节，使得调用端只需要跟这个接口发生调用，而无需关心这个子系统的内部细节==&gt;<strong>外观模式</strong></li>
</ol>
</blockquote>
<h2 id="2、外观模式"><a href="#2、外观模式" class="headerlink" title="2、外观模式"></a>2、外观模式</h2><h3 id="2-1-基本介绍"><a href="#2-1-基本介绍" class="headerlink" title="2.1 基本介绍"></a>2.1 基本介绍</h3><blockquote>
<ol>
<li>外观模式（Facade），也叫过程模式：外观模式为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</li>
<li>外观模式通过定义一个一致的接口，用以屏蔽内部子系统的细节，使得调用端口只需要根这个接口发生调用，而无需关系这个子系统的内部细节。</li>
</ol>
</blockquote>
<h3 id="2-2-原理类图"><a href="#2-2-原理类图" class="headerlink" title="2.2 原理类图"></a>2.2 原理类图</h3><p><img src="/2021/07/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/image-20210718231739159.png" alt="image-20210718231739159"></p>
<blockquote>
<p>原理类图的说明（外观模式的角色）</p>
<ol>
<li>外观类（Facade）：为调用端提供统一的调用接口，外观类知道哪些子系统负责处理请求，从而将调用端的请求代理给适当子系统对象。</li>
<li>调用者（Client）：外观接口的调用者</li>
<li>子系统的集合：指模块或者子系统，处理Facade对象指派的任务，它是功能的实际提供者。</li>
</ol>
</blockquote>
<h2 id="3、外观模式解决影院管理"><a href="#3、外观模式解决影院管理" class="headerlink" title="3、外观模式解决影院管理"></a>3、外观模式解决影院管理</h2><blockquote>
<ol>
<li><p>外观模式可以理解为转换一群接口，客户只要调用一个接口，而不用调用多个接口才能达到目的。</p>
<p>​    比如：在pc上安装软件的时候经常有一键安装选项（省去选择安装目录、安装的组件等等），还有就是手机的重启功能（把关机和启动合为一个操作）</p>
</li>
<li><p>外观模式就是解决多个复杂接口带来的使用困难，起到简化用户操作的作用。</p>
</li>
</ol>
</blockquote>
<h2 id="4、代码实例"><a href="#4、代码实例" class="headerlink" title="4、代码实例"></a>4、代码实例</h2><h3 id="4-1-DVDPlayer类"><a href="#4-1-DVDPlayer类" class="headerlink" title="4.1 DVDPlayer类"></a>4.1 DVDPlayer类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DVDPlayer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用单例模式，饿汉式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DVDPlayer instance = <span class="keyword">new</span> DVDPlayer();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DVDPlayer <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; dvd on &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; dvd off &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; dvd is playing &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; dvd pause &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-Popcorn类"><a href="#4-2-Popcorn类" class="headerlink" title="4.2 Popcorn类"></a>4.2 Popcorn类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//爆米花</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Popcorn</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Popcorn instance = <span class="keyword">new</span> Popcorn();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Popcorn <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; popcorn on &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; popcorn off &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; popcorn is poping &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-Projector类"><a href="#4-3-Projector类" class="headerlink" title="4.3 Projector类"></a>4.3 Projector类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//投影仪</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Projector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Projector instance = <span class="keyword">new</span> Projector();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Projector <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; Projector on &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; Projector off &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">focus</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; Projector is focus &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-4-Screen类"><a href="#4-4-Screen类" class="headerlink" title="4.4 Screen类"></a>4.4 Screen类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Screen</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Screen instance = <span class="keyword">new</span> Screen();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Screen <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; Screen up &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; Screen down &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-5-Stereo类"><a href="#4-5-Stereo类" class="headerlink" title="4.5 Stereo类"></a>4.5 Stereo类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//立体声</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stereo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Stereo instance = <span class="keyword">new</span> Stereo();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stereo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; Stereo on &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; Stereo off &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; Stereo up &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-6-ThreaterLight类"><a href="#4-6-ThreaterLight类" class="headerlink" title="4.6 ThreaterLight类"></a>4.6 ThreaterLight类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//投影仪灯光</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheaterLight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TheaterLight instance = <span class="keyword">new</span> TheaterLight();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TheaterLight <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; ThreaterLight on &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; ThreaterLight off &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; ThreaterLight dim &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bright</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; ThreaterLight bright &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-7-HomeTheateFacade类"><a href="#4-7-HomeTheateFacade类" class="headerlink" title="4.7 HomeTheateFacade类"></a>4.7 HomeTheateFacade类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeTheateFacade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义各个子系统的对象</span></span><br><span class="line">    <span class="keyword">private</span> TheaterLight theaterLight;<span class="comment">//灯光</span></span><br><span class="line">    <span class="keyword">private</span> Popcorn popcorn;<span class="comment">//爆米花</span></span><br><span class="line">    <span class="keyword">private</span> Stereo stereo;<span class="comment">//立体声</span></span><br><span class="line">    <span class="keyword">private</span> Projector projector;<span class="comment">//投影仪</span></span><br><span class="line">    <span class="keyword">private</span> Screen screen;<span class="comment">//屏幕</span></span><br><span class="line">    <span class="keyword">private</span> DVDPlayer dvdPlayer;<span class="comment">//dvd播放器</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeTheateFacade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.theaterLight = TheaterLight.getInstance();</span><br><span class="line">        <span class="keyword">this</span>.popcorn = Popcorn.getInstance();</span><br><span class="line">        <span class="keyword">this</span>.stereo = Stereo.getInstance();</span><br><span class="line">        <span class="keyword">this</span>.projector = Projector.getInstance();</span><br><span class="line">        <span class="keyword">this</span>.screen = Screen.getInstance();</span><br><span class="line">        <span class="keyword">this</span>.dvdPlayer = DVDPlayer.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作分为4步</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ready</span><span class="params">()</span></span>&#123;</span><br><span class="line">        popcorn.on();<span class="comment">//打开爆米花机</span></span><br><span class="line">        popcorn.pop();<span class="comment">//炸爆米花</span></span><br><span class="line">        screen.down();<span class="comment">//放下屏幕</span></span><br><span class="line">        projector.on();<span class="comment">//打开投影仪</span></span><br><span class="line">        stereo.on();<span class="comment">//立体声打开</span></span><br><span class="line">        dvdPlayer.on();<span class="comment">//dvd打开</span></span><br><span class="line">        theaterLight.dim();<span class="comment">//调暗灯光</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dvdPlayer.play();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dvdPlayer.pause();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span></span>&#123;</span><br><span class="line">        popcorn.off();<span class="comment">//关闭爆米花机</span></span><br><span class="line">        theaterLight.bright();<span class="comment">//灯光调亮</span></span><br><span class="line">        screen.up();<span class="comment">//屏幕升上去</span></span><br><span class="line">        projector.off();<span class="comment">//关闭投影仪</span></span><br><span class="line">        stereo.off();<span class="comment">//关闭立体声</span></span><br><span class="line">        dvdPlayer.off();<span class="comment">//关闭dvd</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-8-Client类"><a href="#4-8-Client类" class="headerlink" title="4.8 Client类"></a>4.8 Client类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HomeTheateFacade homeTheateFacade = <span class="keyword">new</span> HomeTheateFacade();</span><br><span class="line">        homeTheateFacade.ready();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        homeTheateFacade.play();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        homeTheateFacade.pause();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        homeTheateFacade.end();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> popcorn on </span><br><span class="line"> popcorn is poping </span><br><span class="line"> Screen down </span><br><span class="line"> Projector on </span><br><span class="line"> Stereo on </span><br><span class="line"> dvd on </span><br><span class="line"> ThreaterLight dim </span><br><span class="line">===============</span><br><span class="line"> dvd is playing </span><br><span class="line">===============</span><br><span class="line"> dvd pause </span><br><span class="line">===============</span><br><span class="line"> popcorn off </span><br><span class="line"> ThreaterLight bright </span><br><span class="line"> Screen up </span><br><span class="line"> Projector off </span><br><span class="line"> Stereo off </span><br><span class="line"> dvd off </span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="5、外观模式的源码讲解"><a href="#5、外观模式的源码讲解" class="headerlink" title="5、外观模式的源码讲解"></a>5、外观模式的源码讲解</h2><h3 id="5-1-Configuration类"><a href="#5-1-Configuration类" class="headerlink" title="5.1 Configuration类"></a>5.1 Configuration类</h3><blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.Configuration;</span><br></pre></td></tr></table></figure>
<p>查看Configuration的子类，当中有一个newMetaObject子类</p>
</blockquote>
<p><img src="/2021/07/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/image-20210718230226617.png" alt="image-20210718230226617"></p>
<blockquote>
<p>（1）在下面的方法中，可以看成是外观模式聚合了objectFactory和objectWrapperFactory</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> MetaObject <span class="title">newMetaObject</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> MetaObject.forObject(object,objectFactory,objectWrapperFactory);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>（2）forObject源码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MetaObject <span class="title">forObject</span><span class="params">(Object object, ObjectFactory objectFactory, ObjectWrapperFactory objectWrapperFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> NULL_META_OBJECT;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> MetaObject(object, objectFactory, objectWrapperFactory);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>（3）MetaObject方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">MetaObject</span><span class="params">(Object object, ObjectFactory objectFactory, ObjectWrapperFactory objectWrapperFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.originalObject = object;</span><br><span class="line">    <span class="keyword">this</span>.objectFactory = objectFactory;</span><br><span class="line">    <span class="keyword">this</span>.objectWrapperFactory = objectWrapperFactory;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> ObjectWrapper) &#123;</span><br><span class="line">      <span class="keyword">this</span>.objectWrapper = (ObjectWrapper) object;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (objectWrapperFactory.hasWrapperFor(object)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.objectWrapper = objectWrapperFactory.getWrapperFor(<span class="keyword">this</span>, object);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">      <span class="keyword">this</span>.objectWrapper = <span class="keyword">new</span> MapWrapper(<span class="keyword">this</span>, (Map) object);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.objectWrapper = <span class="keyword">new</span> BeanWrapper(<span class="keyword">this</span>, object);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-2-类图理解"><a href="#5-2-类图理解" class="headerlink" title="5.2 类图理解"></a>5.2 类图理解</h3><p><img src="/2021/07/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/image-20210718232107698.png" alt="image-20210718232105929"></p>
<h2 id="6、外观模式的注意事项和细节"><a href="#6、外观模式的注意事项和细节" class="headerlink" title="6、外观模式的注意事项和细节"></a>6、外观模式的注意事项和细节</h2><blockquote>
<ol>
<li>外观模式对外屏蔽了子系统的细节，因此外观模式降低了客户端对子系统使用的复杂性</li>
<li>外观模式对客户端与子系统的耦合关系，让子系统内部的模块更加容易维护和扩展</li>
<li>通过合理的使用外观模式，可以帮我们更好的划分访问的层次</li>
<li>当系统需要进行分层设计时，可以考虑使用Facade模式</li>
<li>在维护一个遗留的大型系统时，可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统开发一个Facade类，来提供遗留系统的比较清晰简单的接口，让新系统与Facade类交互，提高复用性</li>
<li>不能过多的或不合理的使用外观模式，使用外观模式好，还是直接调用模块好，要以让系统有层次，利于维护为目的</li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>外观模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（九）之结构型模式-享元模式</title>
    <url>/2021/07/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、享元模式"><a href="#一、享元模式" class="headerlink" title="一、享元模式"></a>一、享元模式</h1><h2 id="1、案例分析"><a href="#1、案例分析" class="headerlink" title="1、案例分析"></a>1、案例分析</h2><h3 id="1-1-展示网站项目需求"><a href="#1-1-展示网站项目需求" class="headerlink" title="1.1 展示网站项目需求"></a>1.1 展示网站项目需求</h3><blockquote>
<p>小型的外包项目，给客户A做一个产品展示网站，客户A的朋友感觉效果不错，也希望做这样的产品展示网站，但是要求有些不同：</p>
<ol>
<li>有客户要求以新闻的形式发布</li>
<li>有客户要求以博客的形式发布</li>
<li>有客户希望以微信公众号的形式发布</li>
</ol>
</blockquote>
<h3 id="1-2-传统方案解决网站展现项目"><a href="#1-2-传统方案解决网站展现项目" class="headerlink" title="1.2 传统方案解决网站展现项目"></a>1.2 传统方案解决网站展现项目</h3><blockquote>
<ol>
<li>直接复制粘贴一份，然后根据客户不同要求，进行定制修改</li>
<li>给每个网站租用一个空间</li>
<li>方案设计示意图</li>
</ol>
</blockquote>
<p><img src="/2021/07/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/截图.png" alt="img"></p>
<h3 id="1-3-传统方案解决网站展现项目-问题分析"><a href="#1-3-传统方案解决网站展现项目-问题分析" class="headerlink" title="1.3 传统方案解决网站展现项目-问题分析"></a>1.3 传统方案解决网站展现项目-问题分析</h3><blockquote>
<ol>
<li>需要的网站结构相似度很高，而且都不是高访问量网站，如果分成多个虚拟空间来处理，相当于一个相同网站的实例对象很多，造成服务器的资源浪费</li>
<li>解决思路：整合到一个网站中，共享其相关的代码和数据，对于硬盘、内存、CPU、数据库空间等服务器资源都可以达成共享，减少服务器资源</li>
<li>对于代码来说，由于是一份实例，维护和扩展都更加容易</li>
<li>上面的解决思路就可以使用 <strong>享元模式</strong> 来解决。</li>
</ol>
</blockquote>
<h2 id="2、享元模式基本介绍"><a href="#2、享元模式基本介绍" class="headerlink" title="2、享元模式基本介绍"></a>2、享元模式基本介绍</h2><h3 id="2-1-基本介绍"><a href="#2-1-基本介绍" class="headerlink" title="2.1 基本介绍"></a>2.1 基本介绍</h3><blockquote>
<ol>
<li>享元模式（Flyweight Pattern）也叫蝇量模式，运用共享技术有效地支持大量细粒度的对象</li>
<li>常用于系统底层开发，解决系统的性能问题。像<strong>数据库连接池</strong>，里面都是创建好的连接对象，在这些连接对象中有我们需要的则直接拿来用，避免重新创建，如果没有我们需要的，则创建一个</li>
<li>享元模式能够解决 <strong>重复对象的内存浪费的问题</strong>，当系统中有大量相似对象，需要缓冲池时，不需要总是创建新对象，可以从缓冲池中拿。这样可以降低系统内存，同时提高效率。</li>
<li>享元模式<strong>经典的应用场景</strong>就是池技术了，String常量池、数据库连接池、缓冲池等等都是享元模式的应用，享元模式是池技术的重要实现方式。</li>
</ol>
</blockquote>
<h3 id="2-2-原理类图"><a href="#2-2-原理类图" class="headerlink" title="2.2 原理类图"></a>2.2 原理类图</h3><p><img src="/2021/07/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/image-20210719233534462.png" alt="image-20210719233534462"></p>
<blockquote>
<ol>
<li>FlyWeight是抽象的享元角色，它是产品的抽象类，同时定义出对象的<strong>外部状态</strong>和<strong>内部状态</strong>（后面介绍）的接口或实现</li>
<li>ConcreteFlyWeight是具体的享元角色，是具体的产品类，实现抽象角色定义相关业务</li>
<li>UnSharedFlyWeight是不可共享的角色，一般不会出现在享元工厂</li>
<li>FlyWeightFactory享元工厂类，用于构建一个池容器（集合），同时提供从池中获取对象的方法</li>
</ol>
</blockquote>
<h4 id="2-2-1-内部状态和外部状态"><a href="#2-2-1-内部状态和外部状态" class="headerlink" title="2.2.1 内部状态和外部状态"></a>2.2.1 内部状态和外部状态</h4><blockquote>
<p>举例：比如围棋、五子棋、跳棋，它们都有大量的棋子对象，围棋和五子棋只有黑白两色，跳棋颜色多一点，所以棋子颜色就是棋子的内部状态（相对稳定）；而各个棋子之间的差别就是位置的不同，当我们落子后，落子颜色是定的，但位置是变化的，所以棋子坐标就是棋子的外部状态</p>
<ol>
<li>享元模式提出了两个要求：细粒度和共享对象。这里就涉及到内部状态和外部状态，即将对象信息分为两个部分：<strong>内部状态</strong>和<strong>外部状态</strong>。</li>
<li>内部状态：对象共享出来的信息，存储在享元对象内部且不会随环境的改变而改变</li>
<li>外部状态：对象得以依赖的一个标记，是随环境改变而改变，不可共享。</li>
</ol>
<p>再次举例：围棋理论上有361个空位可以放棋子，每盘棋都有可能有两三百个棋子对象产生，因为内存空间有限，一台服务器很难支持更多的玩家玩围棋游戏，如果用享元模式来处理棋子，那么棋子对象就可以减少到只有两个实例（黑加白），这样就很好的解决了对象的开销问题。</p>
</blockquote>
<h2 id="3、代码实例"><a href="#3、代码实例" class="headerlink" title="3、代码实例"></a>3、代码实例</h2><h3 id="3-1-享元模式解决网站项目需求类图"><a href="#3-1-享元模式解决网站项目需求类图" class="headerlink" title="3.1 享元模式解决网站项目需求类图"></a>3.1 享元模式解决网站项目需求类图</h3><p><img src="/2021/07/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/截图-1626878537406.png" alt="img"></p>
<h3 id="3-2-WebSite类"><a href="#3-2-WebSite类" class="headerlink" title="3.2 WebSite类"></a>3.2 WebSite类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-ConcreteWebSite类"><a href="#3-3-ConcreteWebSite类" class="headerlink" title="3.3 ConcreteWebSite类"></a>3.3 ConcreteWebSite类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteWebSite</span> <span class="keyword">extends</span>  <span class="title">WebSite</span></span>&#123;</span><br><span class="line">    <span class="comment">//内部状态</span></span><br><span class="line">    <span class="keyword">private</span> String type = <span class="string">&quot;&quot;</span>;<span class="comment">//网站发布的形式（类型）</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteWebSite</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;网站的发布形式为:&quot;</span>+type+<span class="string">&quot;在使用中....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-WebSiteFactory类"><a href="#3-4-WebSiteFactory类" class="headerlink" title="3.4 WebSiteFactory类"></a>3.4 WebSiteFactory类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">//网站工厂类，根据需求返回一个网站</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSiteFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//集合，充当池的作用</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,ConcreteWebSite&gt; pool = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据网站的类型，返回一个网站，如果没有就创建一个网站，并放入池中，并返回</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebSite <span class="title">getWebSiteCategory</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!pool.containsKey(type))&#123;</span><br><span class="line">            <span class="comment">//如果没有，则创建一个放入池中</span></span><br><span class="line">            pool.put(type,<span class="keyword">new</span> ConcreteWebSite(type));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (WebSite) pool.get(type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据网站分类的总数（池中有多少个网站类型）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWebSiteCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pool.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-5-Client类"><a href="#3-5-Client类" class="headerlink" title="3.5 Client类"></a>3.5 Client类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个工厂类</span></span><br><span class="line">        WebSiteFactory factory = <span class="keyword">new</span> WebSiteFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要一个以新闻形式发布的网站</span></span><br><span class="line">        WebSite webSite1 = factory.getWebSiteCategory(<span class="string">&quot;新闻&quot;</span>);</span><br><span class="line">        webSite1.use();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">网站的发布形式为:新闻在使用中....</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="3-5-1-Client类修改"><a href="#3-5-1-Client类修改" class="headerlink" title="3.5.1 Client类修改"></a>3.5.1 Client类修改</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个工厂类</span></span><br><span class="line">        WebSiteFactory factory = <span class="keyword">new</span> WebSiteFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要一个以新闻形式发布的网站</span></span><br><span class="line">        WebSite webSite1 = factory.getWebSiteCategory(<span class="string">&quot;新闻&quot;</span>);</span><br><span class="line">        webSite1.use();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要一个以博客形式发布的网站</span></span><br><span class="line">        WebSite webSite2 = factory.getWebSiteCategory(<span class="string">&quot;博客&quot;</span>);</span><br><span class="line">        webSite2.use();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要一个以博客形式发布的网站</span></span><br><span class="line">        WebSite webSite3 = factory.getWebSiteCategory(<span class="string">&quot;博客&quot;</span>);</span><br><span class="line">        webSite3.use();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要一个以博客形式发布的网站</span></span><br><span class="line">        WebSite webSite4 = factory.getWebSiteCategory(<span class="string">&quot;博客&quot;</span>);</span><br><span class="line">        webSite4.use();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;网站的分给共：&quot;</span>+factory.getWebSiteCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">网站的发布形式为:新闻在使用中....</span><br><span class="line">网站的发布形式为:博客在使用中....</span><br><span class="line">网站的发布形式为:博客在使用中....</span><br><span class="line">网站的发布形式为:博客在使用中....</span><br><span class="line">网站的分给共：<span class="number">2</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="3-5-2-分析"><a href="#3-5-2-分析" class="headerlink" title="3.5.2 分析"></a>3.5.2 分析</h4><blockquote>
<p>在ConcreteWebSite类中，type可以看做为内部状态，但我们缺少外部状态</p>
<p>因此可以修改其类图</p>
</blockquote>
<p><img src="/2021/07/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/截图-1626878760420.png" alt="img"></p>
<h3 id="3-6-加入外部状态后的代码实例"><a href="#3-6-加入外部状态后的代码实例" class="headerlink" title="3.6 加入外部状态后的代码实例"></a>3.6 加入外部状态后的代码实例</h3><h4 id="3-6-1-WebSite类"><a href="#3-6-1-WebSite类" class="headerlink" title="3.6.1 WebSite类"></a>3.6.1 WebSite类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">(User user)</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-6-2-User类"><a href="#3-6-2-User类" class="headerlink" title="3.6.2 User类"></a>3.6.2 User类</h4><blockquote>
<p>User作为外部状态，每一个不同用户</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-6-3-ConcreteWebSite类"><a href="#3-6-3-ConcreteWebSite类" class="headerlink" title="3.6.3 ConcreteWebSite类"></a>3.6.3 ConcreteWebSite类</h4><blockquote>
<p>将外部状态user作为参数，添加在use方法中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteWebSite</span> <span class="keyword">extends</span>  <span class="title">WebSite</span></span>&#123;</span><br><span class="line">    <span class="comment">//内部状态</span></span><br><span class="line">    <span class="keyword">private</span> String type = <span class="string">&quot;&quot;</span>;<span class="comment">//网站发布的形式（类型）</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteWebSite</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;网站的发布形式为:&quot;</span>+type+<span class="string">&quot;,&quot;</span>+user.getName()+<span class="string">&quot;在使用中....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-6-4-WebSiteFactory类"><a href="#3-6-4-WebSiteFactory类" class="headerlink" title="3.6.4 WebSiteFactory类"></a>3.6.4 WebSiteFactory类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">//网站工厂类，根据需求返回一个网站</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSiteFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//集合，充当池的作用</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,ConcreteWebSite&gt; pool = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据网站的类型，返回一个网站，如果没有就创建一个网站，并放入池中，并返回</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebSite <span class="title">getWebSiteCategory</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!pool.containsKey(type))&#123;</span><br><span class="line">            <span class="comment">//如果没有，则创建一个放入池中</span></span><br><span class="line">            pool.put(type,<span class="keyword">new</span> ConcreteWebSite(type));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (WebSite) pool.get(type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据网站分类的总数（池中有多少个网站类型）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWebSiteCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pool.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-6-5-Client类"><a href="#3-6-5-Client类" class="headerlink" title="3.6.5 Client类"></a>3.6.5 Client类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个工厂类</span></span><br><span class="line">        WebSiteFactory factory = <span class="keyword">new</span> WebSiteFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要一个以新闻形式发布的网站</span></span><br><span class="line">        WebSite webSite1 = factory.getWebSiteCategory(<span class="string">&quot;新闻&quot;</span>);</span><br><span class="line">        webSite1.use(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要一个以博客形式发布的网站</span></span><br><span class="line">        WebSite webSite2 = factory.getWebSiteCategory(<span class="string">&quot;博客&quot;</span>);</span><br><span class="line">        webSite2.use(<span class="keyword">new</span> User(<span class="string">&quot;Ldg&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要一个以博客形式发布的网站</span></span><br><span class="line">        WebSite webSite3 = factory.getWebSiteCategory(<span class="string">&quot;博客&quot;</span>);</span><br><span class="line">        webSite3.use(<span class="keyword">new</span> User(<span class="string">&quot;ooo&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要一个以博客形式发布的网站</span></span><br><span class="line">        WebSite webSite4 = factory.getWebSiteCategory(<span class="string">&quot;博客&quot;</span>);</span><br><span class="line">        webSite4.use(<span class="keyword">new</span> User(<span class="string">&quot;hhh&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;网站的分给共：&quot;</span>+factory.getWebSiteCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">网站的发布形式为:新闻,Tom在使用中....</span><br><span class="line">网站的发布形式为:博客,Ldg在使用中....</span><br><span class="line">网站的发布形式为:博客,ooo在使用中....</span><br><span class="line">网站的发布形式为:博客,hhh在使用中....</span><br><span class="line">网站的分给共：<span class="number">2</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="4、享元模式在JDK-Integer的应用源码分析"><a href="#4、享元模式在JDK-Integer的应用源码分析" class="headerlink" title="4、享元模式在JDK Integer的应用源码分析"></a>4、享元模式在JDK Integer的应用源码分析</h2><h3 id="4-1-代码：FlyWeight类"><a href="#4-1-代码：FlyWeight类" class="headerlink" title="4.1 代码：FlyWeight类"></a>4.1 代码：FlyWeight类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWeight</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer x = Integer.valueOf(<span class="number">127</span>);<span class="comment">//得到x的实例，类型Integer</span></span><br><span class="line">        Integer y = <span class="keyword">new</span> Integer(<span class="number">127</span>);</span><br><span class="line">        Integer z = Integer.valueOf(<span class="number">127</span>);</span><br><span class="line">        Integer w = <span class="keyword">new</span> Integer(<span class="number">127</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(x.equals(y));<span class="comment">//true，比较值大小</span></span><br><span class="line">        System.out.println(x==y);<span class="comment">//false</span></span><br><span class="line">        System.out.println(x==z);<span class="comment">//true</span></span><br><span class="line">        System.out.println(w==x);<span class="comment">//false</span></span><br><span class="line">        System.out.println(w==y);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="4-2-Integer-valueof代码源码"><a href="#4-2-Integer-valueof代码源码" class="headerlink" title="4.2 Integer.valueof代码源码"></a>4.2 Integer.valueof代码源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-IntegerCache类"><a href="#4-3-IntegerCache类" class="headerlink" title="4.3 IntegerCache类"></a>4.3 IntegerCache类</h3><p><img src="/2021/07/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/截图-1626882448299.png" alt="img"></p>
<blockquote>
<p>分析：</p>
<ul>
<li>如果Integer.valueof(x) : x在-128到127之间，就是使用享元模式返回 ；如果不在该范围内，则仍然new一个新的对象</li>
</ul>
</blockquote>
<h3 id="4-4-测试"><a href="#4-4-测试" class="headerlink" title="4.4 测试"></a>4.4 测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWeight</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer x = Integer.valueOf(<span class="number">127</span>);<span class="comment">//得到x的实例，类型Integer</span></span><br><span class="line">        Integer y = <span class="keyword">new</span> Integer(<span class="number">127</span>);</span><br><span class="line">        Integer z = Integer.valueOf(<span class="number">127</span>);</span><br><span class="line">        Integer w = <span class="keyword">new</span> Integer(<span class="number">127</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(x.equals(y));<span class="comment">//true，比较值大小</span></span><br><span class="line">        System.out.println(x==y);<span class="comment">//false</span></span><br><span class="line">        System.out.println(x==z);<span class="comment">//true</span></span><br><span class="line">        System.out.println(w==x);<span class="comment">//false</span></span><br><span class="line">        System.out.println(w==y);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        Integer x1 = Integer.valueOf(<span class="number">200</span>);</span><br><span class="line">        Integer x2 = Integer.valueOf(<span class="number">200</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;x1==x2&quot;</span>+(x1==x2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">x1==x2false</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="5、享元模式的注意事项和细节"><a href="#5、享元模式的注意事项和细节" class="headerlink" title="5、享元模式的注意事项和细节"></a>5、享元模式的注意事项和细节</h2><blockquote>
<ol>
<li>享元模式：“享”表示共享，“元”表示对象。</li>
<li>系统中有大量对象，这些对象消耗大量内存，并且对象的状态大部分可以外部化时，我们就可以考虑选用享元模式。</li>
<li>用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象，用HashMap/HashTable存储</li>
<li>享元模式大大减少了对象的创建，降低了程序内存的占用，提高效率</li>
<li>享元模式提高了系统的复杂度，需要分离出内部状态和外部状态，而外部状态具有固化特性，不应该随着内部状态的改变而改变。这是我们使用享元模式需要注意的地方</li>
<li>使用享元模式时，注意划分内部状态和外部状态，并且需要有一个工厂类加以控制</li>
<li>享元模式经典的应用场景是需要缓冲池的场景，比如String常量池、数据库连接池等</li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>享元模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（十一）之行为型模式--命令模式</title>
    <url>/2021/07/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、命令模式"><a href="#一、命令模式" class="headerlink" title="一、命令模式"></a>一、命令模式</h1><h2 id="1、案例分析"><a href="#1、案例分析" class="headerlink" title="1、案例分析"></a>1、案例分析</h2><h3 id="1-1-智能生活项目需求"><a href="#1-1-智能生活项目需求" class="headerlink" title="1.1 智能生活项目需求"></a>1.1 智能生活项目需求</h3><blockquote>
<p>（1）买一套智能家电，有照明灯、风扇、冰箱、洗衣机，我们只要在手机上安装app就可以控制这些家电工作</p>
<p>（2）这些智能家电来自不同的厂家，我们不像针对每一种家电都安装一个app，分别控制，只希望有一个app就可以控制全部智能家电</p>
<p>（3）要实现一个app控制所有智能家电的需求，则每个智能家电厂家都要提供一个统一的接口给app调用，这时 就可以考虑命令模式</p>
<p>（4）命令模式可将“动作的请求者”从“动作的执行者”对象中解耦出来</p>
<p>（5）在我们的例子中，动作的请求者是手机app，动作的执行者是每个厂商的一个家电产品</p>
</blockquote>
<h2 id="2、命令模式基本介绍"><a href="#2、命令模式基本介绍" class="headerlink" title="2、命令模式基本介绍"></a>2、命令模式基本介绍</h2><blockquote>
<p>（1）命令模式（Command Pattern）：在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是哪个。我们只需要在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来设计。</p>
<p>​      将军与士兵的例子，比如一个将军有100个士兵，将军发起进攻命令，不需要指定每一个确定的士兵去执行操作，只需要有一个助手，让助手去将这些命令传到给每一个士兵即可。</p>
<p>（2）命令模式使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活，实现解耦。</p>
<p>（3）在命令模式中，会将一个请求封装为一个对象，以便使用不同参数来表示不同的请求（即命名），同时命令模式也支持<strong>可撤销</strong>的操作。</p>
<p>（4）通俗易懂的理解，将军发布命令，士兵去执行。其中有几个角色</p>
<p>​         a.将军（命令发布者）</p>
<p>​         b.士兵（命令的具体执行者）</p>
<p>​         c.命令（连接将军和士兵）</p>
<p>​        Inovke是调用者（将军），Receiver是被调用者（士兵），MyCommand是命令，实现了Command接口，聚合接收对象</p>
</blockquote>
<h2 id="3、原理类图"><a href="#3、原理类图" class="headerlink" title="3、原理类图"></a>3、原理类图</h2><p><img src="/2021/07/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/截图.png" alt="img"></p>
<blockquote>
<p>（1）Invoke是调用者角色</p>
<p>（2）Command是命令角色，需要执行的所有命令都在这里，可以是接口或抽象类</p>
<p>（3）Receiver是接收者角色，知道如何实施和执行一个请求相关的操作</p>
<p>（4）ConcreteCommand：将一个接收者对象与一个动作绑定，调用接收者相应的操作，实现execute</p>
</blockquote>
<h2 id="4、命令模式解决智能生活项目"><a href="#4、命令模式解决智能生活项目" class="headerlink" title="4、命令模式解决智能生活项目"></a>4、命令模式解决智能生活项目</h2><h3 id="4-1-思路分析和图解"><a href="#4-1-思路分析和图解" class="headerlink" title="4.1 思路分析和图解"></a>4.1 思路分析和图解</h3><blockquote>
<p>下图中的撤销是对上一个命令的撤销</p>
</blockquote>
<p><img src="/2021/07/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/截图-1627485621316.png" alt="img"></p>
<h3 id="4-2-类图"><a href="#4-2-类图" class="headerlink" title="4.2 类图"></a>4.2 类图</h3><p><img src="/2021/07/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/截图-1627485649097.png" alt="img"></p>
<h2 id="5、代码实例"><a href="#5、代码实例" class="headerlink" title="5、代码实例"></a>5、代码实例</h2><h3 id="5-1-Command接口"><a href="#5-1-Command接口" class="headerlink" title="5.1 Command接口"></a>5.1 Command接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建命令接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行动作（操作）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//撤销动作（操作）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-2-LightReceiver类"><a href="#5-2-LightReceiver类" class="headerlink" title="5.2  LightReceiver类"></a>5.2  LightReceiver类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 电灯打开了... &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 电灯关闭了... &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-3-LightOnCommand类"><a href="#5-3-LightOnCommand类" class="headerlink" title="5.3 LightOnCommand类"></a>5.3 LightOnCommand类</h3><blockquote>
<p>实现Command接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//聚合LightReceiver</span></span><br><span class="line">    LightReceiver lightReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOnCommand</span><span class="params">(LightReceiver lightReceiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lightReceiver = lightReceiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        lightReceiver.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        lightReceiver.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-4-LightOffCommand类"><a href="#5-4-LightOffCommand类" class="headerlink" title="5.4 LightOffCommand类"></a>5.4 LightOffCommand类</h3><blockquote>
<p>实现Command接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">    <span class="comment">//聚合LightReceiver</span></span><br><span class="line">    LightReceiver lightReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOffCommand</span><span class="params">(LightReceiver lightReceiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lightReceiver = lightReceiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        lightReceiver.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        lightReceiver.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-5-NoCommand类"><a href="#5-5-NoCommand类" class="headerlink" title="5.5 NoCommand类"></a>5.5 NoCommand类</h3><blockquote>
<p>实现Command接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//没有任何命令，即空执行：用于初始化每个按钮，当调用空命令时，对象什么都不做</span></span><br><span class="line"><span class="comment">//其实，这也是一种设计模式，可以省掉对空的判断</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-6-RemoteController类"><a href="#5-6-RemoteController类" class="headerlink" title="5.6 RemoteController类"></a>5.6 RemoteController类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//开 按钮的命令数组</span></span><br><span class="line">    Command[] onCommands;</span><br><span class="line">    Command[] offCommands;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行撤销的命令</span></span><br><span class="line">    Command undoCommand;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器，完成对按钮初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RemoteController</span><span class="params">()</span></span>&#123;</span><br><span class="line">        onCommands = <span class="keyword">new</span> Command[<span class="number">5</span>];</span><br><span class="line">        offCommands = <span class="keyword">new</span> Command[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">            onCommands[i] = <span class="keyword">new</span> NoCommand();</span><br><span class="line">            offCommands[i] = <span class="keyword">new</span> NoCommand();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给我们的按钮设置你需要的命令</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(<span class="keyword">int</span> no, Command onCommand, Command offCommand)</span></span>&#123;</span><br><span class="line">        onCommands[no] = onCommand;</span><br><span class="line">        offCommands[no] = offCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按下开按钮</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onButtonWasPushed</span><span class="params">(<span class="keyword">int</span> no)</span></span>&#123;</span><br><span class="line">        <span class="comment">//找到你按下的开的按钮，并调用对应方法</span></span><br><span class="line">        onCommands[no].execute();</span><br><span class="line">        <span class="comment">//记录这次的操作，用于撤销</span></span><br><span class="line">        undoCommand = onCommands[no];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按下关按钮</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offButtonWasPushed</span><span class="params">(<span class="keyword">int</span> no)</span></span>&#123;</span><br><span class="line">        <span class="comment">//找到你按下的关的按钮，并调用对应方法</span></span><br><span class="line">        offCommands[no].execute();</span><br><span class="line">        <span class="comment">//记录这次的操作，用于撤销</span></span><br><span class="line">        undoCommand = offCommands[no];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按下撤销按钮</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undoButtonWasPushed</span><span class="params">()</span></span>&#123;</span><br><span class="line">        undoCommand.undo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-7-Client类"><a href="#5-7-Client类" class="headerlink" title="5.7 Client类"></a>5.7 Client类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用命令设计模式，完成通过遥控器，对电灯的操作</span></span><br><span class="line">        <span class="comment">//创建电灯的对象（接受者）</span></span><br><span class="line">        LightReceiver lightReceiver = <span class="keyword">new</span> LightReceiver();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建电灯相关的开关命令</span></span><br><span class="line">        LightOnCommand lightOnCommand = <span class="keyword">new</span> LightOnCommand(lightReceiver);</span><br><span class="line">        LightOffCommand lightOffCommand = <span class="keyword">new</span> LightOffCommand(lightReceiver);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需要一个遥控器</span></span><br><span class="line">        RemoteController remoteController = <span class="keyword">new</span> RemoteController();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给我们的遥控器设置命令，比如 no = 0是电灯的开和关的操作</span></span><br><span class="line">        remoteController.setCommand(<span class="number">0</span>,lightOnCommand,lightOffCommand);</span><br><span class="line">        System.out.println(<span class="string">&quot;------按下灯的开按钮-------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        remoteController.onButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------按下灯的关按钮-------&quot;</span>);</span><br><span class="line">        remoteController.offButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------按下撤销按钮-------&quot;</span>);</span><br><span class="line">        remoteController.undoButtonWasPushed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">------按下灯的开按钮-------</span><br><span class="line"> 电灯打开了... </span><br><span class="line">------按下灯的关按钮-------</span><br><span class="line"> 电灯关闭了... </span><br><span class="line">------按下撤销按钮-------</span><br><span class="line"> 电灯打开了... </span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="5-8-添加电视机"><a href="#5-8-添加电视机" class="headerlink" title="5.8 添加电视机"></a>5.8 添加电视机</h3><h4 id="5-8-1-TVReceiver类"><a href="#5-8-1-TVReceiver类" class="headerlink" title="5.8.1 TVReceiver类"></a>5.8.1 TVReceiver类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVReceiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 电视机打开了... &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 电视机关闭了... &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-8-2-TVOnCommand类"><a href="#5-8-2-TVOnCommand类" class="headerlink" title="5.8.2 TVOnCommand类"></a>5.8.2 TVOnCommand类</h4><blockquote>
<p>实现Command接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="comment">//聚合TVReceiver</span></span><br><span class="line">    TVReceiver tvReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TVOnCommand</span><span class="params">(TVReceiver tvReceiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.tvReceiver = tvReceiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        tvReceiver.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        tvReceiver.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-8-3-TVOffCommand类"><a href="#5-8-3-TVOffCommand类" class="headerlink" title="5.8.3 TVOffCommand类"></a>5.8.3 TVOffCommand类</h4><blockquote>
<p>实现Command接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="comment">//聚合TVReceiver</span></span><br><span class="line">    TVReceiver tvReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TVOffCommand</span><span class="params">(TVReceiver tvReceiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.tvReceiver = tvReceiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        tvReceiver.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        tvReceiver.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-8-4-Client类"><a href="#5-8-4-Client类" class="headerlink" title="5.8.4 Client类"></a>5.8.4 Client类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用命令设计模式，完成通过遥控器，对电灯的操作</span></span><br><span class="line">        <span class="comment">//创建电灯的对象（接受者）</span></span><br><span class="line">        LightReceiver lightReceiver = <span class="keyword">new</span> LightReceiver();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建电灯相关的开关命令</span></span><br><span class="line">        LightOnCommand lightOnCommand = <span class="keyword">new</span> LightOnCommand(lightReceiver);</span><br><span class="line">        LightOffCommand lightOffCommand = <span class="keyword">new</span> LightOffCommand(lightReceiver);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需要一个遥控器</span></span><br><span class="line">        RemoteController remoteController = <span class="keyword">new</span> RemoteController();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给我们的遥控器设置命令，比如 no = 0是电灯的开和关的操作</span></span><br><span class="line">        remoteController.setCommand(<span class="number">0</span>,lightOnCommand,lightOffCommand);</span><br><span class="line">        System.out.println(<span class="string">&quot;------按下灯的开按钮-------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        remoteController.onButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------按下灯的关按钮-------&quot;</span>);</span><br><span class="line">        remoteController.offButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------按下撤销按钮-------&quot;</span>);</span><br><span class="line">        remoteController.undoButtonWasPushed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==========使用遥控器操作电视机=============&quot;</span>);</span><br><span class="line">        TVReceiver tvReceiver = <span class="keyword">new</span> TVReceiver();</span><br><span class="line">        TVOnCommand tvOnCommand = <span class="keyword">new</span> TVOnCommand(tvReceiver);</span><br><span class="line">        TVOffCommand tvOffCommand = <span class="keyword">new</span> TVOffCommand(tvReceiver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给我们的遥控器设置命令，比如no = 1 是电视机的开和关的操作</span></span><br><span class="line">        remoteController.setCommand(<span class="number">1</span>,tvOnCommand,tvOffCommand);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------按下电视机的开按钮---------&quot;</span>);</span><br><span class="line">        remoteController.onButtonWasPushed(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------按下电视机的关按钮---------&quot;</span>);</span><br><span class="line">        remoteController.offButtonWasPushed(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------按下电视机的撤销按钮-------------&quot;</span>);</span><br><span class="line">        remoteController.undoButtonWasPushed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">------按下灯的开按钮-------</span><br><span class="line"> 电灯打开了... </span><br><span class="line">------按下灯的关按钮-------</span><br><span class="line"> 电灯关闭了... </span><br><span class="line">------按下撤销按钮-------</span><br><span class="line"> 电灯打开了... </span><br><span class="line">==========使用遥控器操作电视机=============</span><br><span class="line">------按下电视机的开按钮---------</span><br><span class="line"> 电视机打开了... </span><br><span class="line">------按下电视机的关按钮---------</span><br><span class="line"> 电视机关闭了... </span><br><span class="line">-------按下电视机的撤销按钮-------------</span><br><span class="line"> 电视机打开了... </span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="6、命令模式在Spring框架Jdbc-Template应用的源码分析"><a href="#6、命令模式在Spring框架Jdbc-Template应用的源码分析" class="headerlink" title="6、命令模式在Spring框架Jdbc Template应用的源码分析"></a>6、命令模式在Spring框架Jdbc Template应用的源码分析</h2><h3 id="6-1-JdbcTemplate类"><a href="#6-1-JdbcTemplate类" class="headerlink" title="6.1 JdbcTemplate类"></a>6.1 JdbcTemplate类</h3><blockquote>
<p>（1）查看JdbcTemplate类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplate</span> <span class="keyword">extends</span> <span class="title">JdbcAccessor</span> <span class="keyword">implements</span> <span class="title">JdbcOperations</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>（2）查看query方法（点击JdbcTemplate，ctrl+F12出来右边选项）</p>
</blockquote>
<p><img src="/2021/07/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/截图-1627832387837.png" alt="img"></p>
<blockquote>
<p>（3）首先进入query方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">query</span><span class="params">(String sql, RowMapper&lt;T&gt; rowMapper)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> result(query(sql, <span class="keyword">new</span> RowMapperResultSetExtractor&lt;&gt;(rowMapper)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>（4）然后进去query(sql, new RowMapperResultSetExtractor&lt;&gt;(rowMapper))</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">query</span><span class="params">(<span class="keyword">final</span> String sql, <span class="keyword">final</span> ResultSetExtractor&lt;T&gt; rse)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">   Assert.notNull(sql, <span class="string">&quot;SQL must not be null&quot;</span>);</span><br><span class="line">   Assert.notNull(rse, <span class="string">&quot;ResultSetExtractor must not be null&quot;</span>);</span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">&quot;Executing SQL query [&quot;</span> + sql + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Callback to execute the query.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">QueryStatementCallback</span> <span class="keyword">implements</span> <span class="title">StatementCallback</span>&lt;<span class="title">T</span>&gt;, <span class="title">SqlProvider</span> </span>&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="meta">@Nullable</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> T <span class="title">doInStatement</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">         ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            <span class="keyword">return</span> rse.extractData(rs);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.closeResultSet(rs);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">getSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> sql;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> execute(<span class="keyword">new</span> QueryStatementCallback(), <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>（5）里面有一个内部类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryStatementCallback</span> <span class="keyword">implements</span> <span class="title">StatementCallback</span>&lt;<span class="title">T</span>&gt;, <span class="title">SqlProvider</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>（6）进StatementCallback查看</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StatementCallback</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function">T <span class="title">doInStatement</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException, DataAccessException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>（7）查看QueryStatementCallback类 实现StatementCallback</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">query</span><span class="params">(<span class="keyword">final</span> String sql, <span class="keyword">final</span> ResultSetExtractor&lt;T&gt; rse)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">    Assert.notNull(sql, <span class="string">&quot;SQL must not be null&quot;</span>);</span><br><span class="line">    Assert.notNull(rse, <span class="string">&quot;ResultSetExtractor must not be null&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.logger.debug(<span class="string">&quot;Executing SQL query [&quot;</span> + sql + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">QueryStatementCallback</span> <span class="keyword">implements</span> <span class="title">StatementCallback</span>&lt;<span class="title">T</span>&gt;, <span class="title">SqlProvider</span> </span>&#123;</span><br><span class="line">        QueryStatementCallback() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nullable</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">doInStatement</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">            ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            Object var3;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs = stmt.executeQuery(sql);</span><br><span class="line">                var3 = rse.extractData(rs);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                JdbcUtils.closeResultSet(rs);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> var3;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sql;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.execute(<span class="keyword">new</span> QueryStatementCallback(), <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>该query又是在JdbcTemplate中使用的，因此JdbcTemplate可以看成为Invoke</p>
</blockquote>
<p><img src="/2021/07/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/截图-1627832953785.png" alt="img"></p>
<blockquote>
<p>（8）查看QueryStatementCallback类 实现StatementCallback</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">query</span><span class="params">(<span class="keyword">final</span> String sql, <span class="keyword">final</span> ResultSetExtractor&lt;T&gt; rse)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">    Assert.notNull(sql, <span class="string">&quot;SQL must not be null&quot;</span>);</span><br><span class="line">    Assert.notNull(rse, <span class="string">&quot;ResultSetExtractor must not be null&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.logger.debug(<span class="string">&quot;Executing SQL query [&quot;</span> + sql + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">QueryStatementCallback</span> <span class="keyword">implements</span> <span class="title">StatementCallback</span>&lt;<span class="title">T</span>&gt;, <span class="title">SqlProvider</span> </span>&#123;</span><br><span class="line">        QueryStatementCallback() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nullable</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">doInStatement</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">            ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            Object var3;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs = stmt.executeQuery(sql);</span><br><span class="line">                var3 = rse.extractData(rs);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                JdbcUtils.closeResultSet(rs);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> var3;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sql;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.execute(<span class="keyword">new</span> QueryStatementCallback(), <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>execute的具体代码，也是在JdbcTemplate类中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(StatementCallback&lt;T&gt; action, <span class="keyword">boolean</span> closeResources)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">    Assert.notNull(action, <span class="string">&quot;Callback object must not be null&quot;</span>);</span><br><span class="line">    Connection con = DataSourceUtils.getConnection(<span class="keyword">this</span>.obtainDataSource());</span><br><span class="line">    Statement stmt = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    Object var12;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        stmt = con.createStatement();</span><br><span class="line">        <span class="keyword">this</span>.applyStatementSettings(stmt);</span><br><span class="line">        T result = action.doInStatement(stmt);</span><br><span class="line">        <span class="keyword">this</span>.handleWarnings(stmt);</span><br><span class="line">        var12 = result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException var10) &#123;</span><br><span class="line">        String sql = getSql(action);</span><br><span class="line">        JdbcUtils.closeStatement(stmt);</span><br><span class="line">        stmt = <span class="keyword">null</span>;</span><br><span class="line">        DataSourceUtils.releaseConnection(con, <span class="keyword">this</span>.getDataSource());</span><br><span class="line">        con = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">this</span>.translateException(<span class="string">&quot;StatementCallback&quot;</span>, sql, var10);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (closeResources) &#123;</span><br><span class="line">            JdbcUtils.closeStatement(stmt);</span><br><span class="line">            DataSourceUtils.releaseConnection(con, <span class="keyword">this</span>.getDataSource());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> var12;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-2-角色分析"><a href="#6-2-角色分析" class="headerlink" title="6.2 角色分析"></a>6.2 角色分析</h3><blockquote>
<p>（1）StatementCallback接口，类似命令接口（Command）</p>
<p>（2）class QueryStatementCallback implements StatementCallback<T>, SqlProvider，匿名内部类，实现了命令接口，同时也充当命令接收者</T></p>
<p>class QueryStatementCallback implements StatementCallback<T>, SqlProvider</T></p>
<p>（3）命令调用者是JdbcTemplate，其中execute(StatementCallback<T> action, boolean closeResources)方法中，调用action.doInStatement方法，不同的实现StatementCallback接口的对象，对应不同的doInStatement实现逻辑</T></p>
<p>（4）另外，实现StatementCallback接口的子类还有</p>
</blockquote>
<p><img src="/2021/07/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/截图-1627833310963.png" alt="img"></p>
<h2 id="7、命令模式的注意事项和细节"><a href="#7、命令模式的注意事项和细节" class="headerlink" title="7、命令模式的注意事项和细节"></a>7、命令模式的注意事项和细节</h2><blockquote>
<p>（1）将发起请求的对象与执行请求的对象解耦。发起请求的对象是调用者，调用者只要调用命令对象的execute()方法就可以让接收者工作，而不必知道具体的接收者对象是谁，是如何实现的，命令对象会负责让接收者执行请求的动作，也就是说“请求发起者”和“请求执行者”之间的解耦是通过命令对象实现的，命令对象起到了纽带桥梁的作用。</p>
<p>（2）容易设计一个命令队列。只要把命令对象放到队列，就可以多线程的执行命令</p>
<p>（3）容易实现对请求的撤销和重做</p>
<p>（4）不足之处：可能导致某些系统有过多的具体命令类，增加了系统的复杂度，尤其需要注意</p>
<p>（5）空命令也是一种设计模式，它为我们省去了判空的操作。在上面的实例中，如果没有空命令，我们每按一下一个案件都要判空，这给编码带来一定的麻烦</p>
<p>（6）命令模式经典的应用场景：界面的一个按钮都是一条命令，模拟CMD（DOS命令）、订单的撤销/恢复、触发-反馈机制</p>
</blockquote>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>命令模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（十）之行为型模式--模板方法模式</title>
    <url>/2021/07/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、行为型模式"><a href="#一、行为型模式" class="headerlink" title="一、行为型模式"></a>一、行为型模式</h1><blockquote>
<ol>
<li>模板方法模式</li>
<li>命令模式</li>
<li>迭代器模式</li>
<li>观察者模式</li>
<li>中介者模式</li>
<li>备忘录模式</li>
<li>解释器模式</li>
<li>状态模式</li>
<li>策略模式</li>
<li>职责链模式</li>
<li>访问者模式</li>
</ol>
</blockquote>
<h1 id="二、模板方法模式"><a href="#二、模板方法模式" class="headerlink" title="二、模板方法模式"></a>二、模板方法模式</h1><h2 id="2-1-案例分析"><a href="#2-1-案例分析" class="headerlink" title="2.1 案例分析"></a>2.1 案例分析</h2><h3 id="2-1-1-豆浆制作问题"><a href="#2-1-1-豆浆制作问题" class="headerlink" title="2.1.1 豆浆制作问题"></a>2.1.1 豆浆制作问题</h3><blockquote>
<p>编写制作豆浆的程序，说明如下：</p>
<ol>
<li>制作豆浆的流程：选材—&gt;添加配料—&gt;浸泡—&gt;放到豆浆机打碎</li>
<li>通过添加不同的配料，可以制作出不同口味的豆浆</li>
<li>选材、浸泡和放到豆浆机打碎这几个步骤对于制作每种口味的豆浆都是一样的</li>
<li>可使用<strong>模板方法</strong>模式完成（说明：因为模板方法模式，比较简单，很容易就想到这个方案，因此直接就可以使用，不再使用传统的方案来引出模板方法模式）</li>
</ol>
</blockquote>
<h2 id="2-2-模板方法模式基本介绍"><a href="#2-2-模板方法模式基本介绍" class="headerlink" title="2.2 模板方法模式基本介绍"></a>2.2 模板方法模式基本介绍</h2><h3 id="2-2-1-基本介绍"><a href="#2-2-1-基本介绍" class="headerlink" title="2.2.1 基本介绍"></a>2.2.1 基本介绍</h3><blockquote>
<ol>
<li>模板方法模式（Template Method Pattern），又叫模板模式（Template Pattern），在一个抽象类公开定义了执行它的方法的模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。</li>
<li>简单说，<strong>模板方法模式</strong>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构，就可以冲定义该算法的某些特定步骤。</li>
</ol>
</blockquote>
<h3 id="2-2-2-原理类图"><a href="#2-2-2-原理类图" class="headerlink" title="2.2.2 原理类图"></a>2.2.2 原理类图</h3><p><img src="/2021/07/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/image-20210722230423631.png" alt="image-20210722230423631"></p>
<h3 id="2-2-3-案例类图"><a href="#2-2-3-案例类图" class="headerlink" title="2.2.3 案例类图"></a>2.2.3 案例类图</h3><p><img src="/2021/07/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/截图.png" alt="img"></p>
<h2 id="3、代码实例"><a href="#3、代码实例" class="headerlink" title="3、代码实例"></a>3、代码实例</h2><h3 id="3-1-SoyaMilk抽象类"><a href="#3-1-SoyaMilk抽象类" class="headerlink" title="3.1 SoyaMilk抽象类"></a>3.1 SoyaMilk抽象类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象类，表示豆浆</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SoyaMilk</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模板方法，make，模板方法可以做成final，不让子类去覆盖</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span></span>&#123;</span><br><span class="line">        select();</span><br><span class="line">        addCondiments();</span><br><span class="line">        soak();</span><br><span class="line">        beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//选材料</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一步：选择好的新鲜黄豆 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加不同的配料，抽象方法，子类具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//浸泡</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">soak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三步，黄豆和配料开始浸泡，需要3小时 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第四步：黄豆和配料放到豆浆机去打碎 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-RedBeanSoyaMilk类"><a href="#3-2-RedBeanSoyaMilk类" class="headerlink" title="3.2 RedBeanSoyaMilk类"></a>3.2 RedBeanSoyaMilk类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedBeanSoyaMilk</span> <span class="keyword">extends</span> <span class="title">SoyaMilk</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加入好的红豆 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-PeanutSoyaMilk类"><a href="#3-3-PeanutSoyaMilk类" class="headerlink" title="3.3 PeanutSoyaMilk类"></a>3.3 PeanutSoyaMilk类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeanutSoyaMilk</span> <span class="keyword">extends</span> <span class="title">SoyaMilk</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加入好的花生 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-Client类"><a href="#3-4-Client类" class="headerlink" title="3.4 Client类"></a>3.4 Client类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//制作红豆豆浆</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----制作红豆豆浆-------&quot;</span>);</span><br><span class="line">        SoyaMilk redBeanSoyaMilk = <span class="keyword">new</span> RedBeanSoyaMilk();</span><br><span class="line">        redBeanSoyaMilk.make();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------制作花生豆浆-------&quot;</span>);</span><br><span class="line">        SoyaMilk peanutSoyaMilk = <span class="keyword">new</span> PeanutSoyaMilk();</span><br><span class="line">        peanutSoyaMilk.make();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-----制作红豆豆浆-------</span><br><span class="line">第一步：选择好的新鲜黄豆 </span><br><span class="line">加入好的红豆 </span><br><span class="line">第三步，黄豆和配料开始浸泡，需要<span class="number">3</span>小时 </span><br><span class="line">第四步：黄豆和配料放到豆浆机去打碎 </span><br><span class="line">------制作花生豆浆-------</span><br><span class="line">第一步：选择好的新鲜黄豆 </span><br><span class="line">加入好的花生 </span><br><span class="line">第三步，黄豆和配料开始浸泡，需要<span class="number">3</span>小时 </span><br><span class="line">第四步：黄豆和配料放到豆浆机去打碎 </span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="3-5-模板方法模式中的钩子方法"><a href="#3-5-模板方法模式中的钩子方法" class="headerlink" title="3.5 模板方法模式中的钩子方法"></a>3.5 模板方法模式中的钩子方法</h3><blockquote>
<ol>
<li>在模板方法模式的父类中，我们可以定义一个方法，它默认不做任何事情，子类可以视情况要不要覆盖它，该方法称为“钩子”</li>
<li>用上面做豆浆的例子来讲解，比如：我们还希望制作纯豆浆，不添加任何的配料，可以使用钩子方法对前面的模板方法进行改造</li>
</ol>
</blockquote>
<h4 id="3-5-1-SoyaMilk类"><a href="#3-5-1-SoyaMilk类" class="headerlink" title="3.5.1 SoyaMilk类"></a>3.5.1 SoyaMilk类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象类，表示豆浆</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SoyaMilk</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模板方法，make，模板方法可以做成final，不让子类去覆盖</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span></span>&#123;</span><br><span class="line">        select();</span><br><span class="line">        <span class="keyword">if</span>(customerWantCondiments())&#123;</span><br><span class="line">            addCondiments();</span><br><span class="line">        &#125;</span><br><span class="line">        soak();</span><br><span class="line">        beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//选材料</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一步：选择好的新鲜黄豆 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加不同的配料，抽象方法，子类具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//浸泡</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">soak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三步，黄豆和配料开始浸泡，需要3小时 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第四步：黄豆和配料放到豆浆机去打碎 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//钩子方法，决定是否需要添加配料</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">customerWantCondiments</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-5-2-RedBeanSoyaMilk类"><a href="#3-5-2-RedBeanSoyaMilk类" class="headerlink" title="3.5.2  RedBeanSoyaMilk类"></a>3.5.2  RedBeanSoyaMilk类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedBeanSoyaMilk</span> <span class="keyword">extends</span> <span class="title">SoyaMilk</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加入好的红豆 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-5-3-PureSoyaMilk类"><a href="#3-5-3-PureSoyaMilk类" class="headerlink" title="3.5.3 PureSoyaMilk类"></a>3.5.3 PureSoyaMilk类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PureSoyaMilk</span> <span class="keyword">extends</span> <span class="title">SoyaMilk</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">customerWantCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-5-4-Client类"><a href="#3-5-4-Client类" class="headerlink" title="3.5.4 Client类"></a>3.5.4 Client类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//制作红豆豆浆</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----制作红豆豆浆-------&quot;</span>);</span><br><span class="line">        SoyaMilk redBeanSoyaMilk = <span class="keyword">new</span> RedBeanSoyaMilk();</span><br><span class="line">        redBeanSoyaMilk.make();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------制作花生豆浆-------&quot;</span>);</span><br><span class="line">        SoyaMilk peanutSoyaMilk = <span class="keyword">new</span> PeanutSoyaMilk();</span><br><span class="line">        peanutSoyaMilk.make();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------制作纯豆浆---------&quot;</span>);</span><br><span class="line">        PureSoyaMilk pureSoyaMilk = <span class="keyword">new</span> PureSoyaMilk();</span><br><span class="line">        pureSoyaMilk.make();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-----制作红豆豆浆-------</span><br><span class="line">第一步：选择好的新鲜黄豆 </span><br><span class="line">加入好的红豆 </span><br><span class="line">第三步，黄豆和配料开始浸泡，需要<span class="number">3</span>小时 </span><br><span class="line">第四步：黄豆和配料放到豆浆机去打碎 </span><br><span class="line">------制作花生豆浆-------</span><br><span class="line">第一步：选择好的新鲜黄豆 </span><br><span class="line">加入好的花生 </span><br><span class="line">第三步，黄豆和配料开始浸泡，需要<span class="number">3</span>小时 </span><br><span class="line">第四步：黄豆和配料放到豆浆机去打碎 </span><br><span class="line">-------制作纯豆浆---------</span><br><span class="line">第一步：选择好的新鲜黄豆 </span><br><span class="line">第三步，黄豆和配料开始浸泡，需要<span class="number">3</span>小时 </span><br><span class="line">第四步：黄豆和配料放到豆浆机去打碎 </span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="4、模板方法模式在Spring框架应用的源码分析"><a href="#4、模板方法模式在Spring框架应用的源码分析" class="headerlink" title="4、模板方法模式在Spring框架应用的源码分析"></a>4、模板方法模式在Spring框架应用的源码分析</h3><blockquote>
<p>Spring IOC容器初始化时运用到的模板方法模式</p>
</blockquote>
<h4 id="4-1-ConfigurableApplicationContext类"><a href="#4-1-ConfigurableApplicationContext类" class="headerlink" title="4.1 ConfigurableApplicationContext类"></a>4.1 ConfigurableApplicationContext类</h4><h4 id="4-2-ConfigurableApplicationContext接口"><a href="#4-2-ConfigurableApplicationContext接口" class="headerlink" title="4.2  ConfigurableApplicationContext接口"></a>4.2  ConfigurableApplicationContext接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConfigurableApplicationContext</span> <span class="keyword">extends</span> <span class="title">ApplicationContext</span>, <span class="title">Lifecycle</span>, <span class="title">Closeable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-AbstractApplicationContext类"><a href="#4-3-AbstractApplicationContext类" class="headerlink" title="4.3 AbstractApplicationContext类"></a>4.3 AbstractApplicationContext类</h4><blockquote>
<p>实现ConfigurableApplicationContext接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title">DefaultResourceLoader</span></span></span><br><span class="line"><span class="class">		<span class="keyword">implements</span> <span class="title">ConfigurableApplicationContext</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>AbstractApplicationContext类中有refresh方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">            <span class="keyword">this</span>.prepareRefresh();</span><br><span class="line">            ConfigurableListableBeanFactory beanFactory = <span class="keyword">this</span>.obtainFreshBeanFactory();</span><br><span class="line">            <span class="keyword">this</span>.prepareBeanFactory(beanFactory);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.postProcessBeanFactory(beanFactory);</span><br><span class="line">                <span class="keyword">this</span>.invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">                <span class="keyword">this</span>.registerBeanPostProcessors(beanFactory);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>refresh方法中的obtainFreshBeanFactory方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.refreshBeanFactory();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getBeanFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>refreshBeanFactory和getBeanFactory都是抽象方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>refresh方法中的postProcessBeanFactory方法是一个空实现，是一个钩子方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>refresh方法中的onRefresh方法是一个空实现，是一个钩子方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-4-GenericApplicationContext类"><a href="#4-4-GenericApplicationContext类" class="headerlink" title="4.4 GenericApplicationContext类"></a>4.4 GenericApplicationContext类</h4><blockquote>
<p>GenericApplicationContext继承AbstractApplicationContext</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericApplicationContext</span> <span class="keyword">extends</span> <span class="title">AbstractApplicationContext</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionRegistry</span> </span>&#123;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>getBeanFactory实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>refreshBeanFactory实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.refreshed.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;GenericApplicationContext does not support multiple refresh attempts: just call &#x27;refresh&#x27; once&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.beanFactory.setSerializationId(<span class="keyword">this</span>.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-5-类图理解"><a href="#4-5-类图理解" class="headerlink" title="4.5 类图理解"></a>4.5 类图理解</h4><p><img src="/2021/07/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/image-20210727004131005.png" alt="image-20210727004131005"></p>
<h3 id="5、模板方法模式的注意事项和细节"><a href="#5、模板方法模式的注意事项和细节" class="headerlink" title="5、模板方法模式的注意事项和细节"></a>5、模板方法模式的注意事项和细节</h3><blockquote>
<ol>
<li>基本思想：<strong>算法只存在于一个地方，也就是在父类中，容易修改。</strong>需要修改算法时，只要修改父类的模板方法或者已经实现的某些步骤，子类就会继承这些修改</li>
<li><strong>实现了最大化代码复用</strong>。父类的模板方法和已实现的某些步骤会被子类继承而直接使用</li>
<li><strong>既统一了算法，也提供了很大的灵活性</strong>。父类的模板方法确保了算法的结构保持不变，同时由于类提供部分步骤的实现</li>
<li>不足之处：每一个不同的实现都需要一个子类实现，导致类的个数增加，使得系统更加庞大</li>
<li>一般模板方法都加上final关键字，防止子类重写模板方法</li>
<li>模板方法模式使用场景：<strong>当要完成在某个过程，该过程要执行一系列的步骤，这一系列的步骤基本相同，但其个别步骤在是实现时可能不同，通常考虑模板方法模式来处理。</strong></li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>模板模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（十二）之行为型模式--访问者模式</title>
    <url>/2021/08/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、访问者模式"><a href="#一、访问者模式" class="headerlink" title="一、访问者模式"></a>一、访问者模式</h1><h2 id="1、案例分析"><a href="#1、案例分析" class="headerlink" title="1、案例分析"></a>1、案例分析</h2><h3 id="1-1-测评系统的需求"><a href="#1-1-测评系统的需求" class="headerlink" title="1.1 测评系统的需求"></a>1.1 测评系统的需求</h3><blockquote>
<p>将观众分为男人和女人，对歌手进行测评，当看完某个歌手表演后，得到他们对该歌手不同的评价（评价有不同的种类，比如：成功、失败等）</p>
</blockquote>
<h3 id="1-2-传统方案"><a href="#1-2-传统方案" class="headerlink" title="1.2 传统方案"></a>1.2 传统方案</h3><p><img src="/2021/08/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/截图.png" alt="img"></p>
<h3 id="1-3-传统方式问题分析"><a href="#1-3-传统方式问题分析" class="headerlink" title="1.3 传统方式问题分析"></a>1.3 传统方式问题分析</h3><blockquote>
<p>（1）如果系统比较小，还是ok的，但是考虑系统增加越来越多的新功能时，对代码改动较大，违反了开闭原则（新增一个待定评价，man和women类都得修改），不利于维护</p>
<p>（2）扩展性不好，比如 增加了新的人员类型，或者管理方法，都不好做</p>
</blockquote>
<h2 id="2、访问者模式基本介绍"><a href="#2、访问者模式基本介绍" class="headerlink" title="2、访问者模式基本介绍"></a>2、访问者模式基本介绍</h2><h3 id="2-1-基本介绍"><a href="#2-1-基本介绍" class="headerlink" title="2.1 基本介绍"></a>2.1 基本介绍</h3><blockquote>
<p>（1）访问者模式（Visitor Pattern），封装一些作用于某种数据结构的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作</p>
<p>（2）主要将数据结构与数据操作分离，解决  <strong>数据结构</strong> 和<strong>操作耦合性</strong>的问题</p>
<p>（3）访问者模式的基本工作原理：在被访问的类里面加一个对外提供接待访问者的接口。</p>
<p>（4）访问者模式主要应用场景：需要对一个对象结构中的对象进行很多不同操作（这些操作彼此没有关联），同时需要避免让这些操作“污染”这些对象的类，可以选用访问者模式解决</p>
</blockquote>
<h3 id="2-2-原理类图"><a href="#2-2-原理类图" class="headerlink" title="2.2 原理类图"></a>2.2 原理类图</h3><p><img src="/2021/08/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/截图-1627833646800.png" alt="img"></p>
<blockquote>
<p>（1）Visitor是抽象访问者，为该对象结构中的ConcreteElement的每一个类声明一个visit操作</p>
<p>（2）ConcreteVisitor：具体的访问者，实现每个有Visitor声明的操作，是每个操作实现的部分</p>
<p>（3）ObjectStructure能枚举它的元素，可以提供一个高层的接口，用来允许访问者访问元素</p>
<p>（4）Element定义了一个accpet方法，接收一个访问者对象</p>
<p>（5）ConcreteElement为具体元素，实现了accept方法</p>
</blockquote>
<h2 id="3、访问者模式案例实例原理类图"><a href="#3、访问者模式案例实例原理类图" class="headerlink" title="3、访问者模式案例实例原理类图"></a>3、访问者模式案例实例原理类图</h2><p><img src="/2021/08/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/截图-1627917622106.png" alt="img"></p>
<h2 id="4、代码实例"><a href="#4、代码实例" class="headerlink" title="4、代码实例"></a>4、代码实例</h2><h3 id="4-1-Person抽象类"><a href="#4-1-Person抽象类" class="headerlink" title="4.1 Person抽象类"></a>4.1 Person抽象类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//提供一个方法，让访问者可以访问</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Action action)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-Man类"><a href="#4-2-Man类" class="headerlink" title="4.2 Man类"></a>4.2 Man类</h3><blockquote>
<p>继承Person类，实现抽象类方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Action action)</span> </span>&#123;</span><br><span class="line">        action.getManResult(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-Women类"><a href="#4-3-Women类" class="headerlink" title="4.3 Women类"></a>4.3 Women类</h3><blockquote>
<p>继承Person类，实现抽象类方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Women</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//说明：</span></span><br><span class="line">	<span class="comment">//（1）这里我们使用到了双分派，即首先在客户端程序中，将具体状态作为参数传递至Women或者man中（第一次分派）</span></span><br><span class="line">	<span class="comment">//（2）然后women类 调用作为参数的“具体方法”中方法getWomenResult，同时将自己（this）作为参数传入，完成第二次的分派</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Action action)</span> </span>&#123;</span><br><span class="line">        action.getWomenResult(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-4-Action抽象类"><a href="#4-4-Action抽象类" class="headerlink" title="4.4 Action抽象类"></a>4.4 Action抽象类</h3><blockquote>
<p>聚合 man和women</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="comment">//得到男性的 测评</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getManResult</span><span class="params">(Man man)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到女性的 测评</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getWomenResult</span><span class="params">(Women men)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-5-Success类"><a href="#4-5-Success类" class="headerlink" title="4.5 Success类"></a>4.5 Success类</h3><blockquote>
<p>继承Action，实现Action类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Success</span> <span class="keyword">extends</span>  <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getManResult</span><span class="params">(Man man)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 男人给的评价是：该歌手很成功！ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWomenResult</span><span class="params">(Women men)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 女人给的评价是：该歌手很成功！ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-6-Fail类"><a href="#4-6-Fail类" class="headerlink" title="4.6 Fail类"></a>4.6 Fail类</h3><blockquote>
<p> 继承Action，实现Action类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fail</span> <span class="keyword">extends</span>  <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getManResult</span><span class="params">(Man man)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 男人给的评价是：该歌手很失败！ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWomenResult</span><span class="params">(Women men)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 女人给的评价是：该歌手很失败！ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-7-ObjectStructure类"><a href="#4-7-ObjectStructure类" class="headerlink" title="4.7 ObjectStructure类"></a>4.7 ObjectStructure类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStructure</span> </span>&#123;</span><br><span class="line">    <span class="comment">//维护了一个集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Person&gt; persons = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加到list</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Person p )</span></span>&#123;</span><br><span class="line">        persons.add(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Person p)</span></span>&#123;</span><br><span class="line">        persons.remove(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示测评情况</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(Action action)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Person p : persons) &#123;</span><br><span class="line">            p.accept(action);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-8-Client类"><a href="#4-8-Client类" class="headerlink" title="4.8 Client类"></a>4.8 Client类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ObjectStructure objectStructure = <span class="keyword">new</span> ObjectStructure();</span><br><span class="line"></span><br><span class="line">        objectStructure.attach(<span class="keyword">new</span> Man());</span><br><span class="line">        objectStructure.attach(<span class="keyword">new</span> Women());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//成功</span></span><br><span class="line">        Success success = <span class="keyword">new</span> Success();</span><br><span class="line">        objectStructure.display(success);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">        Fail fail = <span class="keyword">new</span> Fail();</span><br><span class="line">        objectStructure.display(fail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> 男人给的评价是：该歌手很成功！ </span><br><span class="line"> 女人给的评价是：该歌手很成功！ </span><br><span class="line">==========================</span><br><span class="line"> 男人给的评价是：该歌手很失败！ </span><br><span class="line"> 女人给的评价是：该歌手很失败！ </span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="4-9-扩展"><a href="#4-9-扩展" class="headerlink" title="4.9 扩展"></a>4.9 扩展</h3><h4 id="4-9-1-visitor类"><a href="#4-9-1-visitor类" class="headerlink" title="4.9.1 visitor类"></a>4.9.1 visitor类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wait</span> <span class="keyword">extends</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getManResult</span><span class="params">(Man man)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 男人给的评价是 该歌手待定 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWomenResult</span><span class="params">(Women men)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 女人给的评价是 该歌手待定 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-9-2-Client类"><a href="#4-9-2-Client类" class="headerlink" title="4.9.2 Client类"></a>4.9.2 Client类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ObjectStructure objectStructure = <span class="keyword">new</span> ObjectStructure();</span><br><span class="line"></span><br><span class="line">        objectStructure.attach(<span class="keyword">new</span> Man());</span><br><span class="line">        objectStructure.attach(<span class="keyword">new</span> Women());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//成功</span></span><br><span class="line">        Success success = <span class="keyword">new</span> Success();</span><br><span class="line">        objectStructure.display(success);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">        Fail fail = <span class="keyword">new</span> Fail();</span><br><span class="line">        objectStructure.display(fail);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====给待定的测评=====&quot;</span>);</span><br><span class="line">        Wait wait = <span class="keyword">new</span> Wait();</span><br><span class="line">        objectStructure.display(wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> 男人给的评价是：该歌手很成功！ </span><br><span class="line"> 女人给的评价是：该歌手很成功！ </span><br><span class="line">==========================</span><br><span class="line"> 男人给的评价是：该歌手很失败！ </span><br><span class="line"> 女人给的评价是：该歌手很失败！ </span><br><span class="line">====给待定的测评=====</span><br><span class="line"> 男人给的评价是 该歌手待定 </span><br><span class="line"> 女人给的评价是 该歌手待定 </span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="5、访问者模式的注意事项和细节"><a href="#5、访问者模式的注意事项和细节" class="headerlink" title="5、访问者模式的注意事项和细节"></a>5、访问者模式的注意事项和细节</h2><h3 id="5-1-优点"><a href="#5-1-优点" class="headerlink" title="5.1 优点"></a>5.1 优点</h3><blockquote>
<ol>
<li>访问者模式符合单一职责原则，让程序具有优秀的扩展性、灵活性非常高</li>
<li>访问者模式可以对功能进行统一，可以做报表、UI、拦截器与过滤器，适用于数据结构相对稳定的系统</li>
</ol>
</blockquote>
<h3 id="5-2-缺点"><a href="#5-2-缺点" class="headerlink" title="5.2 缺点"></a>5.2 缺点</h3><blockquote>
<ol>
<li><p>具体元素对访问者公布细节，也就是说访问者关注了其他类的内部细节，这是迪米特法则所不建议的，这样造成了具体元素变更比较困难。</p>
</li>
<li><p>违背了依赖倒转原则。访问者依赖的是具体元素，而不是抽象元素</p>
<p>比如在Action类中， public abstract void getManResult(Man man);依赖的是Man，而不是Person</p>
</li>
<li><p>因此，如果一个系统有比较稳定的数据结构，又有经常变化的功能需求，那么访问者模式就是比较合适的。</p>
</li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>访问者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（十三）之行为型模式-迭代器模式</title>
    <url>/2021/08/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、迭代器模式"><a href="#一、迭代器模式" class="headerlink" title="一、迭代器模式"></a>一、迭代器模式</h1><h2 id="1、案例分析"><a href="#1、案例分析" class="headerlink" title="1、案例分析"></a>1、案例分析</h2><blockquote>
<p><strong>学校院系展示需求：</strong></p>
<p>​        编写程序展示一个学校院系结构：需求如下：要在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系。如下图：</p>
<p><img src="/2021/08/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/截图.png" alt="img"></p>
</blockquote>
<h3 id="1-1-1-传统方案"><a href="#1-1-1-传统方案" class="headerlink" title="1.1.1 传统方案"></a>1.1.1 传统方案</h3><blockquote>
<p>传统方案：学校由学院组成，学院由系组成</p>
</blockquote>
<p><img src="/2021/08/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/image-20210712232905597.png" alt="image-20210712232905597"></p>
<h3 id="1-1-2-传统方案存在问题"><a href="#1-1-2-传统方案存在问题" class="headerlink" title="1.1.2 传统方案存在问题"></a>1.1.2 传统方案存在问题</h3><blockquote>
<ul>
<li>将学院看做是学校的子类，系是学院的子类，这样实际上是站在组织大小来进行分层次的。</li>
<li>实际上我们的要求：在一个页面中展示出学校的院系组成，一个学校有多个院，一个学院又多个系，因此这种方法，不能很好的实现<strong>遍历</strong>操作</li>
<li>解决方案：迭代器模式</li>
</ul>
</blockquote>
<h3 id="1-1-3-组合模式"><a href="#1-1-3-组合模式" class="headerlink" title="1.1.3 组合模式"></a>1.1.3 组合模式</h3><blockquote>
<p>之前已经用组合模式解决过该问题，现在可以换另一种方式解决</p>
</blockquote>
<h3 id="1-1-4-需求假设"><a href="#1-1-4-需求假设" class="headerlink" title="1.1.4 需求假设"></a>1.1.4 需求假设</h3><blockquote>
<p>假设在传统方案中，存在如下情况</p>
<p>（1）计算机学院  的系 存在数组中</p>
<p>（2）信息工程学院的系 存在集合中</p>
<p>这个时候，就可以使用迭代器模式</p>
</blockquote>
<h2 id="2、迭代器模式基本介绍"><a href="#2、迭代器模式基本介绍" class="headerlink" title="2、迭代器模式基本介绍"></a>2、迭代器模式基本介绍</h2><h3 id="2-1-基本介绍"><a href="#2-1-基本介绍" class="headerlink" title="2.1 基本介绍"></a>2.1 基本介绍</h3><blockquote>
<p>（1）迭代器模式（Iterator Pattern）是常用的设计模式，属于行为型模式</p>
<p>（2）如果我们的<strong>集合元素是用不同的方式实现的，</strong>有数组，还有java的集合类或者还有其他方式，当客户端需要<strong>遍历这些集合元素</strong>的时候就要使用多种遍历方式，而且还会暴露元素的内部结构，可以考虑使用迭代器模式解决</p>
<p>（3）迭代器模式：提供一种遍历集合元素的统一接口，用一致的方法遍历集合元素，不需要知道集合对象的底层表示，即：不暴露其内部的结构。</p>
</blockquote>
<h3 id="2-2-原理类图"><a href="#2-2-原理类图" class="headerlink" title="2.2 原理类图"></a>2.2 原理类图</h3><p><img src="/2021/08/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/image-20210803234605968.png" alt="image-20210803234605968"></p>
<blockquote>
<p>（1）Iterator：迭代器接口，是系统提供，含义hasNext，next，remove</p>
<p>（2）ConcreteIterator：具体的迭代器类，管理迭代</p>
<p>（3）Aggregate：一个统一的聚合聚合接口，将客户端和具体聚合解耦</p>
<p>（4）ConcreteAggregate：具体的聚合持有对象集合，并提供一个方法，返回一个迭代器，该迭代器可以正确遍历集合</p>
<p>（5）Client：客户端，通过Iterator和Aggregate依赖子类</p>
</blockquote>
<h2 id="3、实例原理类图"><a href="#3、实例原理类图" class="headerlink" title="3、实例原理类图"></a>3、实例原理类图</h2><p><img src="/2021/08/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/截图-1628088079463.png" alt="img"></p>
<h2 id="4、代码实例"><a href="#4、代码实例" class="headerlink" title="4、代码实例"></a>4、代码实例</h2><h3 id="4-1-Department类（系）"><a href="#4-1-Department类（系）" class="headerlink" title="4.1 Department类（系）"></a>4.1 Department类（系）</h3><blockquote>
<p>系名称和描述</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">(String name, String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-ComputerCollegeIterator类"><a href="#4-2-ComputerCollegeIterator类" class="headerlink" title="4.2 ComputerCollegeIterator类"></a>4.2 ComputerCollegeIterator类</h3><blockquote>
<p>数组存放，实现Iterator接口，实现Iterator中的hasNext方法和next方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerCollegeIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里我们需要了解Department  是以怎样的方式存放</span></span><br><span class="line">    Department[] departments;</span><br><span class="line">    <span class="keyword">int</span> positions = <span class="number">0</span>;<span class="comment">//遍历的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputerCollegeIterator</span><span class="params">(Department[] departments)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.departments = departments;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否还有下一个元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(positions &gt;= departments.length || departments[positions] == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Department department = departments[positions];</span><br><span class="line">        positions += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认空实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure>
<h3 id="4-3-InfoCollegeIterator类"><a href="#4-3-InfoCollegeIterator类" class="headerlink" title="4.3  InfoCollegeIterator类"></a>4.3  InfoCollegeIterator类</h3><blockquote>
<p>list存放，实现Iterator接口，实现Iterator的hasNext方法和next方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoCollegeIterator</span>  <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Department&gt; departmentList; <span class="comment">//信息工程学院是以List方式存放系</span></span><br><span class="line">    <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InfoCollegeIterator</span><span class="params">(List&lt;Department&gt; departmentList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.departmentList = departmentList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认空实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断list中还有没有下一个元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= departmentList.size() - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            index += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentList.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-4-College接口"><a href="#4-4-College接口" class="headerlink" title="4.4 College接口"></a>4.4 College接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">College</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加系的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDepartment</span><span class="params">(String name,String desc)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回一个迭代器，遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-5-ComputerCollege类"><a href="#4-5-ComputerCollege类" class="headerlink" title="4.5 ComputerCollege类"></a>4.5 ComputerCollege类</h3><blockquote>
<p>实现College接口，完成数据的初始化操作</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerCollege</span> <span class="keyword">implements</span> <span class="title">College</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Department[] departments;</span><br><span class="line">    <span class="keyword">int</span> numOfDepartment = <span class="number">0</span>;<span class="comment">//保存当前数组的对象个数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputerCollege</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        departments = <span class="keyword">new</span> Department[<span class="number">5</span>];</span><br><span class="line">        addDepartment(<span class="string">&quot;Java专业&quot;</span>,<span class="string">&quot;Java专业&quot;</span>);</span><br><span class="line">        addDepartment(<span class="string">&quot;PHP专业&quot;</span>,<span class="string">&quot;PHP专业&quot;</span>);</span><br><span class="line">        addDepartment(<span class="string">&quot;大数据专业&quot;</span>,<span class="string">&quot;大数据专业&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;计算机学院&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDepartment</span><span class="params">(String name, String desc)</span> </span>&#123;</span><br><span class="line">        Department department = <span class="keyword">new</span> Department(name,desc);</span><br><span class="line">        departments[numOfDepartment] = department;</span><br><span class="line">        numOfDepartment += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ComputerCollegeIterator(departments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-6-InfoCollege类"><a href="#4-6-InfoCollege类" class="headerlink" title="4.6 InfoCollege类"></a>4.6 InfoCollege类</h3><blockquote>
<p>实现College接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoCollege</span> <span class="keyword">implements</span> <span class="title">College</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Department&gt; departmentList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InfoCollege</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        departmentList = <span class="keyword">new</span> ArrayList&lt;Department&gt;();</span><br><span class="line">        addDepartment(<span class="string">&quot;信息安全专业&quot;</span>,<span class="string">&quot;信息安全专业&quot;</span>);</span><br><span class="line">        addDepartment(<span class="string">&quot;网络安全专业&quot;</span>,<span class="string">&quot;网络安全专业&quot;</span>);</span><br><span class="line">        addDepartment(<span class="string">&quot;服务器安全专业&quot;</span>,<span class="string">&quot;服务器安全专业&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;信息工程学院&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDepartment</span><span class="params">(String name, String desc)</span> </span>&#123;</span><br><span class="line">        Department department = <span class="keyword">new</span> Department(name,desc);</span><br><span class="line">        departmentList.add(department);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InfoCollegeIterator(departmentList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-7-OutPutImpl类"><a href="#4-7-OutPutImpl类" class="headerlink" title="4.7 OutPutImpl类"></a>4.7 OutPutImpl类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutPutImpl</span> </span>&#123;</span><br><span class="line">    <span class="comment">//学院集合</span></span><br><span class="line">    List&lt;College&gt; collegeList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OutPutImpl</span><span class="params">(List&lt;College&gt; collegeList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.collegeList = collegeList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历所有学院，然后调用printDepartment,输出各个学院的系</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printCollege</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//从collegeList中取出所有学院，Java中的List已经实现Iterator</span></span><br><span class="line">        Iterator&lt;College&gt; iterator = collegeList.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            College college = iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;=======&quot;</span>+college.getName()+<span class="string">&quot;=========&quot;</span>);</span><br><span class="line">            printDepartment(college.createIterator());<span class="comment">//得到对应迭代器</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出学院 系</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printDepartment</span><span class="params">(Iterator iterator)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            Department d = (Department) iterator.next();</span><br><span class="line">            System.out.println(d.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-8-Client类"><a href="#4-8-Client类" class="headerlink" title="4.8 Client类"></a>4.8 Client类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建学院</span></span><br><span class="line">        List&lt;College&gt; collegeList = <span class="keyword">new</span> ArrayList&lt;College&gt;();</span><br><span class="line"></span><br><span class="line">        ComputerCollege computerCollege = <span class="keyword">new</span> ComputerCollege();</span><br><span class="line">        InfoCollege infoCollege = <span class="keyword">new</span> InfoCollege();</span><br><span class="line"></span><br><span class="line">        collegeList.add(computerCollege);</span><br><span class="line">        collegeList.add(infoCollege);</span><br><span class="line"></span><br><span class="line">        OutPutImpl outPut = <span class="keyword">new</span> OutPutImpl(collegeList);</span><br><span class="line">        outPut.printCollege();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">=======计算机学院=========</span><br><span class="line">Java专业</span><br><span class="line">PHP专业</span><br><span class="line">大数据专业</span><br><span class="line">=======信息工程学院=========</span><br><span class="line">信息安全专业</span><br><span class="line">网络安全专业</span><br><span class="line">服务器安全专业</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="5、迭代器模式在JDK-ArrayList集合应用的源码分析"><a href="#5、迭代器模式在JDK-ArrayList集合应用的源码分析" class="headerlink" title="5、迭代器模式在JDK-ArrayList集合应用的源码分析"></a>5、迭代器模式在JDK-ArrayList集合应用的源码分析</h2><h3 id="5-1-代码例子"><a href="#5-1-代码例子" class="headerlink" title="5.1 代码例子"></a>5.1 代码例子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo</span> </span>&#123;</span><br><span class="line">  ![image-<span class="number">20210805225901805</span>](设计模式（十三）之行为型模式-迭代器模式/image-<span class="number">20210805225901805.</span>png)  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; a = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        a.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        <span class="comment">//获取到迭代器</span></span><br><span class="line">        Iterator Itr = a.iterator();</span><br><span class="line">        <span class="keyword">while</span>(Itr.hasNext())&#123;</span><br><span class="line">            System.out.println(Itr.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>（1）ArrayList类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>（2）List接口，内聚Iterator</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>（3）查看ArrayList的其他实现类</p>
</blockquote>
<p><img src="/2021/08/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/image-20210805225908325.png" alt="image-20210805225908325"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();<span class="comment">//返回的是一个Itr对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>（4）Itr类，ArrayList的内部类，实现Iterator接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>（5）Iterator接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;remove&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">while</span> (hasNext())</span><br><span class="line">            action.accept(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-2-代码类图"><a href="#5-2-代码类图" class="headerlink" title="5.2 代码类图"></a>5.2 代码类图</h3><p><img src="/2021/08/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/image-20210805233125239.png" alt="image-20210805233125239"></p>
<blockquote>
<ol>
<li>内部类Itr：充当具体实现迭代器Iterator的类，作为ArrayList内部类</li>
<li>List就是充当了聚合接口，含有一个iterator()方法，返回一个迭代器对象</li>
<li>ArrayList是实现聚合接口List的子类，实现了iterator()</li>
<li>Iterator接口系统提供</li>
<li>迭代器模式解决了不同集合（ArrayList，LinkedList）统一遍历问题</li>
</ol>
</blockquote>
<h2 id="6、迭代器模式的注意事项和细节"><a href="#6、迭代器模式的注意事项和细节" class="headerlink" title="6、迭代器模式的注意事项和细节"></a>6、迭代器模式的注意事项和细节</h2><h3 id="6-1-优点"><a href="#6-1-优点" class="headerlink" title="6.1 优点"></a>6.1 优点</h3><blockquote>
<ol>
<li>提供一个统一的方法遍历对象，客户不用在考虑聚合的类型，使用一种方法就可以遍历对象了。</li>
<li>隐藏了聚合的内部结构，客户端要遍历聚合的时候只能取到迭代器，而不会知道聚合的具体组成</li>
<li>提供了一种设计思想，就是一个类应该只有一个引起变化的原因（叫做<strong>单一责任原则</strong>）。在聚合类中，我们把迭代器分开，就是要把管理对象集合和遍历对象集合的责任分开（一个是数据，一个是集合（数组和List）），这样一来集合改变的话，只影响到聚合对象。而如果遍历方式改变的话，只影响到了迭代器。</li>
<li>当腰展示一组相似对象，或者遍历一组相同对象时使用，适合使用迭代器模式</li>
</ol>
</blockquote>
<h3 id="6-2-缺点"><a href="#6-2-缺点" class="headerlink" title="6.2 缺点"></a>6.2 缺点</h3><blockquote>
<p>每个聚合对象都要一个迭代器，会生成对个迭代器不好管理类</p>
</blockquote>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>迭代器模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（十五）之行为型模式-中介者模式</title>
    <url>/2021/08/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、中介者模式"><a href="#一、中介者模式" class="headerlink" title="一、中介者模式"></a>一、中介者模式</h1><h2 id="1、案例讲解"><a href="#1、案例讲解" class="headerlink" title="1、案例讲解"></a>1、案例讲解</h2><h3 id="1-1-智能家庭项目"><a href="#1-1-智能家庭项目" class="headerlink" title="1.1 智能家庭项目"></a>1.1 智能家庭项目</h3><blockquote>
<ol>
<li><p>智能家庭包括各种设备，闹钟，咖啡机，电视机，窗帘等</p>
</li>
<li><p>主人要看电视时，各个设备可以协同工作，自动完成看电视的准备工作，比如流程为：</p>
<p>​    <strong>闹铃响起-&gt;咖啡机开始做咖啡-&gt;窗帘自动落下-&gt;电视机开始播放</strong></p>
</li>
</ol>
</blockquote>
<h3 id="1-2-传统方法类图"><a href="#1-2-传统方法类图" class="headerlink" title="1.2 传统方法类图"></a>1.2 传统方法类图</h3><blockquote>
<p>客户想要租房，找到房东，房东可能要去妻子、爸爸等去交流，然后都同意，在出租，比较麻烦</p>
</blockquote>
<p><img src="/2021/08/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/image-20210808213629343.png" alt="image-20210808213629343"></p>
<h3 id="1-3-传统方式问题分析"><a href="#1-3-传统方式问题分析" class="headerlink" title="1.3 传统方式问题分析"></a>1.3 传统方式问题分析</h3><blockquote>
<ol>
<li>当各电器对象有多种状态改变时，相互之间的调用关系会比较复杂</li>
<li>各个电器对象彼此联系，<strong>你中有我，我中有你，不利于松耦合</strong></li>
<li>各个电器对象之间所传递的消息（参数），容易混乱</li>
<li>当系统增加一个新的电器对象时，或者执行流程发生改变时，代码的可维护性、扩展性都不理想—&gt;考虑中介者模式</li>
</ol>
</blockquote>
<h2 id="2、中介者模式基本介绍"><a href="#2、中介者模式基本介绍" class="headerlink" title="2、中介者模式基本介绍"></a>2、中介者模式基本介绍</h2><h3 id="2-1-基本介绍"><a href="#2-1-基本介绍" class="headerlink" title="2.1 基本介绍"></a>2.1 基本介绍</h3><blockquote>
<ol>
<li><strong>中介者模式（Mediator Pattern）</strong>：用一个中介对象来封装一系列的对象交互。中介者使各个对象不需要显示地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互</li>
<li>比如MVC模式，C（Controller控制器）是M（Model模型）和V（View视图）的中介者，在前后端交互起到了中间人的作用</li>
</ol>
</blockquote>
<h3 id="2-2-原理类图"><a href="#2-2-原理类图" class="headerlink" title="2.2 原理类图"></a>2.2 原理类图</h3><p><img src="/2021/08/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/image-20210808220407707.png" alt="image-20210808220407707"></p>
<blockquote>
<ol>
<li>Mediator就是抽象中介者，定义了同事对象到中介者对象的接口</li>
<li>Colleague是抽象同事类</li>
<li>ConcreteMediator具体的中介者对象，实现抽象方法，它需要知道所有的具体的同事类，即以一个集合来管理HashMap，并接受某个同事对象消息，完成相应的任务</li>
<li>ConcreteColleague具体的同事类，会有很多，每个同事只知道自己的行为，而不了解其他同事类的行为（方法），但是他们都依赖中介者对象</li>
</ol>
</blockquote>
<h3 id="2-3-实例类图"><a href="#2-3-实例类图" class="headerlink" title="2.3 实例类图"></a>2.3 实例类图</h3><p><img src="/2021/08/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/image-20210808222503624.png" alt="image-20210808222503624"></p>
<blockquote>
<p>操作流程：</p>
<ol>
<li>创建ConcreteMediator对象</li>
<li>创建各个同事类对象，比如：Alarm、CoffeeMachine、TV…</li>
<li>在创建同事类对象的时候，就直接通过构造器，加入到ColleagueMap</li>
<li>同事类对象，可以调用sendMessage，最终会去调用ConcreteMediator类的getMessage方法</li>
<li>getMessage会根据接收到的同事对象发出的消息来协调调用其他的同事对象，完成任务</li>
<li>可以看到getMessage是核心方法，完成相应任务</li>
</ol>
</blockquote>
<h2 id="3、代码实例"><a href="#3、代码实例" class="headerlink" title="3、代码实例"></a>3、代码实例</h2><h3 id="3-1-Mediator抽象类"><a href="#3-1-Mediator抽象类" class="headerlink" title="3.1 Mediator抽象类"></a>3.1 Mediator抽象类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将给的中介者对象，加入到集合中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Register</span><span class="params">(String colleagueName,Colleague colleague)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收消息，具体的同事对象发出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">GetMessage</span><span class="params">(<span class="keyword">int</span> stateChange,String colleague)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-Colleague-抽象类"><a href="#3-2-Colleague-抽象类" class="headerlink" title="3.2 Colleague 抽象类"></a>3.2 Colleague 抽象类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//同事抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Mediator mediator;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Colleague</span><span class="params">(Mediator mediator, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mediator <span class="title">getMediator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mediator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-Alarm类"><a href="#3-3-Alarm类" class="headerlink" title="3.3 Alarm类"></a>3.3 Alarm类</h3><blockquote>
<p>继承Colleague</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体的同事类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Alarm</span> <span class="keyword">extends</span> <span class="title">Colleague</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Alarm</span><span class="params">(Mediator mediator,String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator,name);</span><br><span class="line">        <span class="comment">//在创建Alarm 同事对象时，将自己放入到ConcreteMediator 对象中[集合]</span></span><br><span class="line">        mediator.Register(name,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendAlarm</span><span class="params">(<span class="keyword">int</span> stateChange)</span></span>&#123;</span><br><span class="line">        SendMessage(stateChange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用的中介者对象的getMessage</span></span><br><span class="line">        <span class="keyword">this</span>.getMediator().GetMessage(stateChange,<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-CofeeMachine类"><a href="#3-4-CofeeMachine类" class="headerlink" title="3.4 CofeeMachine类"></a>3.4 CofeeMachine类</h3><blockquote>
<p> 继承Colleague</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeMachine</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CoffeeMachine</span><span class="params">(Mediator mediator, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator, name);</span><br><span class="line">        mediator.Register(name,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getMediator().GetMessage(stateChange,<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartCoffee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 开始制作咖啡 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FinishCoffee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 等待5分钟 &quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot; 咖啡制作完成 &quot;</span>);</span><br><span class="line">        SendMessage(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-5-Curtains类"><a href="#3-5-Curtains类" class="headerlink" title="3.5 Curtains类"></a>3.5 Curtains类</h3><blockquote>
<p>继承Colleague</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//窗帘</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Curtains</span> <span class="keyword">extends</span> <span class="title">Colleague</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Curtains</span><span class="params">(Mediator mediator, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator, name);</span><br><span class="line">        mediator.Register(name,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getMediator().GetMessage(stateChange,<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpCurtains</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 准备拉上窗帘 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="3-6-TV类"><a href="#3-6-TV类" class="headerlink" title="3.6 TV类"></a>3.6 TV类</h3><blockquote>
<p>继承Colleague</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//电视</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TV</span> <span class="keyword">extends</span> <span class="title">Colleague</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TV</span><span class="params">(Mediator mediator, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator, name);</span><br><span class="line">        mediator.Register(name,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getMediator().GetMessage(stateChange,<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartTv</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 打开TV &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StopTv</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 关闭TV &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-7-ConcreteMediator类"><a href="#3-7-ConcreteMediator类" class="headerlink" title="3.7 ConcreteMediator类"></a>3.7 ConcreteMediator类</h3><blockquote>
<p>继承Mediator类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体的中介者类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="comment">//集合，放入所有的同事对象</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,Colleague&gt; colleagueHashMap;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,String&gt; interMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteMediator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        colleagueHashMap = <span class="keyword">new</span> HashMap&lt;String,Colleague&gt;();</span><br><span class="line">        interMap = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同事注册类，内部维护了HashMap</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Register</span><span class="params">(String colleagueName, Colleague colleague)</span> </span>&#123;</span><br><span class="line">        colleagueHashMap.put(colleagueName,colleague);</span><br><span class="line">        <span class="keyword">if</span> (colleague <span class="keyword">instanceof</span>  Alarm)<span class="comment">// instanceof 左边是对象，右边是类，当左边对象是右边类创建时，返回true</span></span><br><span class="line">            interMap.put(<span class="string">&quot;Alarm&quot;</span>,colleagueName);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (colleague <span class="keyword">instanceof</span>  CoffeeMachine)</span><br><span class="line">            interMap.put(<span class="string">&quot;CoffeeMachine&quot;</span>,colleagueName);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (colleague <span class="keyword">instanceof</span>  TV)</span><br><span class="line">            interMap.put(<span class="string">&quot;TV&quot;</span>,colleagueName);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (colleague <span class="keyword">instanceof</span> Curtains)</span><br><span class="line">            interMap.put(<span class="string">&quot;Curtains&quot;</span>,colleagueName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具体中介者的核心方法</span></span><br><span class="line">    <span class="comment">//1、根据得到的消息，完成对应任务</span></span><br><span class="line">    <span class="comment">//2、中介者在这个方法，协调各个具体的同事对象，完成任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetMessage</span><span class="params">(<span class="keyword">int</span> stateChange, String colleagueName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(colleagueHashMap.get(colleagueName) <span class="keyword">instanceof</span>  Alarm)&#123;</span><br><span class="line">            <span class="keyword">if</span>(stateChange == <span class="number">0</span>)&#123;</span><br><span class="line">                ((CoffeeMachine)(colleagueHashMap.get(interMap.get(<span class="string">&quot;CoffeeMachine&quot;</span>)))).StartCoffee();</span><br><span class="line">                ((TV)(colleagueHashMap.get(interMap.get(<span class="string">&quot;TV&quot;</span>)))).StartTv();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(stateChange == <span class="number">1</span>)&#123;</span><br><span class="line">                ((TV)(colleagueHashMap.get(interMap.get(<span class="string">&quot;TV&quot;</span>)))).StopTv();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(colleagueHashMap.get(colleagueName) <span class="keyword">instanceof</span>  CoffeeMachine)&#123;</span><br><span class="line">            ((Curtains)(colleagueHashMap.get(interMap.get(<span class="string">&quot;Curtains&quot;</span>)))).UpCurtains();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(colleagueHashMap.get(colleagueName) <span class="keyword">instanceof</span>  TV )&#123;</span><br><span class="line">            <span class="comment">//如果TV发现消息</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(colleagueHashMap.get(colleagueName) <span class="keyword">instanceof</span>  Curtains)&#123;</span><br><span class="line">            <span class="comment">//如果是窗帘发出的消息，这里处理...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-8-ClientTest类"><a href="#3-8-ClientTest类" class="headerlink" title="3.8  ClientTest类"></a>3.8  ClientTest类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个中介者对象</span></span><br><span class="line">        Mediator mediator = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Alarm 并且加入到ConcreteMediator 对象的HashMap</span></span><br><span class="line">        Alarm alarm = <span class="keyword">new</span> Alarm(mediator, <span class="string">&quot;Alarm&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建CoffeeMachine对象，并且加入到ConcreteMediator对象的HashMap</span></span><br><span class="line">        CoffeeMachine coffeeMachine = <span class="keyword">new</span> CoffeeMachine(mediator, <span class="string">&quot;CoffeeMachine&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Curtains, 并且加入到 ConcreteMediator 对象的HashMap</span></span><br><span class="line">        Curtains curtains = <span class="keyword">new</span> Curtains(mediator, <span class="string">&quot;Curtains&quot;</span>);</span><br><span class="line">        TV tv = <span class="keyword">new</span> TV(mediator, <span class="string">&quot;TV&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让闹钟发出消息（在中介者中对消息进行处理，getMessage）</span></span><br><span class="line">        alarm.SendAlarm(<span class="number">0</span>);</span><br><span class="line">        coffeeMachine.FinishCoffee();</span><br><span class="line">        alarm.SendAlarm(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">开始制作咖啡 </span><br><span class="line">打开TV </span><br><span class="line">等待<span class="number">5</span>分钟 </span><br><span class="line">咖啡制作完成 </span><br><span class="line">准备拉上窗帘 </span><br><span class="line">关闭TV </span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="4、中介者模式的注意事项和细节"><a href="#4、中介者模式的注意事项和细节" class="headerlink" title="4、中介者模式的注意事项和细节"></a>4、中介者模式的注意事项和细节</h2><blockquote>
<ol>
<li>多个类相互耦合，会形成网状结构，使用中介者模式将网状结构分离为星型结构，进行解耦</li>
<li>减少类间的依赖，降低了耦合，符合迪米特原则</li>
<li>中介者承担了较多的责任，一旦中介者出现了问题，整个系统就会受到影响</li>
<li>如果设计不当，中介者对象本身变得过于复杂，这点在实际使用时，要特别注意</li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>观察者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（十四）之行为型模式-观察者模式</title>
    <url>/2021/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、观察者模式"><a href="#一、观察者模式" class="headerlink" title="一、观察者模式"></a>一、观察者模式</h1><h2 id="1、-案例"><a href="#1、-案例" class="headerlink" title="1、 案例"></a>1、 案例</h2><h3 id="1-1-天气预报项目需求"><a href="#1-1-天气预报项目需求" class="headerlink" title="1.1 天气预报项目需求"></a>1.1 天气预报项目需求</h3><blockquote>
<ol>
<li>气象站可以将每天测量到的温度，湿度，气压等等以公告的形式发布出去（比如发布到自己的网站或第三方）。</li>
<li>需要设计开放型API，便于其他第三方也能接入气象站获取数据</li>
<li>提供温度、气压和湿度的接口</li>
<li>测量数据更新时，要能实时的通知给第三方</li>
</ol>
</blockquote>
<h3 id="1-2-普通方案1"><a href="#1-2-普通方案1" class="headerlink" title="1.2 普通方案1"></a>1.2 普通方案1</h3><blockquote>
<p>通过对气象站项目的分析，我们可以初步设计出一个WeatherData类</p>
</blockquote>
<p><img src="/2021/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/image-20210807095116719.png" alt="image-20210807095116719"></p>
<blockquote>
<p>说明：</p>
<ol>
<li>通过getXxx方法，可以让第三方接入，并得到相关信息</li>
<li>当数据有更新时，气象站通过调用dataChange()去更新数据，当第三方再次获取时，就能得到最新数据，当然也可以<strong>推送</strong></li>
</ol>
<p>推送示意图如下：</p>
<p>​    在WeatherData中，每隔一段时间，将dataChange()推送至CurrentConditions中的update方法</p>
<p>CurrentConditions（当前的天气情况）可以理解成是我们气象局的网站//<strong>推送</strong></p>
</blockquote>
<p><img src="/2021/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/image-20210807095529152.png" alt="image-20210807095529152"></p>
<h3 id="1-3-普通方案代码实例"><a href="#1-3-普通方案代码实例" class="headerlink" title="1.3 普通方案代码实例"></a>1.3 普通方案代码实例</h3><h4 id="1-3-1-CurrentConditions类"><a href="#1-3-1-CurrentConditions类" class="headerlink" title="1.3.1 CurrentConditions类"></a>1.3.1 CurrentConditions类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示当前天气情况（可以理解成气象站自己的网站）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditions</span> </span>&#123;</span><br><span class="line">    <span class="comment">//温度、气压、湿度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新天气情况，是由WeatherData来调用， 使用推送模式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature,<span class="keyword">float</span> pressure,<span class="keyword">float</span> humidity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***Today mTempature: &quot;</span>+temperature + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;***Today mPressure: &quot;</span>+pressure + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;***Today mHumidity: &quot;</span>+humidity + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-3-2-WeatherData类"><a href="#1-3-2-WeatherData类" class="headerlink" title="1.3.2 WeatherData类"></a>1.3.2 WeatherData类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类是核心</span></span><br><span class="line"><span class="comment">// 1. 包含最新的天气情况信息</span></span><br><span class="line"><span class="comment">// 2. 含有CurrentConditions对象</span></span><br><span class="line"><span class="comment">// 3. 当数据有更新时，就主动的调用CurrentConditions对象update方法（含display），这样他们（接入方）就看到最新的消息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> CurrentConditions currentConditions;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">(CurrentConditions currentConditions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentConditions = currentConditions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemperature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> temperature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pressure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHumidity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> humidity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CurrentConditions <span class="title">getCurrentConditions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentConditions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataChange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        currentConditions.update(getTemperature(),getPressure(),getHumidity());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当数据有更新时，</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">float</span> temperature,<span class="keyword">float</span> pressure,<span class="keyword">float</span> humidity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        dataChange();<span class="comment">//调用dataChange，将最新的信息推送给接入方</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-3-3-Client类"><a href="#1-3-3-Client类" class="headerlink" title="1.3.3 Client类"></a>1.3.3 Client类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建接入方 CurrentConditions</span></span><br><span class="line">        CurrentConditions currentConditions = <span class="keyword">new</span> CurrentConditions();</span><br><span class="line">        <span class="comment">//创建WeatherData 并将接入方 currentConditions 传递到WeatherData中</span></span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData(currentConditions);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新天气预报</span></span><br><span class="line">        weatherData.setData(<span class="number">30</span>,<span class="number">150</span>,<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//天气情况变化</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==============天气情况变化================&quot;</span>);</span><br><span class="line">        weatherData.setData(<span class="number">40</span>,<span class="number">160</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">***Today mTempature: <span class="number">30.0</span>***</span><br><span class="line">***Today mPressure: <span class="number">150.0</span>***</span><br><span class="line">***Today mHumidity: <span class="number">40.0</span>***</span><br><span class="line">==============天气情况变化================</span><br><span class="line">***Today mTempature: <span class="number">40.0</span>***</span><br><span class="line">***Today mPressure: <span class="number">160.0</span>***</span><br><span class="line">***Today mHumidity: <span class="number">20.0</span>***</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="1-4-普通方案问题分析"><a href="#1-4-普通方案问题分析" class="headerlink" title="1.4 普通方案问题分析"></a>1.4 普通方案问题分析</h3><blockquote>
<ol>
<li>其他第三方接入气象站获取数据的问题</li>
<li>无法在运行时动态的添加第三方</li>
</ol>
<p>//在WeatherData中，当增加一个第三方，都需要创建一个对应的第三方的公告板对象，并加入到dataChange，<strong>不利于维护，也不是动态加入</strong></p>
<p>   3.违反了开闭原则，添加新的第三方时，会在下面的代码中进行修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">(CurrentConditions currentConditions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentConditions = currentConditions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataChange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        currentConditions.update(getTemperature(),getPressure(),getHumidity());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="2、观察者模式原理"><a href="#2、观察者模式原理" class="headerlink" title="2、观察者模式原理"></a>2、观察者模式原理</h2><h3 id="2-1-Subject"><a href="#2-1-Subject" class="headerlink" title="2.1 Subject"></a>2.1 Subject</h3><blockquote>
<p>观察者模式类似于订牛奶业务</p>
<ol>
<li>奶站（气象局）：Subject</li>
<li>用户/第三方网站：Observer</li>
</ol>
</blockquote>
<p> <img src="/2021/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/image-20210808105847511.png" alt="image-20210808105847511"></p>
<blockquote>
<p>说明：</p>
<ol>
<li>Subject：登记注册、移除和通知</li>
<li>registerObserver注册</li>
<li>removeObserver移除</li>
<li>notifyObservers()通知所有的注册的用户，根据不同得到需求，可以是更新数据，让用户来取，也可以是实施推送，看具体需求定</li>
</ol>
</blockquote>
<h3 id="2-2-Observer"><a href="#2-2-Observer" class="headerlink" title="2.2 Observer"></a>2.2 Observer</h3><p><img src="/2021/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/image-20210808110811147.png" alt="image-20210808110811147"></p>
<blockquote>
<p>说明：</p>
<ol>
<li>观察者模式：对象之间<strong>多对一依赖</strong>的一种设计方案，被依赖的对象为<strong>Subject</strong>，依赖的对象是<strong>Observer</strong>，Subject通知Observer变化，比如这里的奶站是Subject，是1的一方。用户是Observer，是多的一方。</li>
</ol>
</blockquote>
<h3 id="2-3-原理类图"><a href="#2-3-原理类图" class="headerlink" title="2.3 原理类图"></a>2.3 原理类图</h3><p><img src="/2021/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/image-20210808200922650.png" alt="image-20210808200922650"></p>
<h2 id="3、代码实例"><a href="#3、代码实例" class="headerlink" title="3、代码实例"></a>3、代码实例</h2><h3 id="3-1-Observer接口"><a href="#3-1-Observer接口" class="headerlink" title="3.1 Observer接口"></a>3.1 Observer接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//观察者接口，由观察者来实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> tempterature,<span class="keyword">float</span> pressure,<span class="keyword">float</span> humidity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-Subject接口"><a href="#3-2-Subject接口" class="headerlink" title="3.2 Subject接口"></a>3.2 Subject接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-CurrentConditions类"><a href="#3-3-CurrentConditions类" class="headerlink" title="3.3 CurrentConditions类"></a>3.3 CurrentConditions类</h3><blockquote>
<p>实现Observer接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditions</span> <span class="keyword">implements</span>  <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="comment">//温度、气压、湿度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新天气情况，是由WeatherData来调用， 使用推送模式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature,<span class="keyword">float</span> pressure,<span class="keyword">float</span> humidity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***Today mTempature: &quot;</span>+temperature + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;***Today mPressure: &quot;</span>+pressure + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;***Today mHumidity: &quot;</span>+humidity + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-WeatherData类"><a href="#3-4-WeatherData类" class="headerlink" title="3.4 WeatherData类"></a>3.4 WeatherData类</h3><blockquote>
<p>实现Subject接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类是核心</span></span><br><span class="line"><span class="comment">// 1. 包含最新的天气情况信息 使用ArrayList管理</span></span><br><span class="line"><span class="comment">// 2. 含有 观察者集合，</span></span><br><span class="line"><span class="comment">// 3. 当数据有更新时，就主动的调用ArrayList，通知所有的（接入方）就看到最新的信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="comment">//观察者集合</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Observer&gt; observers;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">( )</span></span>&#123;</span><br><span class="line">        observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemperature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> temperature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pressure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHumidity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> humidity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataChange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当数据有更新时，</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">float</span> temperature,<span class="keyword">float</span> pressure,<span class="keyword">float</span> humidity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        dataChange();<span class="comment">//调用dataChange，将最新的信息推送给接入方</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册一个观察者</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        observers.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除一个观察者</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(observers.contains(o))</span><br><span class="line">            observers.remove(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历所有的观察者，并通知</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; observers.size(); i++)&#123;</span><br><span class="line">            observers.get(i).update(<span class="keyword">this</span>.temperature,<span class="keyword">this</span>.pressure,<span class="keyword">this</span>.humidity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-5-Client类"><a href="#3-5-Client类" class="headerlink" title="3.5 Client类"></a>3.5 Client类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个WeatherData</span></span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建观察者</span></span><br><span class="line">        CurrentConditions currentConditions = <span class="keyword">new</span> CurrentConditions();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册到weatherData</span></span><br><span class="line">        weatherData.registerObserver(currentConditions);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        System.out.println(<span class="string">&quot;通知各个注册的观察者，看看信息&quot;</span>);</span><br><span class="line">        weatherData.setData(<span class="number">10f</span>,<span class="number">100f</span>,<span class="number">30.3f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">通知各个注册的观察者，看看信息</span><br><span class="line">***Today mTempature: <span class="number">10.0</span>***</span><br><span class="line">***Today mPressure: <span class="number">100.0</span>***</span><br><span class="line">***Today mHumidity: <span class="number">30.3</span>***</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="3-6-添加新的观察者"><a href="#3-6-添加新的观察者" class="headerlink" title="3.6 添加新的观察者"></a>3.6 添加新的观察者</h3><h4 id="3-6-1-BaiduSite类"><a href="#3-6-1-BaiduSite类" class="headerlink" title="3.6.1 BaiduSite类"></a>3.6.1 BaiduSite类</h4><blockquote>
<p>实现Observer接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaiduSite</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="comment">//温度、气压、湿度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新天气情况，是由WeatherData来调用， 使用推送模式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature,<span class="keyword">float</span> pressure,<span class="keyword">float</span> humidity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;百度网站&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;***百度网站 气温: &quot;</span>+temperature + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;***百度网站 气压: &quot;</span>+pressure + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;***百度网站 湿度: &quot;</span>+humidity + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-6-2-Client类"><a href="#3-6-2-Client类" class="headerlink" title="3.6.2 Client类"></a>3.6.2 Client类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个WeatherData</span></span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建观察者</span></span><br><span class="line">        CurrentConditions currentConditions = <span class="keyword">new</span> CurrentConditions();</span><br><span class="line">        BaiduSite baiduSite = <span class="keyword">new</span> BaiduSite();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册到weatherData</span></span><br><span class="line">        weatherData.registerObserver(currentConditions);</span><br><span class="line">        weatherData.registerObserver(baiduSite);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        System.out.println(<span class="string">&quot;通知各个注册的观察者，看看信息&quot;</span>);</span><br><span class="line">        weatherData.setData(<span class="number">10f</span>,<span class="number">100f</span>,<span class="number">30.3f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">通知各个注册的观察者，看看信息</span><br><span class="line">***Today mTempature: <span class="number">10.0</span>***</span><br><span class="line">***Today mPressure: <span class="number">100.0</span>***</span><br><span class="line">***Today mHumidity: <span class="number">30.3</span>***</span><br><span class="line">百度网站</span><br><span class="line">***百度网站 气温: <span class="number">10.0</span>***</span><br><span class="line">***百度网站 气压: <span class="number">100.0</span>***</span><br><span class="line">***百度网站 湿度: <span class="number">30.3</span>***</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="4、观察者模式好处"><a href="#4、观察者模式好处" class="headerlink" title="4、观察者模式好处"></a>4、观察者模式好处</h2><blockquote>
<ol>
<li>观察者模式设计后，会以集合的方式来管理用户（Observer），包括注册、移除和通知</li>
<li>这样，我们增加观察者（这里可以理解成一个新的公告板），就不需要去修改核心类WeatherData，不会修改代码，遵守了ocp原则</li>
</ol>
</blockquote>
<h2 id="5、观察者模式在Jdk应用的源码分析"><a href="#5、观察者模式在Jdk应用的源码分析" class="headerlink" title="5、观察者模式在Jdk应用的源码分析"></a>5、观察者模式在Jdk应用的源码分析</h2><h3 id="5-1-源码分析"><a href="#5-1-源码分析" class="headerlink" title="5.1 源码分析"></a>5.1 源码分析</h3><blockquote>
<p>（1）new 一个Obserable对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">new</span> Observable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>（2）Obserable类</p>
<p>里面含有Observer，还有3个方法addObserver、deleteObserver、notifyObservers</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Observer&gt; obs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Construct an Observable with zero Observers. */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Observable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        obs = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer o)</span></span>&#123;...&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        obs.removeElement(o);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notifyObservers(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>（3）Observer接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>（4）Obserable类中的notifyObservers方法详解</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(Object arg)</span> </span>&#123;</span><br><span class="line">    Object[] arrLocal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!changed)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        arrLocal = obs.toArray();</span><br><span class="line">        clearChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arrLocal.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">        ((Observer)arrLocal[i]).update(<span class="keyword">this</span>, arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-2-说明"><a href="#5-2-说明" class="headerlink" title="5.2 说明"></a>5.2 说明</h3><blockquote>
<ol>
<li>Observable的作用和地位等价于我们前面讲过的Subject</li>
<li>Observable是类，不是接口，类中已经实现了核心的方法，即管理Observer的方法，add…，delete…，notiry…</li>
<li>Observer的作用和地位等价于我们前面讲过的Observer，有update</li>
<li>Observable和Observer的使用方法和前面讲过的一样，只是Observable是类，通过继承来实现观察者模式</li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>观察者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（十七）之行为型模式-解释器模式</title>
    <url>/2021/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、解释器模式"><a href="#一、解释器模式" class="headerlink" title="一、解释器模式"></a>一、解释器模式</h1><h2 id="1、案例"><a href="#1、案例" class="headerlink" title="1、案例"></a>1、案例</h2><h3 id="1-1-四则运算问题"><a href="#1-1-四则运算问题" class="headerlink" title="1.1 四则运算问题"></a>1.1 四则运算问题</h3><blockquote>
<p>通过解释器模式来实现四则运算，如计算a+b-c的值，看具体要求</p>
<p>（1）先输入表达式的形式，比如a+b+c-d+e，要求表达式的字母不能重复</p>
<p>（2）再分别输入a,b,c,d,e的值</p>
<p>（3）最后求出结果：类似下图</p>
<p><img src="/2021/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/image-20210815212928466.png" alt="image-20210815212928466"></p>
</blockquote>
<h3 id="1-2-传统方案"><a href="#1-2-传统方案" class="headerlink" title="1.2 传统方案"></a>1.2 传统方案</h3><blockquote>
<p>（1）编写一个方法，接收表达式的形式，然后根据用户输入的数值进行解析，得到结果</p>
<p>（2）问题分析：如果加入新的运算符，比如*/()等等，不利于扩展，另外让一个方法来解析会造成程序结构混乱，不够清晰</p>
<p>（3）解决方案：可以考虑使用解释器模式，即 <strong>表达式-&gt;解释器（可以有多种）-&gt;结果</strong></p>
</blockquote>
<h2 id="2、解释器模式基本介绍"><a href="#2、解释器模式基本介绍" class="headerlink" title="2、解释器模式基本介绍"></a>2、解释器模式基本介绍</h2><h3 id="2-1-基本介绍"><a href="#2-1-基本介绍" class="headerlink" title="2.1 基本介绍"></a>2.1 基本介绍</h3><blockquote>
<ol>
<li>在编译原理中，一个算术表达式通过<strong>词法分析器</strong>形成词法单元，而后这些词法单元在通过<strong>语法分析器</strong>构建语法分析树，最终形成一颗抽象的语法分析树。这里的词法分析器和语法分析器都可以看做是解释器。</li>
<li>解释器模式（Interpreter Pattern）：是指给定一个语言（表达式），定义它的文法的一种表示，并定义一个解释器，使用该解释器来解释语言中的句子（表达式）</li>
<li>应用场景：<ul>
<li>应用可以将一个需要解释执行的语言中的句子表示为一个抽象语法树</li>
<li>一些重复出现的问题可以用一种简单的语言来表达</li>
<li>一个简单语法需要解释的场景</li>
</ul>
</li>
<li>这样的例子还有，比如编译器、运算表达式计算、正则表达式、机器人等。</li>
</ol>
</blockquote>
<h3 id="2-2-原理类图"><a href="#2-2-原理类图" class="headerlink" title="2.2 原理类图"></a>2.2 原理类图</h3><p><img src="/2021/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/image-20210811221747006.png" alt="image-20210811221747006"></p>
<blockquote>
<p>Context：是环境角色，含有解释器之外的全局信息</p>
<p>AbstractExpression：抽象表达式，声明一个抽象的解释操作，这个方法为抽象语法树中所有的节点所共享</p>
<p>TerminalExpression：为终结符表达式，实现与文法中的终结符相关的解释操作</p>
<p>NonTerminalExpression：为非终结符表达式，为文法中的非终结符实现解释操作</p>
<p>说明：输入Context和TerminalExpression信息，通过Client输入即可</p>
</blockquote>
<h2 id="3、代码实例"><a href="#3、代码实例" class="headerlink" title="3、代码实例"></a>3、代码实例</h2><h3 id="3-1-实例类图"><a href="#3-1-实例类图" class="headerlink" title="3.1 实例类图"></a>3.1 实例类图</h3><p><img src="/2021/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/image-20210811230517722.png" alt="image-20210811230517722"></p>
<h3 id="3-2-代码"><a href="#3-2-代码" class="headerlink" title="3.2 代码"></a>3.2 代码</h3><h4 id="3-2-1-Expression抽象类"><a href="#3-2-1-Expression抽象类" class="headerlink" title="3.2.1 Expression抽象类"></a>3.2.1 Expression抽象类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象类表达式，通过HashMap键值对，可以获取到变量的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="comment">// a + b -c</span></span><br><span class="line">    <span class="comment">// 解释公式和数值，key就是公式（表达式） 参数[a,b,c],value就是具体数值</span></span><br><span class="line">    <span class="comment">// HashMap&#123;a=10,b=20&#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">interpreter</span><span class="params">(HashMap&lt;String,Integer&gt; <span class="keyword">var</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-2-VarExpression类"><a href="#3-2-2-VarExpression类" class="headerlink" title="3.2.2 VarExpression类"></a>3.2.2 VarExpression类</h4><blockquote>
<p>继承Expression类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String key;<span class="comment">// key = a,key = b, key = c</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">VarExpression</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpreter</span><span class="params">(HashMap&lt;String, Integer&gt; <span class="keyword">var</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">var</span>.get(<span class="keyword">this</span>.key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-3-SymbolExpression类"><a href="#3-2-3-SymbolExpression类" class="headerlink" title="3.2.3 SymbolExpression类"></a>3.2.3 SymbolExpression类</h4><blockquote>
<p>继承Expression类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象运算符 解析器，这里，每个运算符合都只和自己左右两个数字有关系</span></span><br><span class="line"><span class="comment">// 但左右两个数字有可能也是一个解析的结果，无论何种类型，都是Expression类的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SymbolExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> Expression left;</span><br><span class="line">    <span class="keyword">protected</span> Expression right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SymbolExpression</span><span class="params">(Expression left, Expression right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为SymbolExpression 是让其子类来实现，因此 interpreter 是一个默认实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpreter</span><span class="params">(HashMap&lt;String, Integer&gt; <span class="keyword">var</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-4-AddExpression类"><a href="#3-2-4-AddExpression类" class="headerlink" title="3.2.4 AddExpression类"></a>3.2.4 AddExpression类</h4><blockquote>
<p>继承SymbolExpression类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加法解释器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddExpression</span> <span class="keyword">extends</span> <span class="title">SymbolExpression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddExpression</span><span class="params">(Expression left, Expression right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(left, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理相加</span></span><br><span class="line">    <span class="comment">// var 仍然是 &#123;a=10,b=20&#125;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpreter</span><span class="params">(HashMap&lt;String, Integer&gt; <span class="keyword">var</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// super.left.interpreter(var): 返回left 表达式对应的值 a = 10</span></span><br><span class="line">        <span class="comment">// super.right.interpreter(var): right 表达式对应的值 b = 10</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.left.interpreter(<span class="keyword">var</span>) + <span class="keyword">super</span>.right.interpreter(<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-5-SubExpression类"><a href="#3-2-5-SubExpression类" class="headerlink" title="3.2.5 SubExpression类"></a>3.2.5 SubExpression类</h4><blockquote>
<p>继承SymbolExpression类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubExpression</span> <span class="keyword">extends</span> <span class="title">SymbolExpression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubExpression</span><span class="params">(Expression left, Expression right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(left, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求出left 和right 表达式相减后的结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpreter</span><span class="params">(HashMap&lt;String, Integer&gt; <span class="keyword">var</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.left.interpreter(<span class="keyword">var</span>) - <span class="keyword">super</span>.right.interpreter(<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-6-Calculator类"><a href="#3-2-6-Calculator类" class="headerlink" title="3.2.6 Calculator类"></a>3.2.6 Calculator类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义表达式</span></span><br><span class="line">    <span class="keyword">private</span> Expression expression;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数传参，并解析</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calculator</span><span class="params">(String expStr)</span> </span>&#123; <span class="comment">// expStr = a + b</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//安排运算符先后顺序</span></span><br><span class="line">       Stack&lt;Expression&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">char</span>[] charArray = expStr.toCharArray(); <span class="comment">// [a,+,b]</span></span><br><span class="line"></span><br><span class="line">       Expression left = <span class="keyword">null</span>;</span><br><span class="line">       Expression right = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 遍历我们的字符数组，即遍历 [a,+,b]</span></span><br><span class="line">       <span class="comment">// 针对不同的情况，做处理</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; charArray.length;i++)&#123;</span><br><span class="line">           <span class="keyword">switch</span> (charArray[i])&#123;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                   left = stack.pop();<span class="comment">// 从stack 取出left =&gt; &quot;a&quot;</span></span><br><span class="line">                   right = <span class="keyword">new</span> VarExpression(String.valueOf(charArray[++i])); <span class="comment">//取出右表达式 &quot;b&quot;</span></span><br><span class="line">                   stack.push(<span class="keyword">new</span> AddExpression(left,right)); <span class="comment">// 然后根据得到left和right 构建AddExpression 加入stack</span></span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                   left = stack.pop();</span><br><span class="line">                   right = <span class="keyword">new</span> VarExpression(String.valueOf(charArray[++i]));</span><br><span class="line">                   stack.push(<span class="keyword">new</span> SubExpression(left,right));</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">                   <span class="comment">// 如果是一个Var，就创建一个VrExpression对象，并Push到Stack</span></span><br><span class="line">                   stack.push(<span class="keyword">new</span> VarExpression(String.valueOf(charArray[i])));</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 当遍历完整个charArray数组后，stack 就得到了最后的Expression</span></span><br><span class="line">       <span class="keyword">this</span>.expression = stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(HashMap&lt;String,Integer&gt; <span class="keyword">var</span>)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 最后将表达式a+b 和var=&#123;a=10,b=20&#125; 绑定</span></span><br><span class="line">        <span class="comment">// 然后传递给expression 的interpreter进行解释执行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.expression.interpreter(<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-7-Client类"><a href="#3-2-7-Client类" class="headerlink" title="3.2.7 Client类"></a>3.2.7 Client类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String expStr = getExpStr();<span class="comment">// a+b</span></span><br><span class="line">        HashMap&lt;String,Integer&gt; <span class="keyword">var</span> = getValue(expStr);</span><br><span class="line">        Calculator calculator = <span class="keyword">new</span> Calculator(expStr);</span><br><span class="line">        System.out.println(<span class="string">&quot;运算结果是：&quot;</span>+expStr+<span class="string">&quot;=&quot;</span>+calculator.run(<span class="keyword">var</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得表达式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getExpStr</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入表达式: &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ( <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in))).readLine();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得值映射</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String,Integer&gt; <span class="title">getValue</span><span class="params">(String expStr)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        HashMap&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> ch:expStr.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(ch != <span class="string">&#x27;+&#x27;</span> &amp;&amp; ch!=<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!map.containsKey(String.valueOf(ch)))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入&quot;</span>+String.valueOf(ch) + <span class="string">&quot;的值&quot;</span>);</span><br><span class="line">                    String data = (<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in))).readLine();</span><br><span class="line">                    map.put(String.valueOf(ch),Integer.valueOf(data));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">请输入表达式: </span><br><span class="line">a+b</span><br><span class="line">请输入a的值</span><br><span class="line"><span class="number">10</span></span><br><span class="line">请输入b的值</span><br><span class="line"><span class="number">20</span></span><br><span class="line">运算结果是：a+b=<span class="number">30</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="4、解释器模式在Spring-框架应用的源码分析"><a href="#4、解释器模式在Spring-框架应用的源码分析" class="headerlink" title="4、解释器模式在Spring 框架应用的源码分析"></a>4、解释器模式在Spring 框架应用的源码分析</h2><h3 id="4-1-代码"><a href="#4-1-代码" class="headerlink" title="4.1 代码"></a>4.1 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.expression.Expression;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interpreter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先创建一个Parser对象</span></span><br><span class="line">        SpelExpressionParser spelExpressionParser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">        <span class="comment">// 通过Parser对象 获取到一个Expression</span></span><br><span class="line">        <span class="comment">// 会根据不同的Parser对象，返回不同的Expression对象</span></span><br><span class="line">        Expression expression = spelExpressionParser.parseExpression(<span class="string">&quot;10*(2+1)*1+66&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = (Integer)expression.getValue();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-分析"><a href="#4-2-分析" class="headerlink" title="4.2 分析"></a>4.2 分析</h3><blockquote>
<p>（1）创建一个SpelExpressionParser对象</p>
<p> SpelExpressionParser 继承 TemplateAwareExpressionParser 继承  ExpressionParser</p>
<p>ExpressionParser 是一个接口</p>
<p><img src="/2021/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/image-20210814225656593.png" alt="image-20210814225656593"></p>
<p>其中，spelExpressionParser.parseExpression()方法是在TemplateAwareExpressionParser 类中实现</p>
<p><img src="/2021/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/image-20210814225828114.png" alt="image-20210814225828114"></p>
<p>doParseExpression：</p>
<p><img src="/2021/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/image-20210814233524322.png" alt="image-20210814233524322"></p>
<p>（2）查看Expression：是一个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>（3）ctrl+alt+B 查看Expression实现子类</p>
<p><img src="/2021/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/image-20210814224545637.png" alt="image-20210814224545637"></p>
</blockquote>
<h3 id="4-3-说明"><a href="#4-3-说明" class="headerlink" title="4.3  说明"></a>4.3  说明</h3><ol>
<li><blockquote>
<ol>
<li><p>Expression是一个接口，表示式接口</p>
<p>下面有不同的实现类，比如SpelExpression，或者CompositeStringExpression</p>
<p>使用时候，根据创建的不同Parser对象，返回不同的Expression对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Expression <span class="title">parseExpression</span><span class="params">(String expressionString, <span class="meta">@Nullable</span> ParserContext context)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (context != <span class="keyword">null</span> &amp;&amp; context.isTemplate()) &#123;</span><br><span class="line">        <span class="keyword">return</span> parseTemplate(expressionString, context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> doParseExpression(expressionString, context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用得到的Expression对象，调用getValue解释执行表达式，最后得到结果</p>
</li>
</ol>
</blockquote>
</li>
</ol>
<h2 id="5、解释器模式的注意事项和细节"><a href="#5、解释器模式的注意事项和细节" class="headerlink" title="5、解释器模式的注意事项和细节"></a>5、解释器模式的注意事项和细节</h2><blockquote>
<ol>
<li>当有一个语言需要解释执行，可将该语言中的句子表示为一个抽象语法树，就可以考虑使用解释器模式，让程序具有良好的扩展性</li>
<li>应用场景：编译器、运算表达式计算、正则表达式、机器人等</li>
<li>使用解释器可能带来的问题：解释器模式会引起类爆炸、解释器模式采用递归调用方法，将会导致调试非常复杂，效率可能降低</li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>解释器模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（十六）之行为型-备忘录模式</title>
    <url>/2021/08/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、备忘录模式"><a href="#一、备忘录模式" class="headerlink" title="一、备忘录模式"></a>一、备忘录模式</h1><h2 id="1、案例需求"><a href="#1、案例需求" class="headerlink" title="1、案例需求"></a>1、案例需求</h2><h3 id="1-1-游戏角色状态恢复问题"><a href="#1-1-游戏角色状态恢复问题" class="headerlink" title="1.1 游戏角色状态恢复问题"></a>1.1 游戏角色状态恢复问题</h3><blockquote>
<p>游戏角色有攻击力和防御力，在大战Boss前保存自身的状态（攻击力和防御力），当大战Boss后攻击力和防御力下降，从备忘录对象恢复到大战前的状态。</p>
</blockquote>
<h3 id="1-2-传统方案类图"><a href="#1-2-传统方案类图" class="headerlink" title="1.2 传统方案类图"></a>1.2 传统方案类图</h3><p><img src="/2021/08/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/image-20210809225048854.png" alt="image-20210809225048854"></p>
<h3 id="1-3-传统方案问题分析"><a href="#1-3-传统方案问题分析" class="headerlink" title="1.3 传统方案问题分析"></a>1.3 传统方案问题分析</h3><blockquote>
<ol>
<li>一个对象，就对应一个保存对象状态的对象，这样当我们游戏的对象很多时，不利于管理，开销也很大。</li>
<li>传统的方式是简单地做备份，new出另外一个对象出来，再把需要备份的数据放到这个新对象，但这就暴露了对象内部的细节</li>
<li>解决方法：==&gt;备忘录模式</li>
</ol>
</blockquote>
<h2 id="2、备忘录模式"><a href="#2、备忘录模式" class="headerlink" title="2、备忘录模式"></a>2、备忘录模式</h2><h3 id="2-1-基本介绍"><a href="#2-1-基本介绍" class="headerlink" title="2.1 基本介绍"></a>2.1 基本介绍</h3><blockquote>
<ol>
<li>备忘录模式（Memento Pattern）在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可以将该对象恢复到原先保存的状态。</li>
<li>可以这样理解备忘录模式：现实生活中的备忘录是用来记录某些要去做的事情，或者是记录以及达成的共同意见的事情，以防忘记。而在软件层面，备忘录模式有着相同的含义，备忘录对象主要用来记录一个对象的某种状态，或者某些数据，当要做回退时，可以从备忘录对象里获取原来的数据进行恢复操作。</li>
</ol>
</blockquote>
<h3 id="2-2-原理类图"><a href="#2-2-原理类图" class="headerlink" title="2.2 原理类图"></a>2.2 原理类图</h3><p><img src="/2021/08/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/image-20210809225905201.png" alt="image-20210809225905201"></p>
<blockquote>
<ol>
<li>originator：对象（需要保存状态的对象）</li>
<li>Memento：备忘录对象，负责保存好记录，即Originator内部状态</li>
<li>Caretaker：守护者对象，负责保存多个备忘录对象，使用集合管理，提高效率</li>
<li>说明：如果希望保存多个originator对象的不同时间的状态，也可以，只需要用HashMap<String，集合></String，集合></li>
</ol>
</blockquote>
<h2 id="3、简单理论实例"><a href="#3、简单理论实例" class="headerlink" title="3、简单理论实例"></a>3、简单理论实例</h2><h3 id="3-1-Memento类"><a href="#3-1-Memento类" class="headerlink" title="3.1 Memento类"></a>3.1 Memento类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-Originator类"><a href="#3-2-Originator类" class="headerlink" title="3.2 Originator类"></a>3.2 Originator类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String state;<span class="comment">//状态信息</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//编写一个方法，可以保存一个状态对象Memento</span></span><br><span class="line">    <span class="comment">//因此，编写一个方法，返回Memento</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">saveStateMemento</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过备忘录对象，恢复状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getStateFromMemento</span><span class="params">(Memento memento)</span></span>&#123;</span><br><span class="line">        state = memento.getState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-Caretaker类"><a href="#3-3-Caretaker类" class="headerlink" title="3.3 Caretaker类"></a>3.3 Caretaker类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在List 集合中，会有很多的备忘录对象</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Memento&gt; mementoList = <span class="keyword">new</span> ArrayList&lt;Memento&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Memento memento)</span></span>&#123;</span><br><span class="line">        mementoList.add(memento);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取到第index个Originator 的备忘录对象（即保存状态）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mementoList.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-Client类"><a href="#3-4-Client类" class="headerlink" title="3.4 Client类"></a>3.4 Client类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Originator originator = <span class="keyword">new</span> Originator();</span><br><span class="line">        Caretaker caretaker = <span class="keyword">new</span> Caretaker();</span><br><span class="line">        originator.setState(<span class="string">&quot; 状态#1 攻击力 100 &quot;</span>);</span><br><span class="line">        <span class="comment">//保存了当前的状态</span></span><br><span class="line">        caretaker.add(originator.saveStateMemento());</span><br><span class="line"></span><br><span class="line">        originator.setState(<span class="string">&quot; 状态#2 攻击力 80 &quot;</span>);</span><br><span class="line">        caretaker.add(originator.saveStateMemento());</span><br><span class="line"></span><br><span class="line">        originator.setState(<span class="string">&quot; 状态#3 攻击力 50 &quot;</span>);</span><br><span class="line">        caretaker.add(originator.saveStateMemento());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;当前的状态是=&quot;</span>+originator.getState());</span><br><span class="line">        <span class="comment">//希望回复到状态1, 将originator 恢复到状态1</span></span><br><span class="line">        originator.getStateFromMemento(caretaker.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;恢复到状态1，当前的状态是&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前的状态是=&quot;</span>+originator.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">当前的状态是= 状态#<span class="number">3</span> 攻击力 <span class="number">50</span> </span><br><span class="line">恢复到状态<span class="number">1</span>，当前的状态是</span><br><span class="line">当前的状态是= 状态#<span class="number">1</span> 攻击力 <span class="number">100</span> </span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="4、案例代码实例"><a href="#4、案例代码实例" class="headerlink" title="4、案例代码实例"></a>4、案例代码实例</h2><h3 id="4-1-案例类图"><a href="#4-1-案例类图" class="headerlink" title="4.1 案例类图"></a>4.1 案例类图</h3><p><img src="/2021/08/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/image-20210810203836649.png" alt="image-20210810203836649"></p>
<h3 id="4-2-代码实例"><a href="#4-2-代码实例" class="headerlink" title="4.2 代码实例"></a>4.2 代码实例</h3><h4 id="4-2-1-Memento类"><a href="#4-2-1-Memento类" class="headerlink" title="4.2.1 Memento类"></a>4.2.1 Memento类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line">    <span class="comment">//攻击力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> vit;</span><br><span class="line">    <span class="comment">//防御力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> def;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(<span class="keyword">int</span> vit, <span class="keyword">int</span> def)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vit = vit;</span><br><span class="line">        <span class="keyword">this</span>.def = def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVit</span><span class="params">(<span class="keyword">int</span> vit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vit = vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDef</span><span class="params">(<span class="keyword">int</span> def)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.def = def;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-2-Caretaker类"><a href="#4-2-2-Caretaker类" class="headerlink" title="4.2.2 Caretaker类"></a>4.2.2 Caretaker类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//守护者对象，保存游戏角色的状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果只保存一次状态</span></span><br><span class="line">    <span class="keyword">private</span> Memento memento;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    //对GameRole 保存多次状态</span></span><br><span class="line"><span class="comment">//    private ArrayList&lt;Memento&gt; mementoArrayList;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    //对多个游戏角色保存多个状态</span></span><br><span class="line"><span class="comment">//    private HashMap&lt;String,ArrayList&lt;Memento&gt;&gt; roleMementos;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memento = memento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-3-GameRole类"><a href="#4-2-3-GameRole类" class="headerlink" title="4.2.3 GameRole类"></a>4.2.3 GameRole类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameRole</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> vit;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> def;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建Memento，即根据当前的状态得到Memento</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(vit,def);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从备忘录对象，恢复GameRole的状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recoverGameRoleFromMemento</span><span class="params">(Memento memento)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vit = memento.getVit();</span><br><span class="line">        <span class="keyword">this</span>.def = memento.getDef();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//显示当前游戏角色的状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;游戏角色当前的攻击力：&quot;</span>+<span class="keyword">this</span>.vit+<span class="string">&quot; 防御力：&quot;</span>+<span class="keyword">this</span>.def);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVit</span><span class="params">(<span class="keyword">int</span> vit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vit = vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDef</span><span class="params">(<span class="keyword">int</span> def)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.def = def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="4-2-4-Client类"><a href="#4-2-4-Client类" class="headerlink" title="4.2.4 Client类"></a>4.2.4 Client类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建游戏角色</span></span><br><span class="line">        GameRole gameRole = <span class="keyword">new</span> GameRole();</span><br><span class="line">        gameRole.setVit(<span class="number">100</span>);</span><br><span class="line">        gameRole.setDef(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;和boss大战前的状态&quot;</span>);</span><br><span class="line">        gameRole.display();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把当前状态保存至Caretaker</span></span><br><span class="line">        Caretaker caretaker = <span class="keyword">new</span> Caretaker();</span><br><span class="line">        caretaker.setMemento(gameRole.createMemento());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;和boss大战&quot;</span>);</span><br><span class="line">        gameRole.setDef(<span class="number">30</span>);</span><br><span class="line">        gameRole.setVit(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        gameRole.display();</span><br><span class="line">        System.out.println(<span class="string">&quot;大战后，使用备忘录对象恢复到大战前&quot;</span>);</span><br><span class="line">        gameRole.recoverGameRoleFromMemento(caretaker.getMemento());</span><br><span class="line">        System.out.println(<span class="string">&quot;恢复后的状态&quot;</span>);</span><br><span class="line">        gameRole.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">和boss大战前的状态</span><br><span class="line">游戏角色当前的攻击力：<span class="number">100</span> 防御力：<span class="number">100</span></span><br><span class="line">和boss大战</span><br><span class="line">游戏角色当前的攻击力：<span class="number">30</span> 防御力：<span class="number">30</span></span><br><span class="line">大战后，使用备忘录对象恢复到大战前</span><br><span class="line">恢复后的状态</span><br><span class="line">游戏角色当前的攻击力：<span class="number">100</span> 防御力：<span class="number">100</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="5、备忘录模式的注意事项和细节"><a href="#5、备忘录模式的注意事项和细节" class="headerlink" title="5、备忘录模式的注意事项和细节"></a>5、备忘录模式的注意事项和细节</h2><blockquote>
<ol>
<li>给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态</li>
<li>实现了信息的封装，使得用户不需要关系状态的保存细节</li>
<li>如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存，这个需要注意</li>
<li>使用的应用场景：（1）后悔药（2）打游戏时的存档（3）Windows里的ctrl+z（4）IE中的后退（5）数据库的事物管理</li>
<li>为了节约内存，备忘录模式可以和原型模式配合使用</li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>备忘录模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（二十）之行为型模式--职责链模式</title>
    <url>/2021/08/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、职责链模式"><a href="#一、职责链模式" class="headerlink" title="一、职责链模式"></a>一、职责链模式</h1><h2 id="1、案例"><a href="#1、案例" class="headerlink" title="1、案例"></a>1、案例</h2><h3 id="1-1-OA系统采购审批需求"><a href="#1-1-OA系统采购审批需求" class="headerlink" title="1.1 OA系统采购审批需求"></a>1.1 OA系统采购审批需求</h3><blockquote>
<p>学校OA系统的采购审批项目：需求是：</p>
<ol>
<li>采购员采购教学器材</li>
<li>如果金额 小于等于5000， 由教学主任审批（0 &lt;= x &lt;= 5000）</li>
<li>如果金额 小于等于10000， 由院长审批（5000 &lt;= x &lt;= 10000）</li>
<li>如果金额 小于等于30000， 由副校长审批（10000 &lt;= x &lt;= 30000）</li>
<li>如果金额 超过30000以上， 由校长审批（30000 &lt;= x ）</li>
</ol>
<p>请设计程序完成采购审批项目</p>
</blockquote>
<h3 id="1-2-传统方案"><a href="#1-2-传统方案" class="headerlink" title="1.2 传统方案"></a>1.2 传统方案</h3><blockquote>
<p>传统方式：接收到一个采购请求后，根据采购金额来调用对应的Approver（审批人）完成审批</p>
</blockquote>
<h3 id="1-3-传统方案问题分析"><a href="#1-3-传统方案问题分析" class="headerlink" title="1.3 传统方案问题分析"></a>1.3 传统方案问题分析</h3><blockquote>
<ol>
<li>客户端这里会使用到分支判断（比如switch）来对不同的采购请求处理，这样就存在如下问题：（1）如果各个级别的人员的审批金额发生变化，在客户端的也需要变化（2）客户端必须明确的指定 有多个审批级别和访问</li>
<li>这样 对一个采购请求进行处理和Approver（审批人）就存在强耦合关系，不利于代码的扩展和维护</li>
<li>解决方案=&gt; 职责链模式</li>
</ol>
</blockquote>
<h2 id="2、职责链模式基本介绍"><a href="#2、职责链模式基本介绍" class="headerlink" title="2、职责链模式基本介绍"></a>2、职责链模式基本介绍</h2><h3 id="2-1-基本介绍"><a href="#2-1-基本介绍" class="headerlink" title="2.1 基本介绍"></a>2.1 基本介绍</h3><blockquote>
<ol>
<li>职责链模式（Chain of Responsibility Pattern）：又叫责任链模式，为请求创建了一个 <strong>接收者对象的链</strong>。这种模式对请求的发送者和接收者进行解耦</li>
<li>职责链模式通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者。以此类推</li>
</ol>
</blockquote>
<h3 id="2-2-原理类图"><a href="#2-2-原理类图" class="headerlink" title="2.2 原理类图"></a>2.2 原理类图</h3><p><img src="/2021/08/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/image-20210815230454695.png" alt="image-20210815230454695"></p>
<blockquote>
<p>职责链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止</p>
<ol>
<li>Handler：抽象的处理者，定义了一个处理请求的接口，同时含有另外的Handler</li>
<li>ConcreteHandlerA,B是具体的处理者，处理它自己负责的请求，可以访问它的后继者（即下一个处理者），如果可以处理当前请求，则处理，否则，将该请求交给 后继者去处理，从而行为一个职责链</li>
<li>Request：含有很多属性，表示一个请求</li>
</ol>
</blockquote>
<h2 id="3、代码实例"><a href="#3、代码实例" class="headerlink" title="3、代码实例"></a>3、代码实例</h2><h3 id="3-1-代码类图"><a href="#3-1-代码类图" class="headerlink" title="3.1 代码类图"></a>3.1 代码类图</h3><h3 id="3-2-代码"><a href="#3-2-代码" class="headerlink" title="3.2 代码"></a><img src="/2021/08/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/image-20210815231100961.png" alt="image-20210815231100961">3.2 代码</h3><h4 id="3-2-1-PurchaseRequest类"><a href="#3-2-1-PurchaseRequest类" class="headerlink" title="3.2.1 PurchaseRequest类"></a>3.2.1 PurchaseRequest类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PurchaseRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type;<span class="comment">//请求类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> price = <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PurchaseRequest</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">float</span> price, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-2-Approver抽象类"><a href="#3-2-2-Approver抽象类" class="headerlink" title="3.2.2 Approver抽象类"></a>3.2.2 Approver抽象类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Approver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Approver approver;<span class="comment">//下一个处理者</span></span><br><span class="line">    String name;<span class="comment">//名字</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Approver</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下一个处理者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApprover</span><span class="params">(Approver approver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.approver = approver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理审批请求的方法，得到一个请求，处理是子类完成，因此该方法做成抽象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest purchaseRequest)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-3-DepartmentApprover-类"><a href="#3-2-3-DepartmentApprover-类" class="headerlink" title="3.2.3 DepartmentApprover 类"></a>3.2.3 DepartmentApprover 类</h4><blockquote>
<p>继承Approver</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentApprover</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DepartmentApprover</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest purchaseRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(purchaseRequest.getPrice() &lt;= <span class="number">5000</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot; 请求编号 id= &quot;</span>+purchaseRequest.getId() + <span class="string">&quot; 被 &quot;</span> +<span class="keyword">this</span>.name + <span class="string">&quot; 处理&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            approver.processRequest(purchaseRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-4-CollegeApprover类"><a href="#3-2-4-CollegeApprover类" class="headerlink" title="3.2.4 CollegeApprover类"></a>3.2.4 CollegeApprover类</h4><blockquote>
<p>继承Approver</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollegeApprover</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CollegeApprover</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest purchaseRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(purchaseRequest.getPrice() &gt; <span class="number">5000</span> &amp;&amp; purchaseRequest.getPrice() &lt;= <span class="number">10000</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot; 请求编号 id= &quot;</span>+purchaseRequest.getId() + <span class="string">&quot; 被 &quot;</span> +<span class="keyword">this</span>.name + <span class="string">&quot; 处理&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            approver.processRequest(purchaseRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-5-ViceSchoolMasterApprover类"><a href="#3-2-5-ViceSchoolMasterApprover类" class="headerlink" title="3.2.5 ViceSchoolMasterApprover类"></a>3.2.5 ViceSchoolMasterApprover类</h4><blockquote>
<p>继承Approver</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViceSchoolMasterApprover</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViceSchoolMasterApprover</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest purchaseRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(purchaseRequest.getPrice() &gt; <span class="number">10000</span> &amp;&amp; purchaseRequest.getPrice() &lt;= <span class="number">30000</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot; 请求编号 id= &quot;</span>+purchaseRequest.getId() + <span class="string">&quot; 被 &quot;</span> +<span class="keyword">this</span>.name + <span class="string">&quot; 处理&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            approver.processRequest(purchaseRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-6-SchoolMasterApprover类"><a href="#3-2-6-SchoolMasterApprover类" class="headerlink" title="3.2.6 SchoolMasterApprover类"></a>3.2.6 SchoolMasterApprover类</h4><blockquote>
<p>继承Approver</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchoolMasterApprover</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchoolMasterApprover</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest purchaseRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(purchaseRequest.getPrice() &gt; <span class="number">30000</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot; 请求编号 id= &quot;</span>+purchaseRequest.getId() + <span class="string">&quot; 被 &quot;</span> +<span class="keyword">this</span>.name + <span class="string">&quot; 处理&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            approver.processRequest(purchaseRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-7-Client类"><a href="#3-2-7-Client类" class="headerlink" title="3.2.7 Client类"></a>3.2.7 Client类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个请求</span></span><br><span class="line">        PurchaseRequest purchaseRequest = <span class="keyword">new</span> PurchaseRequest(<span class="number">1</span>, <span class="number">31000</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建相关的审批人</span></span><br><span class="line">        DepartmentApprover departmentApprover = <span class="keyword">new</span> DepartmentApprover(<span class="string">&quot;张主任&quot;</span>);</span><br><span class="line">        CollegeApprover collegeApprover = <span class="keyword">new</span> CollegeApprover(<span class="string">&quot;李院长&quot;</span>);</span><br><span class="line">        ViceSchoolMasterApprover viceSchoolMasterApprover = <span class="keyword">new</span> ViceSchoolMasterApprover(<span class="string">&quot;王副校长&quot;</span>);</span><br><span class="line">        SchoolMasterApprover schoolMasterApprover = <span class="keyword">new</span> SchoolMasterApprover(<span class="string">&quot;周校长&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要将各个审批级别的下一个设置好(如果没有该审批级别，在最后departmentApprover.processRequest(purchaseRequest) 会直接报空指针异常)</span></span><br><span class="line">        departmentApprover.setApprover(collegeApprover);</span><br><span class="line">        collegeApprover.setApprover(viceSchoolMasterApprover);</span><br><span class="line">        viceSchoolMasterApprover.setApprover(schoolMasterApprover);</span><br><span class="line">        <span class="comment">//如果不设置如下代码，则直接使用schoolMasterApprover.processRequest(purchaseRequest) 处理请求时，会报错，因此要成环状</span></span><br><span class="line">        schoolMasterApprover.setApprover(departmentApprover);</span><br><span class="line">        departmentApprover.processRequest(purchaseRequest);</span><br><span class="line">        <span class="comment">//schoolMasterApprover.processRequest(purchaseRequest);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">请求编号 id= <span class="number">1</span> 被 周校长 处理</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<p>（1）若屏蔽如下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">departmentApprover.setApprover(collegeApprover);</span><br><span class="line">collegeApprover.setApprover(viceSchoolMasterApprover);</span><br><span class="line">viceSchoolMasterApprover.setApprover(schoolMasterApprover);</span><br><span class="line"><span class="comment">//如果不设置如下代码，则直接使用schoolMasterApprover.processRequest(purchaseRequest) 处理请求时，会报错，因此要成环状</span></span><br><span class="line">schoolMasterApprover.setApprover(departmentApprover);</span><br></pre></td></tr></table></figure>
<p>即将代码修改为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个请求</span></span><br><span class="line">        PurchaseRequest purchaseRequest = <span class="keyword">new</span> PurchaseRequest(<span class="number">1</span>, <span class="number">31000</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建相关的审批人</span></span><br><span class="line">        DepartmentApprover departmentApprover = <span class="keyword">new</span> DepartmentApprover(<span class="string">&quot;张主任&quot;</span>);</span><br><span class="line">        CollegeApprover collegeApprover = <span class="keyword">new</span> CollegeApprover(<span class="string">&quot;李院长&quot;</span>);</span><br><span class="line">        ViceSchoolMasterApprover viceSchoolMasterApprover = <span class="keyword">new</span> ViceSchoolMasterApprover(<span class="string">&quot;王副校长&quot;</span>);</span><br><span class="line">        SchoolMasterApprover schoolMasterApprover = <span class="keyword">new</span> SchoolMasterApprover(<span class="string">&quot;周校长&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要将各个审批级别的下一个设置好(如果没有该审批级别，在最后departmentApprover.processRequest(purchaseRequest) 会直接报空指针异常)</span></span><br><span class="line"><span class="comment">//        departmentApprover.setApprover(collegeApprover);</span></span><br><span class="line"><span class="comment">//        collegeApprover.setApprover(viceSchoolMasterApprover);</span></span><br><span class="line"><span class="comment">//        viceSchoolMasterApprover.setApprover(schoolMasterApprover);</span></span><br><span class="line"><span class="comment">//        //如果不设置如下代码，则直接使用schoolMasterApprover.processRequest(purchaseRequest) 处理请求时，会报错，因此要成环状</span></span><br><span class="line"><span class="comment">//        schoolMasterApprover.setApprover(departmentApprover);</span></span><br><span class="line">        departmentApprover.processRequest(purchaseRequest);</span><br><span class="line">        <span class="comment">//schoolMasterApprover.processRequest(purchaseRequest);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>则会报空指针异常，因为还没有指定下一个的接收者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.NullPointerException</span><br><span class="line">	at com.ldg.GoF23.reponsiabliity.DepartmentApprover.processRequest(DepartmentApprover.java:<span class="number">13</span>)</span><br><span class="line">	at com.ldg.GoF23.reponsiabliity.Client.main(Client.java:<span class="number">20</span>)</span><br></pre></td></tr></table></figure>
<p>（2）若将金额修改为1000元，且由校长来处理请求，也会报错，因此需要设置为环状的，也就是最初始的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个请求</span></span><br><span class="line">        PurchaseRequest purchaseRequest = <span class="keyword">new</span> PurchaseRequest(<span class="number">1</span>, <span class="number">1000</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建相关的审批人</span></span><br><span class="line">        DepartmentApprover departmentApprover = <span class="keyword">new</span> DepartmentApprover(<span class="string">&quot;张主任&quot;</span>);</span><br><span class="line">        CollegeApprover collegeApprover = <span class="keyword">new</span> CollegeApprover(<span class="string">&quot;李院长&quot;</span>);</span><br><span class="line">        ViceSchoolMasterApprover viceSchoolMasterApprover = <span class="keyword">new</span> ViceSchoolMasterApprover(<span class="string">&quot;王副校长&quot;</span>);</span><br><span class="line">        SchoolMasterApprover schoolMasterApprover = <span class="keyword">new</span> SchoolMasterApprover(<span class="string">&quot;周校长&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要将各个审批级别的下一个设置好(如果没有该审批级别，在最后departmentApprover.processRequest(purchaseRequest) 会直接报空指针异常)</span></span><br><span class="line">        departmentApprover.setApprover(collegeApprover);</span><br><span class="line">        collegeApprover.setApprover(viceSchoolMasterApprover);</span><br><span class="line">        viceSchoolMasterApprover.setApprover(schoolMasterApprover);</span><br><span class="line">        <span class="comment">//如果不设置如下代码，则直接使用schoolMasterApprover.processRequest(purchaseRequest) 处理请求时，会报错，因此要成环状</span></span><br><span class="line"><span class="comment">//        schoolMasterApprover.setApprover(departmentApprover);</span></span><br><span class="line">        <span class="comment">//departmentApprover.processRequest(purchaseRequest);</span></span><br><span class="line">        schoolMasterApprover.processRequest(purchaseRequest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.NullPointerException</span><br><span class="line">	at com.ldg.GoF23.reponsiabliity.SchoolMasterApprover.processRequest(SchoolMasterApprover.java:<span class="number">13</span>)</span><br><span class="line">	at com.ldg.GoF23.reponsiabliity.Client.main(Client.java:<span class="number">21</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="4、职责链模式在SpringMVC框架应用的源码分析"><a href="#4、职责链模式在SpringMVC框架应用的源码分析" class="headerlink" title="4、职责链模式在SpringMVC框架应用的源码分析"></a>4、职责链模式在SpringMVC框架应用的源码分析</h2><h3 id="4-1-代码"><a href="#4-1-代码" class="headerlink" title="4.1 代码"></a>4.1 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.DispatcherServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponsibilityChain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> DispatcherServlet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>（1）查看DisPatch类 ctrl+b</p>
<p>（2）查看核心doDispatch</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/截图.png" alt="img"></p>
<p>（3）查看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HandlerInterceptor interceptor = <span class="keyword">this</span>.interceptorList.get(i);</span><br></pre></td></tr></table></figure>
<p>内部，得到了interceptor对象，并且通过拦截器调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">interceptor.preHandle(request, response, <span class="keyword">this</span>.handler)</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/截图-1629122726914.png" alt="img"></p>
<p>（4）查看triggerAfterCompletion方法</p>
<p><img src="/2021/08/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/截图-1629122750092.png" alt="img"></p>
</blockquote>
<h3 id="4-2-说明"><a href="#4-2-说明" class="headerlink" title="4.2 说明"></a>4.2 说明</h3><blockquote>
<p>（1）springmvc请求的流程图中，执行了拦截器相关方法 interceptor.preHandler等等</p>
<p>（2）在处理SpringMvc请求时，使用到职责链模式和适配器模式</p>
<p>（3）HandlerExecutionChain 主要负责的是请求拦截器的执行和请求处理，但是他本身不处理请求，只是将讲求分配给链上注册处理器执行，这是职责链实现方式，减少了职责链本身与处理逻辑之间的耦合，规范了处理流程</p>
<p>（4）HandlerExecutionChain 维护了HandlerInterceptor的集合，可以向其中注册相应的拦截器</p>
</blockquote>
<h2 id="5、职责链模式的注意事项和细节"><a href="#5、职责链模式的注意事项和细节" class="headerlink" title="5、职责链模式的注意事项和细节"></a>5、职责链模式的注意事项和细节</h2><blockquote>
<p>（1）将请求和处理分开，实现解耦，提高系统的灵活性</p>
<p>（2）简化了对象，使对象不需要知道链的结构</p>
<p>（3）性能会收到影响，特别是在链比较长的时候，因此需要控制链中最大节点数量，一般通过在Handler中设置一个最大节点数量，在setNext()方法中判断是否超过阈值，超过则不允许该链简历，避免出现超长链无意识的破坏系统性能</p>
<p>（4）调试不方便，采用了类似递归的方式，调试时逻辑可能比较复杂</p>
<p>（5）最佳应用场景：有多个对象可以处理同一个请求时，比如：多级请求、请假/加薪等审批流程、Java Web中Tomcat对Encoding的处理、拦截器等等</p>
</blockquote>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>职责链模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（十九）之行为型模式--策略模式</title>
    <url>/2021/08/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、策略模式"><a href="#一、策略模式" class="headerlink" title="一、策略模式"></a>一、策略模式</h1><h2 id="1、案例"><a href="#1、案例" class="headerlink" title="1、案例"></a>1、案例</h2><h3 id="1-1-鸭子问题"><a href="#1-1-鸭子问题" class="headerlink" title="1.1 鸭子问题"></a>1.1 鸭子问题</h3><blockquote>
<p>编写鸭子项目，具体要求如下：</p>
<ol>
<li>有各种鸭子（比如野鸭、北京鸭、水鸭等，鸭子有各种行为，比如叫、飞行等）</li>
<li>显示鸭子的信息</li>
</ol>
</blockquote>
<h3 id="1-2-传统方案"><a href="#1-2-传统方案" class="headerlink" title="1.2 传统方案"></a>1.2 传统方案</h3><p><img src="/2021/08/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/image-20210815214256038.png" alt="image-20210815214256038"></p>
<p><img src="/2021/08/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/image-20210815214454539.png" alt="image-20210815214454539"></p>
<h3 id="1-3-传统方案代码实例"><a href="#1-3-传统方案代码实例" class="headerlink" title="1.3 传统方案代码实例"></a>1.3 传统方案代码实例</h3><h4 id="1-3-1-Duck抽象类"><a href="#1-3-1-Duck抽象类" class="headerlink" title="1.3.1 Duck抽象类"></a>1.3.1 Duck抽象类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Duck</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;<span class="comment">// 显示鸭子的信息</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 鸭子嘎嘎叫~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 鸭子会游泳~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 鸭子会飞~ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-3-2-WildDuck类"><a href="#1-3-2-WildDuck类" class="headerlink" title="1.3.2 WildDuck类"></a>1.3.2 WildDuck类</h4><blockquote>
<p>野鸭，继承Duck</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 这是野鸭~ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-3-3-PekingDUck类"><a href="#1-3-3-PekingDUck类" class="headerlink" title="1.3.3 PekingDUck类"></a>1.3.3 PekingDUck类</h4><blockquote>
<p>北京鸭，继承Duck</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PekingDUck</span> <span class="keyword">extends</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 这是北京鸭~ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为北京鸭不能飞翔，因此需要重写fly</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 北京鸭不能飞翔~ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-3-4-ToyDuck类"><a href="#1-3-4-ToyDuck类" class="headerlink" title="1.3.4 ToyDuck类"></a>1.3.4 ToyDuck类</h4><blockquote>
<p>玩具鸭，继承Duck</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToyDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 玩具鸭~ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要重写父类的所有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 玩具鸭不能叫~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 玩具鸭不会游泳~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 玩具鸭不会飞~ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-4-传统方案问题分析"><a href="#1-4-传统方案问题分析" class="headerlink" title="1.4 传统方案问题分析"></a>1.4 传统方案问题分析</h3><blockquote>
<ol>
<li>其他鸭子，都继承了Duck类，所以fly让所有子类都会飞了，这是不正确的</li>
<li>上面1的问题，其实是继承带来的问题：对类的局部改动，尤其超类的局部改动，会影响其他部分。会有溢出效应</li>
<li>为了改进1的问题，我们可以通过覆盖fly方法来解决=&gt;覆盖解决</li>
<li>问题又来了，如果我们有一个玩具鸭子ToyDuck，这样就需要ToyDuck去覆盖Duck的所有实现的方法=&gt;解决思路：<strong>策略模式</strong></li>
</ol>
</blockquote>
<h2 id="2、策略模式基本介绍"><a href="#2、策略模式基本介绍" class="headerlink" title="2、策略模式基本介绍"></a>2、策略模式基本介绍</h2><h3 id="2-1-基本介绍"><a href="#2-1-基本介绍" class="headerlink" title="2.1 基本介绍"></a>2.1 基本介绍</h3><blockquote>
<ol>
<li>策略模式（Strategy Pattern）中，定义算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户</li>
<li>该算法体现了几个设计原则：（1）把变化的代码从不变的代码中分离出来（2）针对接口编程而不是具体类（定义了策略接口）（3）多用组合/聚合，少用继承（客户通过组合方式使用策略）</li>
</ol>
</blockquote>
<h3 id="2-2-原理类图"><a href="#2-2-原理类图" class="headerlink" title="2.2 原理类图"></a>2.2 原理类图</h3><p><img src="/2021/08/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/image-20210815221004503.png" alt="image-20210815221004503"></p>
<blockquote>
<p>从上图可以看到，客户context有成员变量strategy或者其他的策略接口，至于徐亚哦是用到哪个策略，我们可以在构造器中指定</p>
</blockquote>
<h2 id="3、代码实例"><a href="#3、代码实例" class="headerlink" title="3、代码实例"></a>3、代码实例</h2><h3 id="3-1-代码类图"><a href="#3-1-代码类图" class="headerlink" title="3.1 代码类图"></a>3.1 代码类图</h3><p><img src="/2021/08/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/image-20210815221928829.png" alt="image-20210815221928829"></p>
<h3 id="3-2-代码"><a href="#3-2-代码" class="headerlink" title="3.2 代码"></a>3.2 代码</h3><h4 id="3-2-1-FlyBehavior接口"><a href="#3-2-1-FlyBehavior接口" class="headerlink" title="3.2.1 FlyBehavior接口"></a>3.2.1 FlyBehavior接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;<span class="comment">//子类具体实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-2-GoodFlyBehavior类"><a href="#3-2-2-GoodFlyBehavior类" class="headerlink" title="3.2.2 GoodFlyBehavior类"></a>3.2.2 GoodFlyBehavior类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodFlyBehavior</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 飞翔技术高超~ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-3-BadFlyBehavior类"><a href="#3-2-3-BadFlyBehavior类" class="headerlink" title="3.2.3 BadFlyBehavior类"></a>3.2.3 BadFlyBehavior类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadFlyBehavior</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 飞翔技术一般~ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-4-NoFlyBehavior类"><a href="#3-2-4-NoFlyBehavior类" class="headerlink" title="3.2.4 NoFlyBehavior类"></a>3.2.4 NoFlyBehavior类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoFlyBehavior</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 不会飞翔 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-5-Duck抽象类"><a href="#3-2-5-Duck抽象类" class="headerlink" title="3.2.5 Duck抽象类"></a>3.2.5 Duck抽象类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性，策略接口</span></span><br><span class="line">    FlyBehavior flyBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Duck</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;<span class="comment">// 显示鸭子的信息</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 鸭子嘎嘎叫~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 鸭子会游泳~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//改进</span></span><br><span class="line">        <span class="keyword">if</span>(flyBehavior != <span class="keyword">null</span>)&#123;</span><br><span class="line">            flyBehavior.fly();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-6-WildDuck类"><a href="#3-2-6-WildDuck类" class="headerlink" title="3.2.6 WildDuck类"></a>3.2.6 WildDuck类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WildDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> GoodFlyBehavior();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 这是野鸭~ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-7-PekingDUck类"><a href="#3-2-7-PekingDUck类" class="headerlink" title="3.2.7 PekingDUck类"></a>3.2.7 PekingDUck类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PekingDUck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PekingDUck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> NoFlyBehavior();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 这是北京鸭~ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-8-ToyDuck类"><a href="#3-2-8-ToyDuck类" class="headerlink" title="3.2.8 ToyDuck类"></a>3.2.8 ToyDuck类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToyDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ToyDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> NoFlyBehavior();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 玩具鸭~ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要重写父类的所有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 玩具鸭不能叫~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 玩具鸭不会游泳~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-9-Client类"><a href="#3-2-9-Client类" class="headerlink" title="3.2.9 Client类"></a>3.2.9 Client类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WildDuck wildDuck = <span class="keyword">new</span> WildDuck();</span><br><span class="line">        wildDuck.fly();</span><br><span class="line"></span><br><span class="line">        ToyDuck toyDuck = <span class="keyword">new</span> ToyDuck();</span><br><span class="line">        toyDuck.fly();</span><br><span class="line"></span><br><span class="line">        PekingDUck pekingDUck = <span class="keyword">new</span> PekingDUck();</span><br><span class="line">        pekingDUck.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">飞翔技术高超~ </span><br><span class="line">不会飞翔 </span><br><span class="line">不会飞翔</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="3-2-10-改进"><a href="#3-2-10-改进" class="headerlink" title="3.2.10 改进"></a>3.2.10 改进</h4><blockquote>
<p>假如 ，想要让北京鸭飞起来，但是非的不好，可以修改Duck抽象类，添加set方法</p>
</blockquote>
<h5 id="3-2-10-1-Duck抽象类"><a href="#3-2-10-1-Duck抽象类" class="headerlink" title="3.2.10.1 Duck抽象类"></a>3.2.10.1 Duck抽象类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性，策略接口</span></span><br><span class="line">    FlyBehavior flyBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Duck</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;<span class="comment">// 显示鸭子的信息</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 鸭子嘎嘎叫~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 鸭子会游泳~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//改进</span></span><br><span class="line">        <span class="keyword">if</span>(flyBehavior != <span class="keyword">null</span>)&#123;</span><br><span class="line">            flyBehavior.fly();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlyBehavior</span><span class="params">(FlyBehavior flyBehavior)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flyBehavior = flyBehavior;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-2-10-2-Client类"><a href="#3-2-10-2-Client类" class="headerlink" title="3.2.10.2 Client类"></a>3.2.10.2 Client类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WildDuck wildDuck = <span class="keyword">new</span> WildDuck();</span><br><span class="line">        wildDuck.fly();</span><br><span class="line"></span><br><span class="line">        ToyDuck toyDuck = <span class="keyword">new</span> ToyDuck();</span><br><span class="line">        toyDuck.fly();</span><br><span class="line"></span><br><span class="line">        PekingDUck pekingDUck = <span class="keyword">new</span> PekingDUck();</span><br><span class="line">        pekingDUck.fly();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态改变某个对象的行为，北京鸭能飞，但飞的不好</span></span><br><span class="line">        pekingDUck.setFlyBehavior(<span class="keyword">new</span> BadFlyBehavior());</span><br><span class="line">        System.out.println(<span class="string">&quot; 北京鸭的实际飞翔能力 &quot;</span>);</span><br><span class="line">        pekingDUck.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">飞翔技术高超~ </span><br><span class="line">不会飞翔 </span><br><span class="line">不会飞翔 </span><br><span class="line">北京鸭的实际飞翔能力 </span><br><span class="line">飞翔技术一般~ </span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="4、策略模式在JDK-Arrays应用的源码分析"><a href="#4、策略模式在JDK-Arrays应用的源码分析" class="headerlink" title="4、策略模式在JDK-Arrays应用的源码分析"></a>4、策略模式在JDK-Arrays应用的源码分析</h2><h3 id="4-1-代码"><a href="#4-1-代码" class="headerlink" title="4.1 代码"></a>4.1 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//数组</span></span><br><span class="line">        Integer[] data = &#123;<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="comment">//实现升序排序，返回-1放左边，1放右边，0保持不变</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.实现了Comparator接口(策略接口)，匿名类对象 new Comparator&lt;Integer&gt;() </span></span><br><span class="line">        <span class="comment">// 2.对象new Comparator&lt;Integer&gt;() &#123;..&#125; 就是实现了策略接口的对象</span></span><br><span class="line">        <span class="comment">// 3.public int compare(Integer o1, Integer o2) &#123;&#125; 指定具体的处理方式</span></span><br><span class="line">        Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 &gt; o2)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(data,comparator);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public static &lt;T&gt; void sort(T[] a, Comparator&lt;? super T&gt; c) &#123;</span></span><br><span class="line"><span class="comment">            if (c == null) &#123;</span></span><br><span class="line"><span class="comment">                sort(a);</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">                if (LegacyMergeSort.userRequested)</span></span><br><span class="line"><span class="comment">                    legacyMergeSort(a, c);</span></span><br><span class="line"><span class="comment">                else</span></span><br><span class="line"><span class="comment">                    TimSort.sort(a, 0, a.length, c, null, 0, 0);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        System.out.println(Arrays.toString(data));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式二 lambada表示是</span></span><br><span class="line">        Integer[] data2 = &#123;<span class="number">19</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">18</span>,<span class="number">14</span>,<span class="number">13</span>&#125;;</span><br><span class="line">        Arrays.sort(data2,(var1,var2)-&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(var1.compareTo(var2) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;data2=&quot;</span>+Arrays.toString(data2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">data2=[<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">18</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure>
<p>若要实现降序排列，只需要将下列中的1和-1进行调换即可</p>
<p><img src="/2021/08/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/image-20210815224312089.png" alt="image-20210815224312089"></p>
</blockquote>
<h3 id="4-2-分析"><a href="#4-2-分析" class="headerlink" title="4.2 分析"></a>4.2 分析</h3><blockquote>
<p>(1)ctrl +B 发现，Comparator是以恶搞接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="5、策略模式的注意事项和细节"><a href="#5、策略模式的注意事项和细节" class="headerlink" title="5、策略模式的注意事项和细节"></a>5、策略模式的注意事项和细节</h2><blockquote>
<ol>
<li>策略模式的关键是：分析项目中变化部分与不变部分</li>
<li>策略模式的核心思想是：多用组合/聚合，少用继承；用行为类组合，而不是行为的继承。更有弹性</li>
<li>体现了“对修改关闭，对扩展开放”原则，客户端增加行为不用修改原有代码，只要增加一种策略（或者行为即可），避免了使用多重转移语句（if…else if ..else）</li>
<li>提供了可以替换继承关系的方法：策略模式将算法封装在独立的Strategy类中使得你可以独立于其Context而改变它，使它已于切换、易于理解、已于扩展</li>
<li>需要注意的是：每添加一个策略就要增加一个类，当策略过多时会导致类数目庞大</li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>策略模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式（十八）之行为型模式-状态模式</title>
    <url>/2021/08/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、状态模式"><a href="#一、状态模式" class="headerlink" title="一、状态模式"></a>一、状态模式</h1><h2 id="1、案例"><a href="#1、案例" class="headerlink" title="1、案例"></a>1、案例</h2><h3 id="1-1-APP抽奖活动问题"><a href="#1-1-APP抽奖活动问题" class="headerlink" title="1.1 APP抽奖活动问题"></a>1.1 APP抽奖活动问题</h3><blockquote>
<p>编写程序完成APP抽奖活动，具体要求如下：</p>
<p>（1）加入每参加一次这个活动要扣除用户50积分，中奖概率是10%</p>
<p>（2）奖品数量固定，抽完就不能抽奖</p>
<p>（3）活动有4个状态：可以抽奖、不能抽奖、发放奖品和奖品领完</p>
</blockquote>
<h2 id="2、状态模式基本介绍"><a href="#2、状态模式基本介绍" class="headerlink" title="2、状态模式基本介绍"></a>2、状态模式基本介绍</h2><h3 id="2-1-基本介绍"><a href="#2-1-基本介绍" class="headerlink" title="2.1 基本介绍"></a>2.1 基本介绍</h3><blockquote>
<p>（1）状态模式（State Pattern）：它主要用来解决对象在多种状态转换时，需要对外输出不同的行为的问题。状态和行为是一一对应的，状态之间可以相互转换。</p>
<p>（2）当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类。</p>
</blockquote>
<h3 id="2-2-原理类图"><a href="#2-2-原理类图" class="headerlink" title="2.2 原理类图"></a>2.2 原理类图</h3><blockquote>
<ol>
<li>Context类为环境角色，用于维护State实例，这个实例定义当前状态</li>
<li>State是抽象状态角色，定义一个接口，封装与Context的一个特定接口相关行为</li>
<li>ConcreteState具体的状态角色，每个子类实现一个与Context的一个状态相关行为</li>
</ol>
</blockquote>
<p><img src="/2021/08/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/image-20210815162448888.png" alt="image-20210815162448888"></p>
<h2 id="3、状态模式解决APP抽奖问题"><a href="#3、状态模式解决APP抽奖问题" class="headerlink" title="3、状态模式解决APP抽奖问题"></a>3、状态模式解决APP抽奖问题</h2><h3 id="3-1-实例类图"><a href="#3-1-实例类图" class="headerlink" title="3.1 实例类图"></a>3.1 实例类图</h3><blockquote>
<p>Activity类包含所有的状态对象，各个状态子类也含有Activity对象</p>
</blockquote>
<p><img src="/2021/08/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/image-20210815162435683.png" alt="image-20210815162435683"></p>
<h3 id="3-2-代码"><a href="#3-2-代码" class="headerlink" title="3.2 代码"></a>3.2 代码</h3><h4 id="3-2-1-State抽象类"><a href="#3-2-1-State抽象类" class="headerlink" title="3.2.1 State抽象类"></a>3.2.1 State抽象类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是一个抽象类，也可以是一个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扣除积分</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">detuctMoney</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否抽中奖品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">raffle</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发放奖品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">dispensePrize</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-2-RaffleActivity类"><a href="#3-2-2-RaffleActivity类" class="headerlink" title="3.2.2 RaffleActivity类"></a>3.2.2 RaffleActivity类</h4><blockquote>
<p>该类和 四种状态类 相互内聚</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RaffleActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// state 表示活动当前的状态，是变化的</span></span><br><span class="line">    State state = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 奖品数量</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//四个属性，表示四种状态</span></span><br><span class="line">    State noRaffleState = <span class="keyword">new</span> NoRaffleState(<span class="keyword">this</span>);</span><br><span class="line">    State canRaffleState = <span class="keyword">new</span> CanRaffleState(<span class="keyword">this</span>);</span><br><span class="line">    State dispenseState = <span class="keyword">new</span> DispenseState(<span class="keyword">this</span>);</span><br><span class="line">    State dispenseOutState = <span class="keyword">new</span> DispenseOutState(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化当前的状态为NoRaffleState（即不能抽奖的状态）</span></span><br><span class="line">    <span class="comment">// 初始化奖品的数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RaffleActivity</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = getNoRaffleState();</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里要注意：每领取一次奖品，Count--</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> curCount = count;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> curCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getNoRaffleState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> noRaffleState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNoRaffleState</span><span class="params">(State noRaffleState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.noRaffleState = noRaffleState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getCanRaffleState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> canRaffleState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCanRaffleState</span><span class="params">(State canRaffleState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.canRaffleState = canRaffleState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getDispenseState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dispenseState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDispenseState</span><span class="params">(State dispenseState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dispenseState = dispenseState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getDispenseOutState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dispenseOutState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDispenseOutState</span><span class="params">(State dispenseOutState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dispenseOutState = dispenseOutState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扣分，调用当前状态的debuctMoney</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debuctMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">        state.detuctMoney();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽奖</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">raffle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 如果当前的状态是抽奖成功</span></span><br><span class="line">        <span class="keyword">if</span>(state.raffle())&#123;</span><br><span class="line">            <span class="comment">// 领取奖品</span></span><br><span class="line">            state.dispensePrize();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-3-NoRaffleState类"><a href="#3-2-3-NoRaffleState类" class="headerlink" title="3.2.3 NoRaffleState类"></a>3.2.3 NoRaffleState类</h4><blockquote>
<p>不能抽奖</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不能抽奖的状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoRaffleState</span> <span class="keyword">extends</span> <span class="title">State</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化时传入活动引用，扣除积分后改变其状态</span></span><br><span class="line">    RaffleActivity raffleActivity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoRaffleState</span><span class="params">(RaffleActivity raffleActivity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.raffleActivity = raffleActivity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前状态是可以扣积分的，扣除积分后将状态变为可抽奖状态</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detuctMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 扣除50积分成功，你可以抽奖了 &quot;</span>);</span><br><span class="line">        raffleActivity.setState(raffleActivity.getCanRaffleState());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前状态不能抽奖</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">raffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 扣了积分才能抽奖 &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前状态不能发放奖品</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispensePrize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 不能发放奖品 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-4-CanRaffleState类"><a href="#3-2-4-CanRaffleState类" class="headerlink" title="3.2.4 CanRaffleState类"></a>3.2.4 CanRaffleState类</h4><blockquote>
<p>可以抽奖的状态</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以抽奖的状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CanRaffleState</span> <span class="keyword">extends</span> <span class="title">State</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化时传入活动引用，扣除积分后改变其状态</span></span><br><span class="line">    RaffleActivity raffleActivity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CanRaffleState</span><span class="params">(RaffleActivity raffleActivity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.raffleActivity = raffleActivity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已经扣除了几分，不能再扣</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detuctMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 已经扣取过了积分 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以抽奖，抽完奖后，根据实际情况，改成新的状态</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">raffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 正在抽奖，请稍等！ &quot;</span>);</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> num = r.nextInt(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 10%中奖机会</span></span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 改变活动状态为发放奖品 context</span></span><br><span class="line">            raffleActivity.setState(raffleActivity.getDispenseState());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot; 很遗憾没有抽中奖品！ &quot;</span>);</span><br><span class="line">            raffleActivity.setState(raffleActivity.getNoRaffleState());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能发放奖品</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispensePrize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 没中奖，不能发放奖品！ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-5-DispenseState类"><a href="#3-2-5-DispenseState类" class="headerlink" title="3.2.5 DispenseState类"></a>3.2.5 DispenseState类</h4><blockquote>
<p>发放奖品类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发放奖品的状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispenseState</span> <span class="keyword">extends</span> <span class="title">State</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化时传入活动引用，扣除积分后改变其状态</span></span><br><span class="line">    RaffleActivity raffleActivity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DispenseState</span><span class="params">(RaffleActivity raffleActivity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.raffleActivity = raffleActivity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detuctMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 不能扣除积分 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">raffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 不能抽奖 &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发放奖品</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispensePrize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(raffleActivity.getCount() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot; 恭喜中奖了 &quot;</span>);</span><br><span class="line">            <span class="comment">// 改变状态为不能抽奖</span></span><br><span class="line">            raffleActivity.setState(raffleActivity.getNoRaffleState());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot; 很遗憾，奖品发送完了 &quot;</span>);</span><br><span class="line">            <span class="comment">// 改变状态为奖品发送完毕，后面我们不可以抽奖</span></span><br><span class="line">            raffleActivity.setState(raffleActivity.getDispenseOutState());</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-6-DispenseOutState类"><a href="#3-2-6-DispenseOutState类" class="headerlink" title="3.2.6 DispenseOutState类"></a>3.2.6 DispenseOutState类</h4><blockquote>
<p>奖品发放完毕</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 奖品发放完毕</span></span><br><span class="line"><span class="comment">// 当raffleActivity状态改变成DispenseOutState，抽奖活动结束</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispenseOutState</span> <span class="keyword">extends</span> <span class="title">State</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化时传入活动引用，扣除积分后改变其状态</span></span><br><span class="line">    RaffleActivity raffleActivity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DispenseOutState</span><span class="params">(RaffleActivity raffleActivity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.raffleActivity = raffleActivity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detuctMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 奖品发送完了，请下次再参加 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">raffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 奖品发送完了，请下次再参加 &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispensePrize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 奖品发送完了，请下次再参加 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-7-Client类"><a href="#3-2-7-Client类" class="headerlink" title="3.2.7 Client类"></a>3.2.7 Client类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建活动对象，奖品有1个奖品</span></span><br><span class="line">        RaffleActivity raffleActivity = <span class="keyword">new</span> RaffleActivity(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 我们连续抽300次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">300</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;------第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;次抽奖---------&quot;</span>);</span><br><span class="line">            <span class="comment">//参加抽奖，第一步点击扣除积分</span></span><br><span class="line">            raffleActivity.debuctMoney();</span><br><span class="line">            <span class="comment">//第二步抽奖</span></span><br><span class="line">            raffleActivity.raffle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
<p><img src="/2021/08/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/image-20210815212839869.png" alt="image-20210815212839869"></p>
<p><img src="/2021/08/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/image-20210815213005977.png" alt="image-20210815213005977"></p>
<p><img src="/2021/08/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/image-20210815213027044.png" alt="image-20210815213027044"></p>
</blockquote>
<h2 id="4、状态模式的注意事项和细节"><a href="#4、状态模式的注意事项和细节" class="headerlink" title="4、状态模式的注意事项和细节"></a>4、状态模式的注意事项和细节</h2><blockquote>
<ol>
<li>代码有很强的可读性。状态模式将每个状态的行为封装到对应的一个类中</li>
<li>方便维护。将容易产生问题的if-else语句删除了，如果把每个状态的行为都放到一个类中，每次调用方法时都要判断当前是什么状态，不但会产生非常多的if-else语句，而且容易出错</li>
<li>符合开闭原则。容易增删状态</li>
<li>会产生很多类。每个状态都要一个对应的类，当状态过多时，会产生很多类，加大维护难度</li>
<li>应用场景：当一个事件或者对象有很多种状态，状态之间会相互转换，对不同的状态要求有不同的行为的时候，可以考虑使用状态模式</li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>状态模式</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库学习（一）之逻辑分层&amp;存储引擎</title>
    <url>/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h1 id="一、数据库"><a href="#一、数据库" class="headerlink" title="一、数据库"></a>一、数据库</h1><h2 id="1、Mysql的逻辑分层"><a href="#1、Mysql的逻辑分层" class="headerlink" title="1、Mysql的逻辑分层"></a>1、Mysql的逻辑分层</h2><blockquote>
<p>连接层-&gt;服务层-&gt;引擎层-&gt;存储层</p>
</blockquote>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图.png" alt="img"></p>
<blockquote>
<p>分析：</p>
<ol>
<li><p>在服务层中，MySQL提供了一个SQL优化器，可以将SQL语句进行优化，并且改变其执行的顺序结构，但最终的结果不变。</p>
<p>比如，SQL语句顺序为 a  b  c，SQL优化器之后的为  b   a   c</p>
</li>
<li><p>简单说明InnoDB和MyISAM的区别方式</p>
<ul>
<li>InnoBD（默认）：事物优先，适合高并发操作，行锁</li>
<li>MyISAM：性能优先，表锁</li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="2、SQL优化"><a href="#2、SQL优化" class="headerlink" title="2、SQL优化"></a>2、SQL优化</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><blockquote>
<p>性能低、执行时间太长、等待时间太长、SQL语句欠佳（连接查询）、索引失效、服务器参数设置不合理（缓冲、线程数）</p>
</blockquote>
<h3 id="2-1-SQL语句欠佳"><a href="#2-1-SQL语句欠佳" class="headerlink" title="2.1 SQL语句欠佳"></a>2.1 SQL语句欠佳</h3><blockquote>
<p><a href="https://www.cnblogs.com/annsshadow/p/5037667.html">MySQL参考</a></p>
</blockquote>
<ol>
<li><p>编写过程</p>
<blockquote>
<p>select 后是<strong>输出</strong></p>
<p>from 后是 <strong>获取数据</strong></p>
<p>where 后是<strong>过滤</strong></p>
<p>group by 后是<strong>分组</strong></p>
<ul>
<li>group by id，按照id进行分组</li>
<li>分组后，如果遇到select，那么输出的是每一组的第一行数据</li>
<li>group by还可以和聚集函数放在一起</li>
<li>聚集函数：count()、sum()、max()、min()、avg()、group_concat()</li>
</ul>
<p>having 后是<strong>过滤</strong></p>
<p>order by 后是<strong>排序</strong></p>
<p>limit 后是<strong>限定个数</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">    <span class="operator">&lt;</span> select_list <span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="operator">&lt;</span> left_table <span class="operator">&gt;</span> <span class="operator">&lt;</span> join_type <span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">JOIN</span> <span class="operator">&lt;</span> right_table <span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span> join_condition <span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="operator">&lt;</span> where_condition <span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    <span class="operator">&lt;</span> group_by_list <span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">    <span class="operator">&lt;</span> having_condition <span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    <span class="operator">&lt;</span> order_by_condition <span class="operator">&gt;</span></span><br><span class="line">LIMIT <span class="operator">&lt;</span> limit_number <span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>解析过程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>left_table<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ON</span> <span class="operator">&lt;</span>join_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>join_type<span class="operator">&gt;</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>right_table<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="operator">&lt;</span>where_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>group_by_list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="operator">&lt;</span>having_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DISTINCT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>order_by_condition<span class="operator">&gt;</span></span><br><span class="line">LIMIT <span class="operator">&lt;</span>limit_number<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="3、连接查询"><a href="#3、连接查询" class="headerlink" title="3、连接查询"></a>3、连接查询</h2><h3 id="3-1-inner-join-内连接查询"><a href="#3-1-inner-join-内连接查询" class="headerlink" title="3.1 inner join 内连接查询"></a>3.1 inner join 内连接查询</h3><blockquote>
<p>关键字：<strong>inner join on</strong></p>
<p>组合两个表中的记录，返回关联字段相符的记录，也就是返回两个表的<strong>交集</strong>（阴影）部分。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> a_table a <span class="keyword">inner</span> <span class="keyword">join</span> b_table b <span class="keyword">on</span> a.id <span class="operator">=</span> b.id;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/image-20210830223034047.png" alt="image-20210830223034047"></p>
<h3 id="3-2-left-join-左连接查询"><a href="#3-2-left-join-左连接查询" class="headerlink" title="3.2 left join 左连接查询"></a>3.2 left join 左连接查询</h3><blockquote>
<p>关键字：<strong>left join on / left outer join on</strong></p>
<p>left join是left outer join的简写，它的全称是左外连接，是外连接中的一种。左（外）链接，左表（a_table）的记录将会全部表示出来，而右表（b_table）只会显示符合搜索条件的记录。右表记录不足的地方均为NULL</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> a_table <span class="keyword">left</span> <span class="keyword">join</span> b_table <span class="keyword">on</span> a.id <span class="operator">=</span> b.id;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/image-20210830224538316.png" alt="image-20210830224538316"></p>
<h3 id="3-3-right-join-右连接查询"><a href="#3-3-right-join-右连接查询" class="headerlink" title="3.3 right join 右连接查询"></a>3.3 right join 右连接查询</h3><blockquote>
<p>关键字：<strong>right join on / right outer join on</strong></p>
<p>right join 是right outer join的简写，它的全称是右外连接，是外连接中的一种。与左（外）连接相反，右（外）连接，左表（a_table）只会显示符合搜索条件的记录，而右表（b_table）的记录将会全部表示出来。左表记录不足的地方均为NULL。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> a_table <span class="keyword">right</span> <span class="keyword">join</span> b_table <span class="keyword">on</span> a.id <span class="operator">=</span> b.id;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/image-20210830225318526.png" alt="image-20210830225318526"></p>
<h3 id="3-4-union-全连接"><a href="#3-4-union-全连接" class="headerlink" title="3.4 union 全连接"></a>3.4 union 全连接</h3><blockquote>
<p>关键字：<strong>union / union all</strong></p>
<p>注意事项：</p>
<ul>
<li>通过union连接的sql，他们分别单独取出的列数必须相同；</li>
<li>不要求合并的表列名称相同时，以第一个sql表列名为准；</li>
<li>使用union时，完全相等的行，将会被合并，由于合并比较耗时，一般不直接使用union进行合并，而是通常采用union all进行合并；</li>
<li>被union连接的sql子句，单个子句中不用写order by，因为不会有排序的效果。但可以对最终的结果进行排序</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">union</span> 自动去掉完全重复的数据</span><br><span class="line">(<span class="keyword">select</span> colum1,colum2...columN <span class="keyword">from</span> tableA) <span class="keyword">union</span> (<span class="keyword">select</span> colum1,colum2...columN <span class="keyword">from</span> tableB);</span><br><span class="line"># <span class="keyword">union</span> <span class="keyword">all</span>，将所有数据输出，不会去掉完全重复的数据</span><br><span class="line">(<span class="keyword">select</span> colum1,colum2...columN <span class="keyword">from</span> tableA) <span class="keyword">union</span> <span class="keyword">all</span>(<span class="keyword">select</span> colum1,colum2...columN <span class="keyword">from</span> tableB);</span><br></pre></td></tr></table></figure>
<h2 id="4、查询"><a href="#4、查询" class="headerlink" title="4、查询"></a>4、查询</h2><blockquote>
<p>创建库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 创建一个数据库</span><br><span class="line"><span class="keyword">create</span> database test;</span><br></pre></td></tr></table></figure>
<p>创建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 创建一个表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> students(id <span class="type">INT</span>,name <span class="type">VARCHAR</span>(<span class="number">100</span>),age <span class="type">INT</span>,height <span class="type">FLOAT</span>,gender <span class="type">VARCHAR</span>(<span class="number">100</span>),class_id <span class="type">INT</span>,<span class="keyword">PRIMARY</span> KEY(id));</span><br></pre></td></tr></table></figure>
<p>给表中增加数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use test;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">1</span>,&quot;小明&quot;,<span class="number">18</span>,<span class="number">180.00</span>,&quot;女&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">2</span>,&quot;小月月&quot;,<span class="number">18</span>,<span class="number">180.00</span>,&quot;女&quot;,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">3</span>,&quot;彭于晏&quot;,<span class="number">29</span>,<span class="number">185.00</span>,&quot;男&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">4</span>,&quot;刘德华&quot;,<span class="number">59</span>,<span class="number">175.00</span>,&quot;男&quot;,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">5</span>,&quot;黄蓉&quot;,<span class="number">38</span>,<span class="number">160.00</span>,&quot;女&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">6</span>,&quot;凤姐&quot;,<span class="number">28</span>,<span class="number">150.00</span>,&quot;保密&quot;,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">7</span>,&quot;王祖贤&quot;,<span class="number">18</span>,<span class="number">172.00</span>,&quot;女&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">8</span>,&quot;周杰伦&quot;,<span class="number">36</span>,<span class="keyword">NULL</span>,&quot;男&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">9</span>,&quot;陈坤&quot;,<span class="number">27</span>,<span class="number">181.00</span>,&quot;男&quot;,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">10</span>,&quot;刘亦菲&quot;,<span class="number">25</span>,<span class="number">166.00</span>,&quot;女&quot;,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">11</span>,&quot;金星&quot;,<span class="number">33</span>,<span class="number">162.00</span>,&quot;中性&quot;,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">12</span>,&quot;静香&quot;,<span class="number">12</span>,<span class="number">180.00</span>,&quot;女&quot;,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">13</span>,&quot;郭靖&quot;,<span class="number">12</span>,<span class="number">170.00</span>,&quot;男&quot;,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">14</span>,&quot;周姐&quot;,<span class="number">34</span>,<span class="number">176.00</span>,&quot;女&quot;,<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="4-1-模糊查询"><a href="#4-1-模糊查询" class="headerlink" title="4.1 模糊查询"></a>4.1 模糊查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询姓名中以“小”开始的名字</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> students <span class="keyword">where</span> name <span class="keyword">like</span> &quot;小%&quot;;</span><br><span class="line"><span class="comment">-- 查询姓名中 有“小”所有的名字</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> students <span class="keyword">where</span> name <span class="keyword">like</span> &quot;%小%&quot;;</span><br><span class="line"><span class="comment">-- 查询有两个字的名字</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> students <span class="keyword">where</span> name <span class="keyword">like</span> &quot;__&quot;;</span><br><span class="line"><span class="comment">-- 查询有三个字的名字</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> students <span class="keyword">where</span> name <span class="keyword">like</span> &quot;___&quot;;</span><br><span class="line"><span class="comment">-- 查询至少有两个字的名字</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> students <span class="keyword">where</span> name <span class="keyword">like</span> &quot;__%&quot;;</span><br><span class="line"><span class="comment">-- rlike 正则</span></span><br><span class="line"><span class="comment">-- 查询 以 周开始的姓名</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> students <span class="keyword">where</span> name rlike &quot;^周.*&quot;;</span><br><span class="line"><span class="comment">-- 查询 以 周开始，伦结尾的姓名</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> students <span class="keyword">where</span> name rlike &quot;^周.*伦$ &quot;;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-范围查询"><a href="#4-2-范围查询" class="headerlink" title="4.2 范围查询"></a>4.2 范围查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- in(12，18,34) 表示在一个非连续的范围内    not in</span></span><br><span class="line"><span class="comment">-- 查询 年龄为12、18、34的姓名</span></span><br><span class="line"><span class="keyword">select</span> name,age <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">12</span>,<span class="number">18</span>,<span class="number">34</span>);</span><br><span class="line"><span class="comment">-- between ... and ... 表示咋一个连续的范围内    not between ... and ....</span></span><br><span class="line"><span class="comment">-- 查询 年龄在18和34之间的信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">18</span> <span class="keyword">and</span> <span class="number">34</span>;</span><br><span class="line"><span class="comment">-- 使用not时，不能用括号，该语句失败：   select * from students where age not (between 18 and 34);</span></span><br><span class="line"><span class="comment">-- 空判断</span></span><br><span class="line"><span class="comment">-- 判断 is null</span></span><br><span class="line"><span class="comment">-- 查询身高为空的信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> height <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-聚合函数"><a href="#4-3-聚合函数" class="headerlink" title="4.3 聚合函数"></a>4.3 聚合函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 总数 count</span></span><br><span class="line"><span class="comment">-- 查询男性有多少人</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> 男性人数 <span class="keyword">from</span> students <span class="keyword">where</span> gender <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 最大值 max</span></span><br><span class="line"><span class="comment">-- 查询最大的年龄</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(age) <span class="keyword">from</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 最小值 min</span></span><br><span class="line"><span class="comment">-- 查询最小的年龄</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(age) <span class="keyword">from</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 平均值 avg</span></span><br><span class="line"><span class="comment">-- 计算平均年龄</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(age) <span class="keyword">from</span> students;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(age) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 四舍五入，round(123.23,1) 保留1位小数</span></span><br><span class="line"><span class="comment">-- 计算所有人的平均年龄，保留2位小数</span></span><br><span class="line"><span class="keyword">select</span> round(<span class="built_in">sum</span>(age)<span class="operator">/</span><span class="built_in">count</span>(<span class="operator">*</span>),<span class="number">2</span>) <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure>
<h3 id="4-4-分组"><a href="#4-4-分组" class="headerlink" title="4.4 分组"></a>4.4 分组</h3><blockquote>
<p>假设想要知道这样的一种情况，计算每个男性的姓名和平均身高，使用如下sql语句会报错,因此为了解决这种情况，需要使用到分组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 下列会报错，因为不知道给哪一个姓名，因此不能两个一起查询</span></span><br><span class="line"><span class="keyword">select</span> name,round(<span class="built_in">avg</span>(height),<span class="number">2</span>) <span class="keyword">from</span> students <span class="keyword">where</span> gender <span class="operator">=</span> &quot;男&quot;;</span><br><span class="line"><span class="comment">-- group by</span></span><br><span class="line"><span class="comment">-- 按照性别分组，查询所有的性别</span></span><br><span class="line"><span class="keyword">select</span> gender <span class="keyword">from</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> gender;</span><br><span class="line"></span><br><span class="line"><span class="operator">!</span>[img](数据库学习（一）之逻辑分层<span class="operator">-</span>存储引擎<span class="operator">/</span>截图<span class="number">-16311958882171.</span>png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">疑问<span class="number">1</span>：</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> gender <span class="keyword">from</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> gender;  和 <span class="keyword">select</span> <span class="keyword">DISTINCT</span>(gender) <span class="keyword">from</span> students ;有什么区别？</span><br><span class="line"></span><br><span class="line"><span class="operator">!</span>[img](数据库学习（一）之逻辑分层<span class="operator">-</span>存储引擎<span class="operator">/</span>截图<span class="number">-16311959071312.</span>png)</span><br><span class="line"></span><br><span class="line">回答<span class="number">1</span>：当想知道每一个性别的人数是多少时，可以结合聚合函数一起使用</span><br><span class="line"></span><br><span class="line">```<span class="keyword">sql</span></span><br><span class="line"><span class="comment">-- 计算每个性别中的人数</span></span><br><span class="line"><span class="keyword">select</span> gender,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> gender;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-16311101180633.png" alt="img"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- group_concat</span></span><br><span class="line"><span class="keyword">select</span> gender,GROUP_CONCAT(name)<span class="keyword">from</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> gender;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-16311101402414.png" alt="img"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> gender,GROUP_CONCAT(name,&quot;_&quot;,age,&quot;_&quot;,id) <span class="keyword">from</span> students <span class="keyword">where</span> gender <span class="operator">=</span> &quot;男&quot; <span class="keyword">GROUP</span> <span class="keyword">BY</span> gender;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-16311101952085.png" alt="img"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- having</span></span><br><span class="line"><span class="comment">-- 查询平均年龄超过30的性别，以及姓名  </span></span><br><span class="line"><span class="keyword">select</span> gender,GROUP_CONCAT(name),<span class="built_in">avg</span>(age) <span class="keyword">from</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> gender <span class="keyword">having</span> <span class="built_in">avg</span>(age) <span class="operator">&gt;</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- where对原始表进行判断，having 对查询出的结果进行判断</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-16311115997186.png" alt="img"></p>
<h3 id="4-5-排序"><a href="#4-5-排序" class="headerlink" title="4.5 排序"></a>4.5 排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- order by</span></span><br><span class="line"><span class="comment">-- asc 升序  desc 降序</span></span><br><span class="line"><span class="comment">-- 按照年龄从小到大，身高从大到小排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>,height <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<h3 id="4-6-分页"><a href="#4-6-分页" class="headerlink" title="4.6 分页"></a>4.6 分页</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- limit start,count 从start的下标开始查询出count个</span></span><br><span class="line"><span class="comment">-- 查询前5个数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students limit <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 查询第5-10个数</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students limit <span class="number">5</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<h3 id="4-7-连接查询"><a href="#4-7-连接查询" class="headerlink" title="4.7 连接查询"></a>4.7 连接查询</h3><blockquote>
<p>（1）造数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use test;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> classes(id <span class="type">INT</span>,name <span class="type">VARCHAR</span>(<span class="number">100</span>),<span class="keyword">PRIMARY</span> KEY(id));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> classes <span class="keyword">values</span>(<span class="number">1</span>,&quot;c#课程&quot;);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> classes <span class="keyword">values</span>(<span class="number">2</span>,&quot;Java课程&quot;);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> classes <span class="keyword">values</span>(<span class="number">3</span>,&quot;Python课程&quot;);</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="4-7-1-内连接"><a href="#4-7-1-内连接" class="headerlink" title="4.7.1 内连接"></a>4.7.1 内连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- inner join ...on</span></span><br><span class="line"><span class="comment">-- select ... from 表A inner join 表B</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">inner</span> <span class="keyword">join</span> classes;</span><br><span class="line">结果：表A每一个都输出<span class="number">3</span>个，因为表B有<span class="number">3</span>个数据</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-16311132382537.png" alt="img"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.<span class="operator">*</span>,c.name <span class="keyword">from</span> students <span class="keyword">as</span> s <span class="keyword">inner</span> <span class="keyword">join</span> classes  <span class="keyword">as</span> c <span class="keyword">on</span> s.class_id <span class="operator">=</span> c.id;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-16311132717378.png" alt="img"></p>
<h4 id="4-7-2-左连接"><a href="#4-7-2-左连接" class="headerlink" title="4.7.2 左连接"></a>4.7.2 左连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.<span class="operator">*</span>,c.name <span class="keyword">from</span> students <span class="keyword">as</span> s <span class="keyword">left</span> <span class="keyword">join</span> classes  <span class="keyword">as</span> c <span class="keyword">on</span> s.class_id <span class="operator">=</span> c.id;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-16311133620099.png" alt="img"></p>
<h4 id="4-7-3-右连接"><a href="#4-7-3-右连接" class="headerlink" title="4.7.3 右连接"></a>4.7.3 右连接</h4><blockquote>
<p>将左连接中的左表和右表互换即可</p>
</blockquote>
<h3 id="4-8-自关联"><a href="#4-8-自关联" class="headerlink" title="4.8 自关联"></a>4.8 自关联</h3><blockquote>
<p>问题描述：</p>
<p>​    实现全国三级城市联动select选择</p>
<p>​    按照省、市、区进行分类，会设计三个表，表有些多余，重复，但省份中没有p_id这样的字段</p>
</blockquote>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-163111348600510.png" alt="img"></p>
<blockquote>
<p>可以将身份也添加一个p_id，设计为空即可，可以将下列三个表进行融合</p>
</blockquote>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-163111351342011.png" alt="img"></p>
<blockquote>
<p>使用一个表，然后利用id进行关联，这种在一个表内的设计就是自关联</p>
</blockquote>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-163111357920612.png" alt="img"></p>
<blockquote>
<p>表数据创造</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> areas(aid <span class="type">int</span> <span class="keyword">primary</span> key,atitle <span class="type">varchar</span>(<span class="number">20</span>),pid <span class="type">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">110000</span>,&quot;北京市&quot;,<span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">120000</span>,&quot;天津市&quot;,<span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">130000</span>,&quot;河北省&quot;,<span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">140000</span>,&quot;山西省&quot;,<span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">150000</span>,&quot;内蒙古自治区&quot;,<span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">160000</span>,&quot;辽宁省&quot;,<span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">170000</span>,&quot;黑龙江省&quot;,<span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">370000</span>,&quot;山东省&quot;,<span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">370100</span>,&quot;济南市&quot;,<span class="number">370000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">370200</span>,&quot;青岛市&quot;,<span class="number">370000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">370300</span>,&quot;淄博市&quot;,<span class="number">370000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">370400</span>,&quot;枣庄市&quot;,<span class="number">370000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">370500</span>,&quot;东营市&quot;,<span class="number">370000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">370600</span>,&quot;烟台市&quot;,<span class="number">370000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">370202</span>,&quot;市南区&quot;,<span class="number">370200</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">370203</span>,&quot;市北区&quot;,<span class="number">370200</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">370205</span>,&quot;四方区&quot;,<span class="number">370200</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">370211</span>,&quot;黄岛区&quot;,<span class="number">370200</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">370212</span>,&quot;崂山区&quot;,<span class="number">370200</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> areas <span class="keyword">values</span>(<span class="number">370213</span>,&quot;李沧区&quot;,<span class="number">370200</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查询（根据省名查询）</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> areas <span class="keyword">as</span> province <span class="keyword">inner</span> <span class="keyword">join</span> areas <span class="keyword">as</span> city <span class="keyword">on</span> city.pid <span class="operator">=</span> province.aid <span class="keyword">having</span> province.atitle <span class="operator">=</span> &quot;山东省&quot;;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-163111371107213.png" alt="img"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> province.atitle,city.atitle <span class="keyword">from</span> areas <span class="keyword">as</span> province <span class="keyword">inner</span> <span class="keyword">join</span> areas <span class="keyword">as</span> city <span class="keyword">on</span> city.pid <span class="operator">=</span> province.aid <span class="keyword">having</span> province.atitle <span class="operator">=</span> &quot;山东省&quot;;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-163111373589514.png" alt="img"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> province.atitle,city.atitle <span class="keyword">from</span> areas <span class="keyword">as</span> province <span class="keyword">inner</span> <span class="keyword">join</span> areas <span class="keyword">as</span> city <span class="keyword">on</span> city.pid <span class="operator">=</span> province.aid <span class="keyword">having</span> province.atitle <span class="operator">=</span> &quot;山东省&quot;;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-163111382234915.png" alt="img"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> province.atitle,city.atitle <span class="keyword">from</span> areas <span class="keyword">as</span> province <span class="keyword">inner</span> <span class="keyword">join</span> areas <span class="keyword">as</span> city <span class="keyword">on</span> city.pid <span class="operator">=</span> province.aid <span class="keyword">having</span> province.atitle <span class="operator">=</span> &quot;青岛市&quot;;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-163111384184616.png" alt="img"></p>
<h3 id="4-9-子查询"><a href="#4-9-子查询" class="headerlink" title="4.9 子查询"></a>4.9 子查询</h3><blockquote>
<p>子查询用的越少，sql效率越高</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询最高的男生信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> height <span class="operator">=</span> (<span class="keyword">select</span> <span class="built_in">max</span>(height) <span class="keyword">from</span> students);</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-163111387505017.png" alt="img"></p>
<h3 id="4-10-数据库设计—三范式"><a href="#4-10-数据库设计—三范式" class="headerlink" title="4.10 数据库设计—三范式"></a>4.10 数据库设计—三范式</h3><h4 id="4-10-1-第一范式（1NF）"><a href="#4-10-1-第一范式（1NF）" class="headerlink" title="4.10.1 第一范式（1NF）"></a>4.10.1 第一范式（1NF）</h4><blockquote>
<p><strong>强调的是列的原子性，即列不能够在分成其他几列。</strong></p>
<p>考虑到这样的一个表：【联系人】（姓名，性别，电话），如果在实际场景中，一个联系人有家庭电话和公司电话，那么这种表结构设计就没有达到1NF。 要符合1NF我们只需把列（电话）拆分，即【联系人】（姓名，性别，家庭电话，公司电话）</p>
</blockquote>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-163111395489018.png" alt="img"></p>
<h4 id="4-10-2-第二范式（2NF）"><a href="#4-10-2-第二范式（2NF）" class="headerlink" title="4.10.2 第二范式（2NF）"></a>4.10.2 第二范式（2NF）</h4><blockquote>
<p><strong>首先是1NF，另外包含两部分内容，一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。</strong></p>
<p>考虑一个订单明细表：【OrderDetail】（OrderID、ProductId、UnitPrice、Discount、Quantiy、ProductName）。因为我们知道在一个订单中可以订购多个产品， 所以单单一个OrderID是不足以成为主键的，主键应该是（OrderID、ProductID）。显而易见Discount（折扣）、Quanity（数量）完全依赖（取决于）主键（OrderID、ProductID）， 而UnitPrice、ProductName只依赖于ProductID，所以OrderDetail表不符合2NF，不符合2NF的设计容易产生冗余数据 可以把【OrderDetail】表拆分为【OrderDetail】（OrderID、ProductId、Discount、Quantiy）和【Product】（ProductId、UnitPrice、Discount）来消除 订单表中UnitPrice、Discount多次重复的情况。</p>
</blockquote>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-163111399516619.png" alt="img"></p>
<h4 id="4-10-3-第三范式（3NF）"><a href="#4-10-3-第三范式（3NF）" class="headerlink" title="4.10.3 第三范式（3NF）"></a>4.10.3 第三范式（3NF）</h4><blockquote>
<p><strong>首先是2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列A依赖于非主键列B，非主键列B依赖于主键的情况。</strong></p>
<p>考虑一个订单表：【Order】（OrderID、OrderDate、CustomerID、CustomerName、CustomerAddr、CustomerCity） 主键是OrderID，其中OrderDate、CustomerID、CustomerName、CustomerAddr、CustomerCity等非主键列都完全依赖于主键OrderID，所以符合2NF，不过问题是 CustomerName、CustomerAddr、CustomerCity直接依赖的是CustomerID（非主键列），而不是直接依赖于主键，它是通过传递才能依赖于主键，所以不符合3NF。 通过拆分【Order】为【Order】（OrderID、OrderDate、CustomerID）和【Customer】（CustomerID、CustomerName、CustomerAddr、CustomerCity）从而达到3NF。 第二范式（2NF）和第三范式（3NF）的概念很容易混淆，区分它们的关键在于  2NF：非主键列是否完全依赖于主键，还是依赖于主键的一部分。3NF：非主键列是否直接依赖于主键，还是直接依赖于非主键列。</p>
</blockquote>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-163111404683220.png" alt="img"></p>
<p><strong>最终表结构</strong></p>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-163111406842521.png" alt="img"></p>
<h3 id="4-11-ER模型"><a href="#4-11-ER模型" class="headerlink" title="4.11 ER模型"></a>4.11 ER模型</h3><blockquote>
<ul>
<li><p>E表示entry，实体，设计实体就像定义一个类一样，指定从哪些方面描述对象，一个实体转换为数据库中的一个表</p>
</li>
<li><p>R表示relationship，关系，关系描述两个实体之间的对应规则，关系的类型包括一对一、一对多、多对多</p>
</li>
<li><p>关系也是一种数据，需要通过一个字段存储在表中</p>
</li>
</ul>
<p>（1）实体A对实体B为1对1，则在表A或表B中创建一个字段，存储另一个表的主键值</p>
</blockquote>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-163111414309622.png" alt="img"></p>
<blockquote>
<p>（2）实体A对实体B为1对多：在表B中创建一个字段，存储表A的主键值</p>
<p>​        A表中的一条数据对应B表中的一条数据</p>
<p>​        B表中的一条数据对应A表中的多条数据</p>
<p>假设多一个女儿时，需要在子女表中多添加一条数据，即如下情况</p>
</blockquote>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-163111417768623.png" alt="img"></p>
<blockquote>
<p>若在父母表中，新增一列时，情景如下：</p>
<p>但这样会有个问题，若新增一个子女，还需要维护父母表中的某个字段，维护起来特别麻烦</p>
</blockquote>
<p><img src="/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%80%BB%E8%BE%91%E5%88%86%E5%B1%82-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/截图-163111419419224.png" alt="img"></p>
<blockquote>
<p>（3）实体A对实体B为多对多：新建一个表C，这个表只有两个字段，一个用于存储A的主键值，一个用于存储B的主键值</p>
</blockquote>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://blog.csdn.net/zjt980452483/article/details/82945663">Mysql—— 内连接、左连接、右连接以及全连接查询</a></p>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库学习（二）之SQL优化</title>
    <url>/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="一、SQL优化"><a href="#一、SQL优化" class="headerlink" title="一、SQL优化"></a>一、SQL优化</h1><blockquote>
<p>原因：性能低、执行时间太长、等待时间太长、SQL语句欠佳（连接查询）、索引失效、服务器参数设置不合理（缓冲、线程数）</p>
</blockquote>
<h2 id="1、SQL编写过程与解析过程"><a href="#1、SQL编写过程与解析过程" class="headerlink" title="1、SQL编写过程与解析过程"></a>1、SQL编写过程与解析过程</h2><blockquote>
<p>编写过程：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> ... <span class="keyword">from</span> ... <span class="keyword">join</span> .. <span class="keyword">on</span> .. <span class="keyword">where</span> .. <span class="keyword">group</span> <span class="keyword">by</span> ... <span class="keyword">having</span> ...<span class="keyword">order</span> <span class="keyword">by</span> ... limit ...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>解析过程：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ... <span class="keyword">on</span> .... <span class="keyword">join</span> ... <span class="keyword">where</span> ... <span class="keyword">group</span> <span class="keyword">by</span> ... <span class="keyword">having</span> ... <span class="keyword">select</span> <span class="keyword">distinct</span> ... <span class="keyword">order</span> <span class="keyword">by</span> ... limit ...</span><br></pre></td></tr></table></figure>
<h2 id="2、SQL优化"><a href="#2、SQL优化" class="headerlink" title="2、SQL优化"></a>2、SQL优化</h2><blockquote>
<p>主要是在 <strong>优化索引</strong></p>
<p><strong>索引：</strong>相当于书的目录</p>
<p>索引：index是帮助MYSQL高效获取数据的数据结构。<strong>索引</strong>是<strong>数据结构</strong>（树：B树（MYSQL默认）、Hash树）</p>
</blockquote>
<h2 id="3、索引的优劣势"><a href="#3、索引的优劣势" class="headerlink" title="3、索引的优劣势"></a>3、索引的优劣势</h2><h3 id="3-1-优势"><a href="#3-1-优势" class="headerlink" title="3.1 优势"></a>3.1 优势</h3><blockquote>
<ul>
<li>提高查询效率（降低IO使用率）</li>
<li>降低CPU使用率（….order by age desc，因为B树索引 本身是一个排好序的结构，因此在排序时，可以直接使用）</li>
</ul>
</blockquote>
<h3 id="3-2-劣势"><a href="#3-2-劣势" class="headerlink" title="3.2 劣势"></a>3.2 劣势</h3><blockquote>
<ul>
<li>索引本身很大，可以存放在内存/硬盘（通常为硬盘）</li>
<li>索引不是所有情况均适用：（1）少量数据（2）频繁更新的字段（3）很少使用的字段</li>
<li>索引会降低增删改的效率（需要维护索引）</li>
</ul>
</blockquote>
<h2 id="4、索引"><a href="#4、索引" class="headerlink" title="4、索引"></a>4、索引</h2><h3 id="4-1-索引分类"><a href="#4-1-索引分类" class="headerlink" title="4.1 索引分类"></a>4.1 索引分类</h3><blockquote>
<p>（1）<strong>单值索引：</strong>单列，age；一个表可以有多个单值索引，name</p>
<p>（2）<strong>唯一索引：</strong>不能重复。id，可以是null</p>
<p>​          <strong>主键索引：</strong>不能重复。id，不能是null</p>
<p>（3）<strong>复合索引：</strong>多个列构成的索引（相当于二级目录：z:zhao）(name,age)</p>
</blockquote>
<h3 id="4-2-创建索引"><a href="#4-2-创建索引" class="headerlink" title="4.2 创建索引"></a>4.2 创建索引</h3><h4 id="4-2-1-方式一"><a href="#4-2-1-方式一" class="headerlink" title="4.2.1 方式一"></a>4.2.1 方式一</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb(id <span class="type">int</span>,name <span class="type">varchar</span>(<span class="number">5</span>),dept <span class="type">varchar</span>(<span class="number">5</span>),<span class="keyword">primary</span> key(id));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- create 索引类型 索引名 on 表（字段）</span></span><br><span class="line"><span class="comment">-- 单值索引：</span></span><br><span class="line"><span class="keyword">create</span> index dept_index <span class="keyword">on</span> tb(dept);</span><br><span class="line"><span class="comment">-- 唯一索引：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index name_index <span class="keyword">on</span> tb(name);</span><br><span class="line"><span class="comment">-- 复合索引：</span></span><br><span class="line"><span class="keyword">create</span> index dept_name_index <span class="keyword">on</span> tb(dept,name);</span><br></pre></td></tr></table></figure>
<h4 id="4-2-2-方式二"><a href="#4-2-2-方式二" class="headerlink" title="4.2.2 方式二"></a>4.2.2 方式二</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- alter table  表名 add  索引类型 索引名（字段）</span></span><br><span class="line"><span class="comment">-- 单值索引：</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb <span class="keyword">add</span> index dept_index(dept);</span><br><span class="line"><span class="comment">-- 唯一索引：</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb <span class="keyword">add</span> <span class="keyword">unique</span> index name_index(name);</span><br><span class="line"><span class="comment">-- 复合索引：</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb <span class="keyword">add</span>  index dept_name_index(dept,name);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：如果一个字段是 primary key，则该字段默认就是 主键索引</p>
</blockquote>
<h3 id="4-3-删除索引"><a href="#4-3-删除索引" class="headerlink" title="4.3 删除索引"></a>4.3 删除索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除索引：</span></span><br><span class="line"><span class="comment">-- drop index 索引名 on 表名</span></span><br><span class="line"><span class="keyword">drop</span> index name_index <span class="keyword">on</span> tb;</span><br></pre></td></tr></table></figure>
<h3 id="4-4-查询索引"><a href="#4-4-查询索引" class="headerlink" title="4.4 查询索引"></a>4.4 查询索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查询索引：</span></span><br><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> tb;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/截图.png" alt="img"></p>
<h2 id="5、SQL性能问题—explain详解（Mysql-8-0-26）"><a href="#5、SQL性能问题—explain详解（Mysql-8-0-26）" class="headerlink" title="5、SQL性能问题—explain详解（Mysql 8.0.26）"></a>5、SQL性能问题—explain详解（Mysql 8.0.26）</h2><blockquote>
<p>（1）分析SQL的执行计划：explain，可以模拟SQL优化器执行SQL语句，从而让开发人员 知道自己编写的SQL状况</p>
<p>（2）MYSQL查询优化器会干扰我们的优化</p>
<p>优化方法，官网</p>
<p><strong>查询执行计划：explain + SQL语句</strong></p>
<p><strong>explain select * from tb;</strong></p>
</blockquote>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/截图-16312822304852.png" alt="img"></p>
<h3 id="5-1-准备数据"><a href="#5-1-准备数据" class="headerlink" title="5.1 准备数据"></a>5.1 准备数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course(</span><br><span class="line">cid <span class="type">int</span>,</span><br><span class="line">cname <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">tid <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher(</span><br><span class="line">tid <span class="type">int</span>,</span><br><span class="line">tname <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">tcid <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacherCard(</span><br><span class="line">tcid <span class="type">int</span>,</span><br><span class="line">tcdesc <span class="type">varchar</span>(<span class="number">200</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;java&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;html&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;sql&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;web&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;tz&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;tw&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;tl&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacherCard <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;tzdesc&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacherCard <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;twdesc&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacherCard <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;tldesc&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/截图-16312822144321.png" alt="img"></p>
<h3 id="5-2-id-编号"><a href="#5-2-id-编号" class="headerlink" title="5.2 id 编号"></a>5.2 id 编号</h3><blockquote>
<p> 查询课程编号为2 或教师证编号为3的老师信息</p>
<p>（1）<strong>id值相同，从上往下，顺序执行</strong></p>
<p>​        先找t表，然后找tc表，最后找c表（从表结构图中可知:t3-tc3-c4,t表和tc表都是3条数据，course表是4条）</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> t.<span class="operator">*</span> <span class="keyword">from</span> teacher t,course c,teachercard tc <span class="keyword">where</span> t.tid <span class="operator">=</span> c.tid <span class="keyword">and</span> t.tcid <span class="operator">=</span> tc.tcid <span class="keyword">and</span> (c.cid <span class="operator">=</span> <span class="number">2</span> <span class="keyword">or</span> tc.tcid <span class="operator">=</span> <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/截图-16312822834453.png" alt="img"></p>
<blockquote>
<p>若给teacher表增加一点数据</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;ta&#x27;</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;tb&#x27;</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher <span class="keyword">values</span>(<span class="number">6</span>,<span class="string">&#x27;tc&#x27;</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> t.<span class="operator">*</span> <span class="keyword">from</span> teacher t,course c,teachercard tc <span class="keyword">where</span> t.tid <span class="operator">=</span> c.tid <span class="keyword">and</span> t.tcid <span class="operator">=</span> tc.tcid <span class="keyword">and</span> (c.cid <span class="operator">=</span> <span class="number">2</span> <span class="keyword">or</span> tc.tcid <span class="operator">=</span> <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>mysql 5.7.28 执行结果如下</p>
<p>本应该是小表驱动大表原则。但我这未按照t3-c4-tc6来输出，可能MySQL5.6是这个规则</p>
<p>数据小的表，优先查询</p>
</blockquote>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/截图-16312824315364.png" alt="img"></p>
<blockquote>
<p>（2）<strong>id值不同，id值越大越优先查询（本质：在嵌套子查询时，先查内层，再查完成）</strong></p>
<p>​        查询教SQL课程的老师的描述</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> tc.tcdesc <span class="keyword">from</span> teachercard tc,course c,teacher t <span class="keyword">where</span> c.tid <span class="operator">=</span> t.tid <span class="keyword">and</span> t.tcid <span class="operator">=</span> tc.tcid <span class="keyword">and</span> c.cname <span class="operator">=</span> <span class="string">&#x27;sql&#x27;</span>;</span><br><span class="line"><span class="comment">-- 多表查询转换为子查询</span></span><br><span class="line">explain <span class="keyword">select</span> tc.tcdesc <span class="keyword">from</span> teachercard tc <span class="keyword">where</span> tc.tcid <span class="operator">=</span> (<span class="keyword">select</span> t.tcid <span class="keyword">from</span> teacher t <span class="keyword">where</span> t.tid <span class="operator">=</span> (<span class="keyword">select</span> c.tid <span class="keyword">from</span> course c <span class="keyword">where</span> c.cname <span class="operator">=</span> <span class="string">&#x27;sql&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/截图-16312824941705.png" alt="img"></p>
<blockquote>
<p>（3）<strong>id值部分相同，部分不同：（id值越大越优先，id值相同，从上往下，顺序执行）</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> t.tname ,tc.tcdesc <span class="keyword">from</span> teacher t,teachercard tc <span class="keyword">where</span> t.tcid <span class="operator">=</span> tc.tcid <span class="keyword">and</span> t.tid <span class="operator">=</span> (<span class="keyword">select</span> c.tid <span class="keyword">from</span> course c <span class="keyword">where</span> cname <span class="operator">=</span> <span class="string">&#x27;sql&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/截图-16312825352196.png" alt="img"></p>
<h3 id="5-3-select-type-查询类型"><a href="#5-3-select-type-查询类型" class="headerlink" title="5.3 select_type 查询类型"></a>5.3 <strong>select_type 查询类型</strong></h3><h4 id="5-3-1-PRIMARY"><a href="#5-3-1-PRIMARY" class="headerlink" title="5.3.1 PRIMARY"></a>5.3.1 <strong>PRIMARY</strong></h4><blockquote>
<p> 包含子查询SQL中的 主查询（最外层）</p>
</blockquote>
<h4 id="5-3-2-SUBQUERY"><a href="#5-3-2-SUBQUERY" class="headerlink" title="5.3.2 SUBQUERY"></a>5.3.2 <strong>SUBQUERY</strong></h4><blockquote>
<p>包含子查询SQL中的 子查询（非最外层）</p>
</blockquote>
<h4 id="5-3-3-SIMPLE"><a href="#5-3-3-SIMPLE" class="headerlink" title="5.3.3 SIMPLE"></a>5.3.3 <strong>SIMPLE</strong></h4><blockquote>
<p> 简单查询（不包含子查询、UNION）</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> course;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/截图-16312826356867.png" alt="img"></p>
<h4 id="5-3-4-DERIVED"><a href="#5-3-4-DERIVED" class="headerlink" title="5.3.4 DERIVED"></a>5.3.4 <strong>DERIVED</strong></h4><blockquote>
<p>衍生查询（使用到了临时表）</p>
<p>在from子查询中，如果有table1 union table2，则table1 就是DERIVED，table2就是UNION</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> cr.cname <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> course <span class="keyword">where</span> tid <span class="operator">=</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> course <span class="keyword">where</span> tid <span class="operator">=</span> <span class="number">2</span>) cr;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/截图-16312826827098.png" alt="img"></p>
<h4 id="5-3-5-UNION"><a href="#5-3-5-UNION" class="headerlink" title="5.3.5 UNION"></a>5.3.5 <strong>UNION</strong></h4><blockquote>
<p>见5.3.4</p>
</blockquote>
<h4 id="5-3-6-UNION-RESULT"><a href="#5-3-6-UNION-RESULT" class="headerlink" title="5.3.6 UNION RESULT"></a>5.3.6 <strong>UNION RESULT</strong></h4><blockquote>
<p>就是告知开发人员，哪些表之间存在union查询</p>
</blockquote>
<h3 id="5-4-table-表"><a href="#5-4-table-表" class="headerlink" title="5.4 table 表"></a>5.4 table 表</h3><h3 id="5-5-type-类型（索引类型）"><a href="#5-5-type-类型（索引类型）" class="headerlink" title="5.5 type 类型（索引类型）"></a>5.5 type 类型（索引类型）</h3><blockquote>
<p><strong>system &gt; const &gt; eq_ref  &gt; ref &gt; range &gt; index &gt; all；</strong></p>
<p>要对type进行优化的前提：有索引</p>
<p>其中：system,const只是理想情况；实际能达到 ref &gt; range;</p>
<ul>
<li><p>（1）system（忽略）：只有一条数据的系统表；或衍生表只有一条数据的主查询</p>
</li>
<li><p>（2）const：仅仅能查到一条数据的SQL，用于Primary key 或unique索引（类型 与索引类型有关）</p>
</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test01(</span><br><span class="line">	tid <span class="type">int</span>(<span class="number">3</span>),</span><br><span class="line">	tname <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test01 <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="comment">-- 增加索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test01 <span class="keyword">add</span> <span class="keyword">constraint</span> tid_pk <span class="keyword">primary</span> key(tid);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test01 <span class="keyword">where</span> tid <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210910223125561.png" alt="image-20210910223125561"></p>
<blockquote>
<p>若将主键索引修改，则type类型就不会是const</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test01 <span class="keyword">drop</span> <span class="keyword">primary</span> key;</span><br><span class="line"><span class="keyword">create</span> index test01_index <span class="keyword">on</span> test01(tid);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test01 <span class="keyword">where</span> tid <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210910223557044.png" alt="image-20210910223557044"></p>
<blockquote>
<ul>
<li><p>（3）eq_ref：唯一性索引：对于每个索引键的查询，返回匹配唯一行数据（有且只有1个，不能多，不能0）</p>
<p>常见于唯一索引和主键索引</p>
</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 给teachercard表添加主键索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teachercard <span class="keyword">add</span> <span class="keyword">constraint</span> pk_tcid <span class="keyword">primary</span> key(tcid);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">add</span> <span class="keyword">constraint</span> uk_tcid <span class="keyword">unique</span> index(tcid);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> t.tcid <span class="keyword">from</span> teacher t,teachercard tc <span class="keyword">where</span> t.tcid <span class="operator">=</span> tc.tcid;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>下图中，tc表的type类型不是eq_ref</p>
<p>因为tc表中有6条数据，t表中有3条数据，用tc表查询时，有3条数据的返回值是0，导致不满足条件</p>
</blockquote>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210910230443162.png" alt="image-20210910230443162"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除teacher表中的后3条语句</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> teacher <span class="keyword">where</span> tcid <span class="operator">&gt;</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 继续执行explain + SQL</span></span><br><span class="line">explain <span class="keyword">select</span> t.tcid <span class="keyword">from</span> teacher t,teachercard tc <span class="keyword">where</span> t.tcid <span class="operator">=</span> tc.tcid;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210910230905284.png" alt="image-20210910230905284"></p>
<blockquote>
<p>说明：以上SQL，用到的索引是t.tcid，即teacher表中的tcid字段；如果teacher表中的数据个数和连接查询的数据个数一致（都是3条数据），则有可能满足eq_ref级别（数据要保持完全一致），否则无法满足。</p>
<ul>
<li>（4）ref：非唯一性索引，对于每个索引键的查询，返回匹配的所有行（0，多）</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 增加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;tz&#x27;</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teachercard <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;tzdesc&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">add</span> index index_name(tname);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- explain + SQL</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> teacher <span class="keyword">where</span> tname <span class="operator">=</span> <span class="string">&#x27;tz&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210910231739292.png" alt="image-20210910231739292"></p>
<blockquote>
<ul>
<li><p>（5）range：检索指定范围的行，where后面是一个范围查询（between，in，&gt;，&lt;，&gt;=）</p>
<p>特殊：in有时候会失效，从而转为 无索引all</p>
</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">add</span> index tid_index(tid);</span><br><span class="line"><span class="comment">-- explain + SQL</span></span><br><span class="line">explain <span class="keyword">select</span> t.<span class="operator">*</span> <span class="keyword">from</span> teacher t <span class="keyword">where</span> t.tid <span class="operator">&lt;</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210911201255772.png" alt="image-20210911201255772"></p>
<blockquote>
<ul>
<li>（6）index：查询全部索引中的数据</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- tid是索引，只需要扫描索引表，不需要所有表中的所有数据</span></span><br><span class="line">explain <span class="keyword">select</span> tid <span class="keyword">from</span> teacher;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210911201519588.png" alt="image-20210911201519588"></p>
<blockquote>
<ul>
<li>（7）all：查询全部表中的数据</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- cid不是索引，需要全表扫描，即需要所有表中的所有数据</span></span><br><span class="line">explain <span class="keyword">select</span> cid <span class="keyword">from</span> course;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210911201710375.png" alt="image-20210911201710375"></p>
<blockquote>
<p>总结：</p>
<ul>
<li>system/const：结果只有一条数据</li>
<li>eq_ref：结果多条，但是每条数据是唯一的</li>
<li>ref：结果多条，电脑上每条数据是0或多条</li>
</ul>
</blockquote>
<h3 id="5-6-possible-keys-可能用到的索引"><a href="#5-6-possible-keys-可能用到的索引" class="headerlink" title="5.6 possible_keys 可能用到的索引"></a>5.6 possible_keys 可能用到的索引</h3><blockquote>
<p>是一种预测，不准</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 给course表添加一个索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> course <span class="keyword">add</span> index cname_index(cname);</span><br><span class="line"><span class="comment">-- explain +SQL，实际和预测的保持一致</span></span><br><span class="line">explain <span class="keyword">select</span> tc.tcdesc <span class="keyword">from</span> teachercard tc <span class="keyword">where</span> tc.tcid <span class="operator">=</span> (<span class="keyword">select</span> t.tcid <span class="keyword">from</span> teacher t <span class="keyword">where</span> t.tid <span class="operator">=</span> (<span class="keyword">select</span> c.tid <span class="keyword">from</span> course c <span class="keyword">where</span> c.cname <span class="operator">=</span> <span class="string">&#x27;sql&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210911202716144.png" alt="image-20210911202716144"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 预测使用两个索引，但实际只用到一个</span></span><br><span class="line">explain <span class="keyword">select</span> tc.tcdesc <span class="keyword">from</span> teachercard tc,course c,teacher t <span class="keyword">where</span> c.tid <span class="operator">=</span> t.tid <span class="keyword">and</span> t.tcid <span class="operator">=</span> tc.tcid <span class="keyword">and</span> c.cname <span class="operator">=</span> <span class="string">&#x27;sql&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210911202858525.png" alt="image-20210911202858525"></p>
<h3 id="5-7-key-实际使用到的索引"><a href="#5-7-key-实际使用到的索引" class="headerlink" title="5.7 key 实际使用到的索引"></a>5.7 key 实际使用到的索引</h3><h3 id="5-8-key-len-索引的长度"><a href="#5-8-key-len-索引的长度" class="headerlink" title="5.8 key_len 索引的长度"></a>5.8 key_len 索引的长度</h3><blockquote>
<p>作用：用于判断复合索引是否被完全使用</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_kl(</span><br><span class="line">	name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test_kl <span class="keyword">add</span> index index_name(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- key_len是60</span></span><br><span class="line"><span class="comment">-- utf8：一个字符占3个字节 （20 * 3）</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_kl <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210911203203152.png" alt="image-20210911203203152"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test_kl <span class="keyword">add</span> <span class="keyword">column</span> name1 <span class="type">char</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test_kl <span class="keyword">add</span> index index_name1(name1);</span><br><span class="line"><span class="comment">-- 如果索引字段可以为Null，则会使用1个字节用于标识，因此下列key_len为61</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_kl <span class="keyword">where</span> name1 <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210911203421345.png" alt="image-20210911203421345"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除索引</span></span><br><span class="line"><span class="keyword">drop</span> index index_name <span class="keyword">on</span> test_kl;</span><br><span class="line"><span class="keyword">drop</span> index index_name1 <span class="keyword">on</span> test_kl;</span><br><span class="line"><span class="comment">-- 增加复合索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test_kl <span class="keyword">add</span> index name_name1_index(name,name1);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- key_len = 121，使用的是name1</span></span><br><span class="line"><span class="comment">-- 复合索引，要用name1，必须先用name，name和name1各自都是60个字节，因为name1可以为空（1个字节标识），索引长度是121</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_kl <span class="keyword">where</span> name1 <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210911203732218.png" alt="image-20210911203732218"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- key_len = 60，使用的是name</span></span><br><span class="line"><span class="comment">-- 查询的是name，20个字符，1个字符占3个字节，且不能为空，所以是60</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_kl <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210911203806591.png" alt="image-20210911203806591"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test_kl <span class="keyword">add</span> <span class="keyword">column</span> name2 <span class="type">varchar</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test_kl <span class="keyword">add</span> index name2_index(name2);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- key_len为63； 20 * 3 + 1（可以为空） + 2（用2个字节标识可变长度） = 63</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_kl <span class="keyword">where</span> name2 <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210911204155821.png" alt="image-20210911204155821"></p>
<blockquote>
<p>总结：</p>
<ul>
<li>utf8：1个字符3个字节</li>
<li>gbk：1个字符2个字节</li>
<li>latin：1个字符1个字节</li>
</ul>
</blockquote>
<h3 id="5-9-ref-表之间的引用"><a href="#5-9-ref-表之间的引用" class="headerlink" title="5.9 ref 表之间的引用"></a>5.9 ref 表之间的引用</h3><blockquote>
<p>注意与type中的ref值进行区分</p>
<p>作用：指明当前表 所参照的字段</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ... <span class="keyword">where</span> a.c <span class="operator">=</span> b.x;(其中b.x可以是常量，const)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- t表 是用的&#x27;tw&#x27;进行比较，是常量，因此是const</span></span><br><span class="line"><span class="comment">-- c表 是用t.tid进行比较，这里是null</span></span><br><span class="line"><span class="comment">-- 分析排查可知，t表中的tid是索引，但是c表中的tid不是索引，因此这里为null（必须要有索引）</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> course c,teacher t <span class="keyword">where</span> c.tid <span class="operator">=</span> t.tid <span class="keyword">and</span> t.tname <span class="operator">=</span> <span class="string">&#x27;tw&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210911204737647.png" alt="image-20210911204737647"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 给course的tid添加索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> course <span class="keyword">add</span> index index_tid(tid);</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> course c,teacher t <span class="keyword">where</span> c.tid <span class="operator">=</span> t.tid <span class="keyword">and</span> t.tname <span class="operator">=</span> <span class="string">&#x27;tw&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210911205104005.png" alt="image-20210911205104005"></p>
<h3 id="5-10-rows-行"><a href="#5-10-rows-行" class="headerlink" title="5.10 rows 行"></a>5.10 rows 行</h3><blockquote>
<p>被索引优化查询的数据个数（实际通过索引查询到的数据个数）</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- t表的个数为2 是因为通过判断条件 可以从t表中查询到2个</span></span><br><span class="line"><span class="comment">-- c表的个数为1 是因为通过判断条件 可以从c表中查询到1个</span></span><br><span class="line"><span class="comment">-- 可以简单的理解为1对多</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> course c,teacher t <span class="keyword">where</span> c.tid <span class="operator">=</span> t.tid <span class="keyword">and</span> t.tname <span class="operator">=</span> <span class="string">&#x27;tz&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210911205348630.png" alt="image-20210911205348630"></p>
<h3 id="5-11-filtered-后续待学习"><a href="#5-11-filtered-后续待学习" class="headerlink" title="5.11 filtered 后续待学习"></a>5.11 filtered 后续待学习</h3><h3 id="5-1-12-Extra-额外信息"><a href="#5-1-12-Extra-额外信息" class="headerlink" title="5.1.12 Extra 额外信息"></a>5.1.12 Extra 额外信息</h3><blockquote>
<ul>
<li>（1）using filesort：性能消耗大；需要“额外”的一次排序（查询）。常见于order by语句</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test02(</span><br><span class="line">	a1 <span class="type">char</span>(<span class="number">3</span>),</span><br><span class="line">	a2 <span class="type">char</span>(<span class="number">3</span>),</span><br><span class="line">	a3 <span class="type">char</span>(<span class="number">3</span>),</span><br><span class="line">	index idx_a1(a1),</span><br><span class="line">	index idx_a2(a2),</span><br><span class="line">	index idx_a3(a3)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Extra 为空 是因为先对a1 进行查询，然后对a1进行排序</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test02 <span class="keyword">where</span> a1 <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> a1;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210911205929408.png" alt="image-20210911205929408"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Extra需要一次额外排序，是因为先对a1进行查询，然后对a2进行排序，所以需要一次额外的排序</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test02 <span class="keyword">where</span> a1 <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> a2;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210911205952225.png" alt="image-20210911205952225"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除单索引</span></span><br><span class="line"><span class="keyword">drop</span> index idx_a1 <span class="keyword">on</span> test02;</span><br><span class="line"><span class="keyword">drop</span> index idx_a2 <span class="keyword">on</span> test02;</span><br><span class="line"><span class="keyword">drop</span> index idx_a3 <span class="keyword">on</span> test02;</span><br><span class="line"><span class="comment">-- 复合索引，不能跨列（最佳左排序）</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test02 <span class="keyword">add</span> index idx_a1_a2_a3(a1,a2,a3);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 复合索引，列序为a1,a2,a3；但是查询的时候没有用到a2，直接用到a3，跨列使用，因此会出现Using filesort</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test02 <span class="keyword">where</span> a2 <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> a3;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210911210511515.png" alt="image-20210911210511515"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test02 <span class="keyword">where</span> a2 <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> a3;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210911210644783.png" alt="image-20210911210644783"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test02 <span class="keyword">where</span> a1 <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> a2;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210911210721678.png" alt="image-20210911210721678"></p>
<blockquote>
<p>总结：</p>
<ul>
<li>对于单索引，如果排序和查找是同一个字段，则不会出现 Using filesort；如果排序和查找不是同一个字段，则需要额外一次排序。避免 ：where 哪些字段，就order by哪些字段</li>
<li><p>复合索引，要按照复合索引的顺序使用，不要跨列或无序使用</p>
</li>
<li><p>（2）using temporary：性能损耗大，用到了临时表。一般出现在group by 语句中；已经有表了，但不适用，必须再来一张表（需要额外使用一张表）。</p>
</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查a1,用a1，但根据a2进行分组，就会出现临时表</span></span><br><span class="line"><span class="comment">-- 避免：查询哪些列，就根据哪些列 group by</span></span><br><span class="line">explain <span class="keyword">select</span> a1 <span class="keyword">from</span> test02 <span class="keyword">where</span> a1 <span class="keyword">in</span> (<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>) <span class="keyword">group</span> <span class="keyword">by</span> a2;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912171932075.png" alt="image-20210912171932075"></p>
<blockquote>
<ul>
<li><p>（3）using index：性能提升；是指索引覆盖（覆盖索引）。</p>
<p>原因：不读取原文件，只从索引文件中获取数据（不需要回表查询）。只要使用到的列全部都在索引中，就是索引覆盖。</p>
</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 例如，test02表中有一个复合索引（a1,a2,a3）</span></span><br><span class="line">explain <span class="keyword">select</span> a1,a2 <span class="keyword">from</span> test02 <span class="keyword">where</span> a1<span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> a2 <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912172936319.png" alt="image-20210912172936319"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除复合索引</span></span><br><span class="line"><span class="keyword">drop</span> index idx_a1_a2_a3 <span class="keyword">on</span> test02;</span><br><span class="line"><span class="comment">-- 增加索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test02 <span class="keyword">add</span> index idx_a1_a2(a1,a2);</span><br><span class="line"><span class="comment">-- a1,a2无法覆盖a1和a3</span></span><br><span class="line">explain <span class="keyword">select</span> a1,a3 <span class="keyword">from</span> test02 <span class="keyword">where</span> a1<span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> a3 <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912173205652.png" alt="image-20210912173205652"></p>
<blockquote>
<p>using index时，会对possible_keys和key造成影响：</p>
<ul>
<li><p>如果没有where，则索引只出现在key中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> a1,a2 <span class="keyword">from</span> test02 ;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912173417760.png" alt="image-20210912173417760"></p>
</li>
<li><p>如果有where，则索引出现在key和possible_key中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> a1,a2 <span class="keyword">from</span> test02 <span class="keyword">where</span> a1<span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> a2 <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912173450391.png" alt="image-20210912173450391"></p>
</li>
</ul>
<ul>
<li><p>（4）using where：需要回表查询</p>
<p>假设age是索引列，但查询语句 select age,name from … where age = ….;此语句中必须回原表查Name，因此会显示using where。</p>
</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> a1,a3 <span class="keyword">from</span> test02 <span class="keyword">where</span> a3 <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912173752224.png" alt="image-20210912173752224"></p>
<blockquote>
<ul>
<li>（5）impossible where：where子句永远为false</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test02 <span class="keyword">where</span> a1<span class="operator">=</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">and</span> a1<span class="operator">=</span> <span class="string">&#x27;y&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912173926085.png" alt="image-20210912173926085"></p>
<h2 id="6、SQL优化举例"><a href="#6、SQL优化举例" class="headerlink" title="6、SQL优化举例"></a>6、SQL优化举例</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test03(</span><br><span class="line">	a1 <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">NULL</span>,</span><br><span class="line">	a2 <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">NULL</span>,</span><br><span class="line">	a3 <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">NULL</span>,</span><br><span class="line">	a4 <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test03 <span class="keyword">add</span> index idx_a1_a2_a3_a3(a1,a2,a3,a4);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 推荐写法，索引的使用顺序（where后面的顺序）和复合索引的顺序一致</span></span><br><span class="line">explain <span class="keyword">select</span> a1,a2,a3,a4 <span class="keyword">from</span> test03 <span class="keyword">where</span> a1<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> a2<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> a3<span class="operator">=</span><span class="number">3</span> <span class="keyword">and</span> a4 <span class="operator">=</span><span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 如果where后面的进行倒序，其结果一致</span></span><br><span class="line"><span class="comment">-- 原因：虽然编写的顺序和索引的顺序不一致，但是sql在真正执行前，经过了SQL优化器的调整，也就与上面一致</span></span><br><span class="line">explain <span class="keyword">select</span> a1,a2,a3,a4 <span class="keyword">from</span> test03 <span class="keyword">where</span> a4<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> a3<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> a2<span class="operator">=</span><span class="number">3</span> <span class="keyword">and</span> a1 <span class="operator">=</span><span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以上两个sql使用了全部的复合索引，因此key_len为16</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912174431453.png" alt="image-20210912174431453"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> a1,a2,a3,a4 <span class="keyword">from</span> test03 <span class="keyword">where</span> a1<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> a2<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> a4<span class="operator">=</span><span class="number">3</span> <span class="keyword">order</span> <span class="keyword">by</span> a3;</span><br><span class="line"><span class="comment">-- 解释：</span></span><br><span class="line"><span class="comment">-- using index：不用回表查询，因为索引用到了a1和a2，因此不用回表，跨列导致a4索引失效，因此其key_len为8</span></span><br><span class="line"><span class="comment">-- using where：需要回表查询，查询a4的时候，其a4是无效索引，所以需要回表查询</span></span><br><span class="line"><span class="comment">-- 其索引使用情况可以通过key_len进行校验，因为长度为8</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912174951462.png" alt="image-20210912174951462"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> a1,a2,a3,a4 <span class="keyword">from</span> test03 <span class="keyword">where</span> a1<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> a4<span class="operator">=</span><span class="number">3</span> <span class="keyword">order</span> <span class="keyword">by</span> a3;</span><br><span class="line"><span class="comment">-- 以上SQL出现了using filesort（文件内排序，多了一次额外的查找/排序）：不要跨列使用（where 和 order by 拼起来，不要跨列使用）</span></span><br><span class="line"><span class="comment">-- 以上a1用到索引，a4失效，因此 where 和order by 为a1和a3，a3也跨列了，所以出现using filesort</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912175424004.png" alt="image-20210912175424004"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> a1,a2,a3,a4 <span class="keyword">from</span> test03 <span class="keyword">where</span> a1<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> a4<span class="operator">=</span><span class="number">3</span> <span class="keyword">order</span> <span class="keyword">by</span> a2,a3;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912175850207.png" alt="image-20210912175850207"></p>
<blockquote>
<p>总结：</p>
<ul>
<li>如果（a,b,c,d）复合索引 和 使用的顺序全部一致（且不跨列使用），则复合索引全部使用。如果部分一致，则使用部分索引</li>
<li>where 和 order by拼起来，不要跨列</li>
</ul>
</blockquote>
<h3 id="6-1-单表优化"><a href="#6-1-单表优化" class="headerlink" title="6.1 单表优化"></a>6.1 单表优化</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> book(</span><br><span class="line">	bid <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">primary</span> key,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">	authorid <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">	publicid <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">	typeid <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;tjava&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;tc&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;wx&#x27;</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;math&#x27;</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询authorid = 1 且typeid 为2 或者3的bid</span></span><br><span class="line">explain <span class="keyword">select</span> bid <span class="keyword">from</span> book <span class="keyword">where</span> typeid <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">and</span> authorid <span class="operator">=</span> <span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> typeid <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912180736698.png" alt="image-20210912180736698"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 优化1：加索引，优化后，type由all升级到index了</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">add</span> index idx_bta(bid,typeid,authorid);</span><br><span class="line">explain <span class="keyword">select</span> bid <span class="keyword">from</span> book <span class="keyword">where</span> typeid <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">and</span> authorid <span class="operator">=</span> <span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> typeid <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912214849891.png" alt="image-20210912214849891"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 根据SQL实际解析的顺序，调整索引的顺序</span></span><br><span class="line"><span class="comment">-- from ... on .... join ... where ... group by ... having ... select distinct ... order by ... limit ...</span></span><br><span class="line"><span class="comment">-- 索引一旦进行升级优化，需要将之前废弃的索引删掉，防止干扰</span></span><br><span class="line"><span class="comment">-- 虽然可以回表查询bid，但是将bid放到索引中，可以提升使用using index</span></span><br><span class="line"><span class="keyword">drop</span> index idx_bta <span class="keyword">on</span> book;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">add</span> index idx_bta(typeid,authorid,bid);</span><br><span class="line"><span class="comment">-- 没有using filesort，因为不需要再额外排序</span></span><br><span class="line"><span class="comment">-- 这里type为range，是因为复合索引全部都使用到，特殊时候，in可能会失效，从而导致后面的索引都失效</span></span><br><span class="line">explain <span class="keyword">select</span> bid <span class="keyword">from</span> book <span class="keyword">where</span> typeid <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">and</span> authorid <span class="operator">=</span> <span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> typeid <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912220330220.png" alt="image-20210912220330220"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 再次优化</span></span><br><span class="line"><span class="comment">-- 思路：因为范围查询in有时会失效，因此交换索引的顺序，将typeid in (2,3)放到最后</span></span><br><span class="line"><span class="keyword">drop</span> index idx_tab <span class="keyword">on</span> book;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">add</span> index idx_atb(authorid,typeid,bid);</span><br><span class="line">explain <span class="keyword">select</span> bid <span class="keyword">from</span> book <span class="keyword">where</span> authorid <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> typeid <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">order</span> <span class="keyword">by</span> typeid <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912221435659.png" alt="image-20210912221435659"></p>
<blockquote>
<p>小结：</p>
<ul>
<li>索引不能跨列使用（最佳左前缀），保持索引的定义和使用的顺序一致性</li>
<li>索引需要逐步优化</li>
<li>将含In的范围查询放到where条件的最后，防止失效</li>
</ul>
<p>本例中同时出现了Using where（需要回原表）；Using index （不需要回原表）：原因，where authorid = 1 and typeid in (2,3)中authorid在索引（authorid,typeid,bid）中，因此不需要回原表（直接在索引表中查到），而typeid虽然也在索引（authorid,typeid,bid）中，但是含in的范围查询已经使typeid索引失效，因此相当于没有typeid这个索引，所以需要回原表</p>
<p>证明：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将in修改为=；没有了in，则不会出现using where</span></span><br><span class="line">explain <span class="keyword">select</span> bid <span class="keyword">from</span> book <span class="keyword">where</span> authorid <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> typeid <span class="operator">=</span><span class="number">3</span> <span class="keyword">order</span> <span class="keyword">by</span> typeid <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912222134900.png" alt="image-20210912222134900"></p>
</blockquote>
<h3 id="6-2-双表优化"><a href="#6-2-双表优化" class="headerlink" title="6.2 双表优化"></a>6.2 双表优化</h3><p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912222742412.png" alt="image-20210912222742412"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher2(</span><br><span class="line">	tid <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">primary</span> key,</span><br><span class="line">	cid <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher2 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher2 <span class="keyword">values</span>(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher2 <span class="keyword">values</span>(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course2(</span><br><span class="line">	cid <span class="type">int</span>(<span class="number">4</span>),</span><br><span class="line">	cname <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course2 <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;java&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course2 <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;python&#x27;</span>);</span><br><span class="line"><span class="comment">-- 左连接</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> teacher2 t <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> course2 c <span class="keyword">on</span> t.cid <span class="operator">=</span> c.cid <span class="keyword">where</span> c.cname <span class="operator">=</span> <span class="string">&#x27;java&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912223110073.png" alt="image-20210912223110073"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 索引该往那张表加？- 小表驱动大表 -索引建立在经常使用的字段上（本题t.cid=c.cid可知，t.cid字段使用频繁，因此给该字段添加索引）【一般情况对于左外连接，给左表加索引；右外连接，给右表加索引】</span></span><br><span class="line"><span class="comment">-- 结论 where 小表.x = 大表.x;</span></span><br><span class="line"><span class="comment">-- 当编写.. on t.cid = c.cid 时，将数据量小的表 放左边（假设此时t表数据量小）</span></span><br><span class="line"><span class="comment">-- Using join buffer:Extra的一个选项，作用:MySQL引擎使用了链接缓存，底层优化了我们的SQL语句</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> teacher2 t <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> course2 c <span class="keyword">on</span> t.cid <span class="operator">=</span> c.cid <span class="keyword">where</span> c.cname <span class="operator">=</span> <span class="string">&#x27;java&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912225656949.png" alt="image-20210912225656949"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher2 <span class="keyword">add</span> index index_teacher2_cid(cid);</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> teacher2 t <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> course2 c <span class="keyword">on</span> t.cid <span class="operator">=</span> c.cid <span class="keyword">where</span> c.cname <span class="operator">=</span> <span class="string">&#x27;java&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210912225814596.png" alt="image-20210912225814596"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> course2 <span class="keyword">add</span> index index_course2_cname(cname);</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> teacher2 t <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> course2 c <span class="keyword">on</span> t.cid <span class="operator">=</span> c.cid <span class="keyword">where</span> c.cname <span class="operator">=</span> <span class="string">&#x27;java&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210913223141084.png" alt="image-20210913223141084"></p>
<h3 id="6-3-三表优化"><a href="#6-3-三表优化" class="headerlink" title="6.3 三表优化"></a>6.3 三表优化</h3><blockquote>
<ul>
<li>小表驱动大表</li>
<li>索引建立在经常查询的字段上</li>
</ul>
</blockquote>
<h2 id="7、避免索引失效的一些原则"><a href="#7、避免索引失效的一些原则" class="headerlink" title="7、避免索引失效的一些原则"></a>7、避免索引失效的一些原则</h2><blockquote>
<ul>
<li><p>复合索引，不要跨列或无序使用（最佳左前缀）</p>
</li>
<li><p>复合索引，尽量使用全索引匹配（a,b,c，尽量全部使用）</p>
</li>
<li><p>不要在索引上进行任何操作（计算、函数、类型转换），否则索引失效</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">where</span> A.x <span class="operator">=</span> ... ; <span class="comment">-- 假设A.x是索引</span></span><br><span class="line"><span class="comment">-- 不要：select ... where A.x * 3 = ...;</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> book <span class="keyword">where</span> authorid <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> typeid <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210913223844468.png" alt="image-20210913223844468"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 上一个为8，这一个索引长度为4，因为后面进行了计算，导致typeid索引失效</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> book <span class="keyword">where</span> authorid <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> typeid <span class="operator">*</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210913223922050.png" alt="image-20210913223922050"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 索引都失效，长度为0</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> book <span class="keyword">where</span> authorid <span class="operator">*</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> typeid <span class="operator">*</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210913224027531.png" alt="image-20210913224027531"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 用到了0个索引</span></span><br><span class="line"><span class="comment">-- 原因：对于复合索引，如果左边失效，右侧全部失效。(a,b,c)，例如如果b失效，则b,c同时失效</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> book <span class="keyword">where</span> authorid <span class="operator">*</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> typeid <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210913224126165.png" alt="image-20210913224126165"></p>
</li>
<li><p>索引不能使用不等于（!= 、&lt;&gt;）或 is null (is not null)，否则自身会失效</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> index idx_atb <span class="keyword">on</span> book;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">add</span> index idx_authorid(authorid);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">add</span> index idx_typeid(typeid);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SQL优化，是一种概率层面的优化。至于是否实际使用了我们的优化，需要通过explain进行预测。</span></span><br><span class="line"><span class="comment">-- 比如下列explain + SQL，和我们认为的一样，预测的索引是authorid和typeid，但实际使用的只是authorid</span></span><br><span class="line"><span class="comment">-- 因此长度为4</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> book <span class="keyword">where</span> authorid <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> typeid <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210913224955417.png" alt="image-20210913224955417"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用 != ,authorid索引失效</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> book <span class="keyword">where</span> authorid <span class="operator">!=</span> <span class="number">1</span> <span class="keyword">and</span> typeid <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210913225051078-16315446524951.png" alt="image-20210913225051078"></p>
</li>
<li><p>补救：尽量使用索引覆盖（usintg index）;</p>
</li>
<li><p>like尽量以“常量开头”，不要以’%’开头，否则索引失效</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> xx <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%x%&#x27;</span>; <span class="comment">--name索引失效</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> teacher <span class="keyword">where</span> tname <span class="keyword">like</span> <span class="string">&#x27;%x%&#x27;</span>;<span class="comment">-- tname索引失效</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210913230324063.png" alt="image-20210913230324063"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> teacher <span class="keyword">where</span> tname <span class="keyword">like</span> <span class="string">&#x27;x%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210913230406454.png" alt="image-20210913230406454"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 如果必须使用like &#x27;%x%&#x27;进行模糊查询，可是使用索引覆盖挽救一部分</span></span><br><span class="line">explain <span class="keyword">select</span> tname <span class="keyword">from</span> teacher <span class="keyword">where</span> tname <span class="keyword">like</span> <span class="string">&#x27;%x%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210913230445023.png" alt="image-20210913230445023"></p>
</li>
<li><p>尽量不要使用类型转换（显示、隐式），否则索引失效</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- tname是一个字符串，这里用数字进行条件判断，要进行转换，导致索引失效</span></span><br><span class="line"><span class="comment">-- 程序底层将 123 -&gt;&#x27;123&#x27;</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> teacher <span class="keyword">where</span> tname <span class="operator">=</span> <span class="number">123</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210913230658181.png" alt="image-20210913230658181"></p>
</li>
<li><p>尽量不要使用or，否则索引失效</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将or左侧的tname失效</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> teacher <span class="keyword">where</span> tname <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> tcid <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210913230851365.png" alt="image-20210913230851365"></p>
</li>
</ul>
</blockquote>
<h2 id="8、一些其他的优化方法"><a href="#8、一些其他的优化方法" class="headerlink" title="8、一些其他的优化方法"></a>8、一些其他的优化方法</h2><blockquote>
<p>（1）exist 和in</p>
<ul>
<li><p>exist语法：将主查询的结果，放到子查询中进行条件校验（<strong>看子查询是否有数据，如果有数据，则校验成功</strong>），如果符合校验，则保留数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> tname <span class="keyword">from</span> teacher <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> teacher);</span><br><span class="line"><span class="comment">-- 如果select * from teacher有数据，等价于下面的</span></span><br><span class="line"><span class="keyword">select</span> tname <span class="keyword">from</span> teacher</span><br></pre></td></tr></table></figure>
</li>
<li><p>in：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> tid <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> A <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> B);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> exist<span class="operator">/</span><span class="keyword">in</span> (子查询);</span><br></pre></td></tr></table></figure>
<p>如果主查询的数据集大，则使用in，效率高</p>
<p>如果子查询的数据集大，则使用exist，效率高</p>
<p>（2）order by 优化</p>
<p>​    using filesort有两种算法：双路排序、单路排序（根据IO的次数）</p>
<p>​    MySQL4.1之前，默认使用双路排序；双路：扫描2次磁盘（第一次扫描排序字段，对排序字段进行排序（在buffer中进行的排序）。第二次扫描其他字段） — IO比较消耗性能，因此后续采用单路排序</p>
<p>​    MySQL4.1之后，默认使用单路排序：只读取一次（全部字段），在buffer中进行排序，但该单路排序，会有一定的隐患（不一定真的是“单路|一次IO”，有可能多次IO）— 若数据量过大，则无法将所有字段的数据一次性读取完毕，因此会进行“分片读取，多次读取”。</p>
<p><strong>注意：</strong>单路排序比双路排序会占用更多的buffer。单路排序在使用时，如果数据大，可以考虑调大Buffer的容量大小：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> max_length_for_sort_data <span class="operator">=</span> <span class="number">1024</span>; <span class="comment">-- 单位byte</span></span><br></pre></td></tr></table></figure>
<p>如果max_length_for_sort_data 值太低（太低：需要排序的列的总大小超过了max_length_for_sort_data定义的字节数），则MySQL会自动从 单路-&gt;双路。</p>
<p><strong>提高order by查询的策略：</strong></p>
<ul>
<li>选择使用单路、双路，调整buffer的容量大小</li>
<li>避免使用select  * ……</li>
<li>复合索引，不要跨列使用，避免using filesort</li>
<li>保证全部的排序字段，排序的一致性（都是升序或降序）</li>
</ul>
</blockquote>
<h2 id="9、SQL排查—慢查询日志"><a href="#9、SQL排查—慢查询日志" class="headerlink" title="9、SQL排查—慢查询日志"></a>9、SQL排查—慢查询日志</h2><blockquote>
<p>MySQL提供的一种日志记录，用于记录MySQL提供的一种日志记录，用于记录MySQL中响应时间超过阈值的SQL语句（long_query_time，默认10秒），慢查询日志默认是关闭的；建议：开发调优时打开，最终部署时关闭。</p>
<ul>
<li><p>检查是否开启了慢查询日志：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%slow_query_log%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210913233526784.png" alt="image-20210913233526784"></p>
</li>
<li><p>临时开启</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log  <span class="operator">=</span> <span class="number">1</span>;<span class="comment">--在内存中开启</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%slow_query_log%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210913233636910.png" alt="image-20210913233636910"></p>
</li>
<li><p>临时设置阈值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%long_query_time%&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> long_query_time <span class="operator">=</span> <span class="number">5</span>; <span class="comment">-- 设置完毕后，重启登录生效（不需要重启服务）</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210913234248123.png" alt="image-20210913234248123"></p>
</li>
<li><p>永久开启：Windows下在mysql安装目录的my.ini中添加修改</p>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210913234428869.png" alt="image-20210913234428869"></p>
</li>
</ul>
</blockquote>
<h2 id="10、模拟分析海量数据"><a href="#10、模拟分析海量数据" class="headerlink" title="10、模拟分析海量数据"></a>10、模拟分析海量数据</h2><h3 id="10-1-模拟海量数据"><a href="#10-1-模拟海量数据" class="headerlink" title="10.1 模拟海量数据"></a>10.1 模拟海量数据</h3><blockquote>
<p>存储过程（无return）/存储函数（有return）</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database testdata;</span><br><span class="line">use testdata;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">	dno <span class="type">int</span>(<span class="number">5</span>) <span class="keyword">primary</span> key <span class="keyword">default</span> <span class="number">0</span>,</span><br><span class="line">	dname <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">	loc <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">)engine <span class="operator">=</span> innodb <span class="keyword">default</span> charset <span class="operator">=</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">	eid <span class="type">int</span>(<span class="number">5</span>) <span class="keyword">primary</span> key,</span><br><span class="line">	ename <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">	job <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">	deptno <span class="type">int</span>(<span class="number">5</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span></span><br><span class="line">)engine <span class="operator">=</span> innodb <span class="keyword">default</span> charset <span class="operator">=</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过存储函数 插入海量数据：</span></span><br><span class="line"><span class="comment">-- 创建存储函数：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- randstring(6) -&gt;aXiayx 用于模拟员工名称</span></span><br><span class="line">delimiter $</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_bin_trust_function_creators<span class="operator">=</span><span class="literal">TRUE</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> randstring(n <span class="type">int</span>) <span class="keyword">returns</span> <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">declare</span> all_str <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">default</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line">	<span class="keyword">declare</span> return_str <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	<span class="keyword">declare</span> i <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">	while i <span class="operator">&lt;</span> n</span><br><span class="line">	DO</span><br><span class="line">		<span class="keyword">set</span> return_str <span class="operator">=</span> concat(return_str,<span class="built_in">substring</span>(all_str,<span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">52</span>)<span class="operator">+</span><span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">		<span class="keyword">set</span> i <span class="operator">=</span> i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">	<span class="keyword">end</span> while;</span><br><span class="line">	<span class="keyword">return</span> return_str;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 产生随机整数</span></span><br><span class="line">delimiter $ <span class="comment">--指定程序结尾为$</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_bin_trust_function_creators<span class="operator">=</span><span class="literal">TRUE</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> ran_num() <span class="keyword">returns</span> <span class="type">int</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">declare</span> i <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">set</span> i <span class="operator">=</span> <span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">100</span>);</span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过存储过程插入海量数据：emp表中</span></span><br><span class="line"><span class="comment">-- 关闭自动提交 set autocommit = 0; </span></span><br><span class="line">delimiter $ <span class="comment">--指定程序结尾为$</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_bin_trust_function_creators<span class="operator">=</span><span class="literal">TRUE</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> insert_emp(<span class="keyword">in</span> eid_start <span class="type">int</span>(<span class="number">10</span>), <span class="keyword">in</span> data_times <span class="type">int</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">declare</span> i <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">	repeat </span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(eid_start <span class="operator">+</span> i,randstring(<span class="number">5</span>),<span class="string">&#x27;other&#x27;</span>,ran_num());</span><br><span class="line">		<span class="keyword">set</span> i <span class="operator">=</span> i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">		until	i <span class="operator">=</span> data_times</span><br><span class="line">	<span class="keyword">end</span> repeat;</span><br><span class="line">	<span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过存储过程插入海量数据：dept表中</span></span><br><span class="line">delimiter $ <span class="comment">--指定程序结尾为$</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_bin_trust_function_creators<span class="operator">=</span><span class="literal">TRUE</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> insert_dept(<span class="keyword">in</span> dno_start <span class="type">int</span>(<span class="number">10</span>), <span class="keyword">in</span> data_times <span class="type">int</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">declare</span> i <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">	repeat </span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span>(dno_start<span class="operator">+</span>i,randstring(<span class="number">6</span>),randstring(<span class="number">8</span>));</span><br><span class="line">		<span class="keyword">set</span> i <span class="operator">=</span> i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">		until i <span class="operator">=</span> data_times</span><br><span class="line">	<span class="keyword">end</span> repeat;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">end</span> $</span><br></pre></td></tr></table></figure>
<blockquote>
<p>插入数据</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> insert_emp(<span class="number">1000</span>,<span class="number">800000</span>);</span><br><span class="line"><span class="keyword">call</span> insert_dept(<span class="number">10</span>,<span class="number">30</span>);</span><br></pre></td></tr></table></figure>
<h3 id="10-2-分析海量数据"><a href="#10-2-分析海量数据" class="headerlink" title="10.2 分析海量数据"></a>10.2 分析海量数据</h3><blockquote>
<p>（1）profiles;</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> profiles; <span class="comment">-- 默认关闭</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%profiling%&#x27;</span>; <span class="comment">-- 查看profiling的状态</span></span><br><span class="line"><span class="keyword">set</span> profiling <span class="operator">=</span> <span class="keyword">on</span>; <span class="comment">-- 打开</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">show</span> profiles; <span class="comment">-- 会记录所有profiling打开之后的 全部SQL查询语句所花费的时间;缺点：不够精确，只能看到总共消费的时间，不能看到各个硬件消费的时间（cpu  io）</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210922234814134.png" alt="image-20210922234814134"></p>
<blockquote>
<p>（2）-精确分析：sql诊断</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> profile <span class="keyword">all</span> <span class="keyword">for</span> query <span class="number">91</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210922234845173.png" alt="image-20210922234845173"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> profile cpu,block io <span class="keyword">for</span> query <span class="number">91</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210922235001910.png" alt="image-20210922235001910"></p>
<blockquote>
<p>（3）全局查询日志：记录开启之后的全部SQL语句（这次全局的记录操作，仅仅在调优、开发过程中打开即可，在最终的部署实施时一定要关闭）。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%general_log%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210922235353256.png" alt="image-20210922235353256"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log <span class="operator">=</span> <span class="number">1</span>; <span class="comment">--开启全局日志</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_output <span class="operator">=</span> <span class="string">&#x27;table&#x27;</span>;<span class="comment">-- 记录到表中，开启后，会记录所有SQL：会被记录mysql.general_log表中</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%general_log%&#x27;</span>; </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.general_log;<span class="comment">-- 发现 argument全是一堆Blob</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210923000224975.png" alt="image-20210923000224975"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> mysql.general_log modify <span class="keyword">column</span> argument mediumtext <span class="keyword">not</span> <span class="keyword">null</span>; <span class="comment">-- 修改argument的类型</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.general_log;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BSQL%E4%BC%98%E5%8C%96/image-20210923000946671.png" alt="image-20210923000946671"></p>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库学习（三）之锁机制</title>
    <url>/2021/09/25/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E9%94%81%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="一、锁机制"><a href="#一、锁机制" class="headerlink" title="一、锁机制"></a>一、锁机制</h1><blockquote>
<p>解决因资源共享，而造成的并发问题</p>
<p>示例：买最后一件衣服X</p>
<p>A：        看见X            买了X</p>
<p>B：        看见X            买了X</p>
<p>解决方法：</p>
<p>A：        看见X        买：X加锁-&gt;试衣服、下单、付款、打包-&gt;X解锁</p>
<p>B：        看见X        买：发现X已被解锁，等待X解锁，解锁完毕，X已售空</p>
</blockquote>
<h2 id="1、分类"><a href="#1、分类" class="headerlink" title="1、分类"></a>1、分类</h2><h3 id="1-1-操作类型"><a href="#1-1-操作类型" class="headerlink" title="1.1 操作类型"></a>1.1 操作类型</h3><blockquote>
<ul>
<li>读锁（共享锁）：对同一个数据（衣服），多个读操作可以同时进行，互不干扰</li>
<li>写锁（互斥锁）：如果当前写操作没有完毕（买衣服的一系列操作），则无法进行其他的读操作、写操作</li>
</ul>
</blockquote>
<h3 id="1-2-操作范围"><a href="#1-2-操作范围" class="headerlink" title="1.2 操作范围"></a>1.2 操作范围</h3><blockquote>
<ul>
<li><p>表锁：一次性对一张表整体加锁。</p>
<p>如MyISAM存储引擎使用表锁，开销小，加锁快；无死锁；但锁的范围大，容易发生锁冲突，并发度低。</p>
</li>
<li><p>行锁：一次性对一条数据加锁</p>
<p>如InnoDB存储引擎使用行锁，开销大，加锁慢；容易出现死锁；锁的范围较小，不易发生锁冲突，并发度高（很小概率发生高并发问题：脏读、幻读、不可重复读、丢失更新等）</p>
</li>
<li><p>页锁</p>
</li>
</ul>
</blockquote>
<h3 id="1-3-示例"><a href="#1-3-示例" class="headerlink" title="1.3 示例"></a>1.3 示例</h3><blockquote>
<p>表锁：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tablelock(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">)engine myisam;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加表数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tablelock(name) <span class="keyword">values</span>(<span class="string">&#x27;a1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tablelock(name) <span class="keyword">values</span>(<span class="string">&#x27;a2&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tablelock(name) <span class="keyword">values</span>(<span class="string">&#x27;a3&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tablelock(name) <span class="keyword">values</span>(<span class="string">&#x27;a4&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tablelock(name) <span class="keyword">values</span>(<span class="string">&#x27;a5&#x27;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis学习（四）之持久化、缓存雪崩穿透</title>
    <url>/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h2 id="一、Redis-conf详解"><a href="#一、Redis-conf详解" class="headerlink" title="一、Redis.conf详解"></a>一、Redis.conf详解</h2><p>启动的时候，通过配置文件来启动</p>
<blockquote>
<p><strong>单位</strong></p>
<p>配置文件unit单位对大小写不敏感</p>
</blockquote>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1635677546030.png" alt="1635677546030"></p>
<blockquote>
<p><strong>包含</strong></p>
<p>就好比我们学习Spring的Import和include</p>
</blockquote>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1635677743309.png" alt="1635677743309"></p>
<blockquote>
<p><strong>网络</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bind</span> 0.0.0.0 -::1 <span class="comment"># 绑定的ip，设置为0.0.0.0 即没有绑定IP</span></span><br><span class="line">protected-mode no <span class="comment"># 保护模式</span></span><br><span class="line">port 6378 <span class="comment"># 端口设置</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>通用 GENERAL</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">daemonize yes <span class="comment"># 以守护进程的方式运行，默认是no，我们需要自己开启为yes！</span></span><br><span class="line">pidfile /var/run/redis_6379.pid <span class="comment"># 如果以后台的方式运行，我们就需要指定一个pid文件</span></span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line"><span class="comment"># Specify the server verbosity level.</span></span><br><span class="line"><span class="comment"># This can be one of:</span></span><br><span class="line"><span class="comment"># debug (a lot of information, useful for development/testing)</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (moderately verbose, what you want in production probably)</span></span><br><span class="line"><span class="comment"># warning (only very important / critical messages are logged)</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;&quot;</span> <span class="comment"># 日志的文件配置名</span></span><br><span class="line">databases 16 <span class="comment"># 数据库的数量，默认是16个数据库</span></span><br><span class="line">always-show-logo no <span class="comment"># 是否总是显示LOGO</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>快照</strong></p>
</blockquote>
<p>持久化，在规定的时间内，执行了多少次操作，则会持久化到文件<strong>.rdb</strong>、<strong>.aof</strong></p>
<p>Redis是内存数据库，如果没有持久化，那么数据断电即失</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果3600秒内，如果至少有1个key进行了修改，我们及时进行持久化操作</span></span><br><span class="line"><span class="comment"># save 3600 1</span></span><br><span class="line"><span class="comment"># 如果300秒内，如果至少有100个key进行了修改，我们及时进行持久化操作</span></span><br><span class="line"><span class="comment"># save 300 100</span></span><br><span class="line"><span class="comment"># 如果600秒内，如果至少有10000个key进行了修改，我们及时进行持久化操作</span></span><br><span class="line"><span class="comment"># save 60 10000</span></span><br><span class="line">stop-writes-on-bgsave-error no <span class="comment"># 持久化如果出错，是否还需要继续工作！</span></span><br><span class="line">rdbcompression yes <span class="comment"># 是否压缩rdb文件，需要消耗一些cpu资源！</span></span><br><span class="line">rdbchecksum yes <span class="comment"># 在保存rdb文件的时候，进行错误的检查校验！</span></span><br><span class="line">dir ./ <span class="comment"># rdb文件保存的目录！</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>REPLICATION</strong> 复制</p>
<p><strong>SECURITY</strong>安全</p>
</blockquote>
<p>可以设置redis的密码，默认是没有密码的！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6378&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6378&gt; config get requirepass <span class="comment"># 获取redis的密码</span></span><br><span class="line">1) <span class="string">&quot;requirepass&quot;</span></span><br><span class="line">2) <span class="string">&quot;&quot;</span></span><br><span class="line">127.0.0.1:6378&gt; config <span class="built_in">set</span> requirepass <span class="string">&quot;123456&quot;</span> <span class="comment"># 设置redis的密码</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6378&gt; ping <span class="comment"># 退出后，重新在登录，则提示没有权限，如下图</span></span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6378&gt; auth 123456 <span class="comment"># 使用密码进行登录</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6378&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1635678891788.png" alt="1635678891788"></p>
<blockquote>
<p><strong>限制</strong> CLIENTS</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">maxclients 10000 <span class="comment"># 设置能连接上redis的最大客户端的数量</span></span><br><span class="line">maxmemory &lt;bytes&gt; <span class="comment"># redis配置最大的内存容量</span></span><br><span class="line">maxmemory-policy noeviction <span class="comment"># 内存达到上限之后的处理策略</span></span><br><span class="line">	<span class="comment"># 1、volatile-lru：只对设置了过期时间的key进行LRU（默认值） </span></span><br><span class="line">	<span class="comment"># 2、allkeys-lru ： 删除lru算法的key   </span></span><br><span class="line">	<span class="comment"># 3、volatile-random：随机删除即将过期key   </span></span><br><span class="line">	<span class="comment"># 4、allkeys-random：随机删除   </span></span><br><span class="line">	<span class="comment"># 5、volatile-ttl ： 删除即将过期的   </span></span><br><span class="line">	<span class="comment"># 6、noeviction ： 永不过期，返回错误</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>APPEND ONLY MODE</strong> 模式，aof配置</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appendonly no <span class="comment"># 默认是不开启aof模式的，默认是使用rdb方式持久化，在大部分所有的情况下，rdb完全够用！</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span> <span class="comment"># 持久化的文件的名字</span></span><br><span class="line"><span class="comment"># appendfsync always # 每次修改都会sync，消耗性能</span></span><br><span class="line">appendfsync everysec <span class="comment"># 每秒执行一次sync，可能会丢失这1秒的数据</span></span><br><span class="line"><span class="comment"># appendfsync no # 不执行sync，这个时候操作系统自己同步数据，速度最快！</span></span><br></pre></td></tr></table></figure>
<h2 id="二、Redis持久化"><a href="#二、Redis持久化" class="headerlink" title="二、Redis持久化"></a>二、Redis持久化</h2><p>Redis是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以Redis提供了持久化功能！</p>
<h3 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h3><blockquote>
<p>什么是RDB</p>
</blockquote>
<p>在主从复制中，rdb就是备用在从机上面！</p>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1635680113243.png" alt="1635680113243"></p>
<p>在指定的时间间隔内，将内存中的数据集快照写入磁盘，也就是Snapshot快照，它恢复时将快照文件直接读到内存中。</p>
<p>Redis会单独创建（fork）一个子进程来持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，子进程是不进行任何IO操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。<strong>RDB的缺点是最后一次持久化后的数据可能丢失。</strong>我们默认的就是RDB，一般情况下不需要修改这个配置！</p>
<font color="red">rdb保存的文件是dump.rdb</font>

<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1635680402783.png" alt="1635680402783"></p>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1635680543424.png" alt="1635680543424"></p>
<blockquote>
<p>触发机制</p>
</blockquote>
<p>1、save的规则满足的情况下，会触发rdb规则！</p>
<p>​        如：上面设置ide60s内修改了5次key，则会生成rdb文件</p>
<p>2、执行flushall命令，也会触发我们的rdb规则！</p>
<p>​        如：先将目录下的rdb文件删除，执行flushall命令，会生成rdb文件</p>
<p>3、退出redis，也会产生rdb文件！</p>
<p>备份就自动生成一个dump.rdb！</p>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1635681076654.png" alt="1635681076654"></p>
<blockquote>
<p>如何恢复rdb文件！</p>
</blockquote>
<p>1、只需要将rdb文件放在我们redis启动目录就可以，redis启动的时候会自动检查dump.rdb并恢复其中的数据！</p>
<p>2、查看需要存在的位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6378&gt; config get dir</span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;/usr/local/bin&quot;</span> <span class="comment"># 如果在这个目录下存在dump.rdb文件，启动就会自动恢复其中的数据</span></span><br></pre></td></tr></table></figure>
<p><strong>优点：</strong></p>
<p>1、适合大规模的数据恢复！</p>
<p>2、对数据的完整性要求不高！</p>
<p><strong>缺点：</strong></p>
<p>1、需要一定的时间间隔进行操作！如果redis意外宕机，这个最后一次修改的数据就没有！</p>
<p>2、fork进程的时候，会占用一定的内存空间！</p>
<h3 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h3><p>将我们的所有命令都记录下来，恢复的时候就把这个文件全部在执行一遍！</p>
<blockquote>
<p>是什么</p>
</blockquote>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1635682366117.png" alt="1635682366117"></p>
<p>以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只允许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话，就会根据日志文件的内容将写指令从前到后执行一次，以完成数据的恢复工作！</p>
<font color="red">AOF保存的是appendonly.aof文件</font>

<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1635682548853.png" alt="1635682548853"></p>
<p>默认是不开启的，需要手动进行配置！只需将appendonly 修改为yes。</p>
<p>重启，Redis即可生效！</p>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1635682987755.png" alt="1635682987755"></p>
<p>重新连接redis则会报错</p>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1635683050281.png" alt="1635683050281"></p>
<p>如果这个aof文件有错位，这时候redis是启动不成功，我们需要修复这个aof文件，使用如下命令进行修复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-check-aof --fix appendonly.aof  <span class="comment"># 修复aof文件中的错位</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-4-7-centos bin]<span class="comment"># redis-check-aof --fix appendonly.aof </span></span><br><span class="line">0x              a8: Expected prefix <span class="string">&#x27;*&#x27;</span>, got: <span class="string">&#x27;s&#x27;</span></span><br><span class="line">AOF analyzed: size=190, ok_up_to=168, ok_up_to_line=41, diff=22</span><br><span class="line">This will shrink the AOF from 190 bytes, with 22 bytes, to 168 bytes</span><br><span class="line">Continue? [y/N]: y</span><br><span class="line">Successfully truncated AOF</span><br></pre></td></tr></table></figure>
<p>重启Redis即可成功！</p>
<blockquote>
<p>重写规则说明</p>
</blockquote>
<p>aof默认的就是文件的无限追加，文件会越来越大！</p>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1635683444676.png" alt="1635683444676"></p>
<p>如果aof文件大于64M，太大了，父进程会fork一个新的进程来将我们的文件进行重写！</p>
<blockquote>
<p>优缺点</p>
</blockquote>
<p>优点：</p>
<p>1、每一次修改都同步，文件的完整性会更加好！</p>
<p>2、每秒同步一次，可能会丢失一秒的数据</p>
<p>3、从不同步，效率最高！</p>
<p>缺点：</p>
<p>1、相对于数据文件来说，aof远远大于rdb，修复的速度也比rdb慢！</p>
<p>2、aof运行效率也比rdb慢，所以我们Redis默认的配置就是rdb持久化，而不是aof</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>1、RDB持久化方式能够在指定的时间间隔内对数据进行快照存储！</p>
<p>2、AOF持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以Redis协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大！</p>
<p>3、<font color="red">只做缓存，如果你只希望你的数据在服务器运行的时候存在，也可以不使用任何持久化！</font></p>
<p>4、同时开启两种持久化方式</p>
<ul>
<li>在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要更完整。</li>
<li>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢？建议不要，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。</li>
</ul>
<p>5、性能建议</p>
<ul>
<li>因为RDB文件只用作备用，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则！</li>
<li>如果Enable AOF，好处是在最恶劣情况下也指挥丢失不超过2秒数据，启动脚本较简单只load自己的AOF文件即可，代价一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认64M，太小，可以设定到5G以上，默认超过原大小100%大小重写可以改到适当的数值。</li>
<li>如果不Enable AOF，仅靠Master-Slave Replication实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价时如果Master/Slave同时宕机，会丢失十几分钟的数据，启动脚本也要比较两个Master/Slave的RDB文件，载入最新的那个。</li>
</ul>
<h2 id="三、Redis发布订阅"><a href="#三、Redis发布订阅" class="headerlink" title="三、Redis发布订阅"></a>三、Redis发布订阅</h2><p>Redis发布订阅（pub/sub）是一种<strong>消息通信模式</strong>：发送者（pub）发送消息，订阅者（sub）接受消息。</p>
<p>Redis客户端可以订阅任意数量的频道！</p>
<ul>
<li>消息发送者</li>
<li>频道</li>
<li>消息订阅者</li>
</ul>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/20201026084451609.png" alt="在这里插入图片描述"></p>
<p>下图展示消息订阅者与频道之间的关系</p>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/20201026084705250.png" alt="在这里插入图片描述"></p>
<p>当有新消息通过PUBLISH命令发送给频道时，这个消息就会被发送给订阅它的三个客户端</p>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/20201026084717595.png" alt="在这里插入图片描述"></p>
<blockquote>
<p> 常用命令</p>
</blockquote>
<p>这些命令被广泛应用于构建即时通信应用，比如网络聊天室（chatroom）和实时广播、实时提醒等</p>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1635684708812.png" alt="1635684708812"></p>
<blockquote>
<p>测试</p>
</blockquote>
<p>订阅端：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6378&gt; subscribe ldg <span class="comment"># 订阅一个频道 ldg</span></span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;ldg&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 等待读取推送的消息</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span> <span class="comment"># 消息</span></span><br><span class="line">2) <span class="string">&quot;ldg&quot;</span> <span class="comment"># 哪个频道的消息</span></span><br><span class="line">3) <span class="string">&quot;hello,ldg&quot;</span> <span class="comment"># 消息的具体内容</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;ldg&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello,redis&quot;</span></span><br></pre></td></tr></table></figure>
<p>发送端：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6378&gt; publish ldg <span class="string">&quot;hello,ldg&quot;</span> <span class="comment"># 发布者发布消息到频道！</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6378&gt; publish ldg <span class="string">&quot;hello,redis&quot;</span> <span class="comment"># 发布者发布消息到频道！</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原理</p>
</blockquote>
<p>Redis通过PUBLISH、SUBSCRIBE和PSUBSCRIBE等命令实现发布和订阅功能！</p>
<p>通过SUBSCRIBE命令订阅某频道后，redis-server里维护了一个字典，字典的键就是一个个频道！而字典的值则时一个链表，链表中保存了所有订阅这个channel的客户端。SUBSCRIBE命令的关键，就是将客户端添加到给定的channel的订阅链表中。</p>
<p>通过PUBLISH命令向订阅者发送消息，redis-server会使用给定的频道作为键，在它维护的channel字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p>
<p>Pub/Sub从字面上理解就是发布（Publish）与订阅（Subscribe），在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</p>
<p>使用场景：</p>
<ol>
<li>实时消息系统！</li>
<li>实时聊天！（频道当作聊天室，将信息回显给所有人即可）</li>
<li>订阅、关注系统都是可以的！</li>
</ol>
<p>稍微复杂的场景就可以使用消息中间件MQ！</p>
<h2 id="四、主从复制"><a href="#四、主从复制" class="headerlink" title="四、主从复制"></a>四、主从复制</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点（master/leader），后者称为节点（slave/follower）；数据的复制是单向的，只能由主节点到从节点。Master以写为主，Slave以读为主。</p>
</blockquote>
<p>默认情况下，<strong>每台Redis服务器都是主节点</strong>；且一个和主节点可以有多个从节点（或没有从节点），但一个从节点只能有一个主节点。</p>
<p>主从复制的作用主要包括：</p>
<ol>
<li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li>
<li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</li>
<li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</li>
<li>高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</li>
</ol>
<p>一般来说，要将Redis运用于工程项目中，只使用一台Redis是万万不能的，原因如下：</p>
<ol>
<li>从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大</li>
<li>从容量上，单个Redis服务器内存容量有限，就算一台Redis服务器内存容量为256G，也不能将所有内存用作Redis存储内存，一般来说，<strong>单台Redis最大使用内存不应该超过20G。</strong></li>
</ol>
<p>对于<strong>多读少写</strong>的情景，我们可以使用如下结构：</p>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1635686527954.png" alt="1635686527954"></p>
<p>主从复制，读写分析！80%的情况下都是在进行读操作！减缓服务器的压力！架构中经常使用！</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>只配置从库，不用配置主库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6378&gt; info replication <span class="comment"># 查看当前库的信息</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master <span class="comment"># 角色 master</span></span><br><span class="line">connected_slaves:0 <span class="comment"># 没有从机</span></span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:e2404176593a6d49a7dd3121f47b66b02b9b4c4b</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>
<p>1、复制3个配置文件</p>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1635688077917.png" alt="1635688077917"></p>
<p>2、修改复制的3个文件的配置信息，以80为例，其他的类似</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port 6380 <span class="comment"># 修改端口</span></span><br><span class="line">pidfile /var/run/redis_6380.pid <span class="comment"># 修改pid名称</span></span><br><span class="line">logfile <span class="string">&quot;6380.log&quot;</span> <span class="comment"># 修改日志信息名称</span></span><br><span class="line">dbfilename dump6380.rdb <span class="comment"># 修改rdb文件名</span></span><br></pre></td></tr></table></figure>
<p>3、修改完毕后，启动服务，查看Redis进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1635688292754.png" alt="1635688292754"></p>
<h3 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a><strong>一主二从</strong></h3><font color="red">默认情况下，每台Redis服务器都是主节点；</font>我们一般情况下只用配置从机就好了！

认老大！一主（80）而从（81、82）

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6381&gt; slaveof 127.0.0.1 6380 <span class="comment"># slaveof host 6380 找谁当自己的老大</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave <span class="comment"># 当前角色是从机</span></span><br><span class="line">master_host:127.0.0.1 <span class="comment"># 可以看到主机的信息</span></span><br><span class="line">master_port:6380</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:2</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:14</span><br><span class="line">slave_repl_offset:14</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:ff6e5e9671ee0286ef57caa32c51687d410e66f0</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:14</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在主机中查看</span></span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1 <span class="comment"># 多了从机的配置</span></span><br><span class="line">slave0:ip=127.0.0.1,port=6381,state=online,offset=126,lag=1 <span class="comment"># 多了从机的配置</span></span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:ff6e5e9671ee0286ef57caa32c51687d410e66f0</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:126</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:126</span><br></pre></td></tr></table></figure>

如果两个都配置完了，在主机信息中查看就会有两个从机了！

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6381,state=online,offset=420,lag=1</span><br><span class="line">slave1:ip=127.0.0.1,port=6382,state=online,offset=420,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:ff6e5e9671ee0286ef57caa32c51687d410e66f0</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:420</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:420</span><br></pre></td></tr></table></figure>

真实的主从配置应该在配置文件中配置，这样的话就是永久的，这里使用的命令是暂时的

![1635690495025](Redis学习（四）之持久化、缓存雪崩穿透/1635690495025.png)

> 细节

主机可以写，从机不能写只能读！主机中的所有信息和数据，都会自动被从机保存！

主机写！

![1635690608059](Redis学习（四）之持久化、缓存雪崩穿透/1635690608059.png)

从机只能读，不能写！

![1635690592228](Redis学习（四）之持久化、缓存雪崩穿透/1635690592228.png)

测试：主机断开连接，从机依旧连接到主机，但是没有写操作，这时候，如果主机恢复，从机依旧可以直接获取到主机写的信息。

如果是使用命令行，配置的主从，这个时候从机如果重启，则从机会变为主机！只要变为从机，立马就会从主机中获取值！

> 复制原理

Slave启动成功连接到master后会发送一个sync同步命令

Master接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集的命令，在后台进程执行完毕之后，<font color="red">master将传送这个数据文件到slave，并完成一次完全同步。</font>

<ul>
<li>全量复制：Slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li>
<li>增量复制：Master继续将新的所有收集到的修改命令依次传给Slave，完成同步。</li>
</ul>
<p>但是只要是重新连接master，一次完全同步（全量复制）将被自动执行！我们的数据一定可以在从机中看到！</p>
<blockquote>
<p>层层链路</p>
</blockquote>
<p>上一个M连接下一个S，这个时候也能完成主从复制</p>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1635692113451.png" alt="1635692113451"></p>
<blockquote>
<p>如果主机（80）宕机，这个时候能不能自动选择一个从机当主机？可以手动执行！</p>
</blockquote>
<p>如果主机断开了连接，我们可以使用<strong>slaveof no one</strong>让自己变成主机！其他的节点就可以手动连接到最新的这个主节点（手动）！如果这个时候主机（80）恢复，那就要重新连接！</p>
<h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><p>自动选举老大的模式</p>
<blockquote>
<p>概述</p>
</blockquote>
<p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费时费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。Redis从2.8开始正式提供了Sentinel（哨兵）架构来解决这个问题！</p>
<p>哨兵模式能够后台监控主机是否故障，如果故障了，根据投票数自动将从库转换为主库。</p>
<p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是<strong>哨兵通过发送命令，等待Redis服务器相应，从而监控运行的多个Redis实例。</strong></p>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/20200912230015792.png" alt="1635692113451"></p>
<p>这里的哨兵有两个作用：</p>
<ul>
<li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器</li>
<li>当哨兵检测到master宕机，会自动将slave切换成master，然后通过<strong>发布订阅模</strong>式通知其他的从服务器，修改配置文件，让它们切换为主机。</li>
</ul>
<p>然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/20200912230314314.png" alt="1635692113451"></p>
<p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象称为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器切换为主服务器，这个过程称为<strong>客观下线</strong>。</p>
<blockquote>
<p>测试！</p>
</blockquote>
<p>我们目前的状态是一主二从（80主机、81、82从机）</p>
<p>1、配置哨兵配置文件</p>
<p>新建sentinel.conf文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sentinel monitor 被监控的名称 127.0.0.1 6380 1</span></span><br><span class="line">sentinel monitor myredis 127.0.0.1 6380 1</span><br></pre></td></tr></table></figure>
<p>后面的这个数字1，代表1个哨兵认为主机宕机，主机才算真的宕机！</p>
<p>2、启动哨兵</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-4-7-centos bin]<span class="comment"># redis-sentinel redis_config/sentinet.conf  # 启动</span></span><br><span class="line">8745:X 31 Oct 2021 23:25:54.974 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">8745:X 31 Oct 2021 23:25:54.974 <span class="comment"># Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=8745, just started</span></span><br><span class="line">8745:X 31 Oct 2021 23:25:54.974 <span class="comment"># Configuration loaded</span></span><br><span class="line">8745:X 31 Oct 2021 23:25:54.975 * monotonic clock: POSIX clock_gettime</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ <span class="string">&#x27;&#x27;</span>-._                                             </span><br><span class="line">      _.-``    `.  `_.  <span class="string">&#x27;&#x27;</span>-._           Redis 6.2.6 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">&#x27;&#x27;</span>-._                                  </span><br><span class="line"> (    <span class="string">&#x27;      ,       .-`  | `,    )     Running in sentinel mode</span></span><br><span class="line"><span class="string"> |`-._`-...-` __...-.``-._|&#x27;</span>` _.-<span class="string">&#x27;|     Port: 26379</span></span><br><span class="line"><span class="string"> |    `-._   `._    /     _.-&#x27;</span>    |     PID: 8745</span><br><span class="line">  `-._    `-._  `-./  _.-<span class="string">&#x27;    _.-&#x27;</span>                                   </span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>_.-<span class="string">&#x27;|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-&#x27;</span>_.-<span class="string">&#x27;    |           https://redis.io       </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-&#x27;</span>_.-<span class="string">&#x27;    _.-&#x27;</span>                                   </span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>_.-<span class="string">&#x27;|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-&#x27;</span>_.-<span class="string">&#x27;    |                                  </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-&#x27;</span>_.-<span class="string">&#x27;    _.-&#x27;</span>                                   </span><br><span class="line">      `-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>                                       </span><br><span class="line">          `-._        _.-<span class="string">&#x27;                                           </span></span><br><span class="line"><span class="string">              `-.__.-&#x27;</span>                                               </span><br><span class="line"></span><br><span class="line">8745:X 31 Oct 2021 23:25:54.976 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">8745:X 31 Oct 2021 23:25:54.982 <span class="comment"># Sentinel ID is a314f11191e5cf113a352a7cf2a5b77a5328149f</span></span><br><span class="line">8745:X 31 Oct 2021 23:25:54.982 <span class="comment"># +monitor master myredis 127.0.0.1 6380 quorum 1</span></span><br><span class="line">8745:X 31 Oct 2021 23:25:54.982 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6380</span><br><span class="line">8745:X 31 Oct 2021 23:25:54.987 * +slave slave 127.0.0.1:6382 127.0.0.1 6382 @ myredis 127.0.0.1 6380</span><br></pre></td></tr></table></figure>
<p>如果Master节点宕机，这个时候就会从从机中随机选择一个服务器作为主机（这里有一个投票算法！）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis-sentinel redis_config/sentinet.conf 启动后的监控输出</span></span><br><span class="line">8745:X 31 Oct 2021 23:27:56.442 <span class="comment"># +sdown master myredis 127.0.0.1 6380</span></span><br><span class="line">8745:X 31 Oct 2021 23:27:56.442 <span class="comment"># +odown master myredis 127.0.0.1 6380 #quorum 1/1</span></span><br><span class="line">8745:X 31 Oct 2021 23:27:56.442 <span class="comment"># +new-epoch 1</span></span><br><span class="line">8745:X 31 Oct 2021 23:27:56.442 <span class="comment"># +try-failover master myredis 127.0.0.1 6380</span></span><br><span class="line">8745:X 31 Oct 2021 23:27:56.448 <span class="comment"># +vote-for-leader a314f11191e5cf113a352a7cf2a5b77a5328149f 1</span></span><br><span class="line">8745:X 31 Oct 2021 23:27:56.448 <span class="comment"># +elected-leader master myredis 127.0.0.1 6380</span></span><br><span class="line">8745:X 31 Oct 2021 23:27:56.448 <span class="comment"># +failover-state-select-slave master myredis 127.0.0.1 6380</span></span><br><span class="line">8745:X 31 Oct 2021 23:27:56.500 <span class="comment"># +selected-slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6380</span></span><br><span class="line">8745:X 31 Oct 2021 23:27:56.500 * +failover-state-send-slaveof-noone slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6380 <span class="comment"># 故障转移</span></span><br><span class="line">8745:X 31 Oct 2021 23:27:56.583 * +failover-state-wait-promotion slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6380</span><br><span class="line">8745:X 31 Oct 2021 23:27:57.247 <span class="comment"># +promoted-slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6380</span></span><br><span class="line">8745:X 31 Oct 2021 23:27:57.247 <span class="comment"># +failover-state-reconf-slaves master myredis 127.0.0.1 6380</span></span><br><span class="line">8745:X 31 Oct 2021 23:27:57.318 * +slave-reconf-sent slave 127.0.0.1:6382 127.0.0.1 6382 @ myredis 127.0.0.1 6380</span><br><span class="line">8745:X 31 Oct 2021 23:27:58.272 * +slave-reconf-inprog slave 127.0.0.1:6382 127.0.0.1 6382 @ myredis 127.0.0.1 6380</span><br><span class="line">8745:X 31 Oct 2021 23:27:58.272 * +slave-reconf-done slave 127.0.0.1:6382 127.0.0.1 6382 @ myredis 127.0.0.1 6380</span><br><span class="line">8745:X 31 Oct 2021 23:27:58.343 <span class="comment"># +failover-end master myredis 127.0.0.1 6380</span></span><br><span class="line">8745:X 31 Oct 2021 23:27:58.343 <span class="comment"># +switch-master myredis 127.0.0.1 6380 127.0.0.1 6381</span></span><br><span class="line">8745:X 31 Oct 2021 23:27:58.343 * +slave slave 127.0.0.1:6382 127.0.0.1 6382 @ myredis 127.0.0.1 6381</span><br><span class="line">8745:X 31 Oct 2021 23:27:58.343 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6381</span><br><span class="line">8745:X 31 Oct 2021 23:28:28.364 <span class="comment"># +sdown slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6381 # 6380宕机，自动选择6381作为主机</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1635694197476.png" alt="1635694197476"></p>
<p>如果主机（80）此时回来了，只能归并到新的主机下，当作从机，这就是哨兵模式的规则！</p>
<p>81主机信息：由于80（主机）宕机，81自动切换为主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2 <span class="comment"># 80恢复，自动归并到81主机下</span></span><br><span class="line">slave0:ip=127.0.0.1,port=6382,state=online,offset=21509,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=6380,state=online,offset=21509,lag=0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:a08753e9b2aa55c5e743f472050cbfbc2cc3fb89</span><br><span class="line">master_replid2:97cda88fbc38088f30f87455d36ec0dac75dc9f6</span><br><span class="line">master_repl_offset:21509</span><br><span class="line">second_repl_offset:6490</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:21509</span><br></pre></td></tr></table></figure>
<p>80恢复后，自动归并到81主机下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave <span class="comment"># 角色 从机</span></span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6381</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:1</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:21099</span><br><span class="line">slave_repl_offset:21099</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:a08753e9b2aa55c5e743f472050cbfbc2cc3fb89</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:21099</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:19597</span><br><span class="line">repl_backlog_histlen:1503</span><br></pre></td></tr></table></figure>
<p>哨兵的监控日志：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">8745:X 31 Oct 2021 23:31:04.170 <span class="comment"># -sdown slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6381</span></span><br><span class="line">8745:X 31 Oct 2021 23:31:14.137 * +convert-to-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6381</span><br></pre></td></tr></table></figure>
<p>优点：</p>
<p>1、哨兵集群，基于主从复制模式，所有的主从配置优点，它全有</p>
<p>2、主从可以切换，故障可以转移，系统的可用性就会更好</p>
<p>3、哨兵模式就是主从模式的升级i，手动到自动，更加健壮！</p>
<p>缺点：</p>
<p>1、Redis不好实现在线扩容，集群容量一旦到达上限，在线扩容就十分麻烦！</p>
<p>2、实现哨兵模式的配置是很麻烦的，里面有很多的选择！</p>
<blockquote>
<p>哨兵模式的全部配置</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example sentinel.conf</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel实例运行的端口 默认26379</span></span><br><span class="line">port 26379</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel的工作目录</span></span><br><span class="line">dir /tmp</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel监控的redis主节点的 ip port </span></span><br><span class="line"><span class="comment"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。</span></span><br><span class="line"><span class="comment"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span></span><br><span class="line"><span class="comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span></span><br><span class="line"><span class="comment"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span></span><br><span class="line"><span class="comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span></span><br><span class="line"><span class="comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span></span><br><span class="line"><span class="comment"># 这个数字越小，完成failover所需的时间就越长，</span></span><br><span class="line"><span class="comment"># 但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。</span></span><br><span class="line"><span class="comment"># 可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span></span><br><span class="line"><span class="comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span></span><br><span class="line"><span class="comment">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span></span><br><span class="line"><span class="comment">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span></span><br><span class="line"><span class="comment">#3.当想要取消一个正在进行的failover所需要的时间。  </span></span><br><span class="line"><span class="comment">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span></span><br><span class="line"><span class="comment"># 默认三分钟</span></span><br><span class="line"><span class="comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"> </span><br><span class="line"><span class="comment"># SCRIPTS EXECUTION</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span></span><br><span class="line"><span class="comment">#对于脚本的运行结果有以下规则：</span></span><br><span class="line"><span class="comment">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span></span><br><span class="line"><span class="comment">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span></span><br><span class="line"><span class="comment">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span></span><br><span class="line"><span class="comment">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，</span></span><br><span class="line"><span class="comment">#这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，</span></span><br><span class="line"><span class="comment">#一个是事件的类型，</span></span><br><span class="line"><span class="comment">#一个是事件的描述。</span></span><br><span class="line"><span class="comment">#如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span></span><br><span class="line"><span class="comment">#通知脚本</span></span><br><span class="line"><span class="comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">  sentinel notification-script mymaster /var/redis/notify.sh</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 客户端重新配置主节点参数脚本</span></span><br><span class="line"><span class="comment"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span></span><br><span class="line"><span class="comment"># 以下参数将会在调用脚本时传给脚本:</span></span><br><span class="line"><span class="comment"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class="line"><span class="comment"># 目前&lt;state&gt;总是“failover”,</span></span><br><span class="line"><span class="comment"># &lt;role&gt;是“leader”或者“observer”中的一个。 </span></span><br><span class="line"><span class="comment"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span></span><br><span class="line"><span class="comment"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span></span><br><span class="line"><span class="comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span><br></pre></td></tr></table></figure>
<h2 id="五、Redis缓存穿透和雪崩（重点）"><a href="#五、Redis缓存穿透和雪崩（重点）" class="headerlink" title="五、Redis缓存穿透和雪崩（重点）"></a>五、Redis缓存穿透和雪崩（重点）</h2><p>Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面，但同时，它也带来了一些问题。其中，最要害的问题，就是数据一致性问题，从严格意义上讲，这个问题误解，如果对数据的一致性要求很高，那么就不能使用缓存。</p>
<h3 id="缓存穿透（查不到）"><a href="#缓存穿透（查不到）" class="headerlink" title="缓存穿透（查不到）"></a>缓存穿透（查不到）</h3><blockquote>
<p>概念</p>
</blockquote>
<p>用户想要查询一个数据，发现redis内存数据库中没有，也就是缓存没有命中，于是向持久层数据库查询，发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中，于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p>
<p><img src="/2021/10/31/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%A9%BF%E9%80%8F/1636279687055.png" alt="1636279687055"></p>
<blockquote>
<p>解决方案</p>
</blockquote>
<p><strong>布隆过滤器（后续待学习）</strong></p>
<p>布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力。</p>
<p><strong>缓存空对象</strong></p>
<p>当存储层不命中后，即使返回的空对象也将其存储起来，同时会设置一个过期时间，之后在访问这个数据将会从缓存中获取，保护了后端数据源。</p>
<p>但是这种方法会存在两个问题：</p>
<ol>
<li>如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的控制的键。</li>
<li>即使对控制设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</li>
</ol>
<h3 id="缓存击穿（量太大，缓存过期）"><a href="#缓存击穿（量太大，缓存过期）" class="headerlink" title="缓存击穿（量太大，缓存过期）"></a>缓存击穿（量太大，缓存过期）</h3><p>微博服务宕机</p>
<blockquote>
<p>概述</p>
</blockquote>
<p>需要注意和缓存穿透的区别，缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的期间，持续的大并发就会穿破缓存，直接请求到数据库，就像在一个屏障上凿开了一个洞。</p>
<p>当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导致数据库瞬间压力过大。</p>
<blockquote>
<p>解决方案</p>
</blockquote>
<p><strong>设置热点数据永不过期</strong></p>
<p>从缓存层面看，没有设置过期时间，所以不会出现热点key过期后产生的问题。</p>
<p><strong>加互斥锁（待学习）</strong></p>
<p>分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p>
<h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><blockquote>
<p>概念</p>
</blockquote>
<p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。Redis宕机！</p>
<p>产生雪崩的原因之一，比如在写文本的时候，马上要到双十一零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时，那么到了凌晨一点的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p>
<p>其实集中过期，倒不是非常致命，比较致命的是缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。</p>
<p>双十一：停掉一些服务，保证主要的服务可用！</p>
<blockquote>
<p>解决方案</p>
</blockquote>
<p><strong>Redis高可用</strong></p>
<p>既然redis有可能挂掉，可以多增设几台redis，这样一台挂掉之后其他还可以继续工作，也就是搭建集群（异地多活），</p>
<p><strong>限流降级</strong></p>
<p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p>
<p><strong>数据预热</strong></p>
<p>数据预热的含义是在正式部署之前，先把可能的数据预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间尽量均匀。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis学习（一）</title>
    <url>/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="一、基本概述"><a href="#一、基本概述" class="headerlink" title="一、基本概述"></a>一、基本概述</h2><h3 id="1、Redis是什么？"><a href="#1、Redis是什么？" class="headerlink" title="1、Redis是什么？"></a>1、Redis是什么？</h3><blockquote>
<p><strong>Redis(Remote Dictionary Server)</strong>，即远程字典服务！<br>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value的数据库，并提供多种语言的API。</p>
</blockquote>
<h3 id="2、Redis能干嘛？"><a href="#2、Redis能干嘛？" class="headerlink" title="2、Redis能干嘛？"></a>2、Redis能干嘛？</h3><blockquote>
<p>1、内存存储、持久化、内存中是断电即失，所以持久化很重要（rdb、aof）<br>2、效率高，可用于高速缓存<br>3、发布订阅系统<br>4、地图信息分析<br>5、计时器、计数器（浏览量）<br>6、…….</p>
</blockquote>
<h3 id="3、特性"><a href="#3、特性" class="headerlink" title="3、特性"></a>3、特性</h3><blockquote>
<p>1、多样的数据类型<br>2、持久化<br>3、集群<br>4、事务<br>……</p>
</blockquote>
<h2 id="二、Linux下Redis安装"><a href="#二、Linux下Redis安装" class="headerlink" title="二、Linux下Redis安装"></a>二、Linux下Redis安装</h2><blockquote>
<p>Centos系统</p>
</blockquote>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 下载redis</span><br><span class="line">wget https://download.redis.io/releases/redis-<span class="number">6</span>.<span class="number">2</span>.<span class="number">6</span>.tar.gz</span><br><span class="line"># 解压Redis</span><br><span class="line">tar -zxf redis-<span class="number">6</span>.<span class="number">2</span>.<span class="number">6</span>.tar.gz</span><br><span class="line"># 切换到root用户</span><br><span class="line">su</span><br><span class="line"># 输入密码，回车即可</span><br><span class="line"># 将redis安装目录放在/usr/local</span><br><span class="line">mv download/redis-<span class="number">6</span>.<span class="number">2</span>.<span class="number">6</span> /usr/local/</span><br><span class="line"># 基本的环境安装,redis需要gcc环境</span><br><span class="line">yum install gcc-c++</span><br><span class="line"># 编译</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"># redis的默认安装路径 /usr/local/bin</span><br><span class="line"># 创建redis的配置文件夹</span><br><span class="line"><span class="built_in">mkdir</span> redis_config</span><br><span class="line"># 拷贝解压环境下的配置文件至安装目录</span><br><span class="line">cp /usr/local/redis-<span class="number">6</span>.<span class="number">2</span>.<span class="number">6</span>/redis.conf redis_config/</span><br><span class="line"># 编辑redis.conf文件</span><br><span class="line">vim redis.conf</span><br><span class="line"># 在显示内容中 输入/daemonize 查找对应记录 按n查找下一个记录</span><br><span class="line"># 将daemonize 修改为yes，将redis修改为后台启动</span><br><span class="line">daemonize yes</span><br><span class="line"># 点击esc，输入:wq保存</span><br></pre></td></tr></table></figure>
<blockquote>
<p>redis的默认安装路径如下</p>
</blockquote>
<p><img src="/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/img_1.png" alt="img"></p>
<blockquote>
<p>redis.conf文件配置</p>
</blockquote>
<p><img src="/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/img_2.png" alt="img"></p>
<h2 id="三、Redis启动"><a href="#三、Redis启动" class="headerlink" title="三、Redis启动"></a>三、Redis启动</h2><h3 id="3-1-启动"><a href="#3-1-启动" class="headerlink" title="3.1 启动"></a>3.1 启动</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 确保在/usr/loacl/bin目录下</span><br><span class="line"># 开启redis服务</span><br><span class="line">redis-server redis_config/redis.conf </span><br><span class="line"># 客户端连接</span><br><span class="line">redis-cli -p <span class="number">6379</span></span><br><span class="line"># 检测连接是否成功，输入<span class="built_in">ping</span>，输出pong</span><br><span class="line"><span class="built_in">ping</span></span><br><span class="line"># 基本<span class="built_in">set</span>和get使用</span><br><span class="line"><span class="built_in">set</span> name ldg</span><br><span class="line">get name </span><br><span class="line">keys *</span><br></pre></td></tr></table></figure>
<p><img src="/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/img_3.png" alt="img"></p>
<h3 id="3-2-查看redis的进程是否开启"><a href="#3-2-查看redis的进程是否开启" class="headerlink" title="3.2 查看redis的进程是否开启"></a>3.2 查看redis的进程是否开启</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ps -ef |grep redis</span><br></pre></td></tr></table></figure>
<p><img src="/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/img_4.png" alt="img"></p>
<h3 id="3-3-关闭redis"><a href="#3-3-关闭redis" class="headerlink" title="3.3 关闭redis"></a>3.3 关闭redis</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">redis-cli -p <span class="number">6379</span></span><br><span class="line">shutdown</span><br></pre></td></tr></table></figure>
<p><img src="/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/img_5.png" alt="img"></p>
<h2 id="四、测试性能"><a href="#四、测试性能" class="headerlink" title="四、测试性能"></a>四、测试性能</h2><blockquote>
<p>redis-benchmark是一个压力测试工具，官当自带的性能测试工具</p>
</blockquote>
<p><img src="/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/707331-20180201145503750-901697180.png" alt="img"></p>
<p>简单测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试，100个并发链接，100000请求</span></span><br><span class="line"> redis-benchmark -h localhost -p 6379 -c 100 -n 100000</span><br></pre></td></tr></table></figure>
<p>写如下</p>
<p><img src="/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/1635049403794.png" alt="1635049403794"></p>
<p>读如下</p>
<p><img src="/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/1635049429942.png" alt="1635049429942"></p>
<h2 id="五、基础知识"><a href="#五、基础知识" class="headerlink" title="五、基础知识"></a>五、基础知识</h2><blockquote>
<p>redis默认有16个数据库，默认使用的是第0个</p>
</blockquote>
<p><img src="/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/1635049534927.png" alt="1635049534927"></p>
<blockquote>
<p>可以使用select进行切换</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 3 <span class="comment">#切换第3个数据库</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; dbsize <span class="comment"># 查看数据库大小</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>
<p><img src="/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/1635049706121.png" alt="1635049706121"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; keys * <span class="comment">#查看数据库所有的key</span></span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379[3]&gt; flushdb <span class="comment"># 清空当前数据库</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; flushall <span class="comment">#清空所有数据库</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Redis是单线程的！</strong></p>
<p>官方表示，Redis是基于内存操作，CPU不是Redis性能瓶颈，Redis的瓶颈是根据机器的内存和网络带宽决定的，既然可以使用单线程来实现，就使用单线程了！</p>
<p>Redis是C语言写的，官方提供的数据为100000+的QPS，完全不比同样是使用key-value的Memecache差！</p>
<p><strong>Redis为什么单线程还这么快？</strong></p>
<p>1、误区1：高性能的服务器一定是多线程的！</p>
<p>2、误区2：多线程（CPU上下文切换）一定比单线程效率高</p>
<p>CPU  &gt; 内存 &gt;硬盘（速度方面）</p>
<p>核心：Redis是将所有的数据全部存放在内存中，所以使用单线程去操作效率就是最高的，多线程（CPU上下文会切换：耗时的操作），对于内存系统来说，如果没有上下文切换效率就是最高的！多次读写都是在一个CPU上，在内存情况下，这个就是最佳的方案。</p>
</blockquote>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis学习（三）之三大特殊类型</title>
    <url>/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E4%B8%89%E5%A4%A7%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Redis三大特殊数据类型"><a href="#Redis三大特殊数据类型" class="headerlink" title="Redis三大特殊数据类型"></a>Redis三大特殊数据类型</h1><h2 id="1、geospatial"><a href="#1、geospatial" class="headerlink" title="1、geospatial"></a>1、geospatial</h2><blockquote>
<p>地理位置</p>
<p>朋友的定位，附近的人，打车距离计算？</p>
<p>Redis的Geo在Redis3.2版本就已经推出！这个功能可以推算地理位置的信息，两地之间的距离，方圆几里的人！</p>
<p>经纬度查询测试：<a href="https://jingweidu.bmcx.com/">经纬度查询</a></p>
</blockquote>
<p>相关命令</p>
<p><img src="/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E4%B8%89%E5%A4%A7%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B/1635077352968.png" alt="1635077352968"></p>
<h3 id="1-1-geoadd"><a href="#1-1-geoadd" class="headerlink" title="1.1 geoadd"></a>1.1 geoadd</h3><blockquote>
<p>将指定的地理空间位置（纬度、经度、名称）添加到指定的<code>key</code>中。这些数据将会存储到<code>sorted set</code>这样的目的是为了方便使用<a href="http://www.redis.cn/commands/georadius.html">GEORADIUS</a>或者<a href="http://www.redis.cn/commands/georadiusbymember.html">GEORADIUSBYMEMBER</a>命令对数据进行半径查询等操作。</p>
<ul>
<li>有效的经度从-180度到180度。</li>
<li>有效的纬度从-85.05112878度到85.05112878度</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geoadd china:city 116.23 40.22 beijing</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 121.49 31.41 shanghai </span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 113.88 22.55 shenzhen 106.54 29.40 chongqing</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 120.21 30.12 hangzhou 108.93 34.23 xian</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="1-2-geopos"><a href="#1-2-geopos" class="headerlink" title="1.2 geopos"></a>1.2 geopos</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos china:city beijing <span class="comment"># 获取指定的经度和纬度</span></span><br><span class="line">1) 1) <span class="string">&quot;116.23000055551528931&quot;</span></span><br><span class="line">   2) <span class="string">&quot;40.2200010338739844&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geopos china:city beijing chongqing</span><br><span class="line">1) 1) <span class="string">&quot;116.23000055551528931&quot;</span></span><br><span class="line">   2) <span class="string">&quot;40.2200010338739844&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;106.54000014066696167&quot;</span></span><br><span class="line">   2) <span class="string">&quot;29.39999880018641676&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="1-3-geodist"><a href="#1-3-geodist" class="headerlink" title="1.3 geodist"></a>1.3 geodist</h3><blockquote>
<p>返回两个给定位置之间的距离。</p>
<p>如果两个位置之间的其中一个不存在， 那么命令返回空值。</p>
<p>指定单位的参数 unit 必须是以下单位的其中一个：</p>
<ul>
<li><strong>m</strong> 表示单位为米。（默认）</li>
<li><strong>km</strong> 表示单位为千米。</li>
<li><strong>mi</strong> 表示单位为英里。</li>
<li><strong>ft</strong> 表示单位为英尺。</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geodist china:city beijing wuhan</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; geodist china:city beijing shanghai <span class="comment"># 查看北京到上海的直线距离 单位：米</span></span><br><span class="line"><span class="string">&quot;1088162.3001&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geodist china:city beijing chongqing <span class="comment"># 查看北京到重庆的直线距离</span></span><br><span class="line"><span class="string">&quot;1491671.5628&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geodist china:city beijing shanghai km </span><br><span class="line"><span class="string">&quot;1088.1623&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-4-georidus"><a href="#1-4-georidus" class="headerlink" title="1.4 georidus"></a>1.4 georidus</h3><blockquote>
<p>以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。</p>
<p>范围可以使用以下其中一个单位：</p>
<ul>
<li><strong>m</strong> 表示单位为米。</li>
<li><strong>km</strong> 表示单位为千米。</li>
<li><strong>mi</strong> 表示单位为英里。</li>
<li><strong>ft</strong> 表示单位为英尺。</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 1000 km <span class="comment"># 以100，30这个经纬度为中心，寻找方圆1000km内的城市</span></span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">3) <span class="string">&quot;shenzhen&quot;</span></span><br><span class="line">4) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 500 km</span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 500 km withdist <span class="comment"># 显示到中心距离的位置</span></span><br><span class="line">1) 1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">   2) <span class="string">&quot;340.8679&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;xian&quot;</span></span><br><span class="line">   2) <span class="string">&quot;481.1540&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 500 km withcoord <span class="comment"># 显示他人的定位信息</span></span><br><span class="line">1) 1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;106.54000014066696167&quot;</span></span><br><span class="line">      2) <span class="string">&quot;29.39999880018641676&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;xian&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;108.92999857664108276&quot;</span></span><br><span class="line">      2) <span class="string">&quot;34.23000121926852302&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 500 km withcoord count 1 <span class="comment"># 筛选指定的结果</span></span><br><span class="line">1) 1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;106.54000014066696167&quot;</span></span><br><span class="line">      2) <span class="string">&quot;29.39999880018641676&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 500 km withcoord count 2</span><br><span class="line">1) 1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;106.54000014066696167&quot;</span></span><br><span class="line">      2) <span class="string">&quot;29.39999880018641676&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;xian&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;108.92999857664108276&quot;</span></span><br><span class="line">      2) <span class="string">&quot;34.23000121926852302&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-5-georadiusbymember"><a href="#1-5-georadiusbymember" class="headerlink" title="1.5 georadiusbymember"></a>1.5 georadiusbymember</h3><blockquote>
<p>这个命令和 <a href="http://www.redis.cn/commands/georadius.html">GEORADIUS</a> 命令一样， 都可以找出位于指定范围内的元素， 但是 <code>GEORADIUSBYMEMBER</code> 的中心点是由给定的位置元素决定的， 而不是像 <a href="http://www.redis.cn/commands/georadius.html">GEORADIUS</a> 那样， 使用输入的经度和纬度来决定中心点</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找出位于指定元素周围的其他元素</span></span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember china:city beijing 1000 km</span><br><span class="line">1) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember china:city shanghai 400 km</span><br><span class="line">1) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">2) <span class="string">&quot;shanghai&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-6-geohash"><a href="#1-6-geohash" class="headerlink" title="1.6 geohash"></a>1.6 geohash</h3><blockquote>
<p>返回一个或多个位置元素的 <a href="https://en.wikipedia.org/wiki/Geohash">Geohash</a> 表示。</p>
<p>该命令将返回11个字符的Geohash字符串。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将二维的经纬度转换为一维的字符串，如果两个字符串越接近，则距离越近</span></span><br><span class="line">127.0.0.1:6379&gt; geohash china:city beijing chongqing</span><br><span class="line">1) <span class="string">&quot;wx4sucu47r0&quot;</span></span><br><span class="line">2) <span class="string">&quot;wm5z22h53v0&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>GEO底层的实现原理其实就是ZSet！我们可以使用ZSet命令来操作geo！</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange china:city 0 -1 <span class="comment"># 查看地图中的全部元素</span></span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">3) <span class="string">&quot;shenzhen&quot;</span></span><br><span class="line">4) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">5) <span class="string">&quot;shanghai&quot;</span></span><br><span class="line">6) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrem china:city beijing <span class="comment"># 移除指定的元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange china:city 0 -1</span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">3) <span class="string">&quot;shenzhen&quot;</span></span><br><span class="line">4) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">5) <span class="string">&quot;shanghai&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="2、Hyperloglog"><a href="#2、Hyperloglog" class="headerlink" title="2、Hyperloglog"></a>2、Hyperloglog</h2><blockquote>
<p>什么是基数？</p>
</blockquote>
<p>A{1,3,5,7,8,7}</p>
<p>B{1,3,5,7,8}</p>
<p>基数（不重复的元素） = 5，可以接受误差</p>
<blockquote>
<p>简介</p>
</blockquote>
<p>Redis2.8.9版本就更新了Hyperloglog数据结构</p>
<p>Redis Hyperloglog基数统计的算法！</p>
<p>优点：占用的内存是固定的，2^64不同的元素的基数，只需要废12KB内存！如果从内存角度来比较的话，Hyperloglog首选！</p>
<p><strong>网页的UV（一个人访问一个网站多次，但是还是算作一个人！）</strong></p>
<p>传统的方式，set保存用户的id，然后就可以统计set中的元素数量作为标准判断！</p>
<p>这个方式如果保存大量的用户id，就会比较麻烦，我们的目的是为了计数，而不是保存用户id！</p>
<p>0.81%的错误率！统计UV任务，是可以忽略不计的！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pfadd mykey a b c d e f g h i j  <span class="comment"># 创建第一组元素 mykey</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfcount mykey <span class="comment"># 统计mykey 元素的基数数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; pfadd mykey2 i j z x c v b n m <span class="comment"># 创建第二组元素 mykey2</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfcount mykey2</span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line">127.0.0.1:6379&gt; pfmerge mykey3 mykey mykey2 <span class="comment"># 合并两组mykey mykey2 =&gt;mykey3 并集</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; pfcount mykey3 <span class="comment"># 看并集的数量！</span></span><br><span class="line">(inteer) 15</span><br></pre></td></tr></table></figure>
<p>如果允许容错，那么一定可以使用Hyperloglog！</p>
<p>如果不允许容错，就是用set或者自己的数据类型即可！</p>
<h2 id="3、Bitmaps"><a href="#3、Bitmaps" class="headerlink" title="3、Bitmaps"></a>3、Bitmaps</h2><blockquote>
<p>位存储</p>
</blockquote>
<p>统计疫情感染人数：0 1 0 1 0</p>
<p>统计用户信息，活跃，不活跃！登录、未登录！打卡，365天打卡！两个状态的，都可以使用Bitmaps！</p>
<p>Bitmaps位图，数据结构！都是操作二进制位来进行记录，就只有0和1两个状态！</p>
<p>使用bitmap来记录周一到周日的打卡！</p>
<p>周一：1，周二：0，周三：0，周四：1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit sign 0 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 1 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 2 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 3 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 4 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 5 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 6 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>
<p>查看某一天是否有打卡！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; getbit sign 3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit sign 6</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>
<p>统计操作，统计打卡的天数！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; bitcount sign <span class="comment"># 统计这周的打卡记录，就可以看到这周是否全勤</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>Redis事务本质：一组命令的集合！一个事务中的所有命令都会被序列化，在事务执行过程中，会按照顺序执行！</p>
<p>一次性、顺序性、排他性！执行一系列的命令！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----队列   set  set  set 执行--------</span><br></pre></td></tr></table></figure>
<font color="red">**Redis事务没有隔离级别的概念！**</font>

<p>所有的命令在事务中，并没有直接被执行！只有发起执行命令的时候才会执行！</p>
<font color="red">**Redis单条命令是保证原子性的，但是事务不保证原子性（要么同时成功，要么同时失败！）**</font>

<p>Redis的事务：</p>
<ul>
<li>开启事务（multi）</li>
<li>命令入队</li>
<li>执行事务（exec）</li>
</ul>
<blockquote>
<p>正常执行事务</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 命令入队</span></span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span> <span class="comment"># 执行事务</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">&quot;v2&quot;</span></span><br><span class="line">4) OK</span><br></pre></td></tr></table></figure>
<blockquote>
<p>放弃事务</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; discard <span class="comment"># 取消事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k4 <span class="comment"># 事务队列中命令都不会被执行！</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>编译型异常（代码有问题！命令有错！），事务中所有的命令都不会被执行！</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k3 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; getset k3 <span class="comment"># 错误的命令</span></span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;getset&#x27;</span> <span class="built_in">command</span></span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k5 v5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span> <span class="comment"># 执行事务报错</span></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k5 <span class="comment"># 所有的命令都不会被执行</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行时异常（1/0），如果事务队列中存在语法性，那么执行命令的时候，其他的命令是可以正常执行的，错误命令抛出异常！</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; incr k1 <span class="comment"># 执行的时候会失败</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; get k3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span></span><br><span class="line">1) (error) ERR value is not an <span class="built_in">integer</span> or out of range <span class="comment"># 虽然第一条命令报错了，但是依旧正常执行成功了！</span></span><br><span class="line">2) OK</span><br><span class="line">3) OK</span><br><span class="line">4) <span class="string">&quot;v3&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>监控</p>
</blockquote>
<p><strong>悲观锁：</strong></p>
<ul>
<li>很悲观，认为什么时候都会出问题，无论做什么都会加锁！</li>
</ul>
<p><strong>乐观锁：</strong></p>
<ul>
<li>很乐观，认为什么时候都不会出问题，所以不会上锁！更新数据的时候去判断一下，在此期间是否有人修改过这个数据。</li>
<li>获取version</li>
<li>更新的时候比较version</li>
</ul>
<blockquote>
<p>Redis测监视测试</p>
</blockquote>
<p>正常执行成功！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money <span class="comment"># 监视money对象</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi <span class="comment"># 事务正常结束，数据期间没有发生变动，这个时候就正常执行成功！</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incrby out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br></pre></td></tr></table></figure>
<p>测试多线程修改值，使用watch可以当作redis的乐观锁操作！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch money <span class="comment"># 监视money</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; decrby money 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incrby out 10</span><br><span class="line">QUEUED</span><br><span class="line">==========</span><br><span class="line"><span class="comment"># 另一个线程修改money的值 --见后面的代码</span></span><br><span class="line">==========</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span> <span class="comment"># 执行之前，另外一个线程修改了我们的值，这个时候，就会导致事务执行失败！</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 另起线程修改值</span></span><br><span class="line">127.0.0.1:6379&gt; get money</span><br><span class="line"><span class="string">&quot;80&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 1000</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<p>如果修改失败，获取最新的值就好</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; unwatch <span class="comment"># 1、如果发现事务执行失败，就先解锁</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money <span class="comment"># 2、获取最新的值，再次监视，select version</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; decrby money 1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incrby money 1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span> <span class="comment"># 3、比对监视的值是否发生了变化，如果没有变化，那么可以执行成功，如果变化就执行失败</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 999</span><br><span class="line">2) (<span class="built_in">integer</span>) 1000</span><br></pre></td></tr></table></figure>
<h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><p>我们要使用Java来操作Redis</p>
<blockquote>
<p>什么是Jedis？</p>
<p>Jedis是Redis官方推荐的Java连接开发工具！使用Java操作Redis中间件！如果你要使用Java操作Redis，那么一定要对Jedis十分的熟悉！</p>
<p>测试</p>
</blockquote>
<p>1、导入对应的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入jedis包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、编码测试</p>
<ul>
<li>连接数据库</li>
<li>操作命令</li>
<li>断开连接！</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、new  Jedis 对象即可</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;110.40.138.125&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// jedis 所有的命令就是我们之前学习的所有指令! 所以之前的指令学习很重要</span></span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E4%B8%89%E5%A4%A7%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B/1635175424147.png" alt="1635175424147"></p>
<p>连接过程中出现的问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> redis.clients.jedis.exceptions.JedisConnectionException: Failed to create socket.</span><br><span class="line">	at redis.clients.jedis.DefaultJedisSocketFactory.createSocket(DefaultJedisSocketFactory.java:<span class="number">110</span>)</span><br><span class="line">	at redis.clients.jedis.Connection.connect(Connection.java:<span class="number">226</span>)</span><br><span class="line">	at redis.clients.jedis.BinaryClient.connect(BinaryClient.java:<span class="number">135</span>)</span><br><span class="line">	at redis.clients.jedis.Connection.sendCommand(Connection.java:<span class="number">163</span>)</span><br><span class="line">	at redis.clients.jedis.Connection.sendCommand(Connection.java:<span class="number">158</span>)</span><br><span class="line">	at redis.clients.jedis.BinaryClient.ping(BinaryClient.java:<span class="number">186</span>)</span><br><span class="line">	at redis.clients.jedis.BinaryJedis.ping(BinaryJedis.java:<span class="number">380</span>)</span><br><span class="line">	at com.ldg.TestPing.main(TestPing.java:<span class="number">10</span>)</span><br><span class="line">Caused by: java.net.SocketTimeoutException: connect timed out</span><br><span class="line">	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)</span><br><span class="line">	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:<span class="number">85</span>)</span><br><span class="line">	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:<span class="number">350</span>)</span><br><span class="line">	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:<span class="number">206</span>)</span><br><span class="line">	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:<span class="number">188</span>)</span><br><span class="line">	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:<span class="number">172</span>)</span><br><span class="line">	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:<span class="number">392</span>)</span><br><span class="line">	at java.net.Socket.connect(Socket.java:<span class="number">589</span>)</span><br><span class="line">	at redis.clients.jedis.DefaultJedisSocketFactory.createSocket(DefaultJedisSocketFactory.java:<span class="number">80</span>)</span><br><span class="line">	... <span class="number">7</span> more</span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<ul>
<li>关闭linux的6379防火墙</li>
<li>在redis.conf文件中将 bind 127.0.0.1 注释，将protected-mode设置为no</li>
<li>在服务器上使用redis-cli -p 6379 连接成功，然后输入shutdown ，然后exit，最后重新输入redis-server redis.conf 重启</li>
<li>最后查看redis的进程，如下即可</li>
</ul>
<p><img src="/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E4%B8%89%E5%A4%A7%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B/1635175621415.png" alt="1635175621415"></p>
<h2 id="Key测试："><a href="#Key测试：" class="headerlink" title="Key测试："></a>Key测试：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestKey</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;110.40.138.125&quot;</span>,<span class="number">6378</span>);<span class="comment">//修改linux服务器上的端口为6378</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;清空数据：&quot;</span>+jedis.flushDB());</span><br><span class="line">        System.out.println(<span class="string">&quot;判断某个键是否存在：&quot;</span>+jedis.exists(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;新增&lt;&#x27;username&#x27;,&#x27;ldg&#x27;&gt;键值对：&quot;</span>+jedis.set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;ldg&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;新增&lt;&#x27;password&#x27;,&#x27;password&#x27;&gt;键值对：&quot;</span>+jedis.set(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;系统中所有的键如下：&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        System.out.println(keys);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除键password：&quot;</span>+jedis.del(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;判断某个键是否存在：&quot;</span>+jedis.exists(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;查看键username所存储的值类型：&quot;</span>+jedis.type(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;随机返回key空间的一个：&quot;</span>+jedis.randomKey());</span><br><span class="line">        System.out.println(<span class="string">&quot;重命名key：&quot;</span>+jedis.rename(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;取出改名后的name：&quot;</span>+jedis.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;按索引查询：&quot;</span>+jedis.select(<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除当前数据库中所有的key：&quot;</span>+jedis.flushDB());</span><br><span class="line">        System.out.println(<span class="string">&quot;返回当前数据库key的数目：&quot;</span>+jedis.dbSize());</span><br><span class="line">        System.out.println(<span class="string">&quot;删除所有数据库中的所有key：&quot;</span>+jedis.flushAll());</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">清空数据：OK</span><br><span class="line">判断某个键是否存在：<span class="keyword">false</span></span><br><span class="line">新增&lt;<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;ldg&#x27;</span>&gt;键值对：OK</span><br><span class="line">新增&lt;<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;password&#x27;</span>&gt;键值对：OK</span><br><span class="line">系统中所有的键如下：</span><br><span class="line">[password, username]</span><br><span class="line">删除键password：<span class="number">1</span></span><br><span class="line">判断某个键是否存在：<span class="keyword">false</span></span><br><span class="line">查看键username所存储的值类型：string</span><br><span class="line">随机返回key空间的一个：username</span><br><span class="line">重命名key：OK</span><br><span class="line">取出改名后的name：ldg</span><br><span class="line">按索引查询：OK</span><br><span class="line">删除当前数据库中所有的key：OK</span><br><span class="line">返回当前数据库key的数目：<span class="number">0</span></span><br><span class="line">删除所有数据库中的所有key：OK</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h2 id="TestString"><a href="#TestString" class="headerlink" title="TestString"></a>TestString</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;110.40.138.125&quot;</span>,<span class="number">6378</span>);</span><br><span class="line"></span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        System.out.println(<span class="string">&quot;=======增加数据=========&quot;</span>);</span><br><span class="line">        System.out.println(jedis.set(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>));</span><br><span class="line">        System.out.println(jedis.set(<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;v2&quot;</span>));</span><br><span class="line">        System.out.println(jedis.set(<span class="string">&quot;k3&quot;</span>,<span class="string">&quot;v3&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除k2：&quot;</span>+jedis.del(<span class="string">&quot;k2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取键k2：&quot;</span>+jedis.get(<span class="string">&quot;k2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;修改k1：&quot;</span>+jedis.set(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;k1Changed&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取k1的值：&quot;</span>+jedis.get(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;在k3后面加入值：&quot;</span>+jedis.append(<span class="string">&quot;k3&quot;</span>,<span class="string">&quot;End&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;k3的值：&quot;</span>+jedis.get(<span class="string">&quot;k3&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;增加多个键值对：&quot;</span>+jedis.mset(<span class="string">&quot;k01&quot;</span>,<span class="string">&quot;v01&quot;</span>,<span class="string">&quot;k02&quot;</span>,<span class="string">&quot;v02&quot;</span>,<span class="string">&quot;k03&quot;</span>,<span class="string">&quot;v03&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取多个键值对：&quot;</span>+jedis.mget(<span class="string">&quot;k01&quot;</span>,<span class="string">&quot;k02&quot;</span>,<span class="string">&quot;k03&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取多个键值对：&quot;</span>+jedis.mget(<span class="string">&quot;k01&quot;</span>,<span class="string">&quot;k02&quot;</span>,<span class="string">&quot;k03&quot;</span>,<span class="string">&quot;k04&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除多个键值对：&quot;</span>+jedis.del(<span class="string">&quot;k01&quot;</span>,<span class="string">&quot;k02&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取多个键值对：&quot;</span>+jedis.mget(<span class="string">&quot;k01&quot;</span>,<span class="string">&quot;k02&quot;</span>,<span class="string">&quot;k03&quot;</span>));</span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        System.out.println(<span class="string">&quot;========新增键值对防止覆盖原先值==============&quot;</span>);</span><br><span class="line">        System.out.println(jedis.setnx(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>));</span><br><span class="line">        System.out.println(jedis.setnx(<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;v2&quot;</span>));</span><br><span class="line">        System.out.println(jedis.setnx(<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;v2-new&quot;</span>));</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;k2&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========新增键值对并设置有效时间==============&quot;</span>);</span><br><span class="line">        System.out.println(jedis.setex(<span class="string">&quot;k3&quot;</span>,<span class="number">2</span>,<span class="string">&quot;v3&quot;</span>));</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;k3&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;=========获取原值，更新为新值=========&quot;</span>);</span><br><span class="line">        System.out.println(jedis.getSet(<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;k2GetSet&quot;</span>));</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;k2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获得k2值的字符串：&quot;</span>+jedis.getrange(<span class="string">&quot;k2&quot;</span>,<span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">=======增加数据=========</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">删除k2：<span class="number">1</span></span><br><span class="line">获取键k2：<span class="keyword">null</span></span><br><span class="line">修改k1：OK</span><br><span class="line">获取k1的值：k1Changed</span><br><span class="line">在k3后面加入值：<span class="number">5</span></span><br><span class="line">k3的值：v3End</span><br><span class="line">增加多个键值对：OK</span><br><span class="line">获取多个键值对：[v01, v02, v03]</span><br><span class="line">获取多个键值对：[v01, v02, v03, <span class="keyword">null</span>]</span><br><span class="line">删除多个键值对：<span class="number">2</span></span><br><span class="line">获取多个键值对：[<span class="keyword">null</span>, <span class="keyword">null</span>, v03]</span><br><span class="line">SLF4J: Failed to load <span class="class"><span class="keyword">class</span> &quot;<span class="title">org</span>.<span class="title">slf4j</span>.<span class="title">impl</span>.<span class="title">StaticLoggerBinder</span>&quot;.</span></span><br><span class="line"><span class="class"><span class="title">SLF4J</span>: <span class="title">Defaulting</span> <span class="title">to</span> <span class="title">no</span>-<span class="title">operation</span> (<span class="title">NOP</span>) <span class="title">logger</span> <span class="title">implementation</span></span></span><br><span class="line"><span class="class"><span class="title">SLF4J</span>: <span class="title">See</span> <span class="title">http</span>://<span class="title">www</span>.<span class="title">slf4j</span>.<span class="title">org</span>/<span class="title">codes</span>.<span class="title">html</span>#<span class="title">StaticLoggerBinder</span> <span class="title">for</span> <span class="title">further</span> <span class="title">details</span>.</span></span><br><span class="line"><span class="class"></span>========新增键值对防止覆盖原先值==============</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">v1</span><br><span class="line">v2</span><br><span class="line">========新增键值对并设置有效时间==============</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">null</span></span><br><span class="line">=========获取原值，更新为新值=========</span><br><span class="line">v2</span><br><span class="line">k2GetSet</span><br><span class="line">获得k2值的字符串：Get</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p> 其他的也就不在这里一一练习，和Redis的基本命令完全一样，可以多看基本命令操作</p>
</blockquote>
<h2 id="事务-1"><a href="#事务-1" class="headerlink" title="事务"></a>事务</h2><blockquote>
<p>正常执行</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTx</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;110.40.138.125&quot;</span>,<span class="number">6378</span>);</span><br><span class="line">        </span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;ldg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        Transaction multi = jedis.multi();</span><br><span class="line">        String result = jsonObject.toJSONString();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            multi.set(<span class="string">&quot;user1&quot;</span>,result);</span><br><span class="line">            multi.set(<span class="string">&quot;user2&quot;</span>,result);</span><br><span class="line">            multi.exec();<span class="comment">//执行事务</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">            multi.discard();<span class="comment">//放弃事务</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;user2&quot;</span>));</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ldg&quot;</span>,<span class="string">&quot;hello&quot;</span>:<span class="string">&quot;world&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ldg&quot;</span>,<span class="string">&quot;hello&quot;</span>:<span class="string">&quot;world&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>异常执行</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTx</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;110.40.138.125&quot;</span>,<span class="number">6378</span>);</span><br><span class="line"></span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;ldg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        Transaction multi = jedis.multi();</span><br><span class="line">        String result = jsonObject.toJSONString();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            multi.set(<span class="string">&quot;user1&quot;</span>,result);</span><br><span class="line">            multi.set(<span class="string">&quot;user2&quot;</span>,result);</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;<span class="comment">//代码抛出异常，执行失败！</span></span><br><span class="line">            multi.exec();<span class="comment">//执行事务</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">            multi.discard();<span class="comment">//放弃事务</span></span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;user2&quot;</span>));</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">	at com.ldg.TestTx.main(TestTx.java:<span class="number">22</span>)</span><br><span class="line"><span class="keyword">null</span></span><br><span class="line"><span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<h1 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h1><p>SpringBoot操作数据：spring-data、jpa、jdbc、mongodb、redis！</p>
<p>SpeingData也是和SpringBoot齐名的项目！</p>
<p>说明：在SpringBoot2.x之后，原来得Jedis被替换为了lettuce？</p>
<p>jedis：采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全，使用jedis pool连接池！更像BIO模式！</p>
<p>lettuce：使用netty，实例可以在多个线程中进行共享，不存在线程不安全的情况，可以减少线程数据，更像NIO模式！</p>
<p>源码分析：</p>
<p>RedisAutoConfiguration类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;RedisOperations.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;RedisProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@Import(&#123;LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisAutoConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(</span></span><br><span class="line"><span class="meta">        name = &#123;&quot;redisTemplate&quot;&#125;//我们可以自定义个redisTemplate来替换这个默认的</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 默认的RedisTemplate没有过多的设置，redis对象都是需要序列化的</span></span><br><span class="line">        <span class="comment">// 两个泛型都是Object，Object的类型，我们使用后需要强制转换&lt;String,Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span> <span class="comment">// 由于String是redis最长使用的类型，所以单独提出来了一个bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>整合测试</p>
</blockquote>
<p>1、导入测试</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 操作redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、配置连接</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># SpringBoot 所有的配置类，都有一个自动配置类 RedisAutoConfiguration</span><br><span class="line"># 自动配置类都会绑定一个properties配置文件 RedisProperties</span><br><span class="line">spring.redis.host = 110.40.138.125</span><br><span class="line">spring.redis.port = 6378</span><br></pre></td></tr></table></figure>
<p>3、测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Redis02SpringbootApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// redusTemplate 操作不同类型的数据类型，api和我们的指令是一样的</span></span><br><span class="line">        <span class="comment">// opsForValue 操作字符串，类似String</span></span><br><span class="line">        <span class="comment">// opsForList 操作List 类似List</span></span><br><span class="line">        <span class="comment">// opsForSet</span></span><br><span class="line">        <span class="comment">// opsForHash</span></span><br><span class="line">        <span class="comment">// opsForZSet</span></span><br><span class="line">        <span class="comment">// opsForGeo</span></span><br><span class="line">        <span class="comment">// opsForHyperLogLog</span></span><br><span class="line">        <span class="comment">// 除了基本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务和基本的CRUD</span></span><br><span class="line">        <span class="comment">// 获取redis的连接对象</span></span><br><span class="line"><span class="comment">//        RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class="line"><span class="comment">//        connection.flushDb();</span></span><br><span class="line"><span class="comment">//        connection.flushAll();</span></span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;mykey&quot;</span>,<span class="string">&quot;ldg&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;mykey&quot;</span>));</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;chinesekey&quot;</span>,<span class="string">&quot;redis中文测试&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;chinesekey&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>IDEA 输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ldg</span><br><span class="line">redis中文测试</span><br></pre></td></tr></table></figure>
<p>Linux服务器上查看keys *，发现乱码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6378&gt; keys *</span><br><span class="line">1) <span class="string">&quot;\xac\xed\x00\x05t\x00\nchinesekey&quot;</span></span><br><span class="line">2) <span class="string">&quot;\xac\xed\x00\x05t\x00\x05mykey&quot;</span></span><br></pre></td></tr></table></figure>
<p>解决服务器上乱码问题：</p>
<p><img src="/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E4%B8%89%E5%A4%A7%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B/1635599024458.png" alt="1635599024458"></p>
<p><img src="/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E4%B8%89%E5%A4%A7%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B/1635599187762.png" alt="1635599187762"></p>
<p>若在测试代码中，不对对象进行序列化，则会提示如下错误</p>
<p><img src="/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E4%B8%89%E5%A4%A7%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B/1635667875633.png" alt="1635667875633"></p>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    <span class="comment">// 真实的开发一般都使用json来传递对象</span></span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">&quot;ldg&quot;</span>,<span class="number">21</span>);</span><br><span class="line">    <span class="comment">// String jsonUser = new ObjectMapper().writeValueAsString(user);</span></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>User的Pojo类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">// 在企业中，我们的POJO类都会序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解决序列化方式一：在POJO类中实现Serializable接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">// 在企业中，我们的POJO类都会序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User(name=ldg, age=<span class="number">21</span>)</span><br></pre></td></tr></table></figure>
<p>解决序列化方式二：在测试代码中，自动进行序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    <span class="comment">// 真实的开发一般都使用json来传递对象</span></span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">&quot;ldg&quot;</span>,<span class="number">21</span>);</span><br><span class="line">    String jsonUser = <span class="keyword">new</span> ObjectMapper().writeValueAsString(user);</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>,jsonUser);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ldg&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">21</span>&#125;</span><br></pre></td></tr></table></figure>
<p>解决服务器乱码问题：</p>
<p>配置自己的RedisConfig，通过设置序列化的方式，解决服务端乱码的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 固定模板</span></span><br><span class="line">    <span class="comment">// 编写我们对自己的redisTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"><span class="comment">//        // 序列化配置</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; objectJackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        objectJackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// String 的序列化</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(objectJackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.ldg.redis02springboot.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Redis02SpringbootApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;redisTemplate&quot;)</span> <span class="comment">// 自定义的RedisConfig</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// redusTemplate 操作不同类型的数据类型，api和我们的指令是一样的</span></span><br><span class="line">        <span class="comment">// opsForValue 操作字符串，类似String</span></span><br><span class="line">        <span class="comment">// opsForList 操作List 类似List</span></span><br><span class="line">        <span class="comment">// opsForSet</span></span><br><span class="line">        <span class="comment">// opsForHash</span></span><br><span class="line">        <span class="comment">// opsForZSet</span></span><br><span class="line">        <span class="comment">// opsForGeo</span></span><br><span class="line">        <span class="comment">// opsForHyperLogLog</span></span><br><span class="line">        <span class="comment">// 除了基本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务和基本的CRUD</span></span><br><span class="line">        <span class="comment">// 获取redis的连接对象</span></span><br><span class="line"><span class="comment">//        RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class="line"><span class="comment">//        connection.flushDb();</span></span><br><span class="line"><span class="comment">//        connection.flushAll();</span></span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;mykey&quot;</span>,<span class="string">&quot;ldg&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;mykey&quot;</span>));</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;chinesekey&quot;</span>,<span class="string">&quot;redis中文测试&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;chinesekey&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">// 真实的开发一般都使用json来传递对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;ldg&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        <span class="comment">// String jsonUser = new ObjectMapper().writeValueAsString(user);</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务器端的keys *:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6378&gt; keys *</span><br><span class="line">1) &quot;user&quot;</span><br></pre></td></tr></table></figure>
<h2 id="RedisUtil工具类"><a href="#RedisUtil工具类" class="headerlink" title="RedisUtil工具类"></a>RedisUtil工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在我们真实的开发中，一般都会有一个封装的Utilslei</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================================= Common ===========================</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        指定缓存失效时间</span></span><br><span class="line"><span class="comment">        @param key  键</span></span><br><span class="line"><span class="comment">        @param time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key,<span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                redisTemplate.expire(key,time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       根据key 获取过期时间</span></span><br><span class="line"><span class="comment">       @param key 键 不能为null</span></span><br><span class="line"><span class="comment">       @return 时间(秒) 返回0代表永久将有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key,TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       判断key是否存在</span></span><br><span class="line"><span class="comment">       @param key 键</span></span><br><span class="line"><span class="comment">       @return true 存在 false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       删除缓存</span></span><br><span class="line"><span class="comment">       @param key 可以传一个值或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key.length == <span class="number">1</span>)&#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                redisTemplate.delete((Collection&lt;String&gt;) CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ======================String===============================</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        普通缓存获取</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @return 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span>:redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        普通缓存放入</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param value 值</span></span><br><span class="line"><span class="comment">        @return true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key,Object value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key,value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param value 值</span></span><br><span class="line"><span class="comment">        @param time 时间（秒） time 要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">        @return true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key,Object value,<span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key,value,time,TimeUnit.SECONDS);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                set(key,value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        递增</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param delta 要增加几（大于0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key,<span class="keyword">long</span> delta)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(delta &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key,delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        递减</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param delta 要减少几（小于0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key,<span class="keyword">long</span> delta)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(delta &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递增因子必须小于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().decrement(key,delta);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ======================Map===============================</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        HashGet</span></span><br><span class="line"><span class="comment">        @param key 键 不能为null</span></span><br><span class="line"><span class="comment">        @param item 项 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key,String item)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key,item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @return 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object,Object&gt; <span class="title">hmget</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        HashSet</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key,Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key,map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        HashSet 并设置时间</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param map 对应多个键值</span></span><br><span class="line"><span class="comment">        @param time 时间（秒）</span></span><br><span class="line"><span class="comment">        @return true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key,Map&lt;String,Object&gt; map,<span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key,map);</span><br><span class="line">            <span class="keyword">if</span>(time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                expire(key,time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        同一张Hash表中放入数据，如果不存在，将创建</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param item 项</span></span><br><span class="line"><span class="comment">        @param value 值</span></span><br><span class="line"><span class="comment">        @return true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key,String item,Object value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key,item,value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        同一张Hash表中放入数据，如果不存在，将创建</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param item 项</span></span><br><span class="line"><span class="comment">        @param value 值</span></span><br><span class="line"><span class="comment">        @param time 时间(秒) 注意：如果已存在的hash表有时间，这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">        @return true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key,String item,Object value,<span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key,item,value);</span><br><span class="line">            <span class="keyword">if</span>(time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                expire(key,time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">        删除hash表中的值</span></span><br><span class="line"><span class="comment">        @param key 键 不能为null</span></span><br><span class="line"><span class="comment">        @param item 项 可以是多个，不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key,Object... item)</span></span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key,item);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">        判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">        @param key 键 不能为null</span></span><br><span class="line"><span class="comment">        @param item 项 可以是多个，不能为null</span></span><br><span class="line"><span class="comment">        @return true存在 false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHashKey</span><span class="params">(String key,String item)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key,item);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">        hash 递增 如果不存在，就会创建一个，并把新增后的值返回</span></span><br><span class="line"><span class="comment">        @param key 键 不能为null</span></span><br><span class="line"><span class="comment">        @param item 项 可以是多个，不能为null</span></span><br><span class="line"><span class="comment">        @param by 要增加几（大于0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key,String item,<span class="keyword">double</span> by)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key,item,by);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">        hash 递减</span></span><br><span class="line"><span class="comment">        @param key 键 不能为null</span></span><br><span class="line"><span class="comment">        @param item 项 可以是多个，不能为null</span></span><br><span class="line"><span class="comment">        @param by 要减少几（小于0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key,String item,<span class="keyword">double</span> by)</span></span>&#123;</span><br><span class="line">         <span class="keyword">return</span> redisTemplate.opsForHash().increment(key,item,-by);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ======================Set===============================</span></span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">        根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">        根据value从一个set中查询，是否存在</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param value 值</span></span><br><span class="line"><span class="comment">        @return true 存在 false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key,Object value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key,value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">        将数据放入set缓存</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param value 值 可以是多个</span></span><br><span class="line"><span class="comment">        @return 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key,Object... values)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key,values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        将数据放入set缓存</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param time 时间(秒)</span></span><br><span class="line"><span class="comment">        @param value 值 可以是多个</span></span><br><span class="line"><span class="comment">        @return 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key,<span class="keyword">long</span> time,Object... values)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key,values);</span><br><span class="line">            <span class="keyword">if</span>(time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                expire(key,time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取set缓存的长度</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        移除值为value的</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param values 值 可以是多个</span></span><br><span class="line"><span class="comment">        @return 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key,Object... values)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key,values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ======================List===============================</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取list缓存的内容</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param start 开始</span></span><br><span class="line"><span class="comment">        @param end 结束 0到-1 代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key,start,end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取list缓存的长度</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param index 索引 index &gt;= 0 时， 0 表头，1 第二个元素，以此类推，index &lt; 0时，-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key,<span class="keyword">long</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key,index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        将list放入缓存</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key,Object value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key,value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        将list放入缓存</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param value 值</span></span><br><span class="line"><span class="comment">        @param time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key,Object value,<span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key,value);</span><br><span class="line">            <span class="keyword">if</span>(time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                expire(key,time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        将list放入缓存</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param value 值</span></span><br><span class="line"><span class="comment">        @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key,List&lt;Object&gt; value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key,value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">        将list放入缓存</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param value 值</span></span><br><span class="line"><span class="comment">        @param time 时间(秒)</span></span><br><span class="line"><span class="comment">        @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key,List&lt;Object&gt; value,<span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">         <span class="keyword">try</span>&#123;</span><br><span class="line">             redisTemplate.opsForList().rightPushAll(key,value);</span><br><span class="line">             <span class="keyword">if</span>(time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                 expire(key,time);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">             ex.printStackTrace();</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">        根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param index 索引</span></span><br><span class="line"><span class="comment">        @param value 值</span></span><br><span class="line"><span class="comment">        @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key,<span class="keyword">long</span> index,Object value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            redisTemplate.opsForList().set(key,index,value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        移除N个值为value</span></span><br><span class="line"><span class="comment">        @param key 键</span></span><br><span class="line"><span class="comment">        @param count 移除多少个</span></span><br><span class="line"><span class="comment">        @param value 值</span></span><br><span class="line"><span class="comment">        @return 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key,<span class="keyword">long</span> count,Object value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key,count,value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>IDEA测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    redisUtil.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;ldg&quot;</span>);</span><br><span class="line">    System.out.println(redisUtil.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>IDEA输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ldg</span><br></pre></td></tr></table></figure>
<p>服务器段输出：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6378&gt; keys *</span><br><span class="line">1) &quot;user&quot;</span><br><span class="line">2) &quot;name&quot;</span><br><span class="line">127.0.0.1:6378&gt; get name</span><br><span class="line">&quot;\&quot;ldg\&quot;&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis学习（二）之五大基本数据类型</title>
    <url>/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%E4%BA%94%E5%A4%A7%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Redis五大基本数据类型"><a href="#Redis五大基本数据类型" class="headerlink" title="Redis五大基本数据类型"></a>Redis五大基本数据类型</h1><blockquote>
<p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作<strong>数据库</strong>、<strong>缓存和消息中间件</strong>。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets">有序集合（sorted sets）</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html">LUA脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html">LRU驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html">Redis哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html">分区（Cluster）</a>提供高可用性（high availability）</p>
</blockquote>
<h2 id="1、Redis-Key"><a href="#1、Redis-Key" class="headerlink" title="1、Redis-Key"></a>1、Redis-Key</h2><blockquote>
<p>Redis常规命令查询：<a href="http://www.redis.cn/commands.html">Redis常规命令</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys * <span class="comment"># 查询所有的key</span></span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name ldg <span class="comment"># set key</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 25</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">2) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EXISTS name <span class="comment"># 查看当前的key是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; EXISTS name1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; move name 1 <span class="comment"># 移除当前的key</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name ldg</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;ldg&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EXPIRE name 10 <span class="comment"># 设置key的过期时间，单位是秒</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name <span class="comment"># 查看当前key的过期剩余时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; ttl name </span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; get name <span class="comment"># get key</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> age <span class="comment"># 查看当前key的一个类型</span></span><br><span class="line">string</span><br></pre></td></tr></table></figure>
<h2 id="2、String（字符串）"><a href="#2、String（字符串）" class="headerlink" title="2、String（字符串）"></a>2、String（字符串）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1 <span class="comment"># 设置值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1 <span class="comment"># 获得值</span></span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; keys * <span class="comment"># 获取所有的key</span></span><br><span class="line">1) <span class="string">&quot;k1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EXISTS k1 <span class="comment"># 判断某一个key是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; APPEND k1 <span class="string">&quot;hello&quot;</span> <span class="comment"># 追加字符串，如果当前key不存在，就相当于set key</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;v1hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; STRLEN k1 <span class="comment"># 获取字符串的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; APPEND k1 <span class="string">&quot;,nihao&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 13</span><br><span class="line">127.0.0.1:6379&gt; STRLEN k1</span><br><span class="line">(<span class="built_in">integer</span>) 13</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;v1hello,nihao&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> views 0 <span class="comment"># 初始浏览量为0</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incr views <span class="comment"># 自增1 </span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; incr views </span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; decr views <span class="comment"># 自减1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; decr views</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; decr views</span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;-1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incrby views 10 <span class="comment">#可以设置步长，指定增量</span></span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 <span class="string">&quot;ldg,nihao&quot;</span> <span class="comment"># 设置k1的值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;ldg,nihao&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getrange k1 0 3 <span class="comment"># 截取字符串[0,3]</span></span><br><span class="line"><span class="string">&quot;ldg,&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getrange k1 0 -1 <span class="comment"># 获取全部的字符串，和get key是一样的</span></span><br><span class="line"><span class="string">&quot;ldg,nihao&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 abcdefg</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line"><span class="string">&quot;abcdefg&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setrange k2 1 xx <span class="comment"># 替换指定位置开始的字符串</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line"><span class="string">&quot;axxdefg&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line"><span class="comment"># setex (set with expire) # 设置过期时间</span></span><br><span class="line"><span class="comment"># setnx (set if not exist) # 不存在在设置（在分布式锁中会常常使用）</span></span><br><span class="line">127.0.0.1:6379&gt; setex k3 30 <span class="string">&quot;hello&quot;</span> <span class="comment"># 设置k3的值为hello，30秒后过期</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl k3</span><br><span class="line">(<span class="built_in">integer</span>) 28</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ttl k3 <span class="comment"># 查看当前key的过期时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 23</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setnx mykey <span class="string">&quot;redis&quot;</span> <span class="comment"># 如果mykey不存在，创建mykey</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl k3</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; setnx mykey MongoDB <span class="comment"># 如果key存在，创建失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get mykey</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line"><span class="comment"># mset和mget</span></span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3 <span class="comment"># 同时设置多个值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k1&quot;</span></span><br><span class="line">2) <span class="string">&quot;k3&quot;</span></span><br><span class="line">3) <span class="string">&quot;k2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3 <span class="comment"># 同事获取多个值</span></span><br><span class="line">1) <span class="string">&quot;v1&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx k1 v1 k4 v4 <span class="comment"># mset是一个原子性的操作，要么一起成功，要么一起失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">(nil)</span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line"><span class="comment"># 对象</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> user:1 &#123;name:zhangsan,age:3&#125; <span class="comment">#设置一个user:1对象，值为jso字符串来保存一个对象</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get user:1</span><br><span class="line"><span class="string">&quot;&#123;name:zhangsan,age:3&#125;&quot;</span></span><br><span class="line"><span class="comment"># 这里的key是一个巧妙的设计：user:&#123;id&#125;:&#123;field&#125;，如此设计在Redis是完全ok的</span></span><br><span class="line">127.0.0.1:6379&gt; mset user:1:name zhangsan user:1:age 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line"><span class="comment"># getset 先get在set</span></span><br><span class="line">127.0.0.1:6379&gt; getset db redis <span class="comment"># 如果不存在值，则返回nil</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getset db mongodb <span class="comment"># 如果存在值，获取原来的值，并设置新的值</span></span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line"><span class="string">&quot;mongodb&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br></pre></td></tr></table></figure>
<p>数据结构是相同的！</p>
<p>String类似的使用场景，value除了是我们的字符串还可以是我们的数字！</p>
<ul>
<li>计数器</li>
<li>统计多单位的数量</li>
<li>粉丝数</li>
<li>对象缓存存储</li>
</ul>
<h2 id="3、List（列表）"><a href="#3、List（列表）" class="headerlink" title="3、List（列表）"></a>3、List（列表）</h2><blockquote>
<p>在redis里面，可以把list玩成栈、队列、阻塞队列</p>
</blockquote>
<p><img src="/2021/10/24/Redis/redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%E4%BA%94%E5%A4%A7%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/1635062371558.png" alt="1635062371558"></p>
<blockquote>
<p>所有的list命令都是l开头的，不区分大小写命令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list one <span class="comment"># 将一个值或多个值插入列表的头部（左）</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lpush list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1 <span class="comment"># 获取list中的值</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 1 <span class="comment"># 通过区间获取具体的值</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list four <span class="comment"># 将一个值或者多个值，插入到列表尾部（右）</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;four&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line"><span class="comment"># lpop rpop</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;four&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lpop list <span class="comment"># 移除list的第一个元素</span></span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpop list <span class="comment"># 移除list的最后一个元素</span></span><br><span class="line"><span class="string">&quot;four&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1 </span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one</span></span><br><span class="line"><span class="string">#################################################################################</span></span><br><span class="line"><span class="string"># lindex</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lrange list 0 -1</span></span><br><span class="line"><span class="string">1) &quot;</span>two<span class="string">&quot;</span></span><br><span class="line"><span class="string">2) &quot;</span>one<span class="string">&quot;</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lindex list 1 # 通过下标获取list中的某一个值</span></span><br><span class="line"><span class="string">&quot;</span>one<span class="string">&quot;</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lindex list 0</span></span><br><span class="line"><span class="string">&quot;</span>two<span class="string">&quot;</span></span><br><span class="line"><span class="string">#################################################################################</span></span><br><span class="line"><span class="string"># llren</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lpush list one </span></span><br><span class="line"><span class="string">(integer) 1</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lpush list two</span></span><br><span class="line"><span class="string">(integer) 2</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lpush list three</span></span><br><span class="line"><span class="string">(integer) 3</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lrange list 0 -1 </span></span><br><span class="line"><span class="string">1) &quot;</span>three<span class="string">&quot;</span></span><br><span class="line"><span class="string">2) &quot;</span>two<span class="string">&quot;</span></span><br><span class="line"><span class="string">3) &quot;</span>one<span class="string">&quot;</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; llen list # 返回列表的长度</span></span><br><span class="line"><span class="string">(integer) 3</span></span><br><span class="line"><span class="string">#################################################################################</span></span><br><span class="line"><span class="string"># 移除指定的值</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lrange list 0 -1</span></span><br><span class="line"><span class="string">1) &quot;</span>three<span class="string">&quot;</span></span><br><span class="line"><span class="string">2) &quot;</span>three<span class="string">&quot;</span></span><br><span class="line"><span class="string">3) &quot;</span>two<span class="string">&quot;</span></span><br><span class="line"><span class="string">4) &quot;</span>one<span class="string">&quot;</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lrem list 1 one # 移除list集合中指定个数的value，精确匹配</span></span><br><span class="line"><span class="string">(integer) 1</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lrem list 1 three</span></span><br><span class="line"><span class="string">(integer) 1</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lrange list 0 -1</span></span><br><span class="line"><span class="string">1) &quot;</span>three<span class="string">&quot;</span></span><br><span class="line"><span class="string">2) &quot;</span>two<span class="string">&quot;</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lpush list three</span></span><br><span class="line"><span class="string">(integer) 3</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lrange list 0 -1</span></span><br><span class="line"><span class="string">1) &quot;</span>three<span class="string">&quot;</span></span><br><span class="line"><span class="string">2) &quot;</span>three<span class="string">&quot;</span></span><br><span class="line"><span class="string">3) &quot;</span>two<span class="string">&quot;</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lrem list 2 three</span></span><br><span class="line"><span class="string">(integer) 2</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lrange list 0 -1</span></span><br><span class="line"><span class="string">1) &quot;</span>two<span class="string">&quot;</span></span><br><span class="line"><span class="string">#################################################################################</span></span><br><span class="line"><span class="string"># trim 修剪</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; rpush mylist &quot;</span>hello<span class="string">&quot;</span></span><br><span class="line"><span class="string">(integer) 1</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; rpush mylist &quot;</span>hello1<span class="string">&quot;</span></span><br><span class="line"><span class="string">(integer) 2</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; rpush mylist &quot;</span>hello2<span class="string">&quot;</span></span><br><span class="line"><span class="string">(integer) 3</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; rpush mylist &quot;</span>hello3<span class="string">&quot;</span></span><br><span class="line"><span class="string">(integer) 4</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; ltrim mylist 1 2 # 通过下标截取指定的长度，这个list已经被改变了，截断了只剩下截取的元素</span></span><br><span class="line"><span class="string">OK</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lrange mylist 0 -1</span></span><br><span class="line"><span class="string">1) &quot;</span>hello1<span class="string">&quot;</span></span><br><span class="line"><span class="string">2) &quot;</span>hello2<span class="string">&quot;</span></span><br><span class="line"><span class="string">#################################################################################</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; rpush mylist &quot;</span>hello<span class="string">&quot;</span></span><br><span class="line"><span class="string">(integer) 1</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; rpush mylist &quot;</span>hello1<span class="string">&quot;</span></span><br><span class="line"><span class="string">(integer) 2</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; rpush mylist &quot;</span>hello2<span class="string">&quot;</span></span><br><span class="line"><span class="string">(integer) 3</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; rpoplpush mylist myotherlist # 移除列表的最后一个元素，将它移动到新的列表中</span></span><br><span class="line"><span class="string">&quot;</span>hello2<span class="string">&quot;</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lrange mylist 0 -1 # 查看原来的列表</span></span><br><span class="line"><span class="string">1) &quot;</span>hello<span class="string">&quot;</span></span><br><span class="line"><span class="string">2) &quot;</span>hello1<span class="string">&quot;</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lrange myotherlist 0 -1 # 查看目标列表中，确实存在该值</span></span><br><span class="line"><span class="string">1) &quot;</span>hello2<span class="string">&quot;</span></span><br><span class="line"><span class="string">#################################################################################</span></span><br><span class="line"><span class="string"># lset 将列表中指定下标的值替换为另外一个值，更新操作</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; exists list # 判断这个列表是否存在</span></span><br><span class="line"><span class="string">(integer) 0</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lset list 0 item # 如果不存在，我们去更新会报错</span></span><br><span class="line"><span class="string">(error) ERR no such key</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lpush list value1</span></span><br><span class="line"><span class="string">(integer) 1</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lrange list 0 0 </span></span><br><span class="line"><span class="string">1) &quot;</span>value1<span class="string">&quot;</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lset list 0 item # 如果存在，更新当前下标的值</span></span><br><span class="line"><span class="string">OK</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lrange list 0 0</span></span><br><span class="line"><span class="string">1) &quot;</span>item<span class="string">&quot;</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lset list 1 other # 如果不存在，则会报错</span></span><br><span class="line"><span class="string">(error) ERR index out of range</span></span><br><span class="line"><span class="string">#################################################################################</span></span><br><span class="line"><span class="string"># linsert 将某个具体的value插入到列表中某个元素的前面或者后面</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; rpush mylist hello</span></span><br><span class="line"><span class="string">(integer) 1</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; rpush mylist world</span></span><br><span class="line"><span class="string">(integer) 2</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; linsert mylist before world other</span></span><br><span class="line"><span class="string">(integer) 3</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lrange mylist 0 -1</span></span><br><span class="line"><span class="string">1) &quot;</span>hello<span class="string">&quot;</span></span><br><span class="line"><span class="string">2) &quot;</span>other<span class="string">&quot;</span></span><br><span class="line"><span class="string">3) &quot;</span>world<span class="string">&quot;</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; linsert mylist after world new</span></span><br><span class="line"><span class="string">(integer) 4</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; lrange mylist 0 -1</span></span><br><span class="line"><span class="string">1) &quot;</span>hello<span class="string">&quot;</span></span><br><span class="line"><span class="string">2) &quot;</span>other<span class="string">&quot;</span></span><br><span class="line"><span class="string">3) &quot;</span>world<span class="string">&quot;</span></span><br><span class="line"><span class="string">4) &quot;</span>new<span class="string">&quot;</span></span><br><span class="line"><span class="string">#################################################################################</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>小结</p>
</blockquote>
<ul>
<li>list实际是上一个链表，before Node after，left、right都可以插入值</li>
<li>如果key不存在，创建新的链表</li>
<li>如果key存在，新增内容</li>
<li>如果移除了所有的值，空链表，也代表不存在</li>
<li>在两边插入或者改动值，效率最高</li>
</ul>
<p>应用：消息排队！消息队列（LPush Rpop）、栈（Lpush Lpop）</p>
<h2 id="4、Set（集合）"><a href="#4、Set（集合）" class="headerlink" title="4、Set（集合）"></a>4、Set（集合）</h2><blockquote>
<p>set中的值是不重复的</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset hello <span class="comment"># set集合中添加元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset ldg</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset <span class="comment"># 查看指定set的所有制</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;ldg&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sismember myset hello <span class="comment"># 判断某一个值是不是在set集合中</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sismember myset world</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; scard myset <span class="comment"># 获取set集合中的内容元素个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;ldg&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset hello1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; scard myset</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; srem myset hello1 <span class="comment"># 移除set集合中的指定元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; scard myset</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;ldg&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line"><span class="comment"># set无序不重复集合，抽随机</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">3) <span class="string">&quot;ldg&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset <span class="comment"># 随机抽取一个元素</span></span><br><span class="line"><span class="string">&quot;ldg&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset <span class="comment"># 随机抽取一个元素</span></span><br><span class="line"><span class="string">&quot;hello1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset</span><br><span class="line"><span class="string">&quot;ldg&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset</span><br><span class="line"><span class="string">&quot;ldg&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset</span><br><span class="line"><span class="string">&quot;ldg&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset 2 <span class="comment"># 随机抽选出自定个数的元素</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;ldg&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset 2</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;ldg&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset 2</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line"><span class="comment"># 删除指定的key，随机删除key</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">3) <span class="string">&quot;ldg&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; spop myset <span class="comment"># 随机删除一些set集合中的元素</span></span><br><span class="line"><span class="string">&quot;ldg&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; spop myset</span><br><span class="line"><span class="string">&quot;hello1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line"><span class="comment"># 将一个指定的值，移动到另外一个set集合</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset world </span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset ldg</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset2 set2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smove myset myset2 ldg <span class="comment"># 将一个指定的值，移动到另外一个set集合</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;set2&quot;</span></span><br><span class="line">2) <span class="string">&quot;ldg&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">数字集合类</span><br><span class="line">- 差集</span><br><span class="line">- 交集</span><br><span class="line">- 并集</span><br><span class="line">127.0.0.1:6379&gt; sadd key1 a</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key1 b</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key1 c</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key2 c</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key2 d</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key2 e</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sdiff key1 key2 <span class="comment"># 差集，主要是求出key1 在key2中的差集</span></span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sdiff key2 key1 <span class="comment"># 差集，主要是求出key2 在key1中的差集</span></span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">2) <span class="string">&quot;e&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sinter key1 key2 <span class="comment"># 交集，共同好友可以这样实现</span></span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sunion key1 key2 <span class="comment"># 并集</span></span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">3) <span class="string">&quot;e&quot;</span></span><br><span class="line">4) <span class="string">&quot;a&quot;</span></span><br><span class="line">5) <span class="string">&quot;d&quot;</span></span><br></pre></td></tr></table></figure>
<p>微博，A用户将所有关注的人放在一个set集合中，将它的粉丝也放在一个集合中</p>
<p>应用：共同关注、共同爱好、二度好友、推荐好友</p>
<h2 id="5、Hash（哈希）"><a href="#5、Hash（哈希）" class="headerlink" title="5、Hash（哈希）"></a>5、Hash（哈希）</h2><blockquote>
<p>Map集合，key-map!这个时候，这个值是一个map集合。</p>
<p>本质和String类型没有太大区别，还是一个简单的key-value</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset myhash field1 ldg <span class="comment"># set一个具体的key-value</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget myhash field1 <span class="comment"># 获取一个字段值</span></span><br><span class="line"><span class="string">&quot;ldg&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hmset myhash field1 hello field2 world <span class="comment"># set多个key-value</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget myhash field1 field2 <span class="comment"># 获取多个字段值</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash <span class="comment"># 获取全部的数据</span></span><br><span class="line">1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line">3) <span class="string">&quot;field2&quot;</span></span><br><span class="line">4) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hdel myhash field1 <span class="comment"># 删除hash指定key字段！对应的value值也就消失了</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;field2&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">hlen</span><br><span class="line">127.0.0.1:6379&gt; hmset myhash field1 hello field2 world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line">3) <span class="string">&quot;field2&quot;</span></span><br><span class="line">4) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hlen myhash <span class="comment"># 获取hash表的字段数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; hexists myhash field1 <span class="comment"># 判断hash中指定字段是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hexists myhash field3</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line"><span class="comment"># 只获取所有的field</span></span><br><span class="line"><span class="comment"># 只获取所有的value</span></span><br><span class="line">127.0.0.1:6379&gt; hkeys myhash <span class="comment"># 只获取所有的field</span></span><br><span class="line">1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">2) <span class="string">&quot;field2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hvals myhash <span class="comment"># 只获取所有的value</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">incr decr</span><br><span class="line">127.0.0.1:6379&gt; hset myhash field3 5 </span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hincrby myhash field3 1 <span class="comment"># 指定增量</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; hincrby myhash field3 -1</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; hsetnx myhash field4 hello <span class="comment"># 如果不存在，则可以创建值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hsetnx myhash field4 world <span class="comment"># 如果存在，则不能创建</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="built_in">hash</span>变更的数据 user name age，尤其是用户信息之类的，经常变动的信息！<span class="built_in">hash</span>更适合于对象的存储，String更适合字符串存储！</span><br></pre></td></tr></table></figure>
<h2 id="6、ZSet（有序集合）"><a href="#6、ZSet（有序集合）" class="headerlink" title="6、ZSet（有序集合）"></a>6、ZSet（有序集合）</h2><blockquote>
<p>在set的基础上，增加了一个值！</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd myset 1 one </span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 2 two 3 three <span class="comment"># 添加多个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; zrange myset 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">排序如何实现</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 2500 xiaohong</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 5000 zhangsan</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 500 ldg</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf +inf <span class="comment"># 显示全部得到用户 从小到大</span></span><br><span class="line">1) <span class="string">&quot;ldg&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf +inf withscores <span class="comment"># 显示全部的用户并且附带成绩</span></span><br><span class="line">1) <span class="string">&quot;ldg&quot;</span></span><br><span class="line">2) <span class="string">&quot;500&quot;</span></span><br><span class="line">3) <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">4) <span class="string">&quot;2500&quot;</span></span><br><span class="line">5) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">6) <span class="string">&quot;5000&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf 2500 withscores <span class="comment"># 显示工资小于2500员工的升序排序</span></span><br><span class="line">1) <span class="string">&quot;ldg&quot;</span></span><br><span class="line">2) <span class="string">&quot;500&quot;</span></span><br><span class="line">3) <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">4) <span class="string">&quot;2500&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrevrange salary 0 -1 <span class="comment"># 移除了一个元素后，工资从大到小排序</span></span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;ldg&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">移除zset中的元素</span><br><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class="line">1) <span class="string">&quot;ldg&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrem salary xiaohong <span class="comment"># 移除有序集合中的指定元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class="line">1) <span class="string">&quot;ldg&quot;</span></span><br><span class="line">2) <span class="string">&quot;zhangsan&quot;</span> </span><br><span class="line">127.0.0.1:6379&gt; zcard salary <span class="comment"># 获取有序集合中的个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; zadd myset 1 hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 2 world 3 ldg</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; zcount myset 1 3 <span class="comment"># 获取指定区间的成员变量</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; zcount myset 1 2 </span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment">#################################################################################</span></span><br></pre></td></tr></table></figure>
<p>其余的一些API，通过查看<a href="http://www.redis.cn/commands.html">官方文档</a>进行了解</p>
<p>案例思路：set 排序，存储班级成绩表，工资表倒序！</p>
<p>普通消息：1，重要消息：2，带权重进行判断！</p>
<p>排行榜应用实现，取Top N测试！</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
</search>
